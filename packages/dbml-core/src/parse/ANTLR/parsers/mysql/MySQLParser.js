// Generated from MySQLParser.g4 by ANTLR 4.13.1
// jshint ignore: start
import antlr4 from 'antlr4';
import MySQLParserVisitor from './MySQLParserVisitor.js';

/*
 * Copyright (c) 2018, 2020, Oracle and/or its affiliates. All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License, version 2.0,
 * as published by the Free Software Foundation.
 *
 * This program is also distributed with certain software (including
 * but not limited to OpenSSL) that is licensed under separate terms, as
 * designated in a particular file or component or in included license
 * documentation. The authors of MySQL hereby grant you an additional
 * permission to link the program and your derivative works with the
 * separately licensed software that they have included with MySQL.
 * This program is distributed in the hope that it will be useful, but
 * WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See
 * the GNU General Public License, version 2.0, for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software Foundation, Inc.,
 * 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

import MySQLBaseRecognizer from '../../ASTGeneration/mysql/MySQLBaseRecognizer.js';

const serializedATN = [4,1,806,8417,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,
7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,
2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,
7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,
34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,
2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,
49,7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,
63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,7,70,
2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,7,77,2,
78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,7,84,2,85,
7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,7,91,2,92,7,
92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,2,98,7,98,2,99,7,99,
2,100,7,100,2,101,7,101,2,102,7,102,2,103,7,103,2,104,7,104,2,105,7,105,
2,106,7,106,2,107,7,107,2,108,7,108,2,109,7,109,2,110,7,110,2,111,7,111,
2,112,7,112,2,113,7,113,2,114,7,114,2,115,7,115,2,116,7,116,2,117,7,117,
2,118,7,118,2,119,7,119,2,120,7,120,2,121,7,121,2,122,7,122,2,123,7,123,
2,124,7,124,2,125,7,125,2,126,7,126,2,127,7,127,2,128,7,128,2,129,7,129,
2,130,7,130,2,131,7,131,2,132,7,132,2,133,7,133,2,134,7,134,2,135,7,135,
2,136,7,136,2,137,7,137,2,138,7,138,2,139,7,139,2,140,7,140,2,141,7,141,
2,142,7,142,2,143,7,143,2,144,7,144,2,145,7,145,2,146,7,146,2,147,7,147,
2,148,7,148,2,149,7,149,2,150,7,150,2,151,7,151,2,152,7,152,2,153,7,153,
2,154,7,154,2,155,7,155,2,156,7,156,2,157,7,157,2,158,7,158,2,159,7,159,
2,160,7,160,2,161,7,161,2,162,7,162,2,163,7,163,2,164,7,164,2,165,7,165,
2,166,7,166,2,167,7,167,2,168,7,168,2,169,7,169,2,170,7,170,2,171,7,171,
2,172,7,172,2,173,7,173,2,174,7,174,2,175,7,175,2,176,7,176,2,177,7,177,
2,178,7,178,2,179,7,179,2,180,7,180,2,181,7,181,2,182,7,182,2,183,7,183,
2,184,7,184,2,185,7,185,2,186,7,186,2,187,7,187,2,188,7,188,2,189,7,189,
2,190,7,190,2,191,7,191,2,192,7,192,2,193,7,193,2,194,7,194,2,195,7,195,
2,196,7,196,2,197,7,197,2,198,7,198,2,199,7,199,2,200,7,200,2,201,7,201,
2,202,7,202,2,203,7,203,2,204,7,204,2,205,7,205,2,206,7,206,2,207,7,207,
2,208,7,208,2,209,7,209,2,210,7,210,2,211,7,211,2,212,7,212,2,213,7,213,
2,214,7,214,2,215,7,215,2,216,7,216,2,217,7,217,2,218,7,218,2,219,7,219,
2,220,7,220,2,221,7,221,2,222,7,222,2,223,7,223,2,224,7,224,2,225,7,225,
2,226,7,226,2,227,7,227,2,228,7,228,2,229,7,229,2,230,7,230,2,231,7,231,
2,232,7,232,2,233,7,233,2,234,7,234,2,235,7,235,2,236,7,236,2,237,7,237,
2,238,7,238,2,239,7,239,2,240,7,240,2,241,7,241,2,242,7,242,2,243,7,243,
2,244,7,244,2,245,7,245,2,246,7,246,2,247,7,247,2,248,7,248,2,249,7,249,
2,250,7,250,2,251,7,251,2,252,7,252,2,253,7,253,2,254,7,254,2,255,7,255,
2,256,7,256,2,257,7,257,2,258,7,258,2,259,7,259,2,260,7,260,2,261,7,261,
2,262,7,262,2,263,7,263,2,264,7,264,2,265,7,265,2,266,7,266,2,267,7,267,
2,268,7,268,2,269,7,269,2,270,7,270,2,271,7,271,2,272,7,272,2,273,7,273,
2,274,7,274,2,275,7,275,2,276,7,276,2,277,7,277,2,278,7,278,2,279,7,279,
2,280,7,280,2,281,7,281,2,282,7,282,2,283,7,283,2,284,7,284,2,285,7,285,
2,286,7,286,2,287,7,287,2,288,7,288,2,289,7,289,2,290,7,290,2,291,7,291,
2,292,7,292,2,293,7,293,2,294,7,294,2,295,7,295,2,296,7,296,2,297,7,297,
2,298,7,298,2,299,7,299,2,300,7,300,2,301,7,301,2,302,7,302,2,303,7,303,
2,304,7,304,2,305,7,305,2,306,7,306,2,307,7,307,2,308,7,308,2,309,7,309,
2,310,7,310,2,311,7,311,2,312,7,312,2,313,7,313,2,314,7,314,2,315,7,315,
2,316,7,316,2,317,7,317,2,318,7,318,2,319,7,319,2,320,7,320,2,321,7,321,
2,322,7,322,2,323,7,323,2,324,7,324,2,325,7,325,2,326,7,326,2,327,7,327,
2,328,7,328,2,329,7,329,2,330,7,330,2,331,7,331,2,332,7,332,2,333,7,333,
2,334,7,334,2,335,7,335,2,336,7,336,2,337,7,337,2,338,7,338,2,339,7,339,
2,340,7,340,2,341,7,341,2,342,7,342,2,343,7,343,2,344,7,344,2,345,7,345,
2,346,7,346,2,347,7,347,2,348,7,348,2,349,7,349,2,350,7,350,2,351,7,351,
2,352,7,352,2,353,7,353,2,354,7,354,2,355,7,355,2,356,7,356,2,357,7,357,
2,358,7,358,2,359,7,359,2,360,7,360,2,361,7,361,2,362,7,362,2,363,7,363,
2,364,7,364,2,365,7,365,2,366,7,366,2,367,7,367,2,368,7,368,2,369,7,369,
2,370,7,370,2,371,7,371,2,372,7,372,2,373,7,373,2,374,7,374,2,375,7,375,
2,376,7,376,2,377,7,377,2,378,7,378,2,379,7,379,2,380,7,380,2,381,7,381,
2,382,7,382,2,383,7,383,2,384,7,384,2,385,7,385,2,386,7,386,2,387,7,387,
2,388,7,388,2,389,7,389,2,390,7,390,2,391,7,391,2,392,7,392,2,393,7,393,
2,394,7,394,2,395,7,395,2,396,7,396,2,397,7,397,2,398,7,398,2,399,7,399,
2,400,7,400,2,401,7,401,2,402,7,402,2,403,7,403,2,404,7,404,2,405,7,405,
2,406,7,406,2,407,7,407,2,408,7,408,2,409,7,409,2,410,7,410,2,411,7,411,
2,412,7,412,2,413,7,413,2,414,7,414,2,415,7,415,2,416,7,416,2,417,7,417,
2,418,7,418,2,419,7,419,2,420,7,420,2,421,7,421,2,422,7,422,2,423,7,423,
2,424,7,424,2,425,7,425,2,426,7,426,2,427,7,427,2,428,7,428,2,429,7,429,
2,430,7,430,2,431,7,431,2,432,7,432,2,433,7,433,2,434,7,434,2,435,7,435,
2,436,7,436,2,437,7,437,2,438,7,438,2,439,7,439,2,440,7,440,2,441,7,441,
2,442,7,442,2,443,7,443,2,444,7,444,2,445,7,445,2,446,7,446,2,447,7,447,
2,448,7,448,2,449,7,449,2,450,7,450,2,451,7,451,2,452,7,452,2,453,7,453,
2,454,7,454,2,455,7,455,2,456,7,456,2,457,7,457,2,458,7,458,2,459,7,459,
2,460,7,460,2,461,7,461,2,462,7,462,2,463,7,463,2,464,7,464,2,465,7,465,
2,466,7,466,2,467,7,467,2,468,7,468,2,469,7,469,2,470,7,470,2,471,7,471,
2,472,7,472,2,473,7,473,2,474,7,474,2,475,7,475,2,476,7,476,2,477,7,477,
2,478,7,478,2,479,7,479,2,480,7,480,2,481,7,481,2,482,7,482,2,483,7,483,
2,484,7,484,2,485,7,485,2,486,7,486,2,487,7,487,2,488,7,488,2,489,7,489,
2,490,7,490,2,491,7,491,2,492,7,492,2,493,7,493,2,494,7,494,2,495,7,495,
2,496,7,496,2,497,7,497,2,498,7,498,2,499,7,499,2,500,7,500,2,501,7,501,
2,502,7,502,2,503,7,503,2,504,7,504,2,505,7,505,2,506,7,506,2,507,7,507,
2,508,7,508,2,509,7,509,2,510,7,510,2,511,7,511,2,512,7,512,2,513,7,513,
2,514,7,514,2,515,7,515,2,516,7,516,2,517,7,517,2,518,7,518,2,519,7,519,
2,520,7,520,2,521,7,521,2,522,7,522,2,523,7,523,2,524,7,524,2,525,7,525,
2,526,7,526,2,527,7,527,2,528,7,528,2,529,7,529,2,530,7,530,2,531,7,531,
2,532,7,532,2,533,7,533,2,534,7,534,2,535,7,535,2,536,7,536,2,537,7,537,
2,538,7,538,2,539,7,539,2,540,7,540,2,541,7,541,2,542,7,542,2,543,7,543,
2,544,7,544,2,545,7,545,2,546,7,546,2,547,7,547,2,548,7,548,2,549,7,549,
2,550,7,550,2,551,7,551,2,552,7,552,2,553,7,553,2,554,7,554,2,555,7,555,
2,556,7,556,2,557,7,557,2,558,7,558,2,559,7,559,2,560,7,560,2,561,7,561,
2,562,7,562,2,563,7,563,2,564,7,564,2,565,7,565,2,566,7,566,2,567,7,567,
2,568,7,568,2,569,7,569,2,570,7,570,2,571,7,571,2,572,7,572,2,573,7,573,
2,574,7,574,2,575,7,575,2,576,7,576,2,577,7,577,2,578,7,578,2,579,7,579,
2,580,7,580,2,581,7,581,2,582,7,582,2,583,7,583,2,584,7,584,2,585,7,585,
2,586,7,586,2,587,7,587,2,588,7,588,2,589,7,589,2,590,7,590,2,591,7,591,
2,592,7,592,2,593,7,593,2,594,7,594,2,595,7,595,2,596,7,596,2,597,7,597,
2,598,7,598,2,599,7,599,2,600,7,600,2,601,7,601,2,602,7,602,2,603,7,603,
2,604,7,604,2,605,7,605,2,606,7,606,2,607,7,607,2,608,7,608,2,609,7,609,
1,0,1,0,1,0,3,0,1224,8,0,1,0,1,0,3,0,1228,8,0,1,0,3,0,1231,8,0,3,0,1233,
8,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,
1269,8,1,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1277,8,2,1,2,1,2,1,2,3,2,1282,8,2,1,
2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,2,3,2,1298,8,2,1,3,1,
3,1,3,4,3,1303,8,3,11,3,12,3,1304,1,3,1,3,1,3,1,3,1,3,3,3,1312,8,3,1,4,3,
4,1315,8,4,1,4,1,4,1,4,1,4,1,4,3,4,1322,8,4,1,4,1,4,1,4,3,4,1327,8,4,1,4,
3,4,1330,8,4,1,4,1,4,1,4,3,4,1335,8,4,1,4,1,4,1,4,1,4,3,4,1341,8,4,3,4,1343,
8,4,1,4,1,4,3,4,1347,8,4,1,4,1,4,3,4,1351,8,4,1,5,1,5,1,5,1,5,1,5,1,5,1,
5,3,5,1360,8,5,1,6,1,6,3,6,1364,8,6,1,6,5,6,1367,8,6,10,6,12,6,1370,9,6,
1,7,1,7,1,7,3,7,1375,8,7,1,8,1,8,1,8,1,8,1,9,3,9,1382,8,9,1,9,1,9,3,9,1386,
8,9,1,9,1,9,1,9,3,9,1391,8,9,1,10,1,10,1,10,3,10,1396,8,10,1,10,1,10,1,10,
1,10,1,10,3,10,1403,8,10,1,10,3,10,1406,8,10,1,11,1,11,1,11,1,11,3,11,1412,
8,11,1,11,3,11,1415,8,11,1,12,1,12,1,12,5,12,1420,8,12,10,12,12,12,1423,
9,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,3,13,1432,8,13,1,14,1,14,1,14,3,
14,1437,8,14,1,14,1,14,1,14,3,14,1442,8,14,1,14,1,14,1,14,1,14,1,14,1,14,
3,14,1450,8,14,1,14,1,14,1,14,1,14,3,14,1456,8,14,1,14,1,14,3,14,1460,8,
14,1,14,1,14,1,14,3,14,1465,8,14,1,14,1,14,1,14,1,14,1,14,5,14,1472,8,14,
10,14,12,14,1475,9,14,1,14,1,14,1,14,3,14,1480,8,14,1,14,1,14,5,14,1484,
8,14,10,14,12,14,1487,9,14,1,14,1,14,1,14,3,14,1492,8,14,1,14,1,14,1,14,
1,14,1,14,1,14,1,14,3,14,1501,8,14,1,14,1,14,1,14,1,14,3,14,1507,8,14,1,
14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1516,8,14,1,14,1,14,1,14,1,14,1,14,
1,14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,1530,8,14,1,15,1,15,3,15,1534,8,
15,1,15,1,15,1,15,1,15,3,15,1540,8,15,5,15,1542,8,15,10,15,12,15,1545,9,
15,1,16,1,16,1,16,3,16,1550,8,16,1,17,1,17,3,17,1554,8,17,1,17,1,17,1,17,
3,17,1559,8,17,1,17,3,17,1562,8,17,1,17,1,17,1,17,1,17,3,17,1568,8,17,1,
17,1,17,1,17,1,17,3,17,1574,8,17,1,17,1,17,1,17,1,17,3,17,1580,8,17,1,17,
1,17,3,17,1584,8,17,1,17,1,17,1,17,3,17,1589,8,17,1,17,1,17,3,17,1593,8,
17,1,17,1,17,3,17,1597,8,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1605,8,17,
3,17,1607,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,
17,1620,8,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1628,8,17,1,17,1,17,1,17,
1,17,1,17,1,17,3,17,1636,8,17,1,17,1,17,3,17,1640,8,17,1,17,1,17,1,17,1,
17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,
1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1669,8,17,1,17,1,17,1,
17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1685,8,17,
1,17,3,17,1688,8,17,1,17,1,17,1,17,1,17,1,17,1,17,1,17,3,17,1697,8,17,1,
18,1,18,1,18,3,18,1702,8,18,1,19,1,19,1,20,1,20,3,20,1708,8,20,1,20,1,20,
1,20,3,20,1713,8,20,5,20,1715,8,20,10,20,12,20,1718,9,20,1,21,1,21,3,21,
1722,8,21,1,21,1,21,3,21,1726,8,21,1,22,1,22,3,22,1730,8,22,1,22,1,22,3,
22,1734,8,22,1,23,1,23,3,23,1738,8,23,1,23,1,23,3,23,1742,8,23,3,23,1744,
8,23,1,24,1,24,1,24,1,24,1,25,1,25,1,25,1,26,1,26,3,26,1755,8,26,1,27,1,
27,1,27,1,27,1,27,1,27,3,27,1763,8,27,1,27,1,27,1,27,1,27,1,27,1,27,1,27,
3,27,1772,8,27,1,27,5,27,1775,8,27,10,27,12,27,1778,9,27,3,27,1780,8,27,
1,27,1,27,1,27,3,27,1785,8,27,1,27,1,27,1,27,1,27,1,27,3,27,1792,8,27,1,
28,1,28,1,28,1,28,1,28,1,28,3,28,1800,8,28,1,29,1,29,3,29,1804,8,29,1,29,
5,29,1807,8,29,10,29,12,29,1810,9,29,1,30,1,30,1,31,1,31,3,31,1816,8,31,
1,31,5,31,1819,8,31,10,31,12,31,1822,9,31,1,32,1,32,3,32,1826,8,32,1,32,
1,32,1,32,1,32,1,32,1,32,3,32,1834,8,32,1,33,1,33,3,33,1838,8,33,1,33,1,
33,1,33,3,33,1843,8,33,1,34,3,34,1846,8,34,1,34,3,34,1849,8,34,1,34,3,34,
1852,8,34,1,34,1,34,1,34,1,34,1,35,3,35,1859,8,35,1,35,1,35,1,35,1,36,1,
36,3,36,1866,8,36,1,37,1,37,3,37,1870,8,37,1,37,1,37,1,37,1,38,1,38,1,38,
1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
38,1,38,3,38,1894,8,38,1,39,1,39,3,39,1898,8,39,1,39,1,39,5,39,1902,8,39,
10,39,12,39,1905,9,39,1,40,1,40,1,40,1,40,3,40,1911,8,40,1,41,3,41,1914,
8,41,1,41,1,41,3,41,1918,8,41,1,41,1,41,1,41,1,41,1,41,3,41,1925,8,41,1,
41,3,41,1928,8,41,1,41,3,41,1931,8,41,1,41,3,41,1934,8,41,1,41,1,41,1,41,
1,41,1,41,1,41,1,41,3,41,1943,8,41,1,42,1,42,1,42,5,42,1948,8,42,10,42,12,
42,1951,9,42,1,43,1,43,3,43,1955,8,43,1,44,3,44,1958,8,44,1,44,3,44,1961,
8,44,1,44,1,44,1,45,1,45,3,45,1967,8,45,1,46,1,46,1,46,1,46,3,46,1973,8,
46,1,46,3,46,1976,8,46,1,46,1,46,1,47,3,47,1981,8,47,1,47,1,47,1,47,1,47,
1,47,1,47,5,47,1989,8,47,10,47,12,47,1992,9,47,3,47,1994,8,47,1,47,1,47,
5,47,1998,8,47,10,47,12,47,2001,9,47,1,47,1,47,1,48,3,48,2006,8,48,1,48,
1,48,1,48,1,48,1,48,1,48,5,48,2014,8,48,10,48,12,48,2017,9,48,3,48,2019,
8,48,1,48,1,48,1,48,1,48,5,48,2025,8,48,10,48,12,48,2028,9,48,1,48,1,48,
1,49,3,49,2033,8,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,3,50,2044,
8,50,1,50,3,50,2047,8,50,1,51,4,51,2050,8,51,11,51,12,51,2051,1,52,1,52,
1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,52,1,
52,3,52,2071,8,52,1,53,3,53,2074,8,53,1,53,3,53,2077,8,53,1,53,1,53,1,53,
1,53,3,53,2083,8,53,1,53,3,53,2086,8,53,3,53,2088,8,53,1,53,1,53,5,53,2092,
8,53,10,53,12,53,2095,9,53,1,53,1,53,1,53,1,53,1,53,5,53,2102,8,53,10,53,
12,53,2105,9,53,1,53,1,53,1,53,1,53,1,53,5,53,2112,8,53,10,53,12,53,2115,
9,53,3,53,2117,8,53,1,53,3,53,2120,8,53,1,54,1,54,1,54,3,54,2125,8,54,1,
54,1,54,1,54,1,54,3,54,2131,8,54,1,55,1,55,1,55,1,55,1,56,1,56,1,56,1,56,
1,56,1,56,1,56,3,56,2144,8,56,1,57,1,57,3,57,2148,8,57,1,57,5,57,2151,8,
57,10,57,12,57,2154,9,57,1,58,1,58,1,58,1,58,1,58,1,58,3,58,2162,8,58,1,
59,1,59,1,59,1,59,1,59,1,59,1,59,1,59,1,60,1,60,1,60,1,60,1,60,5,60,2177,
8,60,10,60,12,60,2180,9,60,1,60,1,60,1,61,1,61,1,61,1,61,1,61,1,61,1,61,
1,61,1,61,1,61,1,61,1,61,1,61,1,61,3,61,2198,8,61,1,62,1,62,1,62,1,62,1,
62,1,62,1,62,3,62,2207,8,62,1,62,3,62,2210,8,62,1,63,1,63,1,63,1,63,1,63,
1,63,3,63,2218,8,63,1,64,1,64,1,64,3,64,2223,8,64,1,64,1,64,3,64,2227,8,
64,1,65,1,65,1,65,1,66,1,66,3,66,2234,8,66,1,66,5,66,2237,8,66,10,66,12,
66,2240,9,66,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,1,67,
3,67,2254,8,67,1,68,1,68,3,68,2258,8,68,1,68,1,68,1,69,1,69,3,69,2264,8,
69,1,69,1,69,1,70,1,70,3,70,2270,8,70,1,70,1,70,1,71,1,71,3,71,2276,8,71,
1,71,1,71,1,72,1,72,3,72,2282,8,72,1,72,1,72,1,73,1,73,3,73,2288,8,73,1,
73,1,73,1,74,3,74,2293,8,74,1,74,1,74,3,74,2297,8,74,1,74,1,74,1,75,1,75,
1,76,1,76,3,76,2305,8,76,1,76,1,76,1,77,1,77,3,77,2311,8,77,1,77,1,77,1,
78,1,78,3,78,2317,8,78,1,78,1,78,1,79,3,79,2322,8,79,1,79,3,79,2325,8,79,
1,79,3,79,2328,8,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,3,80,2337,8,80,1,
80,3,80,2340,8,80,1,81,1,81,1,81,1,81,1,82,1,82,1,82,1,82,1,83,3,83,2351,
8,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,1,83,3,83,2363,8,83,1,
83,1,83,1,84,1,84,1,84,1,84,1,85,3,85,2372,8,85,1,85,1,85,3,85,2376,8,85,
1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,2385,8,85,1,85,3,85,2388,8,85,1,
85,1,85,1,85,1,85,3,85,2394,8,85,3,85,2396,8,85,1,85,1,85,3,85,2400,8,85,
1,85,1,85,1,85,1,86,1,86,3,86,2407,8,86,1,86,1,86,1,87,1,87,1,87,1,87,1,
87,1,87,1,87,5,87,2418,8,87,10,87,12,87,2421,9,87,1,87,1,87,1,87,1,87,3,
87,2427,8,87,1,87,1,87,5,87,2431,8,87,10,87,12,87,2434,9,87,3,87,2436,8,
87,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,1,88,
1,88,3,88,2453,8,88,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,1,
89,1,89,1,89,1,89,1,89,1,89,1,89,1,89,3,89,2473,8,89,1,90,1,90,3,90,2477,
8,90,1,90,1,90,1,91,1,91,3,91,2483,8,91,1,91,1,91,1,92,1,92,3,92,2489,8,
92,1,92,1,92,1,93,1,93,3,93,2495,8,93,1,93,1,93,1,94,3,94,2500,8,94,1,94,
1,94,1,94,1,94,1,94,3,94,2507,8,94,1,95,1,95,1,95,1,95,1,95,3,95,2514,8,
95,1,95,5,95,2517,8,95,10,95,12,95,2520,9,95,3,95,2522,8,95,1,96,1,96,3,
96,2526,8,96,1,97,1,97,3,97,2530,8,97,1,97,1,97,1,98,3,98,2535,8,98,1,98,
1,98,3,98,2539,8,98,1,98,1,98,3,98,2543,8,98,1,99,1,99,1,99,1,99,3,99,2549,
8,99,1,99,5,99,2552,8,99,10,99,12,99,2555,9,99,3,99,2557,8,99,1,100,1,100,
3,100,2561,8,100,1,100,1,100,1,101,1,101,3,101,2567,8,101,1,101,1,101,3,
101,2571,8,101,1,102,1,102,3,102,2575,8,102,1,102,1,102,1,103,1,103,1,103,
1,103,3,103,2583,8,103,1,103,1,103,1,104,1,104,1,104,1,104,3,104,2591,8,
104,1,105,1,105,1,105,1,105,1,105,5,105,2598,8,105,10,105,12,105,2601,9,
105,1,106,1,106,1,106,1,106,1,107,1,107,3,107,2609,8,107,1,107,1,107,1,108,
1,108,1,108,1,108,1,108,1,109,1,109,1,109,1,109,3,109,2622,8,109,1,109,3,
109,2625,8,109,1,110,1,110,3,110,2629,8,110,1,110,1,110,5,110,2633,8,110,
10,110,12,110,2636,9,110,1,110,1,110,1,110,1,110,1,110,3,110,2643,8,110,
1,110,1,110,1,110,3,110,2648,8,110,1,110,3,110,2651,8,110,1,110,3,110,2654,
8,110,1,110,3,110,2657,8,110,1,110,3,110,2660,8,110,3,110,2662,8,110,1,110,
1,110,1,110,1,110,3,110,2668,8,110,3,110,2670,8,110,1,111,1,111,1,111,1,
111,1,111,1,111,1,112,1,112,1,113,1,113,1,113,1,113,1,113,3,113,2685,8,113,
1,114,1,114,1,114,1,114,3,114,2691,8,114,1,114,1,114,1,114,1,114,1,114,3,
114,2698,8,114,1,114,3,114,2701,8,114,3,114,2703,8,114,3,114,2705,8,114,
1,115,1,115,1,115,1,115,1,115,1,115,1,115,1,115,3,115,2715,8,115,3,115,2717,
8,115,1,116,1,116,3,116,2721,8,116,1,116,3,116,2724,8,116,1,116,3,116,2727,
8,116,1,116,1,116,3,116,2731,8,116,1,116,1,116,1,116,3,116,2736,8,116,1,
116,1,116,1,116,1,116,3,116,2742,8,116,1,116,3,116,2745,8,116,1,116,3,116,
2748,8,116,1,117,1,117,1,118,1,118,3,118,2754,8,118,1,118,3,118,2757,8,118,
1,118,1,118,1,119,1,119,1,119,5,119,2764,8,119,10,119,12,119,2767,9,119,
1,120,1,120,1,120,1,121,1,121,1,121,3,121,2775,8,121,1,121,1,121,3,121,2779,
8,121,1,122,1,122,3,122,2783,8,122,1,122,1,122,1,122,1,122,3,122,2789,8,
122,1,122,5,122,2792,8,122,10,122,12,122,2795,9,122,1,123,1,123,3,123,2799,
8,123,1,123,1,123,1,123,3,123,2804,8,123,5,123,2806,8,123,10,123,12,123,
2809,9,123,1,124,1,124,1,124,3,124,2814,8,124,1,125,1,125,1,125,1,125,1,
125,1,125,1,126,1,126,1,126,3,126,2825,8,126,1,126,3,126,2828,8,126,1,126,
1,126,1,126,3,126,2833,8,126,1,126,1,126,1,126,1,126,3,126,2839,8,126,1,
126,3,126,2842,8,126,1,126,3,126,2845,8,126,1,126,3,126,2848,8,126,1,126,
3,126,2851,8,126,1,126,1,126,1,127,1,127,1,128,1,128,1,128,1,128,1,128,1,
129,1,129,1,129,3,129,2865,8,129,1,129,3,129,2868,8,129,1,129,1,129,3,129,
2872,8,129,1,130,1,130,3,130,2876,8,130,1,130,1,130,1,131,1,131,3,131,2882,
8,131,1,131,1,131,1,131,3,131,2887,8,131,5,131,2889,8,131,10,131,12,131,
2892,9,131,1,132,1,132,3,132,2896,8,132,1,132,3,132,2899,8,132,1,132,1,132,
3,132,2903,8,132,1,132,1,132,1,132,1,132,3,132,2909,8,132,1,133,1,133,3,
133,2913,8,133,1,133,1,133,3,133,2917,8,133,1,134,1,134,1,134,1,134,1,134,
1,134,1,134,3,134,2926,8,134,1,134,1,134,1,134,3,134,2931,8,134,1,135,1,
135,3,135,2935,8,135,1,135,1,135,3,135,2939,8,135,1,135,3,135,2942,8,135,
1,135,1,135,3,135,2946,8,135,1,135,3,135,2949,8,135,3,135,2951,8,135,1,135,
1,135,3,135,2955,8,135,1,136,1,136,1,136,1,136,3,136,2961,8,136,1,136,1,
136,3,136,2965,8,136,3,136,2967,8,136,1,136,1,136,3,136,2971,8,136,1,136,
1,136,3,136,2975,8,136,5,136,2977,8,136,10,136,12,136,2980,9,136,1,137,1,
137,1,137,1,137,3,137,2986,8,137,3,137,2988,8,137,1,137,1,137,1,138,1,138,
1,138,1,138,1,138,3,138,2997,8,138,1,139,1,139,5,139,3001,8,139,10,139,12,
139,3004,9,139,1,139,1,139,3,139,3008,8,139,1,139,3,139,3011,8,139,1,139,
3,139,3014,8,139,1,139,3,139,3017,8,139,1,139,3,139,3020,8,139,1,139,1,139,
3,139,3024,8,139,1,140,1,140,1,141,1,141,1,142,1,142,1,142,1,143,1,143,1,
143,1,144,1,144,1,144,3,144,3039,8,144,1,145,1,145,3,145,3043,8,145,1,146,
1,146,1,146,1,146,3,146,3049,8,146,1,146,3,146,3052,8,146,1,146,3,146,3055,
8,146,1,146,1,146,1,146,1,146,3,146,3061,8,146,1,146,1,146,1,146,3,146,3066,
8,146,5,146,3068,8,146,10,146,12,146,3071,9,146,3,146,3073,8,146,1,147,1,
147,1,147,1,147,1,147,1,147,3,147,3081,8,147,3,147,3083,8,147,1,147,1,147,
1,148,1,148,1,148,1,149,1,149,1,149,1,149,5,149,3094,8,149,10,149,12,149,
3097,9,149,1,150,1,150,1,150,1,150,1,151,1,151,1,151,1,151,1,152,3,152,3108,
8,152,1,152,1,152,1,152,3,152,3113,8,152,1,152,3,152,3116,8,152,1,152,3,
152,3119,8,152,1,153,1,153,1,153,3,153,3124,8,153,1,154,1,154,1,155,1,155,
3,155,3130,8,155,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,156,1,
156,1,156,1,156,1,156,1,156,3,156,3146,8,156,1,157,1,157,1,157,1,157,1,157,
1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,1,158,
1,158,3,158,3166,8,158,1,159,1,159,1,159,1,159,1,159,1,159,1,159,3,159,3175,
8,159,1,160,1,160,3,160,3179,8,160,1,160,1,160,1,160,5,160,3184,8,160,10,
160,12,160,3187,9,160,1,161,1,161,3,161,3191,8,161,1,161,1,161,1,161,1,162,
1,162,1,162,1,162,3,162,3200,8,162,1,163,1,163,1,163,1,163,1,163,3,163,3207,
8,163,1,164,1,164,1,164,1,164,1,165,1,165,1,166,1,166,1,166,3,166,3218,8,
166,1,167,1,167,1,167,5,167,3223,8,167,10,167,12,167,3226,9,167,1,168,1,
168,1,168,1,168,5,168,3232,8,168,10,168,12,168,3235,9,168,1,169,1,169,1,
169,1,170,1,170,1,170,3,170,3243,8,170,1,170,1,170,1,171,1,171,1,171,1,171,
1,171,1,171,1,171,1,171,3,171,3255,8,171,1,172,4,172,3258,8,172,11,172,12,
172,3259,1,173,1,173,1,173,1,173,1,173,3,173,3267,8,173,1,173,1,173,3,173,
3271,8,173,1,173,1,173,1,173,1,173,3,173,3277,8,173,1,174,1,174,1,174,3,
174,3282,8,174,1,175,1,175,1,175,3,175,3287,8,175,1,176,1,176,3,176,3291,
8,176,1,176,1,176,5,176,3295,8,176,10,176,12,176,3298,9,176,1,177,1,177,
1,177,3,177,3303,8,177,3,177,3305,8,177,1,178,3,178,3308,8,178,1,178,1,178,
3,178,3312,8,178,1,179,1,179,1,179,1,180,1,180,1,180,1,180,1,180,3,180,3322,
8,180,1,180,1,180,1,180,3,180,3327,8,180,1,180,5,180,3330,8,180,10,180,12,
180,3333,9,180,1,181,1,181,5,181,3337,8,181,10,181,12,181,3340,9,181,1,182,
1,182,1,182,1,182,1,182,1,182,3,182,3348,8,182,1,182,1,182,1,182,1,182,1,
182,1,182,3,182,3356,8,182,1,182,1,182,1,182,3,182,3361,8,182,1,183,1,183,
3,183,3365,8,183,1,183,1,183,1,183,1,183,3,183,3371,8,183,1,183,3,183,3374,
8,183,1,184,3,184,3377,8,184,1,184,1,184,3,184,3381,8,184,1,185,1,185,3,
185,3385,8,185,1,185,1,185,1,186,1,186,1,186,1,186,1,186,1,186,3,186,3395,
8,186,1,187,1,187,3,187,3399,8,187,1,187,3,187,3402,8,187,1,187,3,187,3405,
8,187,1,188,1,188,1,188,3,188,3410,8,188,1,188,1,188,1,189,1,189,3,189,3416,
8,189,1,189,1,189,3,189,3420,8,189,1,189,1,189,1,189,1,189,3,189,3426,8,
189,1,189,3,189,3429,8,189,3,189,3431,8,189,1,190,1,190,1,190,3,190,3436,
8,190,1,190,1,190,1,191,1,191,1,191,1,191,1,191,1,191,1,191,1,191,3,191,
3448,8,191,1,192,1,192,1,192,1,192,1,192,5,192,3455,8,192,10,192,12,192,
3458,9,192,1,192,1,192,1,193,1,193,1,193,1,193,1,193,1,193,1,193,1,193,3,
193,3470,8,193,1,193,3,193,3473,8,193,1,193,1,193,1,193,3,193,3478,8,193,
1,193,1,193,1,193,1,193,1,193,3,193,3485,8,193,1,194,1,194,3,194,3489,8,
194,1,194,1,194,3,194,3493,8,194,3,194,3495,8,194,1,195,1,195,1,195,1,195,
1,196,1,196,1,196,1,196,1,197,1,197,1,197,1,197,3,197,3509,8,197,1,198,1,
198,1,199,1,199,1,199,3,199,3516,8,199,1,199,1,199,1,200,1,200,1,200,5,200,
3523,8,200,10,200,12,200,3526,9,200,1,201,1,201,1,201,3,201,3531,8,201,1,
201,1,201,1,201,1,201,1,201,1,201,1,201,3,201,3540,8,201,1,201,1,201,3,201,
3544,8,201,1,201,1,201,3,201,3548,8,201,1,202,1,202,1,203,1,203,1,204,1,
204,1,204,1,204,3,204,3558,8,204,3,204,3560,8,204,1,205,1,205,1,205,1,205,
1,205,1,205,3,205,3568,8,205,1,206,1,206,1,206,5,206,3573,8,206,10,206,12,
206,3576,9,206,1,207,1,207,3,207,3580,8,207,1,208,1,208,3,208,3584,8,208,
1,208,1,208,3,208,3588,8,208,1,208,3,208,3591,8,208,1,208,1,208,1,208,1,
208,3,208,3597,8,208,1,208,3,208,3600,8,208,1,208,3,208,3603,8,208,1,209,
1,209,1,209,1,209,3,209,3609,8,209,1,210,1,210,1,210,5,210,3614,8,210,10,
210,12,210,3617,9,210,1,210,1,210,3,210,3621,8,210,1,210,1,210,3,210,3625,
8,210,1,210,3,210,3628,8,210,1,210,3,210,3631,8,210,1,210,3,210,3634,8,210,
3,210,3636,8,210,1,211,1,211,3,211,3640,8,211,1,212,1,212,1,212,1,212,1,
212,1,212,3,212,3648,8,212,1,213,1,213,1,213,1,213,3,213,3654,8,213,1,213,
1,213,3,213,3658,8,213,1,213,1,213,1,213,3,213,3663,8,213,1,213,3,213,3666,
8,213,1,213,3,213,3669,8,213,1,213,3,213,3672,8,213,3,213,3674,8,213,1,213,
1,213,1,213,3,213,3679,8,213,1,214,1,214,1,214,1,214,1,214,5,214,3686,8,
214,10,214,12,214,3689,9,214,1,214,1,214,1,214,1,214,1,214,1,214,1,214,1,
214,1,214,1,214,3,214,3701,8,214,3,214,3703,8,214,1,215,1,215,3,215,3707,
8,215,1,215,1,215,1,216,1,216,3,216,3713,8,216,1,216,3,216,3716,8,216,1,
216,3,216,3719,8,216,1,217,1,217,1,217,1,217,3,217,3725,8,217,1,217,1,217,
1,217,1,217,1,217,3,217,3732,8,217,3,217,3734,8,217,1,217,1,217,1,217,1,
217,1,217,1,217,3,217,3742,8,217,1,217,1,217,1,217,1,217,3,217,3748,8,217,
1,218,1,218,1,218,3,218,3753,8,218,1,218,3,218,3756,8,218,1,219,1,219,1,
219,1,219,1,219,3,219,3763,8,219,3,219,3765,8,219,1,220,1,220,1,220,1,220,
1,220,1,220,1,220,3,220,3774,8,220,1,220,1,220,1,220,1,220,1,220,5,220,3781,
8,220,10,220,12,220,3784,9,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,
3792,8,220,1,220,1,220,1,220,1,220,1,220,1,220,3,220,3800,8,220,1,221,1,
221,3,221,3804,8,221,1,221,1,221,1,221,1,221,1,221,3,221,3811,8,221,1,221,
3,221,3814,8,221,3,221,3816,8,221,1,222,1,222,1,222,1,222,1,222,1,222,3,
222,3824,8,222,1,223,1,223,1,223,1,223,3,223,3830,8,223,1,223,1,223,1,223,
1,224,1,224,1,224,1,224,1,224,3,224,3840,8,224,1,225,1,225,1,225,5,225,3845,
8,225,10,225,12,225,3848,9,225,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,1,226,
3,226,3941,8,226,1,227,1,227,3,227,3945,8,227,1,228,1,228,1,229,1,229,3,
229,3951,8,229,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,1,230,
1,230,1,230,3,230,3965,8,230,1,231,1,231,1,231,1,231,5,231,3971,8,231,10,
231,12,231,3974,9,231,3,231,3976,8,231,1,231,1,231,1,232,1,232,1,232,1,232,
1,232,1,232,5,232,3986,8,232,10,232,12,232,3989,9,232,1,232,1,232,3,232,
3993,8,232,1,233,1,233,1,233,1,233,3,233,3999,8,233,1,233,1,233,1,233,1,
233,1,233,3,233,4006,8,233,1,233,1,233,1,233,1,233,1,233,3,233,4013,8,233,
1,233,1,233,1,233,1,233,1,233,3,233,4020,8,233,1,233,1,233,1,233,1,233,1,
233,3,233,4027,8,233,1,233,1,233,1,233,1,233,1,233,3,233,4034,8,233,1,233,
1,233,1,233,1,233,1,233,3,233,4041,8,233,1,233,3,233,4044,8,233,1,234,1,
234,1,234,5,234,4049,8,234,10,234,12,234,4052,9,234,1,235,1,235,1,235,5,
235,4057,8,235,10,235,12,235,4060,9,235,1,236,1,236,1,236,5,236,4065,8,236,
10,236,12,236,4068,9,236,1,237,1,237,1,238,1,238,1,238,5,238,4075,8,238,
10,238,12,238,4078,9,238,1,239,1,239,1,239,3,239,4083,8,239,1,239,1,239,
3,239,4087,8,239,1,239,1,239,3,239,4091,8,239,1,239,1,239,1,239,3,239,4096,
8,239,1,239,3,239,4099,8,239,3,239,4101,8,239,1,240,1,240,1,240,1,240,1,
240,1,240,1,240,3,240,4110,8,240,1,240,1,240,5,240,4114,8,240,10,240,12,
240,4117,9,240,1,241,1,241,1,241,1,241,3,241,4123,8,241,1,241,1,241,1,241,
3,241,4128,8,241,1,241,1,241,1,241,3,241,4133,8,241,1,241,1,241,1,241,3,
241,4138,8,241,1,241,3,241,4141,8,241,1,242,1,242,1,242,5,242,4146,8,242,
10,242,12,242,4149,9,242,1,243,1,243,1,244,1,244,1,244,1,245,1,245,1,245,
1,245,1,245,3,245,4161,8,245,1,245,1,245,1,245,1,245,3,245,4167,8,245,1,
246,1,246,1,246,1,246,3,246,4173,8,246,1,247,1,247,1,247,5,247,4178,8,247,
10,247,12,247,4181,9,247,1,248,1,248,1,248,1,248,1,248,3,248,4188,8,248,
1,248,1,248,1,248,1,248,3,248,4194,8,248,1,248,1,248,1,248,1,248,1,248,1,
248,1,248,1,248,1,248,1,248,3,248,4206,8,248,3,248,4208,8,248,1,249,1,249,
1,249,1,249,3,249,4214,8,249,1,249,1,249,3,249,4218,8,249,3,249,4220,8,249,
1,250,1,250,3,250,4224,8,250,1,250,1,250,1,251,1,251,1,251,1,251,1,251,1,
251,1,251,1,251,1,251,3,251,4237,8,251,1,252,1,252,1,252,1,252,3,252,4243,
8,252,1,252,1,252,1,253,1,253,1,253,1,253,3,253,4251,8,253,1,253,1,253,1,
253,1,253,1,253,1,253,1,253,1,253,1,253,3,253,4262,8,253,1,253,1,253,3,253,
4266,8,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,253,1,
253,3,253,4279,8,253,1,253,1,253,1,253,1,253,1,253,3,253,4286,8,253,1,253,
1,253,1,253,1,253,3,253,4292,8,253,1,253,1,253,1,253,1,253,1,253,3,253,4299,
8,253,3,253,4301,8,253,1,254,1,254,1,254,1,255,1,255,1,255,1,255,1,255,3,
255,4311,8,255,1,255,1,255,1,255,1,255,1,256,1,256,3,256,4319,8,256,1,256,
3,256,4322,8,256,1,256,5,256,4325,8,256,10,256,12,256,4328,9,256,1,256,3,
256,4331,8,256,1,257,1,257,1,257,1,257,3,257,4337,8,257,1,257,3,257,4340,
8,257,1,258,1,258,1,258,3,258,4345,8,258,1,259,1,259,1,259,1,259,1,259,1,
259,1,259,1,259,1,259,4,259,4356,8,259,11,259,12,259,4357,1,260,1,260,1,
260,1,260,1,260,1,260,1,260,1,260,1,260,1,260,3,260,4370,8,260,1,260,1,260,
1,260,3,260,4375,8,260,1,260,1,260,1,260,1,260,1,260,1,260,3,260,4383,8,
260,1,260,1,260,1,260,1,260,3,260,4389,8,260,3,260,4391,8,260,3,260,4393,
8,260,1,261,1,261,1,261,1,261,3,261,4399,8,261,1,261,1,261,1,262,1,262,1,
262,1,262,1,262,1,262,1,262,1,262,3,262,4411,8,262,1,262,1,262,1,262,3,262,
4416,8,262,3,262,4418,8,262,1,262,1,262,3,262,4422,8,262,1,262,1,262,1,262,
1,262,3,262,4428,8,262,1,262,3,262,4431,8,262,1,262,3,262,4434,8,262,1,262,
1,262,1,262,1,262,1,262,1,262,1,262,1,262,3,262,4444,8,262,3,262,4446,8,
262,1,263,1,263,1,263,1,263,3,263,4452,8,263,1,264,1,264,1,264,4,264,4457,
8,264,11,264,12,264,4458,1,264,1,264,1,264,1,264,3,264,4465,8,264,1,265,
1,265,1,265,1,266,1,266,1,266,1,266,1,266,3,266,4475,8,266,1,266,1,266,3,
266,4479,8,266,1,267,1,267,1,267,3,267,4484,8,267,1,268,1,268,1,268,1,269,
1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,1,269,5,269,4499,8,269,10,
269,12,269,4502,9,269,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,270,1,
270,1,270,1,270,1,270,1,270,3,270,4517,8,270,1,270,1,270,1,270,3,270,4522,
8,270,1,270,1,270,1,270,1,270,1,270,1,270,3,270,4530,8,270,1,270,1,270,1,
270,1,270,1,270,1,270,3,270,4538,8,270,1,271,1,271,1,271,3,271,4543,8,271,
1,271,1,271,1,271,1,271,3,271,4549,8,271,1,271,3,271,4552,8,271,3,271,4554,
8,271,1,272,1,272,1,273,1,273,1,273,5,273,4561,8,273,10,273,12,273,4564,
9,273,1,274,1,274,1,274,3,274,4569,8,274,1,274,1,274,1,274,1,274,3,274,4575,
8,274,3,274,4577,8,274,1,274,1,274,3,274,4581,8,274,1,274,1,274,1,274,1,
274,1,274,1,274,1,274,1,274,1,274,3,274,4592,8,274,1,274,1,274,1,274,1,274,
1,274,1,274,1,274,1,274,3,274,4602,8,274,1,274,1,274,1,274,3,274,4607,8,
274,1,275,1,275,1,275,3,275,4612,8,275,1,275,1,275,1,275,3,275,4617,8,275,
1,275,1,275,1,275,1,275,1,275,1,275,3,275,4625,8,275,1,276,1,276,3,276,4629,
8,276,1,276,5,276,4632,8,276,10,276,12,276,4635,9,276,1,277,1,277,1,277,
1,277,1,277,1,277,3,277,4643,8,277,1,278,1,278,1,278,1,278,1,278,1,278,1,
278,1,278,1,278,1,278,3,278,4655,8,278,1,279,1,279,1,279,1,279,1,279,1,279,
1,279,1,279,1,279,1,279,1,279,1,279,3,279,4669,8,279,1,279,1,279,1,279,1,
279,1,279,1,279,1,279,3,279,4678,8,279,3,279,4680,8,279,1,280,1,280,1,280,
5,280,4685,8,280,10,280,12,280,4688,9,280,1,281,1,281,1,281,1,281,3,281,
4694,8,281,1,282,1,282,3,282,4698,8,282,1,282,1,282,1,282,1,282,3,282,4704,
8,282,1,282,1,282,1,282,1,282,5,282,4710,8,282,10,282,12,282,4713,9,282,
1,282,1,282,1,282,1,282,3,282,4719,8,282,1,282,1,282,3,282,4723,8,282,1,
282,1,282,1,282,1,282,3,282,4729,8,282,1,282,1,282,1,282,5,282,4734,8,282,
10,282,12,282,4737,9,282,3,282,4739,8,282,1,283,1,283,1,283,1,283,1,283,
1,283,1,283,3,283,4748,8,283,1,283,1,283,1,283,1,283,3,283,4754,8,283,1,
284,1,284,1,284,3,284,4759,8,284,1,285,1,285,1,286,1,286,1,286,1,286,1,286,
1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,1,286,
5,286,4780,8,286,10,286,12,286,4783,9,286,3,286,4785,8,286,1,287,1,287,1,
287,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,3,
288,4801,8,288,1,288,1,288,1,288,3,288,4806,8,288,1,288,3,288,4809,8,288,
1,288,1,288,3,288,4813,8,288,1,288,3,288,4816,8,288,1,288,1,288,1,288,1,
288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,1,288,3,288,4830,8,288,1,288,
1,288,1,288,1,288,3,288,4836,8,288,1,288,1,288,1,288,3,288,4841,8,288,1,
288,3,288,4844,8,288,3,288,4846,8,288,1,289,1,289,3,289,4850,8,289,1,289,
1,289,1,289,3,289,4855,8,289,3,289,4857,8,289,1,290,1,290,1,290,1,291,1,
291,1,291,1,291,1,291,1,291,1,291,3,291,4869,8,291,1,292,1,292,5,292,4873,
8,292,10,292,12,292,4876,9,292,1,293,1,293,1,293,1,293,1,293,1,293,1,293,
1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,1,293,
3,293,4897,8,293,1,293,1,293,3,293,4901,8,293,3,293,4903,8,293,1,294,1,294,
1,294,1,294,1,294,1,294,3,294,4911,8,294,1,295,1,295,3,295,4915,8,295,1,
295,1,295,1,296,1,296,1,296,1,296,1,296,3,296,4924,8,296,1,297,1,297,1,297,
1,297,1,298,1,298,1,298,1,298,3,298,4934,8,298,1,299,1,299,1,299,1,299,1,
299,3,299,4941,8,299,1,299,3,299,4944,8,299,1,299,1,299,3,299,4948,8,299,
1,299,3,299,4951,8,299,1,299,3,299,4954,8,299,1,299,1,299,3,299,4958,8,299,
1,299,3,299,4961,8,299,1,299,1,299,3,299,4965,8,299,1,299,3,299,4968,8,299,
1,299,1,299,1,299,3,299,4973,8,299,1,299,3,299,4976,8,299,1,299,1,299,1,
299,3,299,4981,8,299,1,299,3,299,4984,8,299,1,299,1,299,1,299,1,299,3,299,
4990,8,299,1,299,1,299,3,299,4994,8,299,1,299,1,299,1,299,1,299,3,299,5000,
8,299,1,299,3,299,5003,8,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,
299,5012,8,299,3,299,5014,8,299,1,299,1,299,1,299,1,299,3,299,5020,8,299,
1,299,1,299,3,299,5024,8,299,1,299,3,299,5027,8,299,1,299,3,299,5030,8,299,
1,299,1,299,3,299,5034,8,299,1,299,1,299,1,299,1,299,3,299,5040,8,299,1,
299,3,299,5043,8,299,1,299,3,299,5046,8,299,1,299,1,299,1,299,1,299,1,299,
1,299,1,299,1,299,3,299,5056,8,299,1,299,1,299,3,299,5060,8,299,1,299,1,
299,1,299,1,299,1,299,5,299,5067,8,299,10,299,12,299,5070,9,299,3,299,5072,
8,299,1,299,1,299,1,299,3,299,5077,8,299,1,299,3,299,5080,8,299,1,299,3,
299,5083,8,299,1,299,1,299,3,299,5087,8,299,1,299,3,299,5090,8,299,1,299,
1,299,1,299,3,299,5095,8,299,1,299,1,299,3,299,5099,8,299,1,299,1,299,1,
299,1,299,1,299,1,299,3,299,5107,8,299,1,299,1,299,1,299,1,299,1,299,1,299,
1,299,1,299,1,299,1,299,1,299,3,299,5120,8,299,1,299,1,299,1,299,1,299,1,
299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,1,299,3,
299,5138,8,299,1,299,1,299,1,299,3,299,5143,8,299,1,299,1,299,1,299,3,299,
5148,8,299,1,299,1,299,1,299,1,299,1,299,1,299,3,299,5156,8,299,1,300,1,
300,1,300,1,300,3,300,5162,8,300,3,300,5164,8,300,1,301,1,301,3,301,5168,
8,301,1,301,3,301,5171,8,301,1,302,1,302,1,303,1,303,1,303,1,304,1,304,1,
304,1,304,1,304,1,304,1,304,3,304,5185,8,304,1,305,1,305,1,305,1,305,1,305,
1,305,1,305,1,305,3,305,5195,8,305,1,305,1,305,3,305,5199,8,305,1,305,1,
305,1,305,1,305,5,305,5205,8,305,10,305,12,305,5208,9,305,3,305,5210,8,305,
1,305,1,305,3,305,5214,8,305,1,305,1,305,1,305,1,305,1,305,1,305,1,305,1,
305,3,305,5224,8,305,1,306,1,306,3,306,5228,8,306,1,307,1,307,1,307,5,307,
5233,8,307,10,307,12,307,5236,9,307,1,308,1,308,3,308,5240,8,308,1,309,1,
309,1,309,1,309,1,309,1,309,3,309,5248,8,309,1,310,1,310,1,310,3,310,5253,
8,310,1,310,1,310,1,311,1,311,3,311,5259,8,311,1,312,1,312,1,312,5,312,5264,
8,312,10,312,12,312,5267,9,312,1,313,1,313,3,313,5271,8,313,1,313,1,313,
1,313,1,313,3,313,5277,8,313,1,313,1,313,1,313,1,313,1,313,3,313,5284,8,
313,1,314,1,314,1,315,1,315,1,315,1,315,1,315,1,315,3,315,5294,8,315,3,315,
5296,8,315,1,316,1,316,1,316,1,316,1,316,1,316,3,316,5304,8,316,1,317,1,
317,1,317,3,317,5309,8,317,1,317,1,317,3,317,5313,8,317,1,317,3,317,5316,
8,317,1,318,1,318,1,318,5,318,5321,8,318,10,318,12,318,5324,9,318,1,319,
1,319,3,319,5328,8,319,1,319,1,319,3,319,5332,8,319,1,320,1,320,1,320,1,
320,1,320,1,321,1,321,1,321,1,321,3,321,5343,8,321,1,322,1,322,1,322,1,322,
1,322,1,322,3,322,5351,8,322,1,322,1,322,3,322,5355,8,322,1,322,3,322,5358,
8,322,1,322,3,322,5361,8,322,1,323,1,323,3,323,5365,8,323,1,323,1,323,3,
323,5369,8,323,1,323,5,323,5372,8,323,10,323,12,323,5375,9,323,1,324,1,324,
1,324,3,324,5380,8,324,1,325,1,325,3,325,5384,8,325,1,325,1,325,1,326,1,
326,1,327,1,327,1,327,1,327,1,327,3,327,5395,8,327,1,327,3,327,5398,8,327,
1,327,3,327,5401,8,327,1,327,3,327,5404,8,327,1,328,1,328,1,328,1,328,1,
328,1,328,3,328,5412,8,328,1,329,1,329,3,329,5416,8,329,1,329,5,329,5419,
8,329,10,329,12,329,5422,9,329,1,330,1,330,1,330,1,330,1,330,3,330,5429,
8,330,1,331,1,331,1,331,1,331,1,331,1,331,3,331,5437,8,331,1,332,1,332,1,
332,1,332,3,332,5443,8,332,1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,
1,333,1,333,1,333,1,333,1,333,1,333,1,333,1,333,3,333,5461,8,333,1,333,1,
333,1,334,1,334,1,334,1,334,1,334,1,334,3,334,5471,8,334,1,334,1,334,1,334,
1,334,3,334,5477,8,334,1,335,1,335,1,335,1,336,1,336,1,336,1,337,1,337,1,
338,1,338,1,338,1,338,3,338,5491,8,338,1,338,3,338,5494,8,338,1,338,1,338,
3,338,5498,8,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,1,338,5,
338,5509,8,338,10,338,12,338,5512,9,338,1,339,1,339,1,339,1,339,1,339,1,
339,3,339,5520,8,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,1,339,
1,339,5,339,5532,8,339,10,339,12,339,5535,9,339,1,340,1,340,1,341,1,341,
3,341,5541,8,341,1,341,1,341,1,341,1,341,3,341,5547,8,341,1,341,1,341,1,
341,1,341,3,341,5553,8,341,1,342,1,342,1,342,1,342,1,342,1,342,3,342,5561,
8,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,1,342,3,342,5572,8,
342,1,342,1,342,3,342,5576,8,342,1,343,1,343,1,343,1,343,1,343,1,343,1,343,
1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,
1,343,1,343,1,343,1,343,1,343,1,343,1,343,1,343,5,343,5605,8,343,10,343,
12,343,5608,9,343,1,344,1,344,1,344,1,344,1,344,3,344,5615,8,344,1,344,1,
344,3,344,5619,8,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
1,344,1,344,1,344,1,344,1,344,1,344,3,344,5636,8,344,1,344,1,344,1,344,1,
344,1,344,3,344,5643,8,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
1,344,1,344,1,344,1,344,3,344,5657,8,344,1,344,1,344,1,344,1,344,1,344,1,
344,1,344,1,344,1,344,1,344,3,344,5669,8,344,1,344,1,344,1,344,1,344,3,344,
5675,8,344,1,344,1,344,1,344,4,344,5680,8,344,11,344,12,344,5681,1,344,3,
344,5685,8,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,
1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,1,344,3,344,5719,8,
344,1,344,1,344,1,344,1,344,1,344,1,344,5,344,5727,8,344,10,344,12,344,5730,
9,344,1,345,1,345,1,345,1,346,1,346,1,346,1,346,1,346,1,346,3,346,5741,8,
346,1,347,1,347,1,347,3,347,5746,8,347,1,347,1,347,1,347,1,347,3,347,5752,
8,347,1,347,1,347,1,347,1,347,1,347,1,347,3,347,5760,8,347,1,347,1,347,1,
347,1,347,1,347,3,347,5767,8,347,1,347,1,347,1,347,1,347,3,347,5773,8,347,
1,347,1,347,1,347,3,347,5778,8,347,1,347,1,347,1,347,1,347,3,347,5784,8,
347,1,347,1,347,1,347,3,347,5789,8,347,1,347,1,347,1,347,3,347,5794,8,347,
1,347,1,347,1,347,1,347,3,347,5800,8,347,1,347,1,347,1,347,3,347,5805,8,
347,1,347,1,347,1,347,1,347,3,347,5811,8,347,1,347,1,347,1,347,1,347,1,347,
1,347,3,347,5819,8,347,1,347,1,347,1,347,1,347,1,347,1,347,3,347,5827,8,
347,1,347,1,347,1,347,1,347,1,347,1,347,3,347,5835,8,347,1,347,1,347,1,347,
1,347,1,347,1,347,3,347,5843,8,347,1,347,1,347,1,347,3,347,5848,8,347,1,
347,1,347,1,347,1,347,3,347,5854,8,347,1,347,1,347,1,347,3,347,5859,8,347,
1,347,1,347,3,347,5863,8,347,1,347,1,347,3,347,5867,8,347,1,347,1,347,1,
347,3,347,5872,8,347,3,347,5874,8,347,1,348,1,348,1,348,1,348,1,348,1,349,
1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,3,349,
5893,8,349,1,349,1,349,3,349,5897,8,349,1,349,1,349,1,349,1,349,1,349,3,
349,5904,8,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,1,349,
3,349,5916,8,349,1,349,3,349,5919,8,349,1,349,1,349,3,349,5923,8,349,1,350,
1,350,1,350,3,350,5928,8,350,1,351,1,351,1,351,3,351,5933,8,351,1,351,1,
351,3,351,5937,8,351,1,352,1,352,1,352,1,353,1,353,1,353,1,353,1,353,3,353,
5947,8,353,1,353,1,353,1,353,1,353,1,353,1,353,1,353,3,353,5956,8,353,3,
353,5958,8,353,1,354,3,354,5961,8,354,1,354,1,354,1,355,1,355,1,355,1,355,
1,355,3,355,5970,8,355,1,356,1,356,1,356,5,356,5975,8,356,10,356,12,356,
5978,9,356,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,1,357,3,
357,5990,8,357,1,357,1,357,1,357,3,357,5995,8,357,1,358,1,358,1,358,1,358,
1,358,3,358,6002,8,358,1,358,1,358,1,358,1,358,3,358,6008,8,358,1,358,1,
358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,
358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,4,358,6032,8,358,11,
358,12,358,6033,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,
358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,
358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,6065,8,358,1,358,1,358,
1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
1,358,1,358,1,358,1,358,3,358,6085,8,358,1,358,1,358,1,358,1,358,3,358,6091,
8,358,1,358,1,358,3,358,6095,8,358,1,358,1,358,1,358,1,358,1,358,1,358,1,
358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,
358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,6122,8,358,1,358,1,358,1,358,
1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,6134,8,358,1,358,1,358,1,
358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,6147,8,358,1,358,
1,358,3,358,6151,8,358,1,358,1,358,3,358,6155,8,358,1,358,1,358,1,358,1,
358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,
358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,6183,
8,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,
1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,6239,8,358,1,358,1,358,1,
358,1,358,1,358,1,358,1,358,1,358,3,358,6249,8,358,1,358,1,358,3,358,6253,
8,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,1,358,3,358,
6265,8,358,1,358,1,358,1,358,3,358,6270,8,358,1,359,1,359,1,359,1,359,1,
359,1,359,1,359,1,359,1,359,1,359,1,359,3,359,6283,8,359,1,359,1,359,1,359,
1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,1,359,
1,359,1,359,1,359,3,359,6303,8,359,1,360,1,360,3,360,6307,8,360,1,360,1,
360,1,361,1,361,1,361,1,362,1,362,1,362,1,362,1,362,1,362,1,362,1,362,5,
362,6322,8,362,10,362,12,362,6325,9,362,3,362,6327,8,362,1,363,1,363,1,363,
3,363,6332,8,363,1,363,3,363,6335,8,363,1,364,1,364,1,365,1,365,1,365,1,
365,1,365,3,365,6344,8,365,1,365,1,365,3,365,6348,8,365,1,365,1,365,1,365,
1,365,3,365,6354,8,365,1,365,1,365,1,365,1,365,3,365,6360,8,365,1,365,1,
365,3,365,6364,8,365,1,365,1,365,1,366,1,366,1,366,1,366,1,366,1,366,1,366,
3,366,6375,8,366,1,366,1,366,1,366,1,366,3,366,6381,8,366,3,366,6383,8,366,
1,366,1,366,1,367,1,367,1,367,3,367,6390,8,367,1,367,1,367,1,367,1,367,1,
367,3,367,6397,8,367,1,367,1,367,3,367,6401,8,367,1,368,1,368,1,368,5,368,
6406,8,368,10,368,12,368,6409,9,368,1,369,1,369,3,369,6413,8,369,1,370,1,
370,3,370,6417,8,370,1,371,1,371,1,371,3,371,6422,8,371,1,372,1,372,3,372,
6426,8,372,1,372,1,372,3,372,6430,8,372,1,373,1,373,1,373,3,373,6435,8,373,
1,373,1,373,1,373,3,373,6440,8,373,3,373,6442,8,373,1,373,1,373,3,373,6446,
8,373,1,374,1,374,1,374,1,375,1,375,1,375,1,376,1,376,1,376,1,377,1,377,
3,377,6459,8,377,1,377,1,377,3,377,6463,8,377,1,377,3,377,6466,8,377,1,377,
1,377,3,377,6470,8,377,1,377,1,377,3,377,6474,8,377,1,377,1,377,3,377,6478,
8,377,1,377,1,377,1,377,3,377,6483,8,377,1,377,1,377,3,377,6487,8,377,1,
377,1,377,3,377,6491,8,377,1,377,1,377,1,377,1,377,1,377,1,377,1,377,3,377,
6500,8,377,3,377,6502,8,377,1,378,1,378,1,378,5,378,6507,8,378,10,378,12,
378,6510,9,378,1,379,1,379,1,379,3,379,6515,8,379,1,380,1,380,1,381,1,381,
1,382,1,382,3,382,6523,8,382,1,383,1,383,1,384,1,384,1,384,1,384,1,385,1,
385,1,385,1,385,1,386,1,386,1,386,1,386,1,387,1,387,1,387,5,387,6542,8,387,
10,387,12,387,6545,9,387,1,388,1,388,3,388,6549,8,388,1,389,1,389,1,389,
5,389,6554,8,389,10,389,12,389,6557,9,389,1,390,1,390,1,391,1,391,1,391,
1,391,1,391,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,1,392,
1,392,1,392,1,392,3,392,6579,8,392,1,393,1,393,1,393,1,394,1,394,1,394,1,
394,1,394,1,395,1,395,1,395,1,395,1,395,1,395,3,395,6595,8,395,1,396,1,396,
1,396,1,397,1,397,1,397,4,397,6603,8,397,11,397,12,397,6604,1,398,1,398,
3,398,6609,8,398,1,398,1,398,1,398,4,398,6614,8,398,11,398,12,398,6615,1,
398,3,398,6619,8,398,1,398,1,398,1,398,1,399,1,399,1,399,1,400,1,400,1,400,
3,400,6630,8,400,1,401,1,401,1,402,1,402,1,402,1,403,1,403,3,403,6639,8,
403,1,403,3,403,6642,8,403,1,403,1,403,1,404,1,404,1,404,3,404,6649,8,404,
1,405,1,405,1,405,3,405,6654,8,405,1,406,1,406,1,406,1,406,1,406,1,407,1,
407,1,407,1,407,1,407,1,407,1,407,1,408,1,408,1,408,1,408,1,408,1,408,1,
408,1,409,1,409,1,409,4,409,6678,8,409,11,409,12,409,6679,1,410,1,410,1,
410,1,410,3,410,6686,8,410,1,411,1,411,1,411,1,411,3,411,6692,8,411,1,411,
1,411,3,411,6696,8,411,1,412,1,412,1,412,1,412,1,412,1,412,1,413,1,413,3,
413,6706,8,413,1,414,1,414,3,414,6710,8,414,1,414,1,414,1,415,1,415,1,415,
1,415,1,415,1,415,1,415,5,415,6721,8,415,10,415,12,415,6724,9,415,1,415,
1,415,1,416,1,416,1,416,1,416,1,416,1,416,1,416,3,416,6735,8,416,1,417,1,
417,1,417,1,417,1,417,1,417,1,418,1,418,1,418,1,419,1,419,1,419,1,420,1,
420,1,420,1,420,3,420,6753,8,420,1,420,1,420,1,420,1,420,5,420,6759,8,420,
10,420,12,420,6762,9,420,1,420,1,420,1,420,1,420,1,420,5,420,6769,8,420,
10,420,12,420,6772,9,420,3,420,6774,8,420,1,421,1,421,1,421,3,421,6779,8,
421,1,422,1,422,3,422,6783,8,422,1,422,1,422,1,422,1,423,1,423,3,423,6790,
8,423,1,423,1,423,1,423,3,423,6795,8,423,1,424,1,424,1,425,1,425,1,425,3,
425,6802,8,425,1,425,1,425,1,425,1,425,5,425,6808,8,425,10,425,12,425,6811,
9,425,3,425,6813,8,425,1,426,1,426,1,426,3,426,6818,8,426,1,426,1,426,1,
426,1,426,5,426,6824,8,426,10,426,12,426,6827,9,426,3,426,6829,8,426,1,427,
1,427,1,427,1,427,1,428,1,428,1,428,1,429,1,429,1,429,1,430,1,430,3,430,
6843,8,430,1,430,3,430,6846,8,430,1,430,1,430,1,430,1,430,1,431,1,431,1,
431,1,431,1,431,1,431,1,431,3,431,6859,8,431,1,431,1,431,3,431,6863,8,431,
3,431,6865,8,431,1,432,1,432,1,432,3,432,6870,8,432,1,433,1,433,1,433,3,
433,6875,8,433,1,434,1,434,1,434,1,435,3,435,6881,8,435,1,435,1,435,1,436,
1,436,3,436,6887,8,436,1,436,1,436,5,436,6891,8,436,10,436,12,436,6894,9,
436,1,436,1,436,3,436,6898,8,436,1,436,3,436,6901,8,436,1,436,1,436,5,436,
6905,8,436,10,436,12,436,6908,9,436,1,436,1,436,3,436,6912,8,436,1,436,3,
436,6915,8,436,1,436,1,436,5,436,6919,8,436,10,436,12,436,6922,9,436,1,436,
3,436,6925,8,436,1,436,1,436,1,436,1,436,3,436,6931,8,436,3,436,6933,8,436,
1,436,3,436,6936,8,436,1,436,1,436,5,436,6940,8,436,10,436,12,436,6943,9,
436,1,436,1,436,1,436,3,436,6948,8,436,1,436,1,436,1,436,1,436,1,436,1,436,
3,436,6956,8,436,3,436,6958,8,436,3,436,6960,8,436,1,437,1,437,3,437,6964,
8,437,1,438,1,438,5,438,6968,8,438,10,438,12,438,6971,9,438,1,438,1,438,
3,438,6975,8,438,1,438,1,438,3,438,6979,8,438,1,438,1,438,1,438,3,438,6984,
8,438,1,438,1,438,5,438,6988,8,438,10,438,12,438,6991,9,438,1,438,1,438,
5,438,6995,8,438,10,438,12,438,6998,9,438,3,438,7000,8,438,3,438,7002,8,
438,1,439,3,439,7005,8,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,
3,439,7015,8,439,1,439,1,439,3,439,7019,8,439,1,439,1,439,1,439,1,439,3,
439,7025,8,439,1,439,1,439,1,439,1,439,1,439,3,439,7032,8,439,1,439,1,439,
1,439,3,439,7037,8,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,439,1,
439,1,439,1,439,1,439,3,439,7051,8,439,1,439,1,439,1,439,3,439,7056,8,439,
1,440,1,440,1,441,1,441,1,442,1,442,3,442,7064,8,442,1,442,1,442,1,442,3,
442,7069,8,442,1,442,1,442,3,442,7073,8,442,1,442,3,442,7076,8,442,1,443,
1,443,1,443,3,443,7081,8,443,1,443,1,443,3,443,7085,8,443,1,443,1,443,1,
443,1,443,1,443,1,443,3,443,7093,8,443,1,443,1,443,1,443,1,443,1,443,1,443,
3,443,7101,8,443,3,443,7103,8,443,1,444,1,444,1,444,1,444,1,444,3,444,7110,
8,444,1,445,1,445,1,445,1,445,5,445,7116,8,445,10,445,12,445,7119,9,445,
1,445,1,445,1,446,1,446,3,446,7125,8,446,1,446,3,446,7128,8,446,1,447,1,
447,1,447,1,447,5,447,7134,8,447,10,447,12,447,7137,9,447,1,447,1,447,1,
448,1,448,1,448,3,448,7144,8,448,3,448,7146,8,448,1,449,1,449,1,449,1,449,
3,449,7152,8,449,1,450,1,450,1,451,1,451,3,451,7158,8,451,1,452,1,452,3,
452,7162,8,452,1,452,1,452,1,452,1,452,1,452,3,452,7169,8,452,1,453,1,453,
1,454,1,454,1,454,1,455,1,455,1,455,1,455,3,455,7180,8,455,1,456,1,456,1,
457,1,457,1,457,1,458,1,458,3,458,7189,8,458,1,458,3,458,7192,8,458,1,458,
1,458,1,458,3,458,7197,8,458,3,458,7199,8,458,1,458,3,458,7202,8,458,1,458,
3,458,7205,8,458,1,458,1,458,3,458,7209,8,458,1,458,3,458,7212,8,458,1,458,
1,458,3,458,7216,8,458,1,458,1,458,1,458,3,458,7221,8,458,1,458,3,458,7224,
8,458,1,458,1,458,3,458,7228,8,458,1,458,3,458,7231,8,458,1,458,1,458,3,
458,7235,8,458,1,458,1,458,1,458,3,458,7240,8,458,1,458,1,458,3,458,7244,
8,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,3,458,
7256,8,458,1,458,1,458,3,458,7260,8,458,1,458,1,458,1,458,1,458,3,458,7266,
8,458,1,458,3,458,7269,8,458,1,458,1,458,1,458,3,458,7274,8,458,1,458,1,
458,3,458,7278,8,458,1,458,1,458,3,458,7282,8,458,1,458,1,458,1,458,3,458,
7287,8,458,1,458,1,458,1,458,1,458,1,458,1,458,1,458,3,458,7296,8,458,1,
458,3,458,7299,8,458,1,458,1,458,3,458,7303,8,458,1,458,1,458,3,458,7307,
8,458,1,458,3,458,7310,8,458,1,458,1,458,3,458,7314,8,458,1,458,1,458,3,
458,7318,8,458,1,458,1,458,1,458,3,458,7323,8,458,1,458,1,458,1,458,3,458,
7328,8,458,1,458,1,458,1,458,1,458,3,458,7334,8,458,1,459,1,459,1,459,3,
459,7339,8,459,1,460,1,460,1,460,3,460,7344,8,460,3,460,7346,8,460,1,461,
1,461,1,461,3,461,7351,8,461,1,461,1,461,1,462,4,462,7356,8,462,11,462,12,
462,7357,1,463,1,463,1,463,1,463,1,463,1,463,3,463,7366,8,463,1,463,1,463,
1,463,1,463,3,463,7372,8,463,3,463,7374,8,463,1,464,1,464,3,464,7378,8,464,
1,464,1,464,3,464,7382,8,464,1,465,1,465,3,465,7386,8,465,1,465,1,465,3,
465,7390,8,465,1,466,1,466,1,466,1,466,1,467,1,467,1,467,1,467,1,468,1,468,
1,468,1,468,3,468,7404,8,468,1,469,1,469,1,469,1,469,1,469,3,469,7411,8,
469,1,470,1,470,3,470,7415,8,470,1,470,5,470,7418,8,470,10,470,12,470,7421,
9,470,1,471,4,471,7424,8,471,11,471,12,471,7425,1,472,1,472,3,472,7430,8,
472,1,472,1,472,1,472,1,472,3,472,7436,8,472,1,472,1,472,3,472,7440,8,472,
1,472,1,472,3,472,7444,8,472,1,472,1,472,1,472,3,472,7449,8,472,1,472,1,
472,1,472,3,472,7454,8,472,1,472,1,472,1,472,3,472,7459,8,472,1,472,1,472,
1,472,3,472,7464,8,472,1,472,1,472,1,472,1,472,3,472,7470,8,472,1,472,1,
472,1,472,1,472,3,472,7476,8,472,1,472,1,472,1,472,3,472,7481,8,472,1,472,
1,472,1,472,3,472,7486,8,472,1,472,1,472,1,472,3,472,7491,8,472,1,472,1,
472,1,472,3,472,7496,8,472,1,472,1,472,1,472,3,472,7501,8,472,1,472,1,472,
1,472,3,472,7506,8,472,1,472,1,472,1,472,3,472,7511,8,472,1,472,1,472,1,
472,1,472,1,472,1,472,1,472,1,472,3,472,7521,8,472,1,472,1,472,1,472,1,472,
3,472,7527,8,472,1,472,1,472,1,472,1,472,3,472,7533,8,472,1,472,1,472,1,
472,1,472,3,472,7539,8,472,1,472,3,472,7542,8,472,1,472,1,472,1,472,1,472,
1,472,3,472,7549,8,472,1,472,1,472,1,472,3,472,7554,8,472,1,472,3,472,7557,
8,472,1,473,1,473,3,473,7561,8,473,1,474,3,474,7564,8,474,1,474,1,474,3,
474,7568,8,474,1,474,1,474,1,475,3,475,7573,8,475,1,475,1,475,3,475,7577,
8,475,1,475,1,475,1,476,3,476,7582,8,476,1,476,1,476,3,476,7586,8,476,1,
476,1,476,1,477,1,477,1,477,1,477,1,477,3,477,7595,8,477,1,477,3,477,7598,
8,477,1,477,3,477,7601,8,477,1,478,3,478,7604,8,478,1,478,1,478,3,478,7608,
8,478,1,478,1,478,3,478,7612,8,478,1,478,1,478,3,478,7616,8,478,1,478,1,
478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,1,478,3,
478,7631,8,478,1,478,3,478,7634,8,478,3,478,7636,8,478,1,479,1,479,1,479,
3,479,7641,8,479,1,479,1,479,1,479,1,479,1,479,1,479,1,479,3,479,7650,8,
479,1,479,3,479,7653,8,479,1,479,1,479,3,479,7657,8,479,1,480,1,480,1,480,
1,480,1,480,1,481,1,481,1,481,1,481,5,481,7668,8,481,10,481,12,481,7671,
9,481,1,481,1,481,1,482,1,482,1,482,1,482,1,482,1,482,1,482,3,482,7682,8,
482,1,482,1,482,1,482,3,482,7687,8,482,1,482,5,482,7690,8,482,10,482,12,
482,7693,9,482,1,482,1,482,1,482,1,482,5,482,7699,8,482,10,482,12,482,7702,
9,482,1,482,1,482,3,482,7706,8,482,1,483,1,483,1,483,1,483,1,483,5,483,7713,
8,483,10,483,12,483,7716,9,483,1,483,1,483,3,483,7720,8,483,1,484,1,484,
3,484,7724,8,484,1,484,1,484,3,484,7728,8,484,1,484,1,484,3,484,7732,8,484,
1,484,1,484,1,484,3,484,7737,8,484,1,484,1,484,1,484,3,484,7742,8,484,1,
484,1,484,1,484,1,484,3,484,7748,8,484,1,484,1,484,1,484,3,484,7753,8,484,
1,484,3,484,7756,8,484,1,485,1,485,1,485,5,485,7761,8,485,10,485,12,485,
7764,9,485,1,486,1,486,1,486,1,486,5,486,7770,8,486,10,486,12,486,7773,9,
486,1,486,1,486,1,487,1,487,3,487,7779,8,487,1,488,1,488,1,488,1,488,1,489,
1,489,1,489,1,490,1,490,1,490,1,490,1,491,3,491,7793,8,491,1,491,1,491,1,
492,1,492,1,492,1,493,1,493,1,493,1,494,1,494,3,494,7805,8,494,1,495,1,495,
1,495,1,495,1,495,1,495,1,496,1,496,1,496,5,496,7816,8,496,10,496,12,496,
7819,9,496,1,497,1,497,1,497,5,497,7824,8,497,10,497,12,497,7827,9,497,1,
498,1,498,1,498,1,498,3,498,7833,8,498,1,499,1,499,1,499,1,500,1,500,4,500,
7840,8,500,11,500,12,500,7841,1,501,1,501,1,501,1,501,3,501,7848,8,501,1,
501,1,501,1,501,1,501,1,501,1,501,3,501,7856,8,501,1,502,1,502,4,502,7860,
8,502,11,502,12,502,7861,1,503,1,503,1,503,1,503,1,504,1,504,1,504,5,504,
7871,8,504,10,504,12,504,7874,9,504,1,505,1,505,1,505,5,505,7879,8,505,10,
505,12,505,7882,9,505,1,506,1,506,1,506,5,506,7887,8,506,10,506,12,506,7890,
9,506,1,507,1,507,1,507,1,507,1,507,3,507,7897,8,507,1,507,1,507,1,507,1,
507,1,507,1,507,1,507,1,507,3,507,7907,8,507,1,507,1,507,1,507,3,507,7912,
8,507,1,507,1,507,1,507,3,507,7917,8,507,3,507,7919,8,507,1,508,1,508,1,
508,1,508,3,508,7925,8,508,1,508,1,508,1,508,1,508,3,508,7931,8,508,1,508,
3,508,7934,8,508,1,508,1,508,1,508,1,508,1,508,3,508,7941,8,508,3,508,7943,
8,508,3,508,7945,8,508,1,508,3,508,7948,8,508,3,508,7950,8,508,1,509,1,509,
1,509,1,509,1,510,1,510,1,510,1,510,1,511,1,511,1,511,1,512,1,512,1,512,
1,512,3,512,7967,8,512,1,513,1,513,1,513,3,513,7972,8,513,3,513,7974,8,513,
1,514,1,514,1,514,1,515,1,515,3,515,7981,8,515,1,516,1,516,1,517,1,517,1,
518,1,518,1,518,1,518,1,519,1,519,1,519,3,519,7994,8,519,3,519,7996,8,519,
1,520,1,520,1,520,1,520,3,520,8002,8,520,1,521,1,521,1,522,1,522,1,522,1,
522,5,522,8010,8,522,10,522,12,522,8013,9,522,1,522,1,522,1,523,1,523,1,
524,1,524,3,524,8021,8,524,1,525,1,525,1,526,1,526,1,527,1,527,1,527,1,527,
1,527,3,527,8032,8,527,1,527,1,527,1,528,1,528,1,529,1,529,1,530,1,530,1,
531,1,531,1,532,1,532,1,533,1,533,1,534,1,534,1,535,1,535,1,536,1,536,3,
536,8054,8,536,1,537,1,537,3,537,8058,8,537,1,538,1,538,1,539,1,539,1,540,
1,540,1,541,1,541,1,542,1,542,1,543,1,543,1,544,1,544,1,545,1,545,1,546,
1,546,1,547,1,547,1,548,1,548,3,548,8082,8,548,1,549,1,549,1,549,1,550,1,
550,1,550,1,550,1,550,1,550,3,550,8093,8,550,3,550,8095,8,550,1,551,1,551,
3,551,8099,8,551,1,552,1,552,1,552,5,552,8104,8,552,10,552,12,552,8107,9,
552,1,553,1,553,1,553,5,553,8112,8,553,10,553,12,553,8115,9,553,1,554,1,
554,1,555,1,555,3,555,8121,8,555,1,556,1,556,1,557,1,557,3,557,8127,8,557,
1,558,1,558,1,559,1,559,1,560,1,560,1,561,1,561,1,562,1,562,1,563,1,563,
1,563,3,563,8142,8,563,1,564,1,564,3,564,8146,8,564,1,565,1,565,1,565,5,
565,8151,8,565,10,565,12,565,8154,9,565,1,566,1,566,1,566,1,566,1,567,1,
567,3,567,8162,8,567,1,568,1,568,1,568,3,568,8167,8,568,3,568,8169,8,568,
1,568,1,568,1,568,1,568,3,568,8175,8,568,1,569,1,569,1,569,1,570,1,570,1,
571,1,571,1,572,1,572,1,573,1,573,1,573,1,573,1,573,3,573,8191,8,573,1,574,
1,574,1,574,1,574,1,574,1,574,3,574,8199,8,574,1,574,3,574,8202,8,574,1,
575,1,575,1,575,1,575,1,575,3,575,8209,8,575,1,576,1,576,1,576,1,576,5,576,
8215,8,576,10,576,12,576,8218,9,576,1,576,1,576,1,577,1,577,1,577,3,577,
8225,8,577,1,578,1,578,1,578,3,578,8230,8,578,1,579,1,579,1,579,3,579,8235,
8,579,1,580,3,580,8238,8,580,1,580,1,580,3,580,8242,8,580,1,580,5,580,8245,
8,580,10,580,12,580,8248,9,580,1,581,1,581,1,582,1,582,1,582,5,582,8255,
8,582,10,582,12,582,8258,9,582,1,583,1,583,1,584,1,584,1,585,1,585,1,586,
1,586,1,586,1,586,1,586,1,586,3,586,8272,8,586,1,587,1,587,3,587,8276,8,
587,1,588,1,588,1,589,1,589,1,589,1,589,1,589,1,589,1,590,1,590,3,590,8288,
8,590,1,591,1,591,3,591,8292,8,591,1,592,1,592,3,592,8296,8,592,1,593,1,
593,3,593,8300,8,593,1,594,1,594,1,594,1,595,1,595,1,596,1,596,1,597,1,597,
1,597,1,597,1,597,1,597,3,597,8315,8,597,1,598,1,598,1,598,1,598,1,598,1,
598,1,598,1,598,1,598,1,598,3,598,8327,8,598,1,599,1,599,1,599,1,599,1,599,
1,599,1,599,1,599,3,599,8337,8,599,1,599,1,599,1,599,1,599,1,599,3,599,8344,
8,599,3,599,8346,8,599,1,600,1,600,1,601,1,601,1,602,1,602,1,602,1,602,1,
602,1,602,1,602,1,602,1,602,1,602,1,602,3,602,8363,8,602,1,602,1,602,1,602,
3,602,8368,8,602,3,602,8370,8,602,1,603,1,603,1,604,1,604,1,604,3,604,8377,
8,604,1,605,1,605,1,605,3,605,8382,8,605,1,605,1,605,1,605,3,605,8387,8,
605,3,605,8389,8,605,1,606,1,606,1,606,1,606,3,606,8395,8,606,1,607,1,607,
1,608,1,608,1,608,1,608,1,608,3,608,8404,8,608,1,609,1,609,1,609,1,609,1,
609,1,609,1,609,1,609,1,609,3,609,8415,8,609,1,609,0,4,676,678,686,688,610,
0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,
52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,
100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,
136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,
172,174,176,178,180,182,184,186,188,190,192,194,196,198,200,202,204,206,
208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,
244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,
280,282,284,286,288,290,292,294,296,298,300,302,304,306,308,310,312,314,
316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,
352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,
388,390,392,394,396,398,400,402,404,406,408,410,412,414,416,418,420,422,
424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,
460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,
496,498,500,502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,
532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,
568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600,602,
604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,
640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,
676,678,680,682,684,686,688,690,692,694,696,698,700,702,704,706,708,710,
712,714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,
748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,
784,786,788,790,792,794,796,798,800,802,804,806,808,810,812,814,816,818,
820,822,824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,
856,858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,888,890,
892,894,896,898,900,902,904,906,908,910,912,914,916,918,920,922,924,926,
928,930,932,934,936,938,940,942,944,946,948,950,952,954,956,958,960,962,
964,966,968,970,972,974,976,978,980,982,984,986,988,990,992,994,996,998,
1000,1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,
1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,
1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,
1090,1092,1094,1096,1098,1100,1102,1104,1106,1108,1110,1112,1114,1116,1118,
1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,
1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,
1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200,1202,1204,1206,1208,
1210,1212,1214,1216,1218,0,146,1,0,722,723,2,0,17,17,590,590,2,0,49,49,471,
471,1,0,645,646,2,0,4,4,148,148,2,0,434,434,436,436,1,0,724,725,2,0,50,50,
284,284,2,0,232,232,458,458,4,0,126,126,249,249,437,437,556,556,2,0,130,
130,250,250,2,0,440,440,603,603,2,0,441,441,604,604,2,0,374,374,638,638,
3,0,335,335,578,578,602,602,2,0,6,6,28,28,3,0,133,133,242,242,614,614,2,
0,197,197,415,415,2,0,571,571,574,574,3,0,232,232,295,295,431,431,2,0,191,
191,367,367,4,0,191,191,268,268,367,367,419,419,2,0,750,750,753,756,3,0,
131,131,223,223,295,295,1,0,626,627,2,0,82,82,295,295,2,0,112,112,653,653,
2,0,278,278,484,484,2,0,131,131,295,295,7,0,10,10,143,143,223,223,531,532,
534,534,536,536,555,555,2,0,381,381,773,773,2,0,747,749,787,787,3,0,432,
432,484,484,683,683,2,0,18,18,134,134,2,0,272,272,478,478,2,0,98,98,239,
239,2,0,10,10,143,143,2,0,198,198,232,232,2,0,236,236,265,265,2,0,386,386,
649,649,2,0,29,29,543,543,2,0,261,261,472,472,2,0,32,32,316,316,2,0,383,
383,743,744,2,0,528,528,530,530,2,0,449,449,538,538,2,0,543,543,552,552,
2,0,123,123,148,148,3,0,369,369,539,539,650,650,2,0,287,287,611,611,2,0,
128,128,719,719,3,0,206,206,422,422,574,574,4,0,242,242,443,443,497,497,
614,614,13,0,133,133,148,148,170,170,173,173,188,188,236,236,423,423,427,
427,451,451,510,510,565,565,594,594,616,616,4,0,483,483,572,572,618,618,
636,636,2,0,65,65,514,514,2,0,97,97,148,148,2,0,128,128,369,369,2,0,180,
180,431,431,5,0,56,56,180,180,184,184,333,333,431,431,3,0,180,180,431,431,
619,619,2,0,76,76,601,601,4,0,10,10,32,32,128,128,383,383,2,0,487,487,710,
710,3,0,289,289,354,354,547,547,2,0,203,203,251,251,2,0,33,33,446,446,2,
0,235,236,263,263,2,0,166,166,639,639,2,0,547,547,631,631,6,0,10,10,96,96,
256,256,334,334,522,522,567,567,2,0,84,84,430,430,5,0,136,136,225,225,421,
421,547,547,617,617,5,0,32,32,163,163,165,165,208,208,515,515,2,0,618,618,
710,710,2,0,140,140,156,156,2,0,134,135,178,178,3,0,183,183,596,596,610,
610,2,0,15,15,767,767,2,0,394,394,770,770,2,0,10,10,16,16,2,0,750,750,752,
757,3,0,145,145,349,349,760,762,1,0,758,759,1,0,765,766,2,0,758,759,764,
764,2,0,35,36,38,38,4,0,678,679,692,692,694,694,696,696,2,0,684,684,686,
686,2,0,681,681,685,685,2,0,191,191,268,268,2,0,232,232,695,695,2,0,5,5,
558,558,1,0,114,115,1,0,584,585,4,0,113,113,116,116,583,583,586,586,2,0,
371,371,745,745,2,0,745,745,763,763,5,0,118,121,226,228,341,342,494,494,
655,655,9,0,122,122,229,229,337,337,343,343,350,350,429,429,495,495,640,
640,656,656,3,0,92,92,175,175,605,605,2,0,377,377,485,485,10,0,53,53,64,
64,73,73,87,89,107,107,336,336,355,355,492,492,557,557,576,576,2,0,554,554,
637,637,3,0,128,128,152,152,192,192,3,0,128,128,142,142,334,334,3,0,204,
204,402,402,513,513,3,0,44,44,220,220,488,488,1,0,661,662,2,0,599,599,621,
621,5,0,31,31,249,249,331,331,516,516,588,588,4,0,126,126,192,192,195,195,
378,378,1,0,41,42,2,0,290,290,330,330,4,0,211,212,279,279,351,353,411,412,
3,0,512,512,612,612,657,657,1,0,544,546,2,0,61,61,575,575,6,0,78,78,80,80,
128,128,152,152,192,192,442,442,3,0,191,191,268,268,373,373,2,0,142,142,
334,334,2,0,280,280,432,432,2,0,323,323,344,344,2,0,112,112,236,236,3,0,
240,240,251,251,397,397,2,0,541,541,579,579,2,0,380,380,385,385,2,0,284,
284,375,375,2,0,795,795,797,797,3,0,747,749,788,788,790,791,2,0,747,749,
788,788,2,0,747,749,790,791,1,0,788,789,2,0,183,183,596,596,2,0,376,376,
786,786,1,0,750,751,5,0,214,214,284,284,502,502,658,658,673,673,3,0,173,
173,510,510,714,714,32,0,19,19,29,29,46,47,58,58,61,61,75,75,77,77,90,90,
123,123,147,147,159,159,196,197,219,219,222,222,234,234,245,245,267,267,
373,373,415,415,417,417,455,455,468,468,480,480,489,489,512,512,514,514,
543,543,552,552,597,597,606,607,651,651,677,677,9,0,170,170,188,188,369,
369,423,423,427,427,451,451,459,459,565,565,709,709,161,0,2,3,5,9,12,12,
16,16,21,21,23,27,33,33,37,37,40,42,44,44,50,50,53,54,56,57,63,68,70,71,
73,74,76,76,78,82,84,85,87,89,91,91,96,96,101,101,107,107,111,113,116,116,
122,122,129,130,132,132,138,142,150,152,156,156,158,158,160,160,162,166,
168,169,171,172,176,177,179,181,184,185,189,192,201,202,204,204,208,208,
210,213,216,216,220,220,224,225,229,230,233,233,235,235,238,238,243,244,
250,250,255,256,258,259,262,262,264,264,268,268,270,270,273,274,279,280,
286,286,288,289,296,296,298,314,316,319,321,324,327,328,333,337,340,340,
343,344,346,346,348,348,350,358,361,361,363,363,365,368,374,374,377,377,
379,379,381,381,384,384,386,387,390,390,398,404,406,413,418,419,421,421,
424,426,429,431,434,434,438,439,441,442,445,449,452,452,454,454,456,456,
460,466,470,470,472,474,476,476,481,483,485,486,488,488,490,490,492,492,
495,496,500,501,503,503,508,508,513,513,515,515,517,517,519,522,528,530,
532,532,535,535,538,538,540,540,542,542,544,547,553,553,556,561,566,568,
571,572,575,578,580,581,583,586,592,593,598,599,601,604,610,610,613,613,
615,615,617,619,625,625,627,627,631,631,636,636,638,641,646,648,650,650,
652,653,656,656,659,662,664,664,669,671,674,675,680,680,682,682,689,690,
693,693,695,695,697,698,702,708,711,713,715,725,727,730,732,732,735,738,
4,0,583,583,586,586,731,731,733,744,54,0,2,2,12,12,19,19,27,27,29,29,46,
47,58,58,61,61,66,66,75,75,77,77,90,90,123,123,147,147,159,159,196,197,201,
201,210,210,219,219,222,222,224,224,245,245,267,267,373,373,387,387,390,
390,398,398,401,401,405,405,413,413,415,415,417,417,452,452,455,455,468,
468,470,470,480,480,489,489,496,496,503,503,512,512,514,514,519,520,543,
543,552,552,597,597,606,607,615,615,648,648,651,651,659,659,661,662,677,
677,720,723,155,0,3,3,5,9,13,13,16,16,21,26,33,33,37,37,40,42,44,44,50,50,
53,54,56,57,63,65,67,68,70,71,73,74,76,76,78,82,84,85,87,89,91,91,93,93,
96,96,101,101,107,107,111,113,116,116,122,122,129,130,132,132,136,136,138,
142,150,152,156,156,158,158,160,160,162,166,168,169,171,171,176,176,179,
181,184,185,189,192,202,202,204,204,208,208,211,214,216,216,220,220,225,
225,229,230,233,233,235,235,238,238,243,244,250,250,255,256,258,259,262,
262,264,264,268,268,270,270,273,274,279,280,284,284,286,286,288,289,296,
296,298,314,316,319,321,325,327,328,333,337,340,340,343,344,346,346,348,
348,350,358,361,361,363,363,365,368,374,374,377,377,379,379,381,382,384,
384,399,400,402,404,406,412,418,419,421,421,424,426,429,431,434,434,438,
442,445,449,454,454,456,456,460,466,472,474,476,476,481,483,485,486,488,
488,490,490,492,492,495,495,500,502,508,508,513,513,515,515,517,517,521,
522,528,530,532,533,535,535,538,538,540,540,542,542,544,547,553,553,556,
561,565,568,571,572,575,578,580,581,583,586,592,593,598,604,610,610,613,
613,617,619,627,627,631,631,636,636,638,641,647,647,650,650,652,653,656,
656,664,664,669,671,674,676,680,680,682,682,689,690,693,693,695,695,697,
698,702,708,711,712,716,717,719,719,724,725,727,728,5,0,99,99,206,206,234,
234,484,484,487,487,6,0,172,172,177,177,386,386,565,565,625,625,646,646,
9536,0,1232,1,0,0,0,2,1268,1,0,0,0,4,1270,1,0,0,0,6,1299,1,0,0,0,8,1314,
1,0,0,0,10,1352,1,0,0,0,12,1361,1,0,0,0,14,1374,1,0,0,0,16,1376,1,0,0,0,
18,1381,1,0,0,0,20,1405,1,0,0,0,22,1414,1,0,0,0,24,1416,1,0,0,0,26,1431,
1,0,0,0,28,1529,1,0,0,0,30,1533,1,0,0,0,32,1549,1,0,0,0,34,1696,1,0,0,0,
36,1701,1,0,0,0,38,1703,1,0,0,0,40,1705,1,0,0,0,42,1719,1,0,0,0,44,1727,
1,0,0,0,46,1743,1,0,0,0,48,1745,1,0,0,0,50,1749,1,0,0,0,52,1754,1,0,0,0,
54,1756,1,0,0,0,56,1793,1,0,0,0,58,1801,1,0,0,0,60,1811,1,0,0,0,62,1813,
1,0,0,0,64,1833,1,0,0,0,66,1842,1,0,0,0,68,1845,1,0,0,0,70,1858,1,0,0,0,
72,1863,1,0,0,0,74,1867,1,0,0,0,76,1874,1,0,0,0,78,1895,1,0,0,0,80,1910,
1,0,0,0,82,1913,1,0,0,0,84,1944,1,0,0,0,86,1954,1,0,0,0,88,1957,1,0,0,0,
90,1966,1,0,0,0,92,1968,1,0,0,0,94,1980,1,0,0,0,96,2005,1,0,0,0,98,2032,
1,0,0,0,100,2046,1,0,0,0,102,2049,1,0,0,0,104,2070,1,0,0,0,106,2073,1,0,
0,0,108,2130,1,0,0,0,110,2132,1,0,0,0,112,2136,1,0,0,0,114,2145,1,0,0,0,
116,2161,1,0,0,0,118,2163,1,0,0,0,120,2171,1,0,0,0,122,2197,1,0,0,0,124,
2199,1,0,0,0,126,2211,1,0,0,0,128,2226,1,0,0,0,130,2228,1,0,0,0,132,2231,
1,0,0,0,134,2253,1,0,0,0,136,2255,1,0,0,0,138,2261,1,0,0,0,140,2267,1,0,
0,0,142,2273,1,0,0,0,144,2279,1,0,0,0,146,2285,1,0,0,0,148,2292,1,0,0,0,
150,2300,1,0,0,0,152,2302,1,0,0,0,154,2308,1,0,0,0,156,2314,1,0,0,0,158,
2321,1,0,0,0,160,2339,1,0,0,0,162,2341,1,0,0,0,164,2345,1,0,0,0,166,2350,
1,0,0,0,168,2366,1,0,0,0,170,2371,1,0,0,0,172,2404,1,0,0,0,174,2435,1,0,
0,0,176,2452,1,0,0,0,178,2454,1,0,0,0,180,2474,1,0,0,0,182,2480,1,0,0,0,
184,2486,1,0,0,0,186,2492,1,0,0,0,188,2499,1,0,0,0,190,2508,1,0,0,0,192,
2525,1,0,0,0,194,2527,1,0,0,0,196,2534,1,0,0,0,198,2544,1,0,0,0,200,2558,
1,0,0,0,202,2564,1,0,0,0,204,2572,1,0,0,0,206,2578,1,0,0,0,208,2586,1,0,
0,0,210,2592,1,0,0,0,212,2602,1,0,0,0,214,2606,1,0,0,0,216,2612,1,0,0,0,
218,2617,1,0,0,0,220,2628,1,0,0,0,222,2671,1,0,0,0,224,2677,1,0,0,0,226,
2679,1,0,0,0,228,2686,1,0,0,0,230,2716,1,0,0,0,232,2718,1,0,0,0,234,2749,
1,0,0,0,236,2756,1,0,0,0,238,2760,1,0,0,0,240,2768,1,0,0,0,242,2778,1,0,
0,0,244,2780,1,0,0,0,246,2798,1,0,0,0,248,2810,1,0,0,0,250,2815,1,0,0,0,
252,2821,1,0,0,0,254,2854,1,0,0,0,256,2856,1,0,0,0,258,2864,1,0,0,0,260,
2873,1,0,0,0,262,2881,1,0,0,0,264,2893,1,0,0,0,266,2916,1,0,0,0,268,2930,
1,0,0,0,270,2934,1,0,0,0,272,2966,1,0,0,0,274,2981,1,0,0,0,276,2996,1,0,
0,0,278,2998,1,0,0,0,280,3025,1,0,0,0,282,3027,1,0,0,0,284,3029,1,0,0,0,
286,3032,1,0,0,0,288,3035,1,0,0,0,290,3042,1,0,0,0,292,3044,1,0,0,0,294,
3074,1,0,0,0,296,3086,1,0,0,0,298,3089,1,0,0,0,300,3098,1,0,0,0,302,3102,
1,0,0,0,304,3107,1,0,0,0,306,3120,1,0,0,0,308,3125,1,0,0,0,310,3129,1,0,
0,0,312,3145,1,0,0,0,314,3147,1,0,0,0,316,3165,1,0,0,0,318,3167,1,0,0,0,
320,3176,1,0,0,0,322,3188,1,0,0,0,324,3195,1,0,0,0,326,3206,1,0,0,0,328,
3208,1,0,0,0,330,3212,1,0,0,0,332,3214,1,0,0,0,334,3219,1,0,0,0,336,3227,
1,0,0,0,338,3236,1,0,0,0,340,3239,1,0,0,0,342,3254,1,0,0,0,344,3257,1,0,
0,0,346,3276,1,0,0,0,348,3281,1,0,0,0,350,3286,1,0,0,0,352,3290,1,0,0,0,
354,3304,1,0,0,0,356,3307,1,0,0,0,358,3313,1,0,0,0,360,3326,1,0,0,0,362,
3334,1,0,0,0,364,3360,1,0,0,0,366,3373,1,0,0,0,368,3380,1,0,0,0,370,3382,
1,0,0,0,372,3394,1,0,0,0,374,3396,1,0,0,0,376,3406,1,0,0,0,378,3430,1,0,
0,0,380,3432,1,0,0,0,382,3439,1,0,0,0,384,3449,1,0,0,0,386,3484,1,0,0,0,
388,3494,1,0,0,0,390,3496,1,0,0,0,392,3500,1,0,0,0,394,3508,1,0,0,0,396,
3510,1,0,0,0,398,3515,1,0,0,0,400,3519,1,0,0,0,402,3547,1,0,0,0,404,3549,
1,0,0,0,406,3551,1,0,0,0,408,3559,1,0,0,0,410,3561,1,0,0,0,412,3569,1,0,
0,0,414,3579,1,0,0,0,416,3583,1,0,0,0,418,3608,1,0,0,0,420,3635,1,0,0,0,
422,3637,1,0,0,0,424,3647,1,0,0,0,426,3678,1,0,0,0,428,3702,1,0,0,0,430,
3704,1,0,0,0,432,3718,1,0,0,0,434,3720,1,0,0,0,436,3755,1,0,0,0,438,3757,
1,0,0,0,440,3799,1,0,0,0,442,3815,1,0,0,0,444,3817,1,0,0,0,446,3825,1,0,
0,0,448,3834,1,0,0,0,450,3841,1,0,0,0,452,3940,1,0,0,0,454,3944,1,0,0,0,
456,3946,1,0,0,0,458,3950,1,0,0,0,460,3964,1,0,0,0,462,3966,1,0,0,0,464,
3979,1,0,0,0,466,4043,1,0,0,0,468,4045,1,0,0,0,470,4053,1,0,0,0,472,4061,
1,0,0,0,474,4069,1,0,0,0,476,4071,1,0,0,0,478,4100,1,0,0,0,480,4109,1,0,
0,0,482,4140,1,0,0,0,484,4142,1,0,0,0,486,4150,1,0,0,0,488,4152,1,0,0,0,
490,4166,1,0,0,0,492,4168,1,0,0,0,494,4174,1,0,0,0,496,4182,1,0,0,0,498,
4219,1,0,0,0,500,4221,1,0,0,0,502,4236,1,0,0,0,504,4238,1,0,0,0,506,4300,
1,0,0,0,508,4302,1,0,0,0,510,4305,1,0,0,0,512,4330,1,0,0,0,514,4339,1,0,
0,0,516,4341,1,0,0,0,518,4346,1,0,0,0,520,4392,1,0,0,0,522,4394,1,0,0,0,
524,4402,1,0,0,0,526,4451,1,0,0,0,528,4464,1,0,0,0,530,4466,1,0,0,0,532,
4469,1,0,0,0,534,4480,1,0,0,0,536,4485,1,0,0,0,538,4488,1,0,0,0,540,4503,
1,0,0,0,542,4553,1,0,0,0,544,4555,1,0,0,0,546,4557,1,0,0,0,548,4606,1,0,
0,0,550,4624,1,0,0,0,552,4626,1,0,0,0,554,4642,1,0,0,0,556,4654,1,0,0,0,
558,4679,1,0,0,0,560,4681,1,0,0,0,562,4689,1,0,0,0,564,4738,1,0,0,0,566,
4753,1,0,0,0,568,4758,1,0,0,0,570,4760,1,0,0,0,572,4784,1,0,0,0,574,4786,
1,0,0,0,576,4845,1,0,0,0,578,4856,1,0,0,0,580,4858,1,0,0,0,582,4861,1,0,
0,0,584,4874,1,0,0,0,586,4902,1,0,0,0,588,4910,1,0,0,0,590,4912,1,0,0,0,
592,4923,1,0,0,0,594,4925,1,0,0,0,596,4933,1,0,0,0,598,4935,1,0,0,0,600,
5163,1,0,0,0,602,5170,1,0,0,0,604,5172,1,0,0,0,606,5174,1,0,0,0,608,5184,
1,0,0,0,610,5223,1,0,0,0,612,5227,1,0,0,0,614,5229,1,0,0,0,616,5237,1,0,
0,0,618,5241,1,0,0,0,620,5249,1,0,0,0,622,5258,1,0,0,0,624,5260,1,0,0,0,
626,5283,1,0,0,0,628,5285,1,0,0,0,630,5287,1,0,0,0,632,5303,1,0,0,0,634,
5315,1,0,0,0,636,5317,1,0,0,0,638,5325,1,0,0,0,640,5333,1,0,0,0,642,5342,
1,0,0,0,644,5344,1,0,0,0,646,5362,1,0,0,0,648,5376,1,0,0,0,650,5381,1,0,
0,0,652,5387,1,0,0,0,654,5389,1,0,0,0,656,5405,1,0,0,0,658,5413,1,0,0,0,
660,5423,1,0,0,0,662,5436,1,0,0,0,664,5438,1,0,0,0,666,5444,1,0,0,0,668,
5476,1,0,0,0,670,5478,1,0,0,0,672,5481,1,0,0,0,674,5484,1,0,0,0,676,5497,
1,0,0,0,678,5513,1,0,0,0,680,5536,1,0,0,0,682,5538,1,0,0,0,684,5575,1,0,
0,0,686,5577,1,0,0,0,688,5718,1,0,0,0,690,5731,1,0,0,0,692,5740,1,0,0,0,
694,5873,1,0,0,0,696,5875,1,0,0,0,698,5922,1,0,0,0,700,5924,1,0,0,0,702,
5929,1,0,0,0,704,5938,1,0,0,0,706,5957,1,0,0,0,708,5960,1,0,0,0,710,5969,
1,0,0,0,712,5971,1,0,0,0,714,5994,1,0,0,0,716,6269,1,0,0,0,718,6302,1,0,
0,0,720,6304,1,0,0,0,722,6310,1,0,0,0,724,6313,1,0,0,0,726,6328,1,0,0,0,
728,6336,1,0,0,0,730,6338,1,0,0,0,732,6367,1,0,0,0,734,6400,1,0,0,0,736,
6402,1,0,0,0,738,6410,1,0,0,0,740,6416,1,0,0,0,742,6421,1,0,0,0,744,6423,
1,0,0,0,746,6445,1,0,0,0,748,6447,1,0,0,0,750,6450,1,0,0,0,752,6453,1,0,
0,0,754,6501,1,0,0,0,756,6503,1,0,0,0,758,6514,1,0,0,0,760,6516,1,0,0,0,
762,6518,1,0,0,0,764,6522,1,0,0,0,766,6524,1,0,0,0,768,6526,1,0,0,0,770,
6530,1,0,0,0,772,6534,1,0,0,0,774,6538,1,0,0,0,776,6546,1,0,0,0,778,6550,
1,0,0,0,780,6558,1,0,0,0,782,6560,1,0,0,0,784,6578,1,0,0,0,786,6580,1,0,
0,0,788,6583,1,0,0,0,790,6588,1,0,0,0,792,6596,1,0,0,0,794,6602,1,0,0,0,
796,6606,1,0,0,0,798,6623,1,0,0,0,800,6626,1,0,0,0,802,6631,1,0,0,0,804,
6633,1,0,0,0,806,6636,1,0,0,0,808,6645,1,0,0,0,810,6653,1,0,0,0,812,6655,
1,0,0,0,814,6660,1,0,0,0,816,6667,1,0,0,0,818,6677,1,0,0,0,820,6685,1,0,
0,0,822,6687,1,0,0,0,824,6697,1,0,0,0,826,6705,1,0,0,0,828,6707,1,0,0,0,
830,6713,1,0,0,0,832,6734,1,0,0,0,834,6736,1,0,0,0,836,6742,1,0,0,0,838,
6745,1,0,0,0,840,6748,1,0,0,0,842,6778,1,0,0,0,844,6782,1,0,0,0,846,6789,
1,0,0,0,848,6796,1,0,0,0,850,6798,1,0,0,0,852,6814,1,0,0,0,854,6830,1,0,
0,0,856,6834,1,0,0,0,858,6837,1,0,0,0,860,6840,1,0,0,0,862,6864,1,0,0,0,
864,6866,1,0,0,0,866,6874,1,0,0,0,868,6876,1,0,0,0,870,6880,1,0,0,0,872,
6959,1,0,0,0,874,6961,1,0,0,0,876,6965,1,0,0,0,878,7055,1,0,0,0,880,7057,
1,0,0,0,882,7059,1,0,0,0,884,7075,1,0,0,0,886,7077,1,0,0,0,888,7109,1,0,
0,0,890,7111,1,0,0,0,892,7122,1,0,0,0,894,7129,1,0,0,0,896,7145,1,0,0,0,
898,7151,1,0,0,0,900,7153,1,0,0,0,902,7157,1,0,0,0,904,7168,1,0,0,0,906,
7170,1,0,0,0,908,7172,1,0,0,0,910,7179,1,0,0,0,912,7181,1,0,0,0,914,7183,
1,0,0,0,916,7333,1,0,0,0,918,7338,1,0,0,0,920,7345,1,0,0,0,922,7347,1,0,
0,0,924,7355,1,0,0,0,926,7373,1,0,0,0,928,7381,1,0,0,0,930,7389,1,0,0,0,
932,7391,1,0,0,0,934,7395,1,0,0,0,936,7403,1,0,0,0,938,7410,1,0,0,0,940,
7412,1,0,0,0,942,7423,1,0,0,0,944,7556,1,0,0,0,946,7560,1,0,0,0,948,7563,
1,0,0,0,950,7572,1,0,0,0,952,7581,1,0,0,0,954,7589,1,0,0,0,956,7635,1,0,
0,0,958,7637,1,0,0,0,960,7658,1,0,0,0,962,7663,1,0,0,0,964,7674,1,0,0,0,
966,7719,1,0,0,0,968,7755,1,0,0,0,970,7757,1,0,0,0,972,7765,1,0,0,0,974,
7778,1,0,0,0,976,7780,1,0,0,0,978,7784,1,0,0,0,980,7787,1,0,0,0,982,7792,
1,0,0,0,984,7796,1,0,0,0,986,7799,1,0,0,0,988,7802,1,0,0,0,990,7806,1,0,
0,0,992,7812,1,0,0,0,994,7820,1,0,0,0,996,7828,1,0,0,0,998,7834,1,0,0,0,
1000,7837,1,0,0,0,1002,7855,1,0,0,0,1004,7857,1,0,0,0,1006,7863,1,0,0,0,
1008,7867,1,0,0,0,1010,7875,1,0,0,0,1012,7883,1,0,0,0,1014,7891,1,0,0,0,
1016,7920,1,0,0,0,1018,7951,1,0,0,0,1020,7955,1,0,0,0,1022,7959,1,0,0,0,
1024,7962,1,0,0,0,1026,7973,1,0,0,0,1028,7975,1,0,0,0,1030,7980,1,0,0,0,
1032,7982,1,0,0,0,1034,7984,1,0,0,0,1036,7986,1,0,0,0,1038,7995,1,0,0,0,
1040,8001,1,0,0,0,1042,8003,1,0,0,0,1044,8005,1,0,0,0,1046,8016,1,0,0,0,
1048,8020,1,0,0,0,1050,8022,1,0,0,0,1052,8024,1,0,0,0,1054,8026,1,0,0,0,
1056,8035,1,0,0,0,1058,8037,1,0,0,0,1060,8039,1,0,0,0,1062,8041,1,0,0,0,
1064,8043,1,0,0,0,1066,8045,1,0,0,0,1068,8047,1,0,0,0,1070,8049,1,0,0,0,
1072,8053,1,0,0,0,1074,8057,1,0,0,0,1076,8059,1,0,0,0,1078,8061,1,0,0,0,
1080,8063,1,0,0,0,1082,8065,1,0,0,0,1084,8067,1,0,0,0,1086,8069,1,0,0,0,
1088,8071,1,0,0,0,1090,8073,1,0,0,0,1092,8075,1,0,0,0,1094,8077,1,0,0,0,
1096,8081,1,0,0,0,1098,8083,1,0,0,0,1100,8086,1,0,0,0,1102,8098,1,0,0,0,
1104,8100,1,0,0,0,1106,8108,1,0,0,0,1108,8116,1,0,0,0,1110,8120,1,0,0,0,
1112,8122,1,0,0,0,1114,8126,1,0,0,0,1116,8128,1,0,0,0,1118,8130,1,0,0,0,
1120,8132,1,0,0,0,1122,8134,1,0,0,0,1124,8136,1,0,0,0,1126,8141,1,0,0,0,
1128,8145,1,0,0,0,1130,8147,1,0,0,0,1132,8155,1,0,0,0,1134,8159,1,0,0,0,
1136,8174,1,0,0,0,1138,8176,1,0,0,0,1140,8179,1,0,0,0,1142,8181,1,0,0,0,
1144,8183,1,0,0,0,1146,8190,1,0,0,0,1148,8201,1,0,0,0,1150,8208,1,0,0,0,
1152,8210,1,0,0,0,1154,8224,1,0,0,0,1156,8229,1,0,0,0,1158,8234,1,0,0,0,
1160,8241,1,0,0,0,1162,8249,1,0,0,0,1164,8251,1,0,0,0,1166,8259,1,0,0,0,
1168,8261,1,0,0,0,1170,8263,1,0,0,0,1172,8271,1,0,0,0,1174,8275,1,0,0,0,
1176,8277,1,0,0,0,1178,8279,1,0,0,0,1180,8287,1,0,0,0,1182,8291,1,0,0,0,
1184,8295,1,0,0,0,1186,8299,1,0,0,0,1188,8301,1,0,0,0,1190,8304,1,0,0,0,
1192,8306,1,0,0,0,1194,8314,1,0,0,0,1196,8326,1,0,0,0,1198,8345,1,0,0,0,
1200,8347,1,0,0,0,1202,8349,1,0,0,0,1204,8369,1,0,0,0,1206,8371,1,0,0,0,
1208,8376,1,0,0,0,1210,8388,1,0,0,0,1212,8394,1,0,0,0,1214,8396,1,0,0,0,
1216,8403,1,0,0,0,1218,8414,1,0,0,0,1220,1233,5,0,0,1,1221,1224,3,2,1,0,
1222,1224,3,422,211,0,1223,1221,1,0,0,0,1223,1222,1,0,0,0,1224,1230,1,0,
0,0,1225,1227,5,774,0,0,1226,1228,5,0,0,1,1227,1226,1,0,0,0,1227,1228,1,
0,0,0,1228,1231,1,0,0,0,1229,1231,5,0,0,1,1230,1225,1,0,0,0,1230,1229,1,
0,0,0,1231,1233,1,0,0,0,1232,1220,1,0,0,0,1232,1223,1,0,0,0,1233,1,1,0,0,
0,1234,1269,3,4,2,0,1235,1269,3,76,38,0,1236,1269,3,178,89,0,1237,1269,3,
210,105,0,1238,1269,3,214,107,0,1239,1240,4,1,0,0,1240,1269,3,216,108,0,
1241,1269,3,218,109,0,1242,1269,3,220,110,0,1243,1269,3,226,113,0,1244,1269,
3,228,114,0,1245,1269,3,232,116,0,1246,1269,3,252,126,0,1247,1269,3,264,
132,0,1248,1269,3,266,133,0,1249,1269,3,416,208,0,1250,1269,3,418,209,0,
1251,1269,3,440,220,0,1252,1269,3,490,245,0,1253,1254,4,1,1,0,1254,1269,
3,496,248,0,1255,1269,3,502,251,0,1256,1269,3,564,282,0,1257,1269,3,572,
286,0,1258,1269,3,574,287,0,1259,1269,3,598,299,0,1260,1261,4,1,2,0,1261,
1269,3,642,321,0,1262,1269,3,610,305,0,1263,1269,3,662,331,0,1264,1265,4,
1,3,0,1265,1269,3,840,420,0,1266,1269,3,850,425,0,1267,1269,3,852,426,0,
1268,1234,1,0,0,0,1268,1235,1,0,0,0,1268,1236,1,0,0,0,1268,1237,1,0,0,0,
1268,1238,1,0,0,0,1268,1239,1,0,0,0,1268,1241,1,0,0,0,1268,1242,1,0,0,0,
1268,1243,1,0,0,0,1268,1244,1,0,0,0,1268,1245,1,0,0,0,1268,1246,1,0,0,0,
1268,1247,1,0,0,0,1268,1248,1,0,0,0,1268,1249,1,0,0,0,1268,1250,1,0,0,0,
1268,1251,1,0,0,0,1268,1252,1,0,0,0,1268,1253,1,0,0,0,1268,1255,1,0,0,0,
1268,1256,1,0,0,0,1268,1257,1,0,0,0,1268,1258,1,0,0,0,1268,1259,1,0,0,0,
1268,1260,1,0,0,0,1268,1262,1,0,0,0,1268,1263,1,0,0,0,1268,1264,1,0,0,0,
1268,1266,1,0,0,0,1268,1267,1,0,0,0,1269,3,1,0,0,0,1270,1297,5,11,0,0,1271,
1298,3,18,9,0,1272,1298,3,6,3,0,1273,1274,5,422,0,0,1274,1276,3,1062,531,
0,1275,1277,3,102,51,0,1276,1275,1,0,0,0,1276,1277,1,0,0,0,1277,1298,1,0,
0,0,1278,1279,5,206,0,0,1279,1281,3,1066,533,0,1280,1282,3,102,51,0,1281,
1280,1,0,0,0,1281,1282,1,0,0,0,1282,1298,1,0,0,0,1283,1298,3,68,34,0,1284,
1298,3,8,4,0,1285,1298,3,54,27,0,1286,1287,4,2,4,0,1287,1298,3,56,28,0,1288,
1298,3,10,5,0,1289,1298,3,16,8,0,1290,1291,4,2,5,0,1291,1292,5,244,0,0,1292,
1293,5,482,0,0,1293,1294,3,1180,590,0,1294,1295,5,316,0,0,1295,1296,5,265,
0,0,1296,1298,1,0,0,0,1297,1271,1,0,0,0,1297,1272,1,0,0,0,1297,1273,1,0,
0,0,1297,1278,1,0,0,0,1297,1283,1,0,0,0,1297,1284,1,0,0,0,1297,1285,1,0,
0,0,1297,1286,1,0,0,0,1297,1288,1,0,0,0,1297,1289,1,0,0,0,1297,1290,1,0,
0,0,1298,5,1,0,0,0,1299,1300,5,109,0,0,1300,1311,3,1058,529,0,1301,1303,
3,80,40,0,1302,1301,1,0,0,0,1303,1304,1,0,0,0,1304,1302,1,0,0,0,1304,1305,
1,0,0,0,1305,1312,1,0,0,0,1306,1307,4,3,6,0,1307,1308,5,615,0,0,1308,1309,
5,112,0,0,1309,1310,5,139,0,0,1310,1312,5,357,0,0,1311,1302,1,0,0,0,1311,
1306,1,0,0,0,1312,7,1,0,0,0,1313,1315,3,976,488,0,1314,1313,1,0,0,0,1314,
1315,1,0,0,0,1315,1316,1,0,0,0,1316,1317,5,170,0,0,1317,1321,3,1086,543,
0,1318,1319,5,383,0,0,1319,1320,5,490,0,0,1320,1322,3,862,431,0,1321,1318,
1,0,0,0,1321,1322,1,0,0,0,1322,1329,1,0,0,0,1323,1324,5,383,0,0,1324,1326,
5,79,0,0,1325,1327,5,371,0,0,1326,1325,1,0,0,0,1326,1327,1,0,0,0,1327,1328,
1,0,0,0,1328,1330,5,418,0,0,1329,1323,1,0,0,0,1329,1330,1,0,0,0,1330,1334,
1,0,0,0,1331,1332,5,453,0,0,1332,1333,5,590,0,0,1333,1335,3,1128,564,0,1334,
1331,1,0,0,0,1334,1335,1,0,0,0,1335,1342,1,0,0,0,1336,1343,5,156,0,0,1337,
1340,5,140,0,0,1338,1339,5,383,0,0,1339,1341,5,514,0,0,1340,1338,1,0,0,0,
1340,1341,1,0,0,0,1341,1343,1,0,0,0,1342,1336,1,0,0,0,1342,1337,1,0,0,0,
1342,1343,1,0,0,0,1343,1346,1,0,0,0,1344,1345,5,75,0,0,1345,1347,3,1160,
580,0,1346,1344,1,0,0,0,1346,1347,1,0,0,0,1347,1350,1,0,0,0,1348,1349,5,
147,0,0,1349,1351,3,784,392,0,1350,1348,1,0,0,0,1350,1351,1,0,0,0,1351,9,
1,0,0,0,1352,1353,5,288,0,0,1353,1354,5,217,0,0,1354,1355,3,1082,541,0,1355,
1356,5,4,0,0,1356,1357,5,603,0,0,1357,1359,3,1160,580,0,1358,1360,3,12,6,
0,1359,1358,1,0,0,0,1359,1360,1,0,0,0,1360,11,1,0,0,0,1361,1368,3,14,7,0,
1362,1364,5,773,0,0,1363,1362,1,0,0,0,1363,1364,1,0,0,0,1364,1365,1,0,0,
0,1365,1367,3,14,7,0,1366,1363,1,0,0,0,1367,1370,1,0,0,0,1368,1366,1,0,0,
0,1368,1369,1,0,0,0,1369,13,1,0,0,0,1370,1368,1,0,0,0,1371,1375,3,136,68,
0,1372,1375,3,148,74,0,1373,1375,3,150,75,0,1374,1371,1,0,0,0,1374,1372,
1,0,0,0,1374,1373,1,0,0,0,1375,15,1,0,0,0,1376,1377,5,503,0,0,1377,1378,
3,1092,546,0,1378,1379,3,120,60,0,1379,17,1,0,0,0,1380,1382,3,1032,516,0,
1381,1380,1,0,0,0,1381,1382,1,0,0,0,1382,1385,1,0,0,0,1383,1384,4,9,7,0,
1384,1386,5,232,0,0,1385,1383,1,0,0,0,1385,1386,1,0,0,0,1386,1387,1,0,0,
0,1387,1388,5,574,0,0,1388,1390,3,1102,551,0,1389,1391,3,20,10,0,1390,1389,
1,0,0,0,1390,1391,1,0,0,0,1391,19,1,0,0,0,1392,1395,3,22,11,0,1393,1396,
3,954,477,0,1394,1396,3,50,25,0,1395,1393,1,0,0,0,1395,1394,1,0,0,0,1395,
1396,1,0,0,0,1396,1406,1,0,0,0,1397,1406,3,954,477,0,1398,1406,3,50,25,0,
1399,1400,3,24,12,0,1400,1401,5,773,0,0,1401,1403,1,0,0,0,1402,1399,1,0,
0,0,1402,1403,1,0,0,0,1403,1404,1,0,0,0,1404,1406,3,26,13,0,1405,1392,1,
0,0,0,1405,1397,1,0,0,0,1405,1398,1,0,0,0,1405,1402,1,0,0,0,1406,21,1,0,
0,0,1407,1415,3,24,12,0,1408,1409,3,24,12,0,1409,1410,5,773,0,0,1410,1412,
1,0,0,0,1411,1408,1,0,0,0,1411,1412,1,0,0,0,1412,1413,1,0,0,0,1413,1415,
3,30,15,0,1414,1407,1,0,0,0,1414,1411,1,0,0,0,1415,23,1,0,0,0,1416,1421,
3,32,16,0,1417,1418,5,773,0,0,1418,1420,3,32,16,0,1419,1417,1,0,0,0,1420,
1423,1,0,0,0,1421,1419,1,0,0,0,1421,1422,1,0,0,0,1422,25,1,0,0,0,1423,1421,
1,0,0,0,1424,1425,5,141,0,0,1425,1432,5,572,0,0,1426,1427,5,234,0,0,1427,
1432,5,572,0,0,1428,1432,3,28,14,0,1429,1430,4,13,8,0,1430,1432,7,0,0,0,
1431,1424,1,0,0,0,1431,1426,1,0,0,0,1431,1428,1,0,0,0,1431,1429,1,0,0,0,
1432,27,1,0,0,0,1433,1434,5,4,0,0,1434,1436,5,405,0,0,1435,1437,3,1034,517,
0,1436,1435,1,0,0,0,1436,1437,1,0,0,0,1437,1441,1,0,0,0,1438,1442,3,962,
481,0,1439,1440,5,404,0,0,1440,1442,3,1142,571,0,1441,1438,1,0,0,0,1441,
1439,1,0,0,0,1442,1530,1,0,0,0,1443,1444,5,148,0,0,1444,1445,5,405,0,0,1445,
1530,3,1130,565,0,1446,1447,5,438,0,0,1447,1449,5,405,0,0,1448,1450,3,1034,
517,0,1449,1448,1,0,0,0,1449,1450,1,0,0,0,1450,1451,1,0,0,0,1451,1530,3,
52,26,0,1452,1453,5,388,0,0,1453,1455,5,405,0,0,1454,1456,3,1034,517,0,1455,
1454,1,0,0,0,1455,1456,1,0,0,0,1456,1457,1,0,0,0,1457,1459,3,52,26,0,1458,
1460,3,1034,517,0,1459,1458,1,0,0,0,1459,1460,1,0,0,0,1460,1530,1,0,0,0,
1461,1462,5,14,0,0,1462,1464,5,405,0,0,1463,1465,3,1034,517,0,1464,1463,
1,0,0,0,1464,1465,1,0,0,0,1465,1466,1,0,0,0,1466,1530,3,52,26,0,1467,1468,
5,62,0,0,1468,1469,5,405,0,0,1469,1473,3,52,26,0,1470,1472,3,568,284,0,1471,
1470,1,0,0,0,1472,1475,1,0,0,0,1473,1471,1,0,0,0,1473,1474,1,0,0,0,1474,
1530,1,0,0,0,1475,1473,1,0,0,0,1476,1477,5,455,0,0,1477,1479,5,405,0,0,1478,
1480,3,1034,517,0,1479,1478,1,0,0,0,1479,1480,1,0,0,0,1480,1481,1,0,0,0,
1481,1485,3,52,26,0,1482,1484,3,570,285,0,1483,1482,1,0,0,0,1484,1487,1,
0,0,0,1485,1483,1,0,0,0,1485,1486,1,0,0,0,1486,1530,1,0,0,0,1487,1485,1,
0,0,0,1488,1489,5,67,0,0,1489,1491,5,405,0,0,1490,1492,3,1034,517,0,1491,
1490,1,0,0,0,1491,1492,1,0,0,0,1492,1493,1,0,0,0,1493,1530,3,1142,571,0,
1494,1495,5,597,0,0,1495,1496,5,405,0,0,1496,1530,3,52,26,0,1497,1498,5,
454,0,0,1498,1500,5,405,0,0,1499,1501,3,1034,517,0,1500,1499,1,0,0,0,1500,
1501,1,0,0,0,1501,1506,1,0,0,0,1502,1503,3,1130,565,0,1503,1504,5,248,0,
0,1504,1505,3,962,481,0,1505,1507,1,0,0,0,1506,1502,1,0,0,0,1506,1507,1,
0,0,0,1507,1530,1,0,0,0,1508,1509,5,172,0,0,1509,1510,5,405,0,0,1510,1511,
3,1128,564,0,1511,1512,5,645,0,0,1512,1513,5,574,0,0,1513,1515,3,1102,551,
0,1514,1516,3,48,24,0,1515,1514,1,0,0,0,1515,1516,1,0,0,0,1516,1530,1,0,
0,0,1517,1518,4,14,9,0,1518,1519,5,141,0,0,1519,1520,5,405,0,0,1520,1521,
3,52,26,0,1521,1522,5,572,0,0,1522,1530,1,0,0,0,1523,1524,4,14,10,0,1524,
1525,5,234,0,0,1525,1526,5,405,0,0,1526,1527,3,52,26,0,1527,1528,5,572,0,
0,1528,1530,1,0,0,0,1529,1433,1,0,0,0,1529,1443,1,0,0,0,1529,1446,1,0,0,
0,1529,1452,1,0,0,0,1529,1461,1,0,0,0,1529,1467,1,0,0,0,1529,1476,1,0,0,
0,1529,1488,1,0,0,0,1529,1494,1,0,0,0,1529,1497,1,0,0,0,1529,1508,1,0,0,
0,1529,1517,1,0,0,0,1529,1523,1,0,0,0,1530,29,1,0,0,0,1531,1534,3,34,17,
0,1532,1534,3,942,471,0,1533,1531,1,0,0,0,1533,1532,1,0,0,0,1534,1543,1,
0,0,0,1535,1539,5,773,0,0,1536,1540,3,34,17,0,1537,1540,3,32,16,0,1538,1540,
3,942,471,0,1539,1536,1,0,0,0,1539,1537,1,0,0,0,1539,1538,1,0,0,0,1540,1542,
1,0,0,0,1541,1535,1,0,0,0,1542,1545,1,0,0,0,1543,1541,1,0,0,0,1543,1544,
1,0,0,0,1544,31,1,0,0,0,1545,1543,1,0,0,0,1546,1550,3,42,21,0,1547,1550,
3,44,22,0,1548,1550,3,48,24,0,1549,1546,1,0,0,0,1549,1547,1,0,0,0,1549,1548,
1,0,0,0,1550,33,1,0,0,0,1551,1553,5,4,0,0,1552,1554,5,72,0,0,1553,1552,1,
0,0,0,1553,1554,1,0,0,0,1554,1567,1,0,0,0,1555,1556,3,1128,564,0,1556,1558,
3,876,438,0,1557,1559,3,866,433,0,1558,1557,1,0,0,0,1558,1559,1,0,0,0,1559,
1561,1,0,0,0,1560,1562,3,36,18,0,1561,1560,1,0,0,0,1561,1562,1,0,0,0,1562,
1568,1,0,0,0,1563,1564,5,776,0,0,1564,1565,3,84,42,0,1565,1566,5,777,0,0,
1566,1568,1,0,0,0,1567,1555,1,0,0,0,1567,1563,1,0,0,0,1568,1697,1,0,0,0,
1569,1570,5,4,0,0,1570,1697,3,872,436,0,1571,1573,5,55,0,0,1572,1574,5,72,
0,0,1573,1572,1,0,0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,1575,1576,3,1042,
521,0,1576,1577,3,1128,564,0,1577,1579,3,876,438,0,1578,1580,3,36,18,0,1579,
1578,1,0,0,0,1579,1580,1,0,0,0,1580,1697,1,0,0,0,1581,1583,5,348,0,0,1582,
1584,5,72,0,0,1583,1582,1,0,0,0,1583,1584,1,0,0,0,1584,1585,1,0,0,0,1585,
1586,3,1042,521,0,1586,1588,3,876,438,0,1587,1589,3,36,18,0,1588,1587,1,
0,0,0,1588,1589,1,0,0,0,1589,1697,1,0,0,0,1590,1619,5,148,0,0,1591,1593,
5,72,0,0,1592,1591,1,0,0,0,1592,1593,1,0,0,0,1593,1594,1,0,0,0,1594,1596,
3,1042,521,0,1595,1597,3,38,19,0,1596,1595,1,0,0,0,1596,1597,1,0,0,0,1597,
1620,1,0,0,0,1598,1599,5,199,0,0,1599,1606,5,265,0,0,1600,1601,4,17,11,0,
1601,1607,3,1042,521,0,1602,1604,4,17,12,0,1603,1605,3,1042,521,0,1604,1603,
1,0,0,0,1604,1605,1,0,0,0,1605,1607,1,0,0,0,1606,1600,1,0,0,0,1606,1602,
1,0,0,0,1607,1620,1,0,0,0,1608,1609,5,420,0,0,1609,1620,5,265,0,0,1610,1611,
3,406,203,0,1611,1612,3,1052,526,0,1612,1620,1,0,0,0,1613,1614,4,17,13,0,
1614,1615,5,62,0,0,1615,1620,3,1128,564,0,1616,1617,4,17,14,0,1617,1618,
5,86,0,0,1618,1620,3,1128,564,0,1619,1592,1,0,0,0,1619,1598,1,0,0,0,1619,
1608,1,0,0,0,1619,1610,1,0,0,0,1619,1613,1,0,0,0,1619,1616,1,0,0,0,1620,
1697,1,0,0,0,1621,1622,5,140,0,0,1622,1697,5,263,0,0,1623,1624,5,156,0,0,
1624,1697,5,263,0,0,1625,1627,5,11,0,0,1626,1628,5,72,0,0,1627,1626,1,0,
0,0,1627,1628,1,0,0,0,1628,1629,1,0,0,0,1629,1639,3,1042,521,0,1630,1631,
5,506,0,0,1631,1635,5,128,0,0,1632,1633,4,17,15,0,1633,1636,3,770,385,0,
1634,1636,3,1150,575,0,1635,1632,1,0,0,0,1635,1634,1,0,0,0,1636,1640,1,0,
0,0,1637,1638,5,148,0,0,1638,1640,5,128,0,0,1639,1630,1,0,0,0,1639,1637,
1,0,0,0,1640,1697,1,0,0,0,1641,1642,4,17,16,0,1642,1643,5,11,0,0,1643,1644,
5,236,0,0,1644,1645,3,1052,526,0,1645,1646,3,906,453,0,1646,1697,1,0,0,0,
1647,1648,4,17,17,0,1648,1649,5,11,0,0,1649,1650,5,62,0,0,1650,1651,3,1128,
564,0,1651,1652,3,870,435,0,1652,1697,1,0,0,0,1653,1654,4,17,18,0,1654,1655,
5,11,0,0,1655,1656,5,86,0,0,1656,1657,3,1128,564,0,1657,1658,3,870,435,0,
1658,1697,1,0,0,0,1659,1660,4,17,19,0,1660,1661,5,453,0,0,1661,1662,5,72,
0,0,1662,1663,3,1042,521,0,1663,1664,5,590,0,0,1664,1665,3,1128,564,0,1665,
1697,1,0,0,0,1666,1668,5,453,0,0,1667,1669,7,1,0,0,1668,1667,1,0,0,0,1668,
1669,1,0,0,0,1669,1670,1,0,0,0,1670,1697,3,1096,548,0,1671,1672,4,17,20,
0,1672,1673,5,453,0,0,1673,1674,3,406,203,0,1674,1675,3,1052,526,0,1675,
1676,5,590,0,0,1676,1677,3,1050,525,0,1677,1697,1,0,0,0,1678,1679,5,94,0,
0,1679,1680,5,590,0,0,1680,1684,3,758,379,0,1681,1682,4,17,21,0,1682,1685,
5,128,0,0,1683,1685,3,936,468,0,1684,1681,1,0,0,0,1684,1683,1,0,0,0,1685,
1687,1,0,0,0,1686,1688,3,986,493,0,1687,1686,1,0,0,0,1687,1688,1,0,0,0,1688,
1697,1,0,0,0,1689,1697,5,198,0,0,1690,1691,5,393,0,0,1691,1692,5,45,0,0,
1692,1697,3,40,20,0,1693,1694,4,17,22,0,1694,1695,5,615,0,0,1695,1697,5,
403,0,0,1696,1551,1,0,0,0,1696,1569,1,0,0,0,1696,1571,1,0,0,0,1696,1581,
1,0,0,0,1696,1590,1,0,0,0,1696,1621,1,0,0,0,1696,1623,1,0,0,0,1696,1625,
1,0,0,0,1696,1641,1,0,0,0,1696,1647,1,0,0,0,1696,1653,1,0,0,0,1696,1659,
1,0,0,0,1696,1666,1,0,0,0,1696,1671,1,0,0,0,1696,1678,1,0,0,0,1696,1689,
1,0,0,0,1696,1690,1,0,0,0,1696,1693,1,0,0,0,1697,35,1,0,0,0,1698,1699,5,
6,0,0,1699,1702,3,1128,564,0,1700,1702,5,191,0,0,1701,1698,1,0,0,0,1701,
1700,1,0,0,0,1702,37,1,0,0,0,1703,1704,7,2,0,0,1704,39,1,0,0,0,1705,1707,
3,1128,564,0,1706,1708,3,330,165,0,1707,1706,1,0,0,0,1707,1708,1,0,0,0,1708,
1716,1,0,0,0,1709,1710,5,773,0,0,1710,1712,3,1128,564,0,1711,1713,3,330,
165,0,1712,1711,1,0,0,0,1712,1713,1,0,0,0,1713,1715,1,0,0,0,1714,1709,1,
0,0,0,1715,1718,1,0,0,0,1716,1714,1,0,0,0,1716,1717,1,0,0,0,1717,41,1,0,
0,0,1718,1716,1,0,0,0,1719,1721,5,9,0,0,1720,1722,5,750,0,0,1721,1720,1,
0,0,0,1721,1722,1,0,0,0,1722,1725,1,0,0,0,1723,1726,5,128,0,0,1724,1726,
3,1128,564,0,1725,1723,1,0,0,0,1725,1724,1,0,0,0,1726,43,1,0,0,0,1727,1729,
5,287,0,0,1728,1730,5,750,0,0,1729,1728,1,0,0,0,1729,1730,1,0,0,0,1730,1733,
1,0,0,0,1731,1734,5,128,0,0,1732,1734,3,1128,564,0,1733,1731,1,0,0,0,1733,
1732,1,0,0,0,1734,45,1,0,0,0,1735,1737,3,42,21,0,1736,1738,3,44,22,0,1737,
1736,1,0,0,0,1737,1738,1,0,0,0,1738,1744,1,0,0,0,1739,1741,3,44,22,0,1740,
1742,3,42,21,0,1741,1740,1,0,0,0,1741,1742,1,0,0,0,1742,1744,1,0,0,0,1743,
1735,1,0,0,0,1743,1739,1,0,0,0,1744,47,1,0,0,0,1745,1746,4,24,23,0,1746,
1747,7,3,0,0,1747,1748,5,625,0,0,1748,49,1,0,0,0,1749,1750,5,452,0,0,1750,
1751,5,403,0,0,1751,51,1,0,0,0,1752,1755,5,10,0,0,1753,1755,3,1130,565,0,
1754,1752,1,0,0,0,1754,1753,1,0,0,0,1755,53,1,0,0,0,1756,1757,5,572,0,0,
1757,1791,3,1078,539,0,1758,1759,7,4,0,0,1759,1760,5,111,0,0,1760,1762,3,
1160,580,0,1761,1763,3,62,31,0,1762,1761,1,0,0,0,1762,1763,1,0,0,0,1763,
1792,1,0,0,0,1764,1784,4,27,24,0,1765,1785,1,0,0,0,1766,1767,5,55,0,0,1767,
1768,5,111,0,0,1768,1779,3,1160,580,0,1769,1776,3,66,33,0,1770,1772,5,773,
0,0,1771,1770,1,0,0,0,1771,1772,1,0,0,0,1772,1773,1,0,0,0,1773,1775,3,66,
33,0,1774,1771,1,0,0,0,1775,1778,1,0,0,0,1776,1774,1,0,0,0,1776,1777,1,0,
0,0,1777,1780,1,0,0,0,1778,1776,1,0,0,0,1779,1769,1,0,0,0,1779,1780,1,0,
0,0,1780,1785,1,0,0,0,1781,1785,7,5,0,0,1782,1783,5,371,0,0,1783,1785,5,
1,0,0,1784,1765,1,0,0,0,1784,1766,1,0,0,0,1784,1781,1,0,0,0,1784,1782,1,
0,0,0,1785,1792,1,0,0,0,1786,1787,5,453,0,0,1787,1788,5,590,0,0,1788,1792,
3,1128,564,0,1789,1790,4,27,25,0,1790,1792,3,62,31,0,1791,1758,1,0,0,0,1791,
1764,1,0,0,0,1791,1786,1,0,0,0,1791,1789,1,0,0,0,1792,55,1,0,0,0,1793,1794,
5,605,0,0,1794,1795,5,572,0,0,1795,1796,3,1078,539,0,1796,1797,5,506,0,0,
1797,1799,7,6,0,0,1798,1800,3,58,29,0,1799,1798,1,0,0,0,1799,1800,1,0,0,
0,1800,57,1,0,0,0,1801,1808,3,60,30,0,1802,1804,5,773,0,0,1803,1802,1,0,
0,0,1803,1804,1,0,0,0,1804,1805,1,0,0,0,1805,1807,3,60,30,0,1806,1803,1,
0,0,0,1807,1810,1,0,0,0,1808,1806,1,0,0,0,1808,1809,1,0,0,0,1809,59,1,0,
0,0,1810,1808,1,0,0,0,1811,1812,3,148,74,0,1812,61,1,0,0,0,1813,1820,3,64,
32,0,1814,1816,5,773,0,0,1815,1814,1,0,0,0,1815,1816,1,0,0,0,1816,1817,1,
0,0,0,1817,1819,3,64,32,0,1818,1815,1,0,0,0,1819,1822,1,0,0,0,1820,1818,
1,0,0,0,1820,1821,1,0,0,0,1821,63,1,0,0,0,1822,1820,1,0,0,0,1823,1825,5,
238,0,0,1824,1826,5,750,0,0,1825,1824,1,0,0,0,1825,1826,1,0,0,0,1826,1827,
1,0,0,0,1827,1834,3,1186,593,0,1828,1834,3,140,70,0,1829,1834,3,142,71,0,
1830,1834,3,148,74,0,1831,1834,3,150,75,0,1832,1834,3,156,78,0,1833,1823,
1,0,0,0,1833,1828,1,0,0,0,1833,1829,1,0,0,0,1833,1830,1,0,0,0,1833,1831,
1,0,0,0,1833,1832,1,0,0,0,1834,65,1,0,0,0,1835,1837,5,238,0,0,1836,1838,
5,750,0,0,1837,1836,1,0,0,0,1837,1838,1,0,0,0,1838,1839,1,0,0,0,1839,1843,
3,1186,593,0,1840,1843,3,140,70,0,1841,1843,3,142,71,0,1842,1835,1,0,0,0,
1842,1840,1,0,0,0,1842,1841,1,0,0,0,1843,67,1,0,0,0,1844,1846,3,162,81,0,
1845,1844,1,0,0,0,1845,1846,1,0,0,0,1846,1848,1,0,0,0,1847,1849,3,976,488,
0,1848,1847,1,0,0,0,1848,1849,1,0,0,0,1849,1851,1,0,0,0,1850,1852,3,164,
82,0,1851,1850,1,0,0,0,1851,1852,1,0,0,0,1852,1853,1,0,0,0,1853,1854,5,636,
0,0,1854,1855,3,1074,537,0,1855,1856,3,70,35,0,1856,69,1,0,0,0,1857,1859,
3,1044,522,0,1858,1857,1,0,0,0,1858,1859,1,0,0,0,1859,1860,1,0,0,0,1860,
1861,5,17,0,0,1861,1862,3,72,36,0,1862,71,1,0,0,0,1863,1865,3,90,45,0,1864,
1866,3,74,37,0,1865,1864,1,0,0,0,1865,1866,1,0,0,0,1866,73,1,0,0,0,1867,
1869,5,645,0,0,1868,1870,7,7,0,0,1869,1868,1,0,0,0,1869,1870,1,0,0,0,1870,
1871,1,0,0,0,1871,1872,5,62,0,0,1872,1873,5,391,0,0,1873,75,1,0,0,0,1874,
1893,5,97,0,0,1875,1894,3,78,39,0,1876,1894,3,82,41,0,1877,1894,3,96,48,
0,1878,1894,3,94,47,0,1879,1894,3,98,49,0,1880,1894,3,112,56,0,1881,1894,
3,158,79,0,1882,1894,3,166,83,0,1883,1894,3,106,53,0,1884,1894,3,118,59,
0,1885,1894,3,124,62,0,1886,1894,3,170,85,0,1887,1888,4,38,26,0,1888,1894,
3,172,86,0,1889,1890,4,38,27,0,1890,1894,3,174,87,0,1891,1892,4,38,28,0,
1892,1894,3,126,63,0,1893,1875,1,0,0,0,1893,1876,1,0,0,0,1893,1877,1,0,0,
0,1893,1878,1,0,0,0,1893,1879,1,0,0,0,1893,1880,1,0,0,0,1893,1881,1,0,0,
0,1893,1882,1,0,0,0,1893,1883,1,0,0,0,1893,1884,1,0,0,0,1893,1885,1,0,0,
0,1893,1886,1,0,0,0,1893,1887,1,0,0,0,1893,1889,1,0,0,0,1893,1891,1,0,0,
0,1894,77,1,0,0,0,1895,1897,5,109,0,0,1896,1898,3,980,490,0,1897,1896,1,
0,0,0,1897,1898,1,0,0,0,1898,1899,1,0,0,0,1899,1903,3,1056,528,0,1900,1902,
3,80,40,0,1901,1900,1,0,0,0,1902,1905,1,0,0,0,1903,1901,1,0,0,0,1903,1904,
1,0,0,0,1904,79,1,0,0,0,1905,1903,1,0,0,0,1906,1911,3,952,476,0,1907,1911,
3,948,474,0,1908,1909,4,40,29,0,1909,1911,3,950,475,0,1910,1906,1,0,0,0,
1910,1907,1,0,0,0,1910,1908,1,0,0,0,1911,81,1,0,0,0,1912,1914,5,577,0,0,
1913,1912,1,0,0,0,1913,1914,1,0,0,0,1914,1915,1,0,0,0,1915,1917,5,574,0,
0,1916,1918,3,980,490,0,1917,1916,1,0,0,0,1917,1918,1,0,0,0,1918,1919,1,
0,0,0,1919,1942,3,1096,548,0,1920,1921,5,776,0,0,1921,1922,3,84,42,0,1922,
1923,5,777,0,0,1923,1925,1,0,0,0,1924,1920,1,0,0,0,1924,1925,1,0,0,0,1925,
1927,1,0,0,0,1926,1928,3,940,470,0,1927,1926,1,0,0,0,1927,1928,1,0,0,0,1928,
1930,1,0,0,0,1929,1931,3,954,477,0,1930,1929,1,0,0,0,1930,1931,1,0,0,0,1931,
1933,1,0,0,0,1932,1934,3,88,44,0,1933,1932,1,0,0,0,1933,1934,1,0,0,0,1934,
1943,1,0,0,0,1935,1936,5,275,0,0,1936,1943,3,1102,551,0,1937,1938,5,776,
0,0,1938,1939,5,275,0,0,1939,1940,3,1102,551,0,1940,1941,5,777,0,0,1941,
1943,1,0,0,0,1942,1924,1,0,0,0,1942,1935,1,0,0,0,1942,1937,1,0,0,0,1943,
83,1,0,0,0,1944,1949,3,86,43,0,1945,1946,5,773,0,0,1946,1948,3,86,43,0,1947,
1945,1,0,0,0,1948,1951,1,0,0,0,1949,1947,1,0,0,0,1949,1950,1,0,0,0,1950,
85,1,0,0,0,1951,1949,1,0,0,0,1952,1955,3,864,432,0,1953,1955,3,872,436,0,
1954,1952,1,0,0,0,1954,1953,1,0,0,0,1955,87,1,0,0,0,1956,1958,7,8,0,0,1957,
1956,1,0,0,0,1957,1958,1,0,0,0,1958,1960,1,0,0,0,1959,1961,5,17,0,0,1960,
1959,1,0,0,0,1960,1961,1,0,0,0,1961,1962,1,0,0,0,1962,1963,3,90,45,0,1963,
89,1,0,0,0,1964,1967,3,270,135,0,1965,1967,3,274,137,0,1966,1964,1,0,0,0,
1966,1965,1,0,0,0,1967,91,1,0,0,0,1968,1972,5,97,0,0,1969,1973,3,94,47,0,
1970,1973,3,96,48,0,1971,1973,3,98,49,0,1972,1969,1,0,0,0,1972,1970,1,0,
0,0,1972,1971,1,0,0,0,1973,1975,1,0,0,0,1974,1976,5,774,0,0,1975,1974,1,
0,0,0,1975,1976,1,0,0,0,1976,1977,1,0,0,0,1977,1978,5,0,0,1,1978,93,1,0,
0,0,1979,1981,3,976,488,0,1980,1979,1,0,0,0,1980,1981,1,0,0,0,1981,1982,
1,0,0,0,1982,1983,5,422,0,0,1983,1984,3,1060,530,0,1984,1993,5,776,0,0,1985,
1990,3,982,491,0,1986,1987,5,773,0,0,1987,1989,3,982,491,0,1988,1986,1,0,
0,0,1989,1992,1,0,0,0,1990,1988,1,0,0,0,1990,1991,1,0,0,0,1991,1994,1,0,
0,0,1992,1990,1,0,0,0,1993,1985,1,0,0,0,1993,1994,1,0,0,0,1994,1995,1,0,
0,0,1995,1999,5,777,0,0,1996,1998,3,100,50,0,1997,1996,1,0,0,0,1998,2001,
1,0,0,0,1999,1997,1,0,0,0,1999,2000,1,0,0,0,2000,2002,1,0,0,0,2001,1999,
1,0,0,0,2002,2003,3,784,392,0,2003,95,1,0,0,0,2004,2006,3,976,488,0,2005,
2004,1,0,0,0,2005,2006,1,0,0,0,2006,2007,1,0,0,0,2007,2008,5,206,0,0,2008,
2009,3,1064,532,0,2009,2018,5,776,0,0,2010,2015,3,984,492,0,2011,2012,5,
773,0,0,2012,2014,3,984,492,0,2013,2011,1,0,0,0,2014,2017,1,0,0,0,2015,2013,
1,0,0,0,2015,2016,1,0,0,0,2016,2019,1,0,0,0,2017,2015,1,0,0,0,2018,2010,
1,0,0,0,2018,2019,1,0,0,0,2019,2020,1,0,0,0,2020,2021,5,777,0,0,2021,2022,
5,474,0,0,2022,2026,3,988,494,0,2023,2025,3,100,50,0,2024,2023,1,0,0,0,2025,
2028,1,0,0,0,2026,2024,1,0,0,0,2026,2027,1,0,0,0,2027,2029,1,0,0,0,2028,
2026,1,0,0,0,2029,2030,3,784,392,0,2030,97,1,0,0,0,2031,2033,5,8,0,0,2032,
2031,1,0,0,0,2032,2033,1,0,0,0,2033,2034,1,0,0,0,2034,2035,5,206,0,0,2035,
2036,3,1088,544,0,2036,2037,5,474,0,0,2037,2038,7,9,0,0,2038,2039,5,520,
0,0,2039,2040,3,1160,580,0,2040,99,1,0,0,0,2041,2047,3,104,52,0,2042,2044,
5,371,0,0,2043,2042,1,0,0,0,2043,2044,1,0,0,0,2044,2045,1,0,0,0,2045,2047,
5,137,0,0,2046,2041,1,0,0,0,2046,2043,1,0,0,0,2047,101,1,0,0,0,2048,2050,
3,100,50,0,2049,2048,1,0,0,0,2050,2051,1,0,0,0,2051,2049,1,0,0,0,2051,2052,
1,0,0,0,2052,103,1,0,0,0,2053,2054,5,75,0,0,2054,2071,3,1160,580,0,2055,
2056,5,267,0,0,2056,2071,5,537,0,0,2057,2058,5,373,0,0,2058,2071,5,537,0,
0,2059,2060,5,90,0,0,2060,2071,5,537,0,0,2061,2062,5,433,0,0,2062,2063,5,
537,0,0,2063,2071,5,112,0,0,2064,2065,5,347,0,0,2065,2066,5,537,0,0,2066,
2071,5,112,0,0,2067,2068,5,537,0,0,2068,2069,5,496,0,0,2069,2071,7,10,0,
0,2070,2053,1,0,0,0,2070,2055,1,0,0,0,2070,2057,1,0,0,0,2070,2059,1,0,0,
0,2070,2061,1,0,0,0,2070,2064,1,0,0,0,2070,2067,1,0,0,0,2071,105,1,0,0,0,
2072,2074,3,1032,516,0,2073,2072,1,0,0,0,2073,2074,1,0,0,0,2074,2116,1,0,
0,0,2075,2077,5,609,0,0,2076,2075,1,0,0,0,2076,2077,1,0,0,0,2077,2078,1,
0,0,0,2078,2087,5,236,0,0,2079,2080,4,53,30,0,2080,2082,3,1050,525,0,2081,
2083,3,908,454,0,2082,2081,1,0,0,0,2082,2083,1,0,0,0,2083,2088,1,0,0,0,2084,
2086,3,108,54,0,2085,2084,1,0,0,0,2085,2086,1,0,0,0,2086,2088,1,0,0,0,2087,
2079,1,0,0,0,2087,2085,1,0,0,0,2088,2089,1,0,0,0,2089,2093,3,110,55,0,2090,
2092,3,902,451,0,2091,2090,1,0,0,0,2092,2095,1,0,0,0,2093,2091,1,0,0,0,2093,
2094,1,0,0,0,2094,2117,1,0,0,0,2095,2093,1,0,0,0,2096,2097,5,205,0,0,2097,
2098,5,236,0,0,2098,2099,3,1050,525,0,2099,2103,3,110,55,0,2100,2102,3,910,
455,0,2101,2100,1,0,0,0,2102,2105,1,0,0,0,2103,2101,1,0,0,0,2103,2104,1,
0,0,0,2104,2117,1,0,0,0,2105,2103,1,0,0,0,2106,2107,5,523,0,0,2107,2108,
5,236,0,0,2108,2109,3,1050,525,0,2109,2113,3,110,55,0,2110,2112,3,912,456,
0,2111,2110,1,0,0,0,2112,2115,1,0,0,0,2113,2111,1,0,0,0,2113,2114,1,0,0,
0,2114,2117,1,0,0,0,2115,2113,1,0,0,0,2116,2076,1,0,0,0,2116,2096,1,0,0,
0,2116,2106,1,0,0,0,2117,2119,1,0,0,0,2118,2120,3,46,23,0,2119,2118,1,0,
0,0,2119,2120,1,0,0,0,2120,107,1,0,0,0,2121,2124,3,1050,525,0,2122,2123,
5,621,0,0,2123,2125,3,900,450,0,2124,2122,1,0,0,0,2124,2125,1,0,0,0,2125,
2131,1,0,0,0,2126,2127,3,1050,525,0,2127,2128,5,599,0,0,2128,2129,3,900,
450,0,2129,2131,1,0,0,0,2130,2121,1,0,0,0,2130,2126,1,0,0,0,2131,109,1,0,
0,0,2132,2133,5,383,0,0,2133,2134,3,1102,551,0,2134,2135,3,898,449,0,2135,
111,1,0,0,0,2136,2137,5,288,0,0,2137,2138,5,217,0,0,2138,2139,3,1080,540,
0,2139,2140,5,4,0,0,2140,2141,7,11,0,0,2141,2143,3,1160,580,0,2142,2144,
3,114,57,0,2143,2142,1,0,0,0,2143,2144,1,0,0,0,2144,113,1,0,0,0,2145,2152,
3,116,58,0,2146,2148,5,773,0,0,2147,2146,1,0,0,0,2147,2148,1,0,0,0,2148,
2149,1,0,0,0,2149,2151,3,116,58,0,2150,2147,1,0,0,0,2151,2154,1,0,0,0,2152,
2150,1,0,0,0,2152,2153,1,0,0,0,2153,115,1,0,0,0,2154,2152,1,0,0,0,2155,2162,
3,136,68,0,2156,2162,3,138,69,0,2157,2162,3,146,73,0,2158,2162,3,148,74,
0,2159,2162,3,150,75,0,2160,2162,3,152,76,0,2161,2155,1,0,0,0,2161,2156,
1,0,0,0,2161,2157,1,0,0,0,2161,2158,1,0,0,0,2161,2159,1,0,0,0,2161,2160,
1,0,0,0,2162,117,1,0,0,0,2163,2164,5,503,0,0,2164,2165,3,1090,545,0,2165,
2166,5,199,0,0,2166,2167,5,112,0,0,2167,2168,5,648,0,0,2168,2169,3,1180,
590,0,2169,2170,3,120,60,0,2170,119,1,0,0,0,2171,2172,5,390,0,0,2172,2173,
5,776,0,0,2173,2178,3,122,61,0,2174,2175,5,773,0,0,2175,2177,3,122,61,0,
2176,2174,1,0,0,0,2177,2180,1,0,0,0,2178,2176,1,0,0,0,2178,2179,1,0,0,0,
2179,2181,1,0,0,0,2180,2178,1,0,0,0,2181,2182,5,777,0,0,2182,121,1,0,0,0,
2183,2184,5,224,0,0,2184,2198,3,1160,580,0,2185,2186,5,109,0,0,2186,2198,
3,1160,580,0,2187,2188,5,618,0,0,2188,2198,3,1160,580,0,2189,2190,5,406,
0,0,2190,2198,3,1160,580,0,2191,2192,5,519,0,0,2192,2198,3,1160,580,0,2193,
2194,5,398,0,0,2194,2198,3,1160,580,0,2195,2196,5,413,0,0,2196,2198,3,1140,
570,0,2197,2183,1,0,0,0,2197,2185,1,0,0,0,2197,2187,1,0,0,0,2197,2189,1,
0,0,0,2197,2191,1,0,0,0,2197,2193,1,0,0,0,2197,2195,1,0,0,0,2198,123,1,0,
0,0,2199,2200,5,572,0,0,2200,2201,3,1076,538,0,2201,2206,3,128,64,0,2202,
2203,5,620,0,0,2203,2204,5,288,0,0,2204,2205,5,217,0,0,2205,2207,3,1082,
541,0,2206,2202,1,0,0,0,2206,2207,1,0,0,0,2207,2209,1,0,0,0,2208,2210,3,
132,66,0,2209,2208,1,0,0,0,2209,2210,1,0,0,0,2210,125,1,0,0,0,2211,2212,
5,605,0,0,2212,2213,5,572,0,0,2213,2214,3,1076,538,0,2214,2215,5,4,0,0,2215,
2217,3,130,65,0,2216,2218,3,58,29,0,2217,2216,1,0,0,0,2217,2218,1,0,0,0,
2218,127,1,0,0,0,2219,2222,4,64,31,0,2220,2221,5,4,0,0,2221,2223,3,130,65,
0,2222,2220,1,0,0,0,2222,2223,1,0,0,0,2223,2227,1,0,0,0,2224,2225,5,4,0,
0,2225,2227,3,130,65,0,2226,2219,1,0,0,0,2226,2224,1,0,0,0,2227,129,1,0,
0,0,2228,2229,5,111,0,0,2229,2230,3,1160,580,0,2230,131,1,0,0,0,2231,2238,
3,134,67,0,2232,2234,5,773,0,0,2233,2232,1,0,0,0,2233,2234,1,0,0,0,2234,
2235,1,0,0,0,2235,2237,3,134,67,0,2236,2233,1,0,0,0,2237,2240,1,0,0,0,2238,
2236,1,0,0,0,2238,2239,1,0,0,0,2239,133,1,0,0,0,2240,2238,1,0,0,0,2241,2254,
3,136,68,0,2242,2254,3,140,70,0,2243,2254,3,142,71,0,2244,2254,3,144,72,
0,2245,2254,3,146,73,0,2246,2254,3,148,74,0,2247,2254,3,150,75,0,2248,2254,
3,152,76,0,2249,2250,4,67,32,0,2250,2254,3,154,77,0,2251,2252,4,67,33,0,
2252,2254,3,156,78,0,2253,2241,1,0,0,0,2253,2242,1,0,0,0,2253,2243,1,0,0,
0,2253,2244,1,0,0,0,2253,2245,1,0,0,0,2253,2246,1,0,0,0,2253,2247,1,0,0,
0,2253,2248,1,0,0,0,2253,2249,1,0,0,0,2253,2251,1,0,0,0,2254,135,1,0,0,0,
2255,2257,5,238,0,0,2256,2258,5,750,0,0,2257,2256,1,0,0,0,2257,2258,1,0,
0,0,2258,2259,1,0,0,0,2259,2260,3,1186,593,0,2260,137,1,0,0,0,2261,2263,
7,12,0,0,2262,2264,5,750,0,0,2263,2262,1,0,0,0,2263,2264,1,0,0,0,2264,2265,
1,0,0,0,2265,2266,3,1186,593,0,2266,139,1,0,0,0,2267,2269,5,23,0,0,2268,
2270,5,750,0,0,2269,2268,1,0,0,0,2269,2270,1,0,0,0,2270,2271,1,0,0,0,2271,
2272,3,1186,593,0,2272,141,1,0,0,0,2273,2275,5,324,0,0,2274,2276,5,750,0,
0,2275,2274,1,0,0,0,2275,2276,1,0,0,0,2276,2277,1,0,0,0,2277,2278,3,1186,
593,0,2278,143,1,0,0,0,2279,2281,5,181,0,0,2280,2282,5,750,0,0,2281,2280,
1,0,0,0,2281,2282,1,0,0,0,2282,2283,1,0,0,0,2283,2284,3,1186,593,0,2284,
145,1,0,0,0,2285,2287,5,368,0,0,2286,2288,5,750,0,0,2287,2286,1,0,0,0,2287,
2288,1,0,0,0,2288,2289,1,0,0,0,2289,2290,3,1142,571,0,2290,147,1,0,0,0,2291,
2293,5,553,0,0,2292,2291,1,0,0,0,2292,2293,1,0,0,0,2293,2294,1,0,0,0,2294,
2296,5,163,0,0,2295,2297,5,750,0,0,2296,2295,1,0,0,0,2296,2297,1,0,0,0,2297,
2298,1,0,0,0,2298,2299,3,1094,547,0,2299,149,1,0,0,0,2300,2301,7,13,0,0,
2301,151,1,0,0,0,2302,2304,5,75,0,0,2303,2305,5,750,0,0,2304,2303,1,0,0,
0,2304,2305,1,0,0,0,2305,2306,1,0,0,0,2306,2307,3,1160,580,0,2307,153,1,
0,0,0,2308,2310,5,189,0,0,2309,2311,5,750,0,0,2310,2309,1,0,0,0,2310,2311,
1,0,0,0,2311,2312,1,0,0,0,2312,2313,3,1186,593,0,2313,155,1,0,0,0,2314,2316,
5,158,0,0,2315,2317,5,750,0,0,2316,2315,1,0,0,0,2316,2317,1,0,0,0,2317,2318,
1,0,0,0,2318,2319,3,1154,577,0,2319,157,1,0,0,0,2320,2322,3,160,80,0,2321,
2320,1,0,0,0,2321,2322,1,0,0,0,2322,2324,1,0,0,0,2323,2325,3,976,488,0,2324,
2323,1,0,0,0,2324,2325,1,0,0,0,2325,2327,1,0,0,0,2326,2328,3,164,82,0,2327,
2326,1,0,0,0,2327,2328,1,0,0,0,2328,2329,1,0,0,0,2329,2330,5,636,0,0,2330,
2331,3,1072,536,0,2331,2332,3,70,35,0,2332,159,1,0,0,0,2333,2334,5,394,0,
0,2334,2336,5,458,0,0,2335,2337,3,162,81,0,2336,2335,1,0,0,0,2336,2337,1,
0,0,0,2337,2340,1,0,0,0,2338,2340,3,162,81,0,2339,2333,1,0,0,0,2339,2338,
1,0,0,0,2340,161,1,0,0,0,2341,2342,5,9,0,0,2342,2343,5,750,0,0,2343,2344,
7,14,0,0,2344,163,1,0,0,0,2345,2346,5,537,0,0,2346,2347,5,496,0,0,2347,2348,
7,10,0,0,2348,165,1,0,0,0,2349,2351,3,976,488,0,2350,2349,1,0,0,0,2350,2351,
1,0,0,0,2351,2352,1,0,0,0,2352,2353,5,594,0,0,2353,2354,3,1068,534,0,2354,
2355,7,15,0,0,2355,2356,7,16,0,0,2356,2357,5,383,0,0,2357,2358,3,1102,551,
0,2358,2359,5,200,0,0,2359,2360,5,153,0,0,2360,2362,5,487,0,0,2361,2363,
3,168,84,0,2362,2361,1,0,0,0,2362,2363,1,0,0,0,2363,2364,1,0,0,0,2364,2365,
3,784,392,0,2365,167,1,0,0,0,2366,2367,4,84,34,0,2367,2368,7,17,0,0,2368,
2369,3,1180,590,0,2369,169,1,0,0,0,2370,2372,3,976,488,0,2371,2370,1,0,0,
0,2371,2372,1,0,0,0,2372,2373,1,0,0,0,2373,2375,5,170,0,0,2374,2376,3,980,
490,0,2375,2374,1,0,0,0,2375,2376,1,0,0,0,2376,2377,1,0,0,0,2377,2378,3,
1084,542,0,2378,2379,5,383,0,0,2379,2380,5,490,0,0,2380,2387,3,862,431,0,
2381,2382,5,383,0,0,2382,2384,5,79,0,0,2383,2385,5,371,0,0,2384,2383,1,0,
0,0,2384,2385,1,0,0,0,2385,2386,1,0,0,0,2386,2388,5,418,0,0,2387,2381,1,
0,0,0,2387,2388,1,0,0,0,2388,2395,1,0,0,0,2389,2396,5,156,0,0,2390,2393,
5,140,0,0,2391,2392,5,383,0,0,2392,2394,5,514,0,0,2393,2391,1,0,0,0,2393,
2394,1,0,0,0,2394,2396,1,0,0,0,2395,2389,1,0,0,0,2395,2390,1,0,0,0,2395,
2396,1,0,0,0,2396,2399,1,0,0,0,2397,2398,5,75,0,0,2398,2400,3,1160,580,0,
2399,2397,1,0,0,0,2399,2400,1,0,0,0,2400,2401,1,0,0,0,2401,2402,5,147,0,
0,2402,2403,3,784,392,0,2403,171,1,0,0,0,2404,2406,5,659,0,0,2405,2407,3,
980,490,0,2406,2405,1,0,0,0,2406,2407,1,0,0,0,2407,2408,1,0,0,0,2408,2409,
3,560,280,0,2409,173,1,0,0,0,2410,2411,5,394,0,0,2411,2412,5,458,0,0,2412,
2413,5,523,0,0,2413,2414,5,718,0,0,2414,2415,5,710,0,0,2415,2419,3,1146,
573,0,2416,2418,3,176,88,0,2417,2416,1,0,0,0,2418,2421,1,0,0,0,2419,2417,
1,0,0,0,2419,2420,1,0,0,0,2420,2436,1,0,0,0,2421,2419,1,0,0,0,2422,2423,
5,523,0,0,2423,2424,5,718,0,0,2424,2426,5,710,0,0,2425,2427,3,980,490,0,
2426,2425,1,0,0,0,2426,2427,1,0,0,0,2427,2428,1,0,0,0,2428,2432,3,1146,573,
0,2429,2431,3,176,88,0,2430,2429,1,0,0,0,2431,2434,1,0,0,0,2432,2430,1,0,
0,0,2432,2433,1,0,0,0,2433,2436,1,0,0,0,2434,2432,1,0,0,0,2435,2410,1,0,
0,0,2435,2422,1,0,0,0,2436,175,1,0,0,0,2437,2438,5,357,0,0,2438,2439,5,580,
0,0,2439,2453,3,1162,581,0,2440,2441,5,715,0,0,2441,2442,5,580,0,0,2442,
2453,3,1162,581,0,2443,2444,5,717,0,0,2444,2445,3,1162,581,0,2445,2446,5,
230,0,0,2446,2447,5,45,0,0,2447,2448,3,1146,573,0,2448,2453,1,0,0,0,2449,
2450,5,716,0,0,2450,2451,5,580,0,0,2451,2453,3,1162,581,0,2452,2437,1,0,
0,0,2452,2440,1,0,0,0,2452,2443,1,0,0,0,2452,2449,1,0,0,0,2453,177,1,0,0,
0,2454,2472,5,148,0,0,2455,2473,3,180,90,0,2456,2473,3,182,91,0,2457,2473,
3,184,92,0,2458,2473,3,186,93,0,2459,2473,3,188,94,0,2460,2473,3,190,95,
0,2461,2473,3,194,97,0,2462,2473,3,196,98,0,2463,2473,3,198,99,0,2464,2473,
3,200,100,0,2465,2473,3,202,101,0,2466,2467,4,89,35,0,2467,2473,3,204,102,
0,2468,2469,4,89,36,0,2469,2473,3,206,103,0,2470,2471,4,89,37,0,2471,2473,
3,208,104,0,2472,2455,1,0,0,0,2472,2456,1,0,0,0,2472,2457,1,0,0,0,2472,2458,
1,0,0,0,2472,2459,1,0,0,0,2472,2460,1,0,0,0,2472,2461,1,0,0,0,2472,2462,
1,0,0,0,2472,2463,1,0,0,0,2472,2464,1,0,0,0,2472,2465,1,0,0,0,2472,2466,
1,0,0,0,2472,2468,1,0,0,0,2472,2470,1,0,0,0,2473,179,1,0,0,0,2474,2476,5,
109,0,0,2475,2477,3,978,489,0,2476,2475,1,0,0,0,2476,2477,1,0,0,0,2477,2478,
1,0,0,0,2478,2479,3,1058,529,0,2479,181,1,0,0,0,2480,2482,5,170,0,0,2481,
2483,3,978,489,0,2482,2481,1,0,0,0,2482,2483,1,0,0,0,2483,2484,1,0,0,0,2484,
2485,3,1086,543,0,2485,183,1,0,0,0,2486,2488,5,206,0,0,2487,2489,3,978,489,
0,2488,2487,1,0,0,0,2488,2489,1,0,0,0,2489,2490,1,0,0,0,2490,2491,3,1066,
533,0,2491,185,1,0,0,0,2492,2494,5,422,0,0,2493,2495,3,978,489,0,2494,2493,
1,0,0,0,2494,2495,1,0,0,0,2495,2496,1,0,0,0,2496,2497,3,1062,531,0,2497,
187,1,0,0,0,2498,2500,3,1032,516,0,2499,2498,1,0,0,0,2499,2500,1,0,0,0,2500,
2501,1,0,0,0,2501,2502,5,236,0,0,2502,2503,3,1052,526,0,2503,2504,5,383,
0,0,2504,2506,3,1102,551,0,2505,2507,3,46,23,0,2506,2505,1,0,0,0,2506,2507,
1,0,0,0,2507,189,1,0,0,0,2508,2509,5,288,0,0,2509,2510,5,217,0,0,2510,2521,
3,1082,541,0,2511,2518,3,192,96,0,2512,2514,5,773,0,0,2513,2512,1,0,0,0,
2513,2514,1,0,0,0,2514,2515,1,0,0,0,2515,2517,3,192,96,0,2516,2513,1,0,0,
0,2517,2520,1,0,0,0,2518,2516,1,0,0,0,2518,2519,1,0,0,0,2519,2522,1,0,0,
0,2520,2518,1,0,0,0,2521,2511,1,0,0,0,2521,2522,1,0,0,0,2522,191,1,0,0,0,
2523,2526,3,150,75,0,2524,2526,3,148,74,0,2525,2523,1,0,0,0,2525,2524,1,
0,0,0,2526,193,1,0,0,0,2527,2529,5,503,0,0,2528,2530,3,978,489,0,2529,2528,
1,0,0,0,2529,2530,1,0,0,0,2530,2531,1,0,0,0,2531,2532,3,1092,546,0,2532,
195,1,0,0,0,2533,2535,5,577,0,0,2534,2533,1,0,0,0,2534,2535,1,0,0,0,2535,
2536,1,0,0,0,2536,2538,7,18,0,0,2537,2539,3,978,489,0,2538,2537,1,0,0,0,
2538,2539,1,0,0,0,2539,2540,1,0,0,0,2540,2542,3,1104,552,0,2541,2543,7,2,
0,0,2542,2541,1,0,0,0,2542,2543,1,0,0,0,2543,197,1,0,0,0,2544,2545,5,572,
0,0,2545,2556,3,1078,539,0,2546,2553,3,192,96,0,2547,2549,5,773,0,0,2548,
2547,1,0,0,0,2548,2549,1,0,0,0,2549,2550,1,0,0,0,2550,2552,3,192,96,0,2551,
2548,1,0,0,0,2552,2555,1,0,0,0,2553,2551,1,0,0,0,2553,2554,1,0,0,0,2554,
2557,1,0,0,0,2555,2553,1,0,0,0,2556,2546,1,0,0,0,2556,2557,1,0,0,0,2557,
199,1,0,0,0,2558,2560,5,594,0,0,2559,2561,3,978,489,0,2560,2559,1,0,0,0,
2560,2561,1,0,0,0,2561,2562,1,0,0,0,2562,2563,3,1070,535,0,2563,201,1,0,
0,0,2564,2566,5,636,0,0,2565,2567,3,978,489,0,2566,2565,1,0,0,0,2566,2567,
1,0,0,0,2567,2568,1,0,0,0,2568,2570,3,992,496,0,2569,2571,7,2,0,0,2570,2569,
1,0,0,0,2570,2571,1,0,0,0,2571,203,1,0,0,0,2572,2574,5,659,0,0,2573,2575,
3,978,489,0,2574,2573,1,0,0,0,2574,2575,1,0,0,0,2575,2576,1,0,0,0,2576,2577,
3,560,280,0,2577,205,1,0,0,0,2578,2579,5,523,0,0,2579,2580,5,718,0,0,2580,
2582,5,710,0,0,2581,2583,3,978,489,0,2582,2581,1,0,0,0,2582,2583,1,0,0,0,
2583,2584,1,0,0,0,2584,2585,3,1146,573,0,2585,207,1,0,0,0,2586,2587,5,605,
0,0,2587,2588,5,572,0,0,2588,2590,3,1078,539,0,2589,2591,3,58,29,0,2590,
2589,1,0,0,0,2590,2591,1,0,0,0,2591,209,1,0,0,0,2592,2593,5,453,0,0,2593,
2594,7,18,0,0,2594,2599,3,212,106,0,2595,2596,5,773,0,0,2596,2598,3,212,
106,0,2597,2595,1,0,0,0,2598,2601,1,0,0,0,2599,2597,1,0,0,0,2599,2600,1,
0,0,0,2600,211,1,0,0,0,2601,2599,1,0,0,0,2602,2603,3,1102,551,0,2603,2604,
5,590,0,0,2604,2605,3,1096,548,0,2605,213,1,0,0,0,2606,2608,5,597,0,0,2607,
2609,5,574,0,0,2608,2607,1,0,0,0,2608,2609,1,0,0,0,2609,2610,1,0,0,0,2610,
2611,3,1102,551,0,2611,215,1,0,0,0,2612,2613,5,234,0,0,2613,2614,5,574,0,
0,2614,2615,5,203,0,0,2615,2616,3,1164,582,0,2616,217,1,0,0,0,2617,2618,
5,48,0,0,2618,2624,3,1062,531,0,2619,2621,5,776,0,0,2620,2622,3,756,378,
0,2621,2620,1,0,0,0,2621,2622,1,0,0,0,2622,2623,1,0,0,0,2623,2625,5,777,
0,0,2624,2619,1,0,0,0,2624,2625,1,0,0,0,2625,219,1,0,0,0,2626,2627,4,110,
38,0,2627,2629,3,320,160,0,2628,2626,1,0,0,0,2628,2629,1,0,0,0,2629,2630,
1,0,0,0,2630,2634,5,133,0,0,2631,2633,3,224,112,0,2632,2631,1,0,0,0,2633,
2636,1,0,0,0,2634,2632,1,0,0,0,2634,2635,1,0,0,0,2635,2669,1,0,0,0,2636,
2634,1,0,0,0,2637,2661,5,203,0,0,2638,2639,3,1106,553,0,2639,2640,5,621,
0,0,2640,2642,3,334,167,0,2641,2643,3,358,179,0,2642,2641,1,0,0,0,2642,2643,
1,0,0,0,2643,2662,1,0,0,0,2644,2647,3,1102,551,0,2645,2646,4,110,39,0,2646,
2648,3,398,199,0,2647,2645,1,0,0,0,2647,2648,1,0,0,0,2648,2650,1,0,0,0,2649,
2651,3,222,111,0,2650,2649,1,0,0,0,2650,2651,1,0,0,0,2651,2653,1,0,0,0,2652,
2654,3,358,179,0,2653,2652,1,0,0,0,2653,2654,1,0,0,0,2654,2656,1,0,0,0,2655,
2657,3,328,164,0,2656,2655,1,0,0,0,2656,2657,1,0,0,0,2657,2659,1,0,0,0,2658,
2660,3,286,143,0,2659,2658,1,0,0,0,2659,2660,1,0,0,0,2660,2662,1,0,0,0,2661,
2638,1,0,0,0,2661,2644,1,0,0,0,2662,2670,1,0,0,0,2663,2664,3,1106,553,0,
2664,2665,5,203,0,0,2665,2667,3,334,167,0,2666,2668,3,358,179,0,2667,2666,
1,0,0,0,2667,2668,1,0,0,0,2668,2670,1,0,0,0,2669,2637,1,0,0,0,2669,2663,
1,0,0,0,2670,221,1,0,0,0,2671,2672,4,111,40,0,2672,2673,5,405,0,0,2673,2674,
5,776,0,0,2674,2675,3,1130,565,0,2675,2676,5,777,0,0,2676,223,1,0,0,0,2677,
2678,7,19,0,0,2678,225,1,0,0,0,2679,2684,5,147,0,0,2680,2681,4,113,41,0,
2681,2685,3,756,378,0,2682,2683,4,113,42,0,2683,2685,3,352,176,0,2684,2680,
1,0,0,0,2684,2682,1,0,0,0,2685,227,1,0,0,0,2686,2704,5,219,0,0,2687,2688,
3,1102,551,0,2688,2690,5,387,0,0,2689,2691,3,398,199,0,2690,2689,1,0,0,0,
2690,2691,1,0,0,0,2691,2705,1,0,0,0,2692,2702,3,1128,564,0,2693,2703,5,66,
0,0,2694,2695,5,435,0,0,2695,2697,3,230,115,0,2696,2698,3,358,179,0,2697,
2696,1,0,0,0,2697,2698,1,0,0,0,2698,2700,1,0,0,0,2699,2701,3,284,142,0,2700,
2699,1,0,0,0,2700,2701,1,0,0,0,2701,2703,1,0,0,0,2702,2693,1,0,0,0,2702,
2694,1,0,0,0,2703,2705,1,0,0,0,2704,2687,1,0,0,0,2704,2692,1,0,0,0,2705,
229,1,0,0,0,2706,2717,7,20,0,0,2707,2714,3,1128,564,0,2708,2715,7,21,0,0,
2709,2710,7,22,0,0,2710,2711,5,776,0,0,2711,2712,3,246,123,0,2712,2713,5,
777,0,0,2713,2715,1,0,0,0,2714,2708,1,0,0,0,2714,2709,1,0,0,0,2715,2717,
1,0,0,0,2716,2706,1,0,0,0,2716,2707,1,0,0,0,2717,231,1,0,0,0,2718,2720,5,
242,0,0,2719,2721,3,234,117,0,2720,2719,1,0,0,0,2720,2721,1,0,0,0,2721,2723,
1,0,0,0,2722,2724,5,232,0,0,2723,2722,1,0,0,0,2723,2724,1,0,0,0,2724,2726,
1,0,0,0,2725,2727,5,248,0,0,2726,2725,1,0,0,0,2726,2727,1,0,0,0,2727,2728,
1,0,0,0,2728,2730,3,1102,551,0,2729,2731,3,1036,518,0,2730,2729,1,0,0,0,
2730,2731,1,0,0,0,2731,2744,1,0,0,0,2732,2735,3,236,118,0,2733,2734,4,116,
43,0,2734,2736,3,248,124,0,2735,2733,1,0,0,0,2735,2736,1,0,0,0,2736,2745,
1,0,0,0,2737,2738,5,506,0,0,2738,2741,3,994,497,0,2739,2740,4,116,44,0,2740,
2742,3,248,124,0,2741,2739,1,0,0,0,2741,2742,1,0,0,0,2742,2745,1,0,0,0,2743,
2745,3,242,121,0,2744,2732,1,0,0,0,2744,2737,1,0,0,0,2744,2743,1,0,0,0,2745,
2747,1,0,0,0,2746,2748,3,250,125,0,2747,2746,1,0,0,0,2747,2748,1,0,0,0,2748,
233,1,0,0,0,2749,2750,7,23,0,0,2750,235,1,0,0,0,2751,2753,5,776,0,0,2752,
2754,3,238,119,0,2753,2752,1,0,0,0,2753,2754,1,0,0,0,2754,2755,1,0,0,0,2755,
2757,5,777,0,0,2756,2751,1,0,0,0,2756,2757,1,0,0,0,2757,2758,1,0,0,0,2758,
2759,3,240,120,0,2759,237,1,0,0,0,2760,2765,3,1048,524,0,2761,2762,5,773,
0,0,2762,2764,3,1048,524,0,2763,2761,1,0,0,0,2764,2767,1,0,0,0,2765,2763,
1,0,0,0,2765,2766,1,0,0,0,2766,239,1,0,0,0,2767,2765,1,0,0,0,2768,2769,7,
24,0,0,2769,2770,3,244,122,0,2770,241,1,0,0,0,2771,2779,3,90,45,0,2772,2774,
5,776,0,0,2773,2775,3,238,119,0,2774,2773,1,0,0,0,2774,2775,1,0,0,0,2775,
2776,1,0,0,0,2776,2777,5,777,0,0,2777,2779,3,90,45,0,2778,2771,1,0,0,0,2778,
2772,1,0,0,0,2779,243,1,0,0,0,2780,2782,5,776,0,0,2781,2783,3,246,123,0,
2782,2781,1,0,0,0,2782,2783,1,0,0,0,2783,2784,1,0,0,0,2784,2793,5,777,0,
0,2785,2786,5,773,0,0,2786,2788,5,776,0,0,2787,2789,3,246,123,0,2788,2787,
1,0,0,0,2788,2789,1,0,0,0,2789,2790,1,0,0,0,2790,2792,5,777,0,0,2791,2785,
1,0,0,0,2792,2795,1,0,0,0,2793,2791,1,0,0,0,2793,2794,1,0,0,0,2794,245,1,
0,0,0,2795,2793,1,0,0,0,2796,2799,3,676,338,0,2797,2799,5,128,0,0,2798,2796,
1,0,0,0,2798,2797,1,0,0,0,2799,2807,1,0,0,0,2800,2803,5,773,0,0,2801,2804,
3,676,338,0,2802,2804,5,128,0,0,2803,2801,1,0,0,0,2803,2802,1,0,0,0,2804,
2806,1,0,0,0,2805,2800,1,0,0,0,2806,2809,1,0,0,0,2807,2805,1,0,0,0,2807,
2808,1,0,0,0,2808,247,1,0,0,0,2809,2807,1,0,0,0,2810,2811,5,17,0,0,2811,
2813,3,1128,564,0,2812,2814,3,1044,522,0,2813,2812,1,0,0,0,2813,2814,1,0,
0,0,2814,249,1,0,0,0,2815,2816,5,383,0,0,2816,2817,5,151,0,0,2817,2818,5,
265,0,0,2818,2819,5,614,0,0,2819,2820,3,994,497,0,2820,251,1,0,0,0,2821,
2822,5,281,0,0,2822,2824,3,254,127,0,2823,2825,7,25,0,0,2824,2823,1,0,0,
0,2824,2825,1,0,0,0,2825,2827,1,0,0,0,2826,2828,5,284,0,0,2827,2826,1,0,
0,0,2827,2828,1,0,0,0,2828,2829,1,0,0,0,2829,2830,5,237,0,0,2830,2832,3,
1160,580,0,2831,2833,7,8,0,0,2832,2831,1,0,0,0,2832,2833,1,0,0,0,2833,2834,
1,0,0,0,2834,2835,5,248,0,0,2835,2836,5,574,0,0,2836,2838,3,1102,551,0,2837,
2839,3,1036,518,0,2838,2837,1,0,0,0,2838,2839,1,0,0,0,2839,2841,1,0,0,0,
2840,2842,3,998,499,0,2841,2840,1,0,0,0,2841,2842,1,0,0,0,2842,2844,1,0,
0,0,2843,2845,3,256,128,0,2844,2843,1,0,0,0,2844,2845,1,0,0,0,2845,2847,
1,0,0,0,2846,2848,3,1000,500,0,2847,2846,1,0,0,0,2847,2848,1,0,0,0,2848,
2850,1,0,0,0,2849,2851,3,1004,502,0,2850,2849,1,0,0,0,2850,2851,1,0,0,0,
2851,2852,1,0,0,0,2852,2853,3,258,129,0,2853,253,1,0,0,0,2854,2855,7,26,
0,0,2855,255,1,0,0,0,2856,2857,5,484,0,0,2857,2858,5,230,0,0,2858,2859,5,
45,0,0,2859,2860,3,1156,578,0,2860,257,1,0,0,0,2861,2862,5,232,0,0,2862,
2863,5,747,0,0,2863,2865,7,27,0,0,2864,2861,1,0,0,0,2864,2865,1,0,0,0,2865,
2867,1,0,0,0,2866,2868,3,260,130,0,2867,2866,1,0,0,0,2867,2868,1,0,0,0,2868,
2871,1,0,0,0,2869,2870,5,506,0,0,2870,2872,3,994,497,0,2871,2869,1,0,0,0,
2871,2872,1,0,0,0,2872,259,1,0,0,0,2873,2875,5,776,0,0,2874,2876,3,262,131,
0,2875,2874,1,0,0,0,2875,2876,1,0,0,0,2876,2877,1,0,0,0,2877,2878,5,777,
0,0,2878,261,1,0,0,0,2879,2882,3,1046,523,0,2880,2882,3,742,371,0,2881,2879,
1,0,0,0,2881,2880,1,0,0,0,2882,2890,1,0,0,0,2883,2886,5,773,0,0,2884,2887,
3,1046,523,0,2885,2887,3,742,371,0,2886,2884,1,0,0,0,2886,2885,1,0,0,0,2887,
2889,1,0,0,0,2888,2883,1,0,0,0,2889,2892,1,0,0,0,2890,2888,1,0,0,0,2890,
2891,1,0,0,0,2891,263,1,0,0,0,2892,2890,1,0,0,0,2893,2895,5,458,0,0,2894,
2896,7,28,0,0,2895,2894,1,0,0,0,2895,2896,1,0,0,0,2896,2898,1,0,0,0,2897,
2899,5,248,0,0,2898,2897,1,0,0,0,2898,2899,1,0,0,0,2899,2900,1,0,0,0,2900,
2902,3,1102,551,0,2901,2903,3,1036,518,0,2902,2901,1,0,0,0,2902,2903,1,0,
0,0,2903,2908,1,0,0,0,2904,2909,3,236,118,0,2905,2906,5,506,0,0,2906,2909,
3,994,497,0,2907,2909,3,242,121,0,2908,2904,1,0,0,0,2908,2905,1,0,0,0,2908,
2907,1,0,0,0,2909,265,1,0,0,0,2910,2912,3,270,135,0,2911,2913,3,344,172,
0,2912,2911,1,0,0,0,2912,2913,1,0,0,0,2913,2917,1,0,0,0,2914,2917,3,274,
137,0,2915,2917,3,268,134,0,2916,2910,1,0,0,0,2916,2914,1,0,0,0,2916,2915,
1,0,0,0,2917,267,1,0,0,0,2918,2919,5,776,0,0,2919,2920,3,268,134,0,2920,
2921,5,777,0,0,2921,2931,1,0,0,0,2922,2923,3,270,135,0,2923,2925,3,292,146,
0,2924,2926,3,344,172,0,2925,2924,1,0,0,0,2925,2926,1,0,0,0,2926,2931,1,
0,0,0,2927,2928,3,344,172,0,2928,2929,3,292,146,0,2929,2931,1,0,0,0,2930,
2918,1,0,0,0,2930,2922,1,0,0,0,2930,2927,1,0,0,0,2931,269,1,0,0,0,2932,2933,
4,135,45,0,2933,2935,3,320,160,0,2934,2932,1,0,0,0,2934,2935,1,0,0,0,2935,
2950,1,0,0,0,2936,2938,3,272,136,0,2937,2939,3,328,164,0,2938,2937,1,0,0,
0,2938,2939,1,0,0,0,2939,2941,1,0,0,0,2940,2942,3,284,142,0,2941,2940,1,
0,0,0,2941,2942,1,0,0,0,2942,2951,1,0,0,0,2943,2945,3,274,137,0,2944,2946,
3,328,164,0,2945,2944,1,0,0,0,2945,2946,1,0,0,0,2946,2948,1,0,0,0,2947,2949,
3,284,142,0,2948,2947,1,0,0,0,2948,2949,1,0,0,0,2949,2951,1,0,0,0,2950,2936,
1,0,0,0,2950,2943,1,0,0,0,2951,2954,1,0,0,0,2952,2953,4,135,46,0,2953,2955,
3,294,147,0,2954,2952,1,0,0,0,2954,2955,1,0,0,0,2955,271,1,0,0,0,2956,2967,
3,276,138,0,2957,2958,3,274,137,0,2958,2960,5,608,0,0,2959,2961,3,396,198,
0,2960,2959,1,0,0,0,2960,2961,1,0,0,0,2961,2964,1,0,0,0,2962,2965,3,276,
138,0,2963,2965,3,274,137,0,2964,2962,1,0,0,0,2964,2963,1,0,0,0,2965,2967,
1,0,0,0,2966,2956,1,0,0,0,2966,2957,1,0,0,0,2967,2978,1,0,0,0,2968,2970,
5,608,0,0,2969,2971,3,396,198,0,2970,2969,1,0,0,0,2970,2971,1,0,0,0,2971,
2974,1,0,0,0,2972,2975,3,276,138,0,2973,2975,3,274,137,0,2974,2972,1,0,0,
0,2974,2973,1,0,0,0,2975,2977,1,0,0,0,2976,2968,1,0,0,0,2977,2980,1,0,0,
0,2978,2976,1,0,0,0,2978,2979,1,0,0,0,2979,273,1,0,0,0,2980,2978,1,0,0,0,
2981,2987,5,776,0,0,2982,2988,3,274,137,0,2983,2985,3,270,135,0,2984,2986,
3,344,172,0,2985,2984,1,0,0,0,2985,2986,1,0,0,0,2986,2988,1,0,0,0,2987,2982,
1,0,0,0,2987,2983,1,0,0,0,2988,2989,1,0,0,0,2989,2990,5,777,0,0,2990,275,
1,0,0,0,2991,2997,3,278,139,0,2992,2993,4,138,47,0,2993,2997,3,336,168,0,
2994,2995,4,138,48,0,2995,2997,3,338,169,0,2996,2991,1,0,0,0,2996,2992,1,
0,0,0,2996,2994,1,0,0,0,2997,277,1,0,0,0,2998,3002,5,497,0,0,2999,3001,3,
342,171,0,3000,2999,1,0,0,0,3001,3004,1,0,0,0,3002,3000,1,0,0,0,3002,3003,
1,0,0,0,3003,3005,1,0,0,0,3004,3002,1,0,0,0,3005,3007,3,352,176,0,3006,3008,
3,292,146,0,3007,3006,1,0,0,0,3007,3008,1,0,0,0,3008,3010,1,0,0,0,3009,3011,
3,332,166,0,3010,3009,1,0,0,0,3010,3011,1,0,0,0,3011,3013,1,0,0,0,3012,3014,
3,358,179,0,3013,3012,1,0,0,0,3013,3014,1,0,0,0,3014,3016,1,0,0,0,3015,3017,
3,324,162,0,3016,3015,1,0,0,0,3016,3017,1,0,0,0,3017,3019,1,0,0,0,3018,3020,
3,296,148,0,3019,3018,1,0,0,0,3019,3020,1,0,0,0,3020,3023,1,0,0,0,3021,3022,
4,139,49,0,3022,3024,3,298,149,0,3023,3021,1,0,0,0,3023,3024,1,0,0,0,3024,
279,1,0,0,0,3025,3026,3,274,137,0,3026,281,1,0,0,0,3027,3028,7,29,0,0,3028,
283,1,0,0,0,3029,3030,5,276,0,0,3030,3031,3,288,144,0,3031,285,1,0,0,0,3032,
3033,5,276,0,0,3033,3034,3,290,145,0,3034,287,1,0,0,0,3035,3038,3,290,145,
0,3036,3037,7,30,0,0,3037,3039,3,290,145,0,3038,3036,1,0,0,0,3038,3039,1,
0,0,0,3039,289,1,0,0,0,3040,3043,3,1128,564,0,3041,3043,7,31,0,0,3042,3040,
1,0,0,0,3042,3041,1,0,0,0,3043,291,1,0,0,0,3044,3072,5,248,0,0,3045,3046,
5,396,0,0,3046,3048,3,1154,577,0,3047,3049,3,998,499,0,3048,3047,1,0,0,0,
3048,3049,1,0,0,0,3049,3051,1,0,0,0,3050,3052,3,1000,500,0,3051,3050,1,0,
0,0,3051,3052,1,0,0,0,3052,3054,1,0,0,0,3053,3055,3,1004,502,0,3054,3053,
1,0,0,0,3054,3055,1,0,0,0,3055,3073,1,0,0,0,3056,3057,5,150,0,0,3057,3073,
3,1154,577,0,3058,3061,3,1180,590,0,3059,3061,3,742,371,0,3060,3058,1,0,
0,0,3060,3059,1,0,0,0,3061,3069,1,0,0,0,3062,3065,5,773,0,0,3063,3066,3,
1180,590,0,3064,3066,3,742,371,0,3065,3063,1,0,0,0,3065,3064,1,0,0,0,3066,
3068,1,0,0,0,3067,3062,1,0,0,0,3068,3071,1,0,0,0,3069,3067,1,0,0,0,3069,
3070,1,0,0,0,3070,3073,1,0,0,0,3071,3069,1,0,0,0,3072,3045,1,0,0,0,3072,
3056,1,0,0,0,3072,3060,1,0,0,0,3073,293,1,0,0,0,3074,3075,5,422,0,0,3075,
3076,5,13,0,0,3076,3082,5,776,0,0,3077,3080,5,747,0,0,3078,3079,5,773,0,
0,3079,3081,5,747,0,0,3080,3078,1,0,0,0,3080,3081,1,0,0,0,3081,3083,1,0,
0,0,3082,3077,1,0,0,0,3082,3083,1,0,0,0,3083,3084,1,0,0,0,3084,3085,5,777,
0,0,3085,295,1,0,0,0,3086,3087,5,221,0,0,3087,3088,3,676,338,0,3088,297,
1,0,0,0,3089,3090,5,699,0,0,3090,3095,3,300,150,0,3091,3092,5,773,0,0,3092,
3094,3,300,150,0,3093,3091,1,0,0,0,3094,3097,1,0,0,0,3095,3093,1,0,0,0,3095,
3096,1,0,0,0,3096,299,1,0,0,0,3097,3095,1,0,0,0,3098,3099,3,1124,562,0,3099,
3100,5,17,0,0,3100,3101,3,302,151,0,3101,301,1,0,0,0,3102,3103,5,776,0,0,
3103,3104,3,304,152,0,3104,3105,5,777,0,0,3105,303,1,0,0,0,3106,3108,3,1124,
562,0,3107,3106,1,0,0,0,3107,3108,1,0,0,0,3108,3112,1,0,0,0,3109,3110,5,
405,0,0,3110,3111,5,45,0,0,3111,3113,3,774,387,0,3112,3109,1,0,0,0,3112,
3113,1,0,0,0,3113,3115,1,0,0,0,3114,3116,3,328,164,0,3115,3114,1,0,0,0,3115,
3116,1,0,0,0,3116,3118,1,0,0,0,3117,3119,3,306,153,0,3118,3117,1,0,0,0,3118,
3119,1,0,0,0,3119,305,1,0,0,0,3120,3121,3,308,154,0,3121,3123,3,310,155,
0,3122,3124,3,318,159,0,3123,3122,1,0,0,0,3123,3124,1,0,0,0,3124,307,1,0,
0,0,3125,3126,7,32,0,0,3126,309,1,0,0,0,3127,3130,3,312,156,0,3128,3130,
3,314,157,0,3129,3127,1,0,0,0,3129,3128,1,0,0,0,3130,311,1,0,0,0,3131,3132,
5,698,0,0,3132,3146,5,693,0,0,3133,3134,3,1144,572,0,3134,3135,5,693,0,0,
3135,3146,1,0,0,0,3136,3137,5,787,0,0,3137,3146,5,693,0,0,3138,3139,5,247,
0,0,3139,3140,3,676,338,0,3140,3141,3,764,382,0,3141,3142,5,693,0,0,3142,
3146,1,0,0,0,3143,3144,5,101,0,0,3144,3146,5,487,0,0,3145,3131,1,0,0,0,3145,
3133,1,0,0,0,3145,3136,1,0,0,0,3145,3138,1,0,0,0,3145,3143,1,0,0,0,3146,
313,1,0,0,0,3147,3148,5,30,0,0,3148,3149,3,316,158,0,3149,3150,5,15,0,0,
3150,3151,3,316,158,0,3151,315,1,0,0,0,3152,3166,3,312,156,0,3153,3154,5,
698,0,0,3154,3166,5,682,0,0,3155,3156,3,1144,572,0,3156,3157,5,682,0,0,3157,
3166,1,0,0,0,3158,3159,5,787,0,0,3159,3166,5,682,0,0,3160,3161,5,247,0,0,
3161,3162,3,676,338,0,3162,3163,3,764,382,0,3163,3164,5,682,0,0,3164,3166,
1,0,0,0,3165,3152,1,0,0,0,3165,3153,1,0,0,0,3165,3155,1,0,0,0,3165,3158,
1,0,0,0,3165,3160,1,0,0,0,3166,317,1,0,0,0,3167,3174,5,680,0,0,3168,3169,
5,101,0,0,3169,3175,5,487,0,0,3170,3175,5,217,0,0,3171,3175,5,697,0,0,3172,
3173,5,373,0,0,3173,3175,5,690,0,0,3174,3168,1,0,0,0,3174,3170,1,0,0,0,3174,
3171,1,0,0,0,3174,3172,1,0,0,0,3175,319,1,0,0,0,3176,3178,5,645,0,0,3177,
3179,5,665,0,0,3178,3177,1,0,0,0,3178,3179,1,0,0,0,3179,3180,1,0,0,0,3180,
3185,3,322,161,0,3181,3182,5,773,0,0,3182,3184,3,322,161,0,3183,3181,1,0,
0,0,3184,3187,1,0,0,0,3185,3183,1,0,0,0,3185,3186,1,0,0,0,3186,321,1,0,0,
0,3187,3185,1,0,0,0,3188,3190,3,1128,564,0,3189,3191,3,1044,522,0,3190,3189,
1,0,0,0,3190,3191,1,0,0,0,3191,3192,1,0,0,0,3192,3193,5,17,0,0,3193,3194,
3,280,140,0,3194,323,1,0,0,0,3195,3196,5,217,0,0,3196,3197,5,45,0,0,3197,
3199,3,774,387,0,3198,3200,3,326,163,0,3199,3198,1,0,0,0,3199,3200,1,0,0,
0,3200,325,1,0,0,0,3201,3202,5,645,0,0,3202,3207,5,481,0,0,3203,3204,4,163,
50,0,3204,3205,5,645,0,0,3205,3207,5,99,0,0,3206,3201,1,0,0,0,3206,3203,
1,0,0,0,3207,327,1,0,0,0,3208,3209,5,393,0,0,3209,3210,5,45,0,0,3210,3211,
3,774,387,0,3211,329,1,0,0,0,3212,3213,7,33,0,0,3213,331,1,0,0,0,3214,3217,
5,203,0,0,3215,3218,5,149,0,0,3216,3218,3,334,167,0,3217,3215,1,0,0,0,3217,
3216,1,0,0,0,3218,333,1,0,0,0,3219,3224,3,360,180,0,3220,3221,5,773,0,0,
3221,3223,3,360,180,0,3222,3220,1,0,0,0,3223,3226,1,0,0,0,3224,3222,1,0,
0,0,3224,3225,1,0,0,0,3225,335,1,0,0,0,3226,3224,1,0,0,0,3227,3228,5,626,
0,0,3228,3233,3,340,170,0,3229,3230,5,773,0,0,3230,3232,3,340,170,0,3231,
3229,1,0,0,0,3232,3235,1,0,0,0,3233,3231,1,0,0,0,3233,3234,1,0,0,0,3234,
337,1,0,0,0,3235,3233,1,0,0,0,3236,3237,5,574,0,0,3237,3238,3,1102,551,0,
3238,339,1,0,0,0,3239,3240,5,487,0,0,3240,3242,5,776,0,0,3241,3243,3,246,
123,0,3242,3241,1,0,0,0,3242,3243,1,0,0,0,3243,3244,1,0,0,0,3244,3245,5,
777,0,0,3245,341,1,0,0,0,3246,3255,3,282,141,0,3247,3255,5,535,0,0,3248,
3249,4,171,51,0,3249,3255,5,533,0,0,3250,3251,4,171,52,0,3251,3252,5,325,
0,0,3252,3253,5,750,0,0,3253,3255,3,1142,571,0,3254,3246,1,0,0,0,3254,3247,
1,0,0,0,3254,3248,1,0,0,0,3254,3250,1,0,0,0,3255,343,1,0,0,0,3256,3258,3,
346,173,0,3257,3256,1,0,0,0,3258,3259,1,0,0,0,3259,3257,1,0,0,0,3259,3260,
1,0,0,0,3260,345,1,0,0,0,3261,3262,5,200,0,0,3262,3266,3,348,174,0,3263,
3264,4,173,53,0,3264,3265,5,668,0,0,3265,3267,3,1106,553,0,3266,3263,1,0,
0,0,3266,3267,1,0,0,0,3267,3270,1,0,0,0,3268,3269,4,173,54,0,3269,3271,3,
350,175,0,3270,3268,1,0,0,0,3270,3271,1,0,0,0,3271,3277,1,0,0,0,3272,3273,
5,287,0,0,3273,3274,5,251,0,0,3274,3275,5,508,0,0,3275,3277,5,346,0,0,3276,
3261,1,0,0,0,3276,3272,1,0,0,0,3277,347,1,0,0,0,3278,3282,5,614,0,0,3279,
3280,4,174,55,0,3280,3282,5,508,0,0,3281,3278,1,0,0,0,3281,3279,1,0,0,0,
3282,349,1,0,0,0,3283,3284,5,669,0,0,3284,3287,5,670,0,0,3285,3287,5,671,
0,0,3286,3283,1,0,0,0,3286,3285,1,0,0,0,3287,351,1,0,0,0,3288,3291,3,354,
177,0,3289,3291,5,760,0,0,3290,3288,1,0,0,0,3290,3289,1,0,0,0,3291,3296,
1,0,0,0,3292,3293,5,773,0,0,3293,3295,3,354,177,0,3294,3292,1,0,0,0,3295,
3298,1,0,0,0,3296,3294,1,0,0,0,3296,3297,1,0,0,0,3297,353,1,0,0,0,3298,3296,
1,0,0,0,3299,3305,3,1054,527,0,3300,3302,3,676,338,0,3301,3303,3,356,178,
0,3302,3301,1,0,0,0,3302,3303,1,0,0,0,3303,3305,1,0,0,0,3304,3299,1,0,0,
0,3304,3300,1,0,0,0,3305,355,1,0,0,0,3306,3308,5,17,0,0,3307,3306,1,0,0,
0,3307,3308,1,0,0,0,3308,3311,1,0,0,0,3309,3312,3,1128,564,0,3310,3312,3,
1154,577,0,3311,3309,1,0,0,0,3311,3310,1,0,0,0,3312,357,1,0,0,0,3313,3314,
5,643,0,0,3314,3315,3,676,338,0,3315,359,1,0,0,0,3316,3327,3,372,186,0,3317,
3321,5,778,0,0,3318,3319,4,180,56,0,3319,3322,3,1128,564,0,3320,3322,5,732,
0,0,3321,3318,1,0,0,0,3321,3320,1,0,0,0,3322,3323,1,0,0,0,3323,3324,3,362,
181,0,3324,3325,5,779,0,0,3325,3327,1,0,0,0,3326,3316,1,0,0,0,3326,3317,
1,0,0,0,3327,3331,1,0,0,0,3328,3330,3,364,182,0,3329,3328,1,0,0,0,3330,3333,
1,0,0,0,3331,3329,1,0,0,0,3331,3332,1,0,0,0,3332,361,1,0,0,0,3333,3331,1,
0,0,0,3334,3338,3,372,186,0,3335,3337,3,364,182,0,3336,3335,1,0,0,0,3337,
3340,1,0,0,0,3338,3336,1,0,0,0,3338,3339,1,0,0,0,3339,363,1,0,0,0,3340,3338,
1,0,0,0,3341,3342,3,368,184,0,3342,3347,3,360,180,0,3343,3344,5,383,0,0,
3344,3348,3,676,338,0,3345,3346,5,621,0,0,3346,3348,3,1132,566,0,3347,3343,
1,0,0,0,3347,3345,1,0,0,0,3347,3348,1,0,0,0,3348,3361,1,0,0,0,3349,3350,
3,370,185,0,3350,3355,3,360,180,0,3351,3352,5,383,0,0,3352,3356,3,676,338,
0,3353,3354,5,621,0,0,3354,3356,3,1132,566,0,3355,3351,1,0,0,0,3355,3353,
1,0,0,0,3356,3361,1,0,0,0,3357,3358,3,366,183,0,3358,3359,3,372,186,0,3359,
3361,1,0,0,0,3360,3341,1,0,0,0,3360,3349,1,0,0,0,3360,3357,1,0,0,0,3361,
365,1,0,0,0,3362,3364,5,359,0,0,3363,3365,5,239,0,0,3364,3363,1,0,0,0,3364,
3365,1,0,0,0,3365,3366,1,0,0,0,3366,3374,5,261,0,0,3367,3368,5,359,0,0,3368,
3370,7,34,0,0,3369,3371,5,395,0,0,3370,3369,1,0,0,0,3370,3371,1,0,0,0,3371,
3372,1,0,0,0,3372,3374,5,261,0,0,3373,3362,1,0,0,0,3373,3367,1,0,0,0,3374,
367,1,0,0,0,3375,3377,7,35,0,0,3376,3375,1,0,0,0,3376,3377,1,0,0,0,3377,
3378,1,0,0,0,3378,3381,5,261,0,0,3379,3381,5,555,0,0,3380,3376,1,0,0,0,3380,
3379,1,0,0,0,3381,369,1,0,0,0,3382,3384,7,34,0,0,3383,3385,5,395,0,0,3384,
3383,1,0,0,0,3384,3385,1,0,0,0,3385,3386,1,0,0,0,3386,3387,5,261,0,0,3387,
371,1,0,0,0,3388,3395,3,374,187,0,3389,3395,3,376,188,0,3390,3395,3,378,
189,0,3391,3395,3,380,190,0,3392,3393,4,186,57,0,3393,3395,3,382,191,0,3394,
3388,1,0,0,0,3394,3389,1,0,0,0,3394,3390,1,0,0,0,3394,3391,1,0,0,0,3394,
3392,1,0,0,0,3395,373,1,0,0,0,3396,3398,3,1102,551,0,3397,3399,3,1036,518,
0,3398,3397,1,0,0,0,3398,3399,1,0,0,0,3399,3401,1,0,0,0,3400,3402,3,398,
199,0,3401,3400,1,0,0,0,3401,3402,1,0,0,0,3402,3404,1,0,0,0,3403,3405,3,
400,200,0,3404,3403,1,0,0,0,3404,3405,1,0,0,0,3405,375,1,0,0,0,3406,3409,
5,776,0,0,3407,3410,3,374,187,0,3408,3410,3,376,188,0,3409,3407,1,0,0,0,
3409,3408,1,0,0,0,3410,3411,1,0,0,0,3411,3412,5,777,0,0,3412,377,1,0,0,0,
3413,3415,3,280,140,0,3414,3416,3,398,199,0,3415,3414,1,0,0,0,3415,3416,
1,0,0,0,3416,3419,1,0,0,0,3417,3418,4,189,58,0,3418,3420,3,1044,522,0,3419,
3417,1,0,0,0,3419,3420,1,0,0,0,3420,3431,1,0,0,0,3421,3422,4,189,59,0,3422,
3423,5,726,0,0,3423,3425,3,280,140,0,3424,3426,3,398,199,0,3425,3424,1,0,
0,0,3425,3426,1,0,0,0,3426,3428,1,0,0,0,3427,3429,3,1044,522,0,3428,3427,
1,0,0,0,3428,3429,1,0,0,0,3429,3431,1,0,0,0,3430,3413,1,0,0,0,3430,3421,
1,0,0,0,3431,379,1,0,0,0,3432,3435,5,776,0,0,3433,3436,3,334,167,0,3434,
3436,3,380,190,0,3435,3433,1,0,0,0,3435,3434,1,0,0,0,3436,3437,1,0,0,0,3437,
3438,5,777,0,0,3438,381,1,0,0,0,3439,3440,5,701,0,0,3440,3441,5,776,0,0,
3441,3442,3,676,338,0,3442,3443,5,773,0,0,3443,3444,3,1154,577,0,3444,3445,
3,384,192,0,3445,3447,5,777,0,0,3446,3448,3,398,199,0,3447,3446,1,0,0,0,
3447,3448,1,0,0,0,3448,383,1,0,0,0,3449,3450,5,71,0,0,3450,3451,5,776,0,
0,3451,3456,3,386,193,0,3452,3453,5,773,0,0,3453,3455,3,386,193,0,3454,3452,
1,0,0,0,3455,3458,1,0,0,0,3456,3454,1,0,0,0,3456,3457,1,0,0,0,3457,3459,
1,0,0,0,3458,3456,1,0,0,0,3459,3460,5,777,0,0,3460,385,1,0,0,0,3461,3462,
3,1128,564,0,3462,3463,5,200,0,0,3463,3464,5,703,0,0,3464,3485,1,0,0,0,3465,
3466,3,1128,564,0,3466,3469,3,916,458,0,3467,3468,4,193,60,0,3468,3470,3,
986,493,0,3469,3467,1,0,0,0,3469,3470,1,0,0,0,3470,3472,1,0,0,0,3471,3473,
5,174,0,0,3472,3471,1,0,0,0,3472,3473,1,0,0,0,3473,3474,1,0,0,0,3474,3475,
5,704,0,0,3475,3477,3,1154,577,0,3476,3478,3,388,194,0,3477,3476,1,0,0,0,
3477,3478,1,0,0,0,3478,3485,1,0,0,0,3479,3480,5,702,0,0,3480,3481,5,704,
0,0,3481,3482,3,1154,577,0,3482,3483,3,384,192,0,3483,3485,1,0,0,0,3484,
3461,1,0,0,0,3484,3465,1,0,0,0,3484,3479,1,0,0,0,3485,387,1,0,0,0,3486,3488,
3,390,195,0,3487,3489,3,392,196,0,3488,3487,1,0,0,0,3488,3489,1,0,0,0,3489,
3495,1,0,0,0,3490,3492,3,392,196,0,3491,3493,3,390,195,0,3492,3491,1,0,0,
0,3492,3493,1,0,0,0,3493,3495,1,0,0,0,3494,3486,1,0,0,0,3494,3490,1,0,0,
0,3495,389,1,0,0,0,3496,3497,3,394,197,0,3497,3498,5,383,0,0,3498,3499,5,
700,0,0,3499,391,1,0,0,0,3500,3501,3,394,197,0,3501,3502,5,383,0,0,3502,
3503,5,165,0,0,3503,393,1,0,0,0,3504,3509,5,165,0,0,3505,3509,5,376,0,0,
3506,3507,5,128,0,0,3507,3509,3,1154,577,0,3508,3504,1,0,0,0,3508,3505,1,
0,0,0,3508,3506,1,0,0,0,3509,395,1,0,0,0,3510,3511,7,36,0,0,3511,397,1,0,
0,0,3512,3516,5,17,0,0,3513,3514,4,199,61,0,3514,3516,5,750,0,0,3515,3512,
1,0,0,0,3515,3513,1,0,0,0,3515,3516,1,0,0,0,3516,3517,1,0,0,0,3517,3518,
3,1128,564,0,3518,399,1,0,0,0,3519,3524,3,402,201,0,3520,3521,5,773,0,0,
3521,3523,3,402,201,0,3522,3520,1,0,0,0,3523,3526,1,0,0,0,3524,3522,1,0,
0,0,3524,3525,1,0,0,0,3525,401,1,0,0,0,3526,3524,1,0,0,0,3527,3528,3,404,
202,0,3528,3530,3,406,203,0,3529,3531,3,410,205,0,3530,3529,1,0,0,0,3530,
3531,1,0,0,0,3531,3532,1,0,0,0,3532,3533,5,776,0,0,3533,3534,3,412,206,0,
3534,3535,5,777,0,0,3535,3548,1,0,0,0,3536,3537,5,620,0,0,3537,3539,3,406,
203,0,3538,3540,3,410,205,0,3539,3538,1,0,0,0,3539,3540,1,0,0,0,3540,3541,
1,0,0,0,3541,3543,5,776,0,0,3542,3544,3,412,206,0,3543,3542,1,0,0,0,3543,
3544,1,0,0,0,3544,3545,1,0,0,0,3545,3546,5,777,0,0,3546,3548,1,0,0,0,3547,
3527,1,0,0,0,3547,3536,1,0,0,0,3548,403,1,0,0,0,3549,3550,7,37,0,0,3550,
405,1,0,0,0,3551,3552,7,38,0,0,3552,407,1,0,0,0,3553,3554,5,420,0,0,3554,
3560,5,265,0,0,3555,3557,5,609,0,0,3556,3558,3,406,203,0,3557,3556,1,0,0,
0,3557,3558,1,0,0,0,3558,3560,1,0,0,0,3559,3553,1,0,0,0,3559,3555,1,0,0,
0,3560,409,1,0,0,0,3561,3567,5,200,0,0,3562,3568,5,261,0,0,3563,3564,5,393,
0,0,3564,3568,5,45,0,0,3565,3566,5,217,0,0,3566,3568,5,45,0,0,3567,3562,
1,0,0,0,3567,3563,1,0,0,0,3567,3565,1,0,0,0,3568,411,1,0,0,0,3569,3574,3,
414,207,0,3570,3571,5,773,0,0,3571,3573,3,414,207,0,3572,3570,1,0,0,0,3573,
3576,1,0,0,0,3574,3572,1,0,0,0,3574,3575,1,0,0,0,3575,413,1,0,0,0,3576,3574,
1,0,0,0,3577,3580,3,1128,564,0,3578,3580,5,420,0,0,3579,3577,1,0,0,0,3579,
3578,1,0,0,0,3580,415,1,0,0,0,3581,3582,4,208,62,0,3582,3584,3,320,160,0,
3583,3581,1,0,0,0,3583,3584,1,0,0,0,3584,3585,1,0,0,0,3585,3587,5,614,0,
0,3586,3588,5,295,0,0,3587,3586,1,0,0,0,3587,3588,1,0,0,0,3588,3590,1,0,
0,0,3589,3591,5,232,0,0,3590,3589,1,0,0,0,3590,3591,1,0,0,0,3591,3592,1,
0,0,0,3592,3593,3,334,167,0,3593,3594,5,506,0,0,3594,3596,3,994,497,0,3595,
3597,3,358,179,0,3596,3595,1,0,0,0,3596,3597,1,0,0,0,3597,3599,1,0,0,0,3598,
3600,3,328,164,0,3599,3598,1,0,0,0,3599,3600,1,0,0,0,3600,3602,1,0,0,0,3601,
3603,3,286,143,0,3602,3601,1,0,0,0,3602,3603,1,0,0,0,3603,417,1,0,0,0,3604,
3609,3,420,210,0,3605,3609,3,426,213,0,3606,3609,3,428,214,0,3607,3609,3,
434,217,0,3608,3604,1,0,0,0,3608,3605,1,0,0,0,3608,3606,1,0,0,0,3608,3607,
1,0,0,0,3609,419,1,0,0,0,3610,3611,5,543,0,0,3611,3615,5,592,0,0,3612,3614,
3,424,212,0,3613,3612,1,0,0,0,3614,3617,1,0,0,0,3615,3613,1,0,0,0,3615,3616,
1,0,0,0,3616,3636,1,0,0,0,3617,3615,1,0,0,0,3618,3620,5,77,0,0,3619,3621,
5,647,0,0,3620,3619,1,0,0,0,3620,3621,1,0,0,0,3621,3627,1,0,0,0,3622,3624,
5,15,0,0,3623,3625,5,373,0,0,3624,3623,1,0,0,0,3624,3625,1,0,0,0,3625,3626,
1,0,0,0,3626,3628,5,54,0,0,3627,3622,1,0,0,0,3627,3628,1,0,0,0,3628,3633,
1,0,0,0,3629,3631,5,373,0,0,3630,3629,1,0,0,0,3630,3631,1,0,0,0,3631,3632,
1,0,0,0,3632,3634,5,450,0,0,3633,3630,1,0,0,0,3633,3634,1,0,0,0,3634,3636,
1,0,0,0,3635,3610,1,0,0,0,3635,3618,1,0,0,0,3636,421,1,0,0,0,3637,3639,5,
29,0,0,3638,3640,5,647,0,0,3639,3638,1,0,0,0,3639,3640,1,0,0,0,3640,423,
1,0,0,0,3641,3642,5,645,0,0,3642,3643,5,85,0,0,3643,3648,5,517,0,0,3644,
3645,4,212,63,0,3645,3646,5,435,0,0,3646,3648,7,39,0,0,3647,3641,1,0,0,0,
3647,3644,1,0,0,0,3648,425,1,0,0,0,3649,3650,5,489,0,0,3650,3679,3,1128,
564,0,3651,3653,5,480,0,0,3652,3654,5,647,0,0,3653,3652,1,0,0,0,3653,3654,
1,0,0,0,3654,3673,1,0,0,0,3655,3657,5,590,0,0,3656,3658,5,489,0,0,3657,3656,
1,0,0,0,3657,3658,1,0,0,0,3658,3659,1,0,0,0,3659,3674,3,1128,564,0,3660,
3662,5,15,0,0,3661,3663,5,373,0,0,3662,3661,1,0,0,0,3662,3663,1,0,0,0,3663,
3664,1,0,0,0,3664,3666,5,54,0,0,3665,3660,1,0,0,0,3665,3666,1,0,0,0,3666,
3671,1,0,0,0,3667,3669,5,373,0,0,3668,3667,1,0,0,0,3668,3669,1,0,0,0,3669,
3670,1,0,0,0,3670,3672,5,450,0,0,3671,3668,1,0,0,0,3671,3672,1,0,0,0,3672,
3674,1,0,0,0,3673,3655,1,0,0,0,3673,3665,1,0,0,0,3674,3679,1,0,0,0,3675,
3676,5,450,0,0,3676,3677,5,489,0,0,3677,3679,3,1128,564,0,3678,3649,1,0,
0,0,3678,3651,1,0,0,0,3678,3675,1,0,0,0,3679,427,1,0,0,0,3680,3681,5,287,
0,0,3681,3682,7,18,0,0,3682,3687,3,430,215,0,3683,3684,5,773,0,0,3684,3686,
3,430,215,0,3685,3683,1,0,0,0,3686,3689,1,0,0,0,3687,3685,1,0,0,0,3687,3688,
1,0,0,0,3688,3703,1,0,0,0,3689,3687,1,0,0,0,3690,3691,4,214,64,0,3691,3692,
5,287,0,0,3692,3693,5,244,0,0,3693,3694,5,200,0,0,3694,3703,5,27,0,0,3695,
3700,5,611,0,0,3696,3701,5,571,0,0,3697,3701,5,574,0,0,3698,3699,4,214,65,
0,3699,3701,5,244,0,0,3700,3696,1,0,0,0,3700,3697,1,0,0,0,3700,3698,1,0,
0,0,3701,3703,1,0,0,0,3702,3680,1,0,0,0,3702,3690,1,0,0,0,3702,3695,1,0,
0,0,3703,429,1,0,0,0,3704,3706,3,1102,551,0,3705,3707,3,398,199,0,3706,3705,
1,0,0,0,3706,3707,1,0,0,0,3707,3708,1,0,0,0,3708,3709,3,432,216,0,3709,431,
1,0,0,0,3710,3712,5,435,0,0,3711,3713,5,284,0,0,3712,3711,1,0,0,0,3712,3713,
1,0,0,0,3713,3719,1,0,0,0,3714,3716,5,295,0,0,3715,3714,1,0,0,0,3715,3716,
1,0,0,0,3716,3717,1,0,0,0,3717,3719,5,649,0,0,3718,3710,1,0,0,0,3718,3715,
1,0,0,0,3719,433,1,0,0,0,3720,3747,5,651,0,0,3721,3722,7,40,0,0,3722,3724,
3,438,219,0,3723,3725,7,41,0,0,3724,3723,1,0,0,0,3724,3725,1,0,0,0,3725,
3748,1,0,0,0,3726,3727,5,159,0,0,3727,3733,3,438,219,0,3728,3731,5,566,0,
0,3729,3730,5,200,0,0,3730,3732,5,340,0,0,3731,3729,1,0,0,0,3731,3732,1,
0,0,0,3732,3734,1,0,0,0,3733,3728,1,0,0,0,3733,3734,1,0,0,0,3734,3748,1,
0,0,0,3735,3736,5,417,0,0,3736,3748,3,438,219,0,3737,3738,5,77,0,0,3738,
3741,3,438,219,0,3739,3740,5,384,0,0,3740,3742,5,407,0,0,3741,3739,1,0,0,
0,3741,3742,1,0,0,0,3742,3748,1,0,0,0,3743,3744,5,480,0,0,3744,3748,3,438,
219,0,3745,3746,5,439,0,0,3746,3748,3,436,218,0,3747,3721,1,0,0,0,3747,3726,
1,0,0,0,3747,3735,1,0,0,0,3747,3737,1,0,0,0,3747,3743,1,0,0,0,3747,3745,
1,0,0,0,3748,435,1,0,0,0,3749,3752,4,218,66,0,3750,3751,5,94,0,0,3751,3753,
5,652,0,0,3752,3750,1,0,0,0,3752,3753,1,0,0,0,3753,3756,1,0,0,0,3754,3756,
1,0,0,0,3755,3749,1,0,0,0,3755,3754,1,0,0,0,3756,437,1,0,0,0,3757,3764,3,
1156,578,0,3758,3759,5,773,0,0,3759,3762,3,1156,578,0,3760,3761,5,773,0,
0,3761,3763,3,1140,570,0,3762,3760,1,0,0,0,3762,3763,1,0,0,0,3763,3765,1,
0,0,0,3764,3758,1,0,0,0,3764,3765,1,0,0,0,3765,439,1,0,0,0,3766,3767,5,428,
0,0,3767,3768,7,42,0,0,3768,3773,5,289,0,0,3769,3770,5,590,0,0,3770,3774,
3,1160,580,0,3771,3772,5,28,0,0,3772,3774,3,676,338,0,3773,3769,1,0,0,0,
3773,3771,1,0,0,0,3774,3800,1,0,0,0,3775,3800,3,448,224,0,3776,3777,5,468,
0,0,3777,3782,3,442,221,0,3778,3779,5,773,0,0,3779,3781,3,442,221,0,3780,
3778,1,0,0,0,3781,3784,1,0,0,0,3782,3780,1,0,0,0,3782,3783,1,0,0,0,3783,
3800,1,0,0,0,3784,3782,1,0,0,0,3785,3786,4,220,67,0,3786,3787,5,468,0,0,
3787,3791,5,658,0,0,3788,3789,3,978,489,0,3789,3790,3,1128,564,0,3790,3792,
1,0,0,0,3791,3788,1,0,0,0,3791,3792,1,0,0,0,3792,3800,1,0,0,0,3793,3800,
3,478,239,0,3794,3795,4,220,68,0,3795,3800,3,464,232,0,3796,3800,3,446,223,
0,3797,3798,4,220,69,0,3798,3800,3,488,244,0,3799,3766,1,0,0,0,3799,3775,
1,0,0,0,3799,3776,1,0,0,0,3799,3785,1,0,0,0,3799,3793,1,0,0,0,3799,3794,
1,0,0,0,3799,3796,1,0,0,0,3799,3797,1,0,0,0,3800,441,1,0,0,0,3801,3803,5,
316,0,0,3802,3804,3,444,222,0,3803,3802,1,0,0,0,3803,3804,1,0,0,0,3804,3816,
1,0,0,0,3805,3806,4,221,70,0,3806,3807,5,430,0,0,3807,3816,5,47,0,0,3808,
3810,5,514,0,0,3809,3811,5,10,0,0,3810,3809,1,0,0,0,3810,3811,1,0,0,0,3811,
3813,1,0,0,0,3812,3814,3,782,391,0,3813,3812,1,0,0,0,3813,3814,1,0,0,0,3814,
3816,1,0,0,0,3815,3801,1,0,0,0,3815,3805,1,0,0,0,3815,3808,1,0,0,0,3816,
443,1,0,0,0,3817,3818,4,222,71,0,3818,3823,5,590,0,0,3819,3820,4,222,72,
0,3820,3824,3,1142,571,0,3821,3822,4,222,73,0,3822,3824,3,1146,573,0,3823,
3819,1,0,0,0,3823,3821,1,0,0,0,3824,445,1,0,0,0,3825,3829,5,281,0,0,3826,
3830,5,112,0,0,3827,3828,5,574,0,0,3828,3830,3,1102,551,0,3829,3826,1,0,
0,0,3829,3827,1,0,0,0,3830,3831,1,0,0,0,3831,3832,5,203,0,0,3832,3833,5,
316,0,0,3833,447,1,0,0,0,3834,3835,5,55,0,0,3835,3836,5,316,0,0,3836,3837,
5,590,0,0,3837,3839,3,450,225,0,3838,3840,3,782,391,0,3839,3838,1,0,0,0,
3839,3840,1,0,0,0,3840,449,1,0,0,0,3841,3846,3,452,226,0,3842,3843,5,773,
0,0,3843,3845,3,452,226,0,3844,3842,1,0,0,0,3845,3848,1,0,0,0,3846,3844,
1,0,0,0,3846,3847,1,0,0,0,3847,451,1,0,0,0,3848,3846,1,0,0,0,3849,3850,5,
300,0,0,3850,3851,5,750,0,0,3851,3941,3,1162,581,0,3852,3853,5,729,0,0,3853,
3854,5,750,0,0,3854,3941,3,1162,581,0,3855,3856,5,297,0,0,3856,3857,5,750,
0,0,3857,3941,3,1162,581,0,3858,3859,5,318,0,0,3859,3860,5,750,0,0,3860,
3941,3,1162,581,0,3861,3862,5,303,0,0,3862,3863,5,750,0,0,3863,3941,3,1162,
581,0,3864,3865,5,304,0,0,3865,3866,5,750,0,0,3866,3941,3,1140,570,0,3867,
3868,5,298,0,0,3868,3869,5,750,0,0,3869,3941,3,1140,570,0,3870,3871,5,305,
0,0,3871,3872,5,750,0,0,3872,3941,3,1140,570,0,3873,3874,5,299,0,0,3874,
3875,5,750,0,0,3875,3941,3,1140,570,0,3876,3877,5,314,0,0,3877,3878,5,750,
0,0,3878,3941,3,1140,570,0,3879,3880,5,308,0,0,3880,3881,5,750,0,0,3881,
3941,3,1162,581,0,3882,3883,5,307,0,0,3883,3884,5,750,0,0,3884,3941,3,1162,
581,0,3885,3886,5,317,0,0,3886,3887,5,750,0,0,3887,3941,3,1162,581,0,3888,
3889,5,309,0,0,3889,3890,5,750,0,0,3890,3941,3,1162,581,0,3891,3892,5,738,
0,0,3892,3893,5,750,0,0,3893,3941,3,458,229,0,3894,3895,5,310,0,0,3895,3896,
5,750,0,0,3896,3941,3,1162,581,0,3897,3898,5,313,0,0,3898,3899,5,750,0,0,
3899,3941,3,1162,581,0,3900,3901,5,315,0,0,3901,3902,5,750,0,0,3902,3941,
3,1140,570,0,3903,3904,5,311,0,0,3904,3905,5,750,0,0,3905,3941,3,1160,580,
0,3906,3907,5,312,0,0,3907,3908,5,750,0,0,3908,3941,3,1162,581,0,3909,3910,
5,712,0,0,3910,3911,5,750,0,0,3911,3941,3,1162,581,0,3912,3913,5,713,0,0,
3913,3914,5,750,0,0,3914,3941,3,1140,570,0,3915,3916,5,319,0,0,3916,3917,
5,750,0,0,3917,3941,3,1140,570,0,3918,3919,5,233,0,0,3919,3920,5,750,0,0,
3920,3941,3,462,231,0,3921,3922,5,735,0,0,3922,3923,5,750,0,0,3923,3941,
3,1154,577,0,3924,3925,5,736,0,0,3925,3926,5,750,0,0,3926,3941,3,1140,570,
0,3927,3928,5,296,0,0,3928,3929,5,750,0,0,3929,3941,3,1140,570,0,3930,3931,
5,737,0,0,3931,3932,5,750,0,0,3932,3941,3,454,227,0,3933,3934,5,739,0,0,
3934,3935,5,750,0,0,3935,3941,3,1140,570,0,3936,3937,5,742,0,0,3937,3938,
5,750,0,0,3938,3941,3,456,228,0,3939,3941,3,460,230,0,3940,3849,1,0,0,0,
3940,3852,1,0,0,0,3940,3855,1,0,0,0,3940,3858,1,0,0,0,3940,3861,1,0,0,0,
3940,3864,1,0,0,0,3940,3867,1,0,0,0,3940,3870,1,0,0,0,3940,3873,1,0,0,0,
3940,3876,1,0,0,0,3940,3879,1,0,0,0,3940,3882,1,0,0,0,3940,3885,1,0,0,0,
3940,3888,1,0,0,0,3940,3891,1,0,0,0,3940,3894,1,0,0,0,3940,3897,1,0,0,0,
3940,3900,1,0,0,0,3940,3903,1,0,0,0,3940,3906,1,0,0,0,3940,3909,1,0,0,0,
3940,3912,1,0,0,0,3940,3915,1,0,0,0,3940,3918,1,0,0,0,3940,3921,1,0,0,0,
3940,3924,1,0,0,0,3940,3927,1,0,0,0,3940,3930,1,0,0,0,3940,3933,1,0,0,0,
3940,3936,1,0,0,0,3940,3939,1,0,0,0,3941,453,1,0,0,0,3942,3945,3,1024,512,
0,3943,3945,5,376,0,0,3944,3942,1,0,0,0,3944,3943,1,0,0,0,3945,455,1,0,0,
0,3946,3947,7,43,0,0,3947,457,1,0,0,0,3948,3951,3,1162,581,0,3949,3951,5,
376,0,0,3950,3948,1,0,0,0,3950,3949,1,0,0,0,3951,459,1,0,0,0,3952,3953,5,
301,0,0,3953,3954,5,750,0,0,3954,3965,3,1162,581,0,3955,3956,5,302,0,0,3956,
3957,5,750,0,0,3957,3965,3,1144,572,0,3958,3959,5,447,0,0,3959,3960,5,750,
0,0,3960,3965,3,1162,581,0,3961,3962,5,448,0,0,3962,3963,5,750,0,0,3963,
3965,3,1140,570,0,3964,3952,1,0,0,0,3964,3955,1,0,0,0,3964,3958,1,0,0,0,
3964,3961,1,0,0,0,3965,461,1,0,0,0,3966,3975,5,776,0,0,3967,3972,3,1140,
570,0,3968,3969,5,773,0,0,3969,3971,3,1140,570,0,3970,3968,1,0,0,0,3971,
3974,1,0,0,0,3972,3970,1,0,0,0,3972,3973,1,0,0,0,3973,3976,1,0,0,0,3974,
3972,1,0,0,0,3975,3967,1,0,0,0,3975,3976,1,0,0,0,3976,3977,1,0,0,0,3977,
3978,5,777,0,0,3978,463,1,0,0,0,3979,3980,5,55,0,0,3980,3981,5,459,0,0,3981,
3982,5,190,0,0,3982,3987,3,466,233,0,3983,3984,5,773,0,0,3984,3986,3,466,
233,0,3985,3983,1,0,0,0,3986,3989,1,0,0,0,3987,3985,1,0,0,0,3987,3988,1,
0,0,0,3988,3992,1,0,0,0,3989,3987,1,0,0,0,3990,3991,4,232,74,0,3991,3993,
3,782,391,0,3992,3990,1,0,0,0,3992,3993,1,0,0,0,3993,465,1,0,0,0,3994,3995,
5,460,0,0,3995,3996,5,750,0,0,3996,3998,5,776,0,0,3997,3999,3,468,234,0,
3998,3997,1,0,0,0,3998,3999,1,0,0,0,3999,4000,1,0,0,0,4000,4044,5,777,0,
0,4001,4002,5,461,0,0,4002,4003,5,750,0,0,4003,4005,5,776,0,0,4004,4006,
3,468,234,0,4005,4004,1,0,0,0,4005,4006,1,0,0,0,4006,4007,1,0,0,0,4007,4044,
5,777,0,0,4008,4009,5,462,0,0,4009,4010,5,750,0,0,4010,4012,5,776,0,0,4011,
4013,3,470,235,0,4012,4011,1,0,0,0,4012,4013,1,0,0,0,4013,4014,1,0,0,0,4014,
4044,5,777,0,0,4015,4016,5,463,0,0,4016,4017,5,750,0,0,4017,4019,5,776,0,
0,4018,4020,3,470,235,0,4019,4018,1,0,0,0,4019,4020,1,0,0,0,4020,4021,1,
0,0,0,4021,4044,5,777,0,0,4022,4023,5,464,0,0,4023,4024,5,750,0,0,4024,4026,
5,776,0,0,4025,4027,3,472,236,0,4026,4025,1,0,0,0,4026,4027,1,0,0,0,4027,
4028,1,0,0,0,4028,4044,5,777,0,0,4029,4030,5,465,0,0,4030,4031,5,750,0,0,
4031,4033,5,776,0,0,4032,4034,3,472,236,0,4033,4032,1,0,0,0,4033,4034,1,
0,0,0,4034,4035,1,0,0,0,4035,4044,5,777,0,0,4036,4037,5,466,0,0,4037,4038,
5,750,0,0,4038,4040,5,776,0,0,4039,4041,3,476,238,0,4040,4039,1,0,0,0,4040,
4041,1,0,0,0,4041,4042,1,0,0,0,4042,4044,5,777,0,0,4043,3994,1,0,0,0,4043,
4001,1,0,0,0,4043,4008,1,0,0,0,4043,4015,1,0,0,0,4043,4022,1,0,0,0,4043,
4029,1,0,0,0,4043,4036,1,0,0,0,4044,467,1,0,0,0,4045,4050,3,1058,529,0,4046,
4047,5,773,0,0,4047,4049,3,1058,529,0,4048,4046,1,0,0,0,4049,4052,1,0,0,
0,4050,4048,1,0,0,0,4050,4051,1,0,0,0,4051,469,1,0,0,0,4052,4050,1,0,0,0,
4053,4058,3,1098,549,0,4054,4055,5,773,0,0,4055,4057,3,1098,549,0,4056,4054,
1,0,0,0,4057,4060,1,0,0,0,4058,4056,1,0,0,0,4058,4059,1,0,0,0,4059,471,1,
0,0,0,4060,4058,1,0,0,0,4061,4066,3,474,237,0,4062,4063,5,773,0,0,4063,4065,
3,474,237,0,4064,4062,1,0,0,0,4065,4068,1,0,0,0,4066,4064,1,0,0,0,4066,4067,
1,0,0,0,4067,473,1,0,0,0,4068,4066,1,0,0,0,4069,4070,3,1162,581,0,4070,475,
1,0,0,0,4071,4076,3,990,495,0,4072,4073,5,773,0,0,4073,4075,3,990,495,0,
4074,4072,1,0,0,0,4075,4078,1,0,0,0,4076,4074,1,0,0,0,4076,4077,1,0,0,0,
4077,477,1,0,0,0,4078,4076,1,0,0,0,4079,4080,5,543,0,0,4080,4082,5,514,0,
0,4081,4083,3,484,242,0,4082,4081,1,0,0,0,4082,4083,1,0,0,0,4083,4086,1,
0,0,0,4084,4085,5,613,0,0,4085,4087,3,480,240,0,4086,4084,1,0,0,0,4086,4087,
1,0,0,0,4087,4088,1,0,0,0,4088,4090,3,482,241,0,4089,4091,3,782,391,0,4090,
4089,1,0,0,0,4090,4091,1,0,0,0,4091,4101,1,0,0,0,4092,4093,5,552,0,0,4093,
4095,5,514,0,0,4094,4096,3,484,242,0,4095,4094,1,0,0,0,4095,4096,1,0,0,0,
4096,4098,1,0,0,0,4097,4099,3,782,391,0,4098,4097,1,0,0,0,4098,4099,1,0,
0,0,4099,4101,1,0,0,0,4100,4079,1,0,0,0,4100,4092,1,0,0,0,4101,479,1,0,0,
0,4102,4110,3,460,230,0,4103,4104,4,240,75,0,4104,4105,7,44,0,0,4105,4106,
5,750,0,0,4106,4110,3,1156,578,0,4107,4108,4,240,76,0,4108,4110,5,529,0,
0,4109,4102,1,0,0,0,4109,4103,1,0,0,0,4109,4107,1,0,0,0,4110,4115,1,0,0,
0,4111,4112,5,773,0,0,4112,4114,3,460,230,0,4113,4111,1,0,0,0,4114,4117,
1,0,0,0,4115,4113,1,0,0,0,4115,4116,1,0,0,0,4116,481,1,0,0,0,4117,4115,1,
0,0,0,4118,4122,4,241,77,0,4119,4120,5,618,0,0,4120,4121,5,750,0,0,4121,
4123,3,1156,578,0,4122,4119,1,0,0,0,4122,4123,1,0,0,0,4123,4127,1,0,0,0,
4124,4125,5,406,0,0,4125,4126,5,750,0,0,4126,4128,3,1156,578,0,4127,4124,
1,0,0,0,4127,4128,1,0,0,0,4128,4132,1,0,0,0,4129,4130,5,129,0,0,4130,4131,
5,750,0,0,4131,4133,3,1156,578,0,4132,4129,1,0,0,0,4132,4133,1,0,0,0,4133,
4137,1,0,0,0,4134,4135,5,409,0,0,4135,4136,5,750,0,0,4136,4138,3,1156,578,
0,4137,4134,1,0,0,0,4137,4138,1,0,0,0,4138,4141,1,0,0,0,4139,4141,1,0,0,
0,4140,4118,1,0,0,0,4140,4139,1,0,0,0,4141,483,1,0,0,0,4142,4147,3,486,243,
0,4143,4144,5,773,0,0,4144,4146,3,486,243,0,4145,4143,1,0,0,0,4146,4149,
1,0,0,0,4147,4145,1,0,0,0,4147,4148,1,0,0,0,4148,485,1,0,0,0,4149,4147,1,
0,0,0,4150,4151,7,45,0,0,4151,487,1,0,0,0,4152,4153,7,46,0,0,4153,4154,5,
210,0,0,4154,489,1,0,0,0,4155,4156,5,417,0,0,4156,4157,3,1128,564,0,4157,
4160,5,203,0,0,4158,4161,3,1160,580,0,4159,4161,3,742,371,0,4160,4158,1,
0,0,0,4160,4159,1,0,0,0,4161,4167,1,0,0,0,4162,4167,3,492,246,0,4163,4164,
7,47,0,0,4164,4165,5,417,0,0,4165,4167,3,1128,564,0,4166,4155,1,0,0,0,4166,
4162,1,0,0,0,4166,4163,1,0,0,0,4167,491,1,0,0,0,4168,4169,5,173,0,0,4169,
4172,3,1128,564,0,4170,4171,5,621,0,0,4171,4173,3,494,247,0,4172,4170,1,
0,0,0,4172,4173,1,0,0,0,4173,493,1,0,0,0,4174,4179,3,742,371,0,4175,4176,
5,773,0,0,4176,4178,3,742,371,0,4177,4175,1,0,0,0,4178,4181,1,0,0,0,4179,
4177,1,0,0,0,4179,4180,1,0,0,0,4180,495,1,0,0,0,4181,4179,1,0,0,0,4182,4207,
5,677,0,0,4183,4184,5,284,0,0,4184,4185,5,112,0,0,4185,4187,5,139,0,0,4186,
4188,3,1190,595,0,4187,4186,1,0,0,0,4187,4188,1,0,0,0,4188,4189,1,0,0,0,
4189,4208,3,1154,577,0,4190,4193,5,676,0,0,4191,4192,5,200,0,0,4192,4194,
5,459,0,0,4193,4191,1,0,0,0,4193,4194,1,0,0,0,4194,4208,1,0,0,0,4195,4196,
4,248,78,0,4196,4197,5,244,0,0,4197,4198,5,203,0,0,4198,4199,3,1026,513,
0,4199,4200,5,775,0,0,4200,4201,3,1140,570,0,4201,4202,5,230,0,0,4202,4203,
5,45,0,0,4203,4205,3,1154,577,0,4204,4206,3,498,249,0,4205,4204,1,0,0,0,
4205,4206,1,0,0,0,4206,4208,1,0,0,0,4207,4183,1,0,0,0,4207,4190,1,0,0,0,
4207,4195,1,0,0,0,4208,497,1,0,0,0,4209,4220,3,500,250,0,4210,4211,5,112,
0,0,4211,4213,5,139,0,0,4212,4214,3,1190,595,0,4213,4212,1,0,0,0,4213,4214,
1,0,0,0,4214,4215,1,0,0,0,4215,4217,3,1154,577,0,4216,4218,3,500,250,0,4217,
4216,1,0,0,0,4217,4218,1,0,0,0,4218,4220,1,0,0,0,4219,4209,1,0,0,0,4219,
4210,1,0,0,0,4220,499,1,0,0,0,4221,4223,5,467,0,0,4222,4224,5,373,0,0,4223,
4222,1,0,0,0,4223,4224,1,0,0,0,4224,4225,1,0,0,0,4225,4226,5,539,0,0,4226,
501,1,0,0,0,4227,4228,4,251,79,0,4228,4237,3,504,252,0,4229,4237,3,510,255,
0,4230,4237,3,522,261,0,4231,4237,3,524,262,0,4232,4237,3,538,269,0,4233,
4237,3,540,270,0,4234,4235,4,251,80,0,4235,4237,3,558,279,0,4236,4227,1,
0,0,0,4236,4229,1,0,0,0,4236,4230,1,0,0,0,4236,4231,1,0,0,0,4236,4232,1,
0,0,0,4236,4233,1,0,0,0,4236,4234,1,0,0,0,4237,503,1,0,0,0,4238,4239,5,11,
0,0,4239,4242,5,618,0,0,4240,4241,4,252,81,0,4241,4243,3,978,489,0,4242,
4240,1,0,0,0,4242,4243,1,0,0,0,4243,4244,1,0,0,0,4244,4245,3,506,253,0,4245,
505,1,0,0,0,4246,4247,4,253,82,0,4247,4251,3,1010,505,0,4248,4249,4,253,
83,0,4249,4251,3,1012,506,0,4250,4246,1,0,0,0,4250,4248,1,0,0,0,4251,4252,
1,0,0,0,4252,4253,3,512,256,0,4253,4301,1,0,0,0,4254,4255,4,253,84,0,4255,
4256,3,1026,513,0,4256,4257,5,230,0,0,4257,4258,5,45,0,0,4258,4261,3,1156,
578,0,4259,4260,4,253,85,0,4260,4262,3,1022,511,0,4261,4259,1,0,0,0,4261,
4262,1,0,0,0,4262,4265,1,0,0,0,4263,4264,4,253,86,0,4264,4266,3,1018,509,
0,4265,4263,1,0,0,0,4265,4266,1,0,0,0,4266,4301,1,0,0,0,4267,4268,4,253,
87,0,4268,4269,3,1026,513,0,4269,4270,3,1020,510,0,4270,4301,1,0,0,0,4271,
4272,4,253,88,0,4272,4273,3,1026,513,0,4273,4274,5,128,0,0,4274,4278,5,659,
0,0,4275,4279,5,10,0,0,4276,4279,5,369,0,0,4277,4279,3,560,280,0,4278,4275,
1,0,0,0,4278,4276,1,0,0,0,4278,4277,1,0,0,0,4279,4301,1,0,0,0,4280,4281,
4,253,89,0,4281,4282,3,1026,513,0,4282,4285,5,230,0,0,4283,4284,5,645,0,
0,4284,4286,3,1180,590,0,4285,4283,1,0,0,0,4285,4286,1,0,0,0,4286,4287,1,
0,0,0,4287,4288,5,45,0,0,4288,4289,5,734,0,0,4289,4291,5,406,0,0,4290,4292,
3,1018,509,0,4291,4290,1,0,0,0,4291,4292,1,0,0,0,4292,4301,1,0,0,0,4293,
4294,5,741,0,0,4294,4301,3,1142,571,0,4295,4298,5,740,0,0,4296,4299,3,1142,
571,0,4297,4299,5,698,0,0,4298,4296,1,0,0,0,4298,4297,1,0,0,0,4299,4301,
1,0,0,0,4300,4250,1,0,0,0,4300,4254,1,0,0,0,4300,4267,1,0,0,0,4300,4271,
1,0,0,0,4300,4280,1,0,0,0,4300,4293,1,0,0,0,4300,4295,1,0,0,0,4301,507,1,
0,0,0,4302,4303,5,618,0,0,4303,4304,3,1188,594,0,4304,509,1,0,0,0,4305,4306,
5,97,0,0,4306,4310,5,618,0,0,4307,4308,4,255,90,0,4308,4311,3,980,490,0,
4309,4311,1,0,0,0,4310,4307,1,0,0,0,4310,4309,1,0,0,0,4311,4312,1,0,0,0,
4312,4313,3,1010,505,0,4313,4314,3,514,257,0,4314,4315,3,512,256,0,4315,
511,1,0,0,0,4316,4318,4,256,91,0,4317,4319,3,516,258,0,4318,4317,1,0,0,0,
4318,4319,1,0,0,0,4319,4321,1,0,0,0,4320,4322,3,518,259,0,4321,4320,1,0,
0,0,4321,4322,1,0,0,0,4322,4326,1,0,0,0,4323,4325,3,520,260,0,4324,4323,
1,0,0,0,4325,4328,1,0,0,0,4326,4324,1,0,0,0,4326,4327,1,0,0,0,4327,4331,
1,0,0,0,4328,4326,1,0,0,0,4329,4331,1,0,0,0,4330,4316,1,0,0,0,4330,4329,
1,0,0,0,4331,513,1,0,0,0,4332,4336,4,257,92,0,4333,4334,5,128,0,0,4334,4335,
5,659,0,0,4335,4337,3,560,280,0,4336,4333,1,0,0,0,4336,4337,1,0,0,0,4337,
4340,1,0,0,0,4338,4340,1,0,0,0,4339,4332,1,0,0,0,4339,4338,1,0,0,0,4340,
515,1,0,0,0,4341,4344,5,467,0,0,4342,4345,3,552,276,0,4343,4345,7,48,0,0,
4344,4342,1,0,0,0,4344,4343,1,0,0,0,4345,517,1,0,0,0,4346,4355,5,645,0,0,
4347,4348,5,322,0,0,4348,4356,3,1140,570,0,4349,4350,5,327,0,0,4350,4356,
3,1140,570,0,4351,4352,5,321,0,0,4352,4356,3,1140,570,0,4353,4354,5,328,
0,0,4354,4356,3,1140,570,0,4355,4347,1,0,0,0,4355,4349,1,0,0,0,4355,4351,
1,0,0,0,4355,4353,1,0,0,0,4356,4357,1,0,0,0,4357,4355,1,0,0,0,4357,4358,
1,0,0,0,4358,519,1,0,0,0,4359,4360,5,2,0,0,4360,4393,7,49,0,0,4361,4390,
5,406,0,0,4362,4369,5,177,0,0,4363,4364,5,247,0,0,4364,4365,3,1142,571,0,
4365,4366,5,122,0,0,4366,4370,1,0,0,0,4367,4370,5,365,0,0,4368,4370,5,128,
0,0,4369,4363,1,0,0,0,4369,4367,1,0,0,0,4369,4368,1,0,0,0,4369,4370,1,0,
0,0,4370,4391,1,0,0,0,4371,4374,5,705,0,0,4372,4375,3,1142,571,0,4373,4375,
5,128,0,0,4374,4372,1,0,0,0,4374,4373,1,0,0,0,4375,4391,1,0,0,0,4376,4377,
5,706,0,0,4377,4382,5,247,0,0,4378,4379,3,1142,571,0,4379,4380,5,122,0,0,
4380,4383,1,0,0,0,4381,4383,5,128,0,0,4382,4378,1,0,0,0,4382,4381,1,0,0,
0,4383,4391,1,0,0,0,4384,4385,4,260,93,0,4385,4386,5,467,0,0,4386,4388,5,
101,0,0,4387,4389,7,50,0,0,4388,4387,1,0,0,0,4388,4389,1,0,0,0,4389,4391,
1,0,0,0,4390,4362,1,0,0,0,4390,4371,1,0,0,0,4390,4376,1,0,0,0,4390,4384,
1,0,0,0,4391,4393,1,0,0,0,4392,4359,1,0,0,0,4392,4361,1,0,0,0,4393,521,1,
0,0,0,4394,4395,5,148,0,0,4395,4398,5,618,0,0,4396,4397,4,261,94,0,4397,
4399,3,978,489,0,4398,4396,1,0,0,0,4398,4399,1,0,0,0,4399,4400,1,0,0,0,4400,
4401,3,1008,504,0,4401,523,1,0,0,0,4402,4445,5,215,0,0,4403,4404,4,262,95,
0,4404,4405,3,546,273,0,4405,4406,5,590,0,0,4406,4410,3,1008,504,0,4407,
4408,5,645,0,0,4408,4409,5,660,0,0,4409,4411,5,391,0,0,4410,4407,1,0,0,0,
4410,4411,1,0,0,0,4411,4446,1,0,0,0,4412,4418,3,546,273,0,4413,4415,5,10,
0,0,4414,4416,5,421,0,0,4415,4414,1,0,0,0,4415,4416,1,0,0,0,4416,4418,1,
0,0,0,4417,4412,1,0,0,0,4417,4413,1,0,0,0,4418,4419,1,0,0,0,4419,4421,5,
383,0,0,4420,4422,3,544,272,0,4421,4420,1,0,0,0,4421,4422,1,0,0,0,4422,4423,
1,0,0,0,4423,4424,3,550,275,0,4424,4425,5,590,0,0,4425,4427,3,526,263,0,
4426,4428,3,536,268,0,4427,4426,1,0,0,0,4427,4428,1,0,0,0,4428,4430,1,0,
0,0,4429,4431,3,528,264,0,4430,4429,1,0,0,0,4430,4431,1,0,0,0,4431,4433,
1,0,0,0,4432,4434,3,534,267,0,4433,4432,1,0,0,0,4433,4434,1,0,0,0,4434,4446,
1,0,0,0,4435,4436,5,427,0,0,4436,4437,5,383,0,0,4437,4438,3,1026,513,0,4438,
4439,5,590,0,0,4439,4443,3,526,263,0,4440,4441,5,645,0,0,4441,4442,5,215,
0,0,4442,4444,5,391,0,0,4443,4440,1,0,0,0,4443,4444,1,0,0,0,4444,4446,1,
0,0,0,4445,4403,1,0,0,0,4445,4417,1,0,0,0,4445,4435,1,0,0,0,4446,525,1,0,
0,0,4447,4448,4,263,96,0,4448,4452,3,1010,505,0,4449,4450,4,263,97,0,4450,
4452,3,1008,504,0,4451,4447,1,0,0,0,4451,4449,1,0,0,0,4452,527,1,0,0,0,4453,
4454,4,264,98,0,4454,4456,5,645,0,0,4455,4457,3,556,278,0,4456,4455,1,0,
0,0,4457,4458,1,0,0,0,4458,4456,1,0,0,0,4458,4459,1,0,0,0,4459,4465,1,0,
0,0,4460,4461,4,264,99,0,4461,4462,5,645,0,0,4462,4463,5,215,0,0,4463,4465,
5,391,0,0,4464,4453,1,0,0,0,4464,4460,1,0,0,0,4465,529,1,0,0,0,4466,4467,
5,663,0,0,4467,4468,3,560,280,0,4468,531,1,0,0,0,4469,4470,5,645,0,0,4470,
4478,5,659,0,0,4471,4479,3,560,280,0,4472,4474,5,10,0,0,4473,4475,3,530,
265,0,4474,4473,1,0,0,0,4474,4475,1,0,0,0,4475,4479,1,0,0,0,4476,4479,5,
369,0,0,4477,4479,5,128,0,0,4478,4471,1,0,0,0,4478,4472,1,0,0,0,4478,4476,
1,0,0,0,4478,4477,1,0,0,0,4479,533,1,0,0,0,4480,4481,5,17,0,0,4481,4483,
5,618,0,0,4482,4484,3,532,266,0,4483,4482,1,0,0,0,4483,4484,1,0,0,0,4484,
535,1,0,0,0,4485,4486,4,268,100,0,4486,4487,3,516,258,0,4487,537,1,0,0,0,
4488,4489,5,453,0,0,4489,4490,5,618,0,0,4490,4491,3,1026,513,0,4491,4492,
5,590,0,0,4492,4500,3,1026,513,0,4493,4494,5,773,0,0,4494,4495,3,1026,513,
0,4495,4496,5,590,0,0,4496,4497,3,1026,513,0,4497,4499,1,0,0,0,4498,4493,
1,0,0,0,4499,4502,1,0,0,0,4500,4498,1,0,0,0,4500,4501,1,0,0,0,4501,539,1,
0,0,0,4502,4500,1,0,0,0,4503,4537,5,477,0,0,4504,4505,4,270,101,0,4505,4506,
3,546,273,0,4506,4507,5,203,0,0,4507,4508,3,1008,504,0,4508,4538,1,0,0,0,
4509,4510,3,546,273,0,4510,4511,3,542,271,0,4511,4512,5,203,0,0,4512,4513,
3,1008,504,0,4513,4538,1,0,0,0,4514,4516,5,10,0,0,4515,4517,5,421,0,0,4516,
4515,1,0,0,0,4516,4517,1,0,0,0,4517,4529,1,0,0,0,4518,4519,4,270,102,0,4519,
4521,5,383,0,0,4520,4522,3,544,272,0,4521,4520,1,0,0,0,4521,4522,1,0,0,0,
4522,4523,1,0,0,0,4523,4530,3,550,275,0,4524,4525,5,773,0,0,4525,4526,5,
215,0,0,4526,4527,5,391,0,0,4527,4528,5,203,0,0,4528,4530,3,1008,504,0,4529,
4518,1,0,0,0,4529,4524,1,0,0,0,4530,4538,1,0,0,0,4531,4532,5,427,0,0,4532,
4533,5,383,0,0,4533,4534,3,1026,513,0,4534,4535,5,203,0,0,4535,4536,3,1008,
504,0,4536,4538,1,0,0,0,4537,4504,1,0,0,0,4537,4509,1,0,0,0,4537,4514,1,
0,0,0,4537,4531,1,0,0,0,4538,541,1,0,0,0,4539,4540,4,271,103,0,4540,4542,
5,383,0,0,4541,4543,3,544,272,0,4542,4541,1,0,0,0,4542,4543,1,0,0,0,4543,
4544,1,0,0,0,4544,4554,3,550,275,0,4545,4551,4,271,104,0,4546,4548,5,383,
0,0,4547,4549,3,544,272,0,4548,4547,1,0,0,0,4548,4549,1,0,0,0,4549,4550,
1,0,0,0,4550,4552,3,550,275,0,4551,4546,1,0,0,0,4551,4552,1,0,0,0,4552,4554,
1,0,0,0,4553,4539,1,0,0,0,4553,4545,1,0,0,0,4554,543,1,0,0,0,4555,4556,7,
51,0,0,4556,545,1,0,0,0,4557,4562,3,548,274,0,4558,4559,5,773,0,0,4559,4561,
3,548,274,0,4560,4558,1,0,0,0,4561,4564,1,0,0,0,4562,4560,1,0,0,0,4562,4563,
1,0,0,0,4563,547,1,0,0,0,4564,4562,1,0,0,0,4565,4576,4,274,105,0,4566,4568,
3,1184,592,0,4567,4569,3,1044,522,0,4568,4567,1,0,0,0,4568,4569,1,0,0,0,
4569,4577,1,0,0,0,4570,4574,3,1184,592,0,4571,4575,5,784,0,0,4572,4573,5,
783,0,0,4573,4575,3,1180,590,0,4574,4571,1,0,0,0,4574,4572,1,0,0,0,4575,
4577,1,0,0,0,4576,4566,1,0,0,0,4576,4570,1,0,0,0,4577,4607,1,0,0,0,4578,
4580,7,52,0,0,4579,4581,3,1044,522,0,4580,4579,1,0,0,0,4580,4581,1,0,0,0,
4581,4607,1,0,0,0,4582,4607,7,53,0,0,4583,4584,5,215,0,0,4584,4607,5,391,
0,0,4585,4586,5,509,0,0,4586,4607,5,110,0,0,4587,4591,5,97,0,0,4588,4589,
5,577,0,0,4589,4592,5,571,0,0,4590,4592,7,54,0,0,4591,4588,1,0,0,0,4591,
4590,1,0,0,0,4591,4592,1,0,0,0,4592,4607,1,0,0,0,4593,4594,5,287,0,0,4594,
4607,5,571,0,0,4595,4596,5,459,0,0,4596,4607,7,55,0,0,4597,4598,5,509,0,
0,4598,4607,5,636,0,0,4599,4601,5,11,0,0,4600,4602,5,483,0,0,4601,4600,1,
0,0,0,4601,4602,1,0,0,0,4602,4607,1,0,0,0,4603,4604,4,274,106,0,4604,4605,
7,56,0,0,4605,4607,5,659,0,0,4606,4565,1,0,0,0,4606,4578,1,0,0,0,4606,4582,
1,0,0,0,4606,4583,1,0,0,0,4606,4585,1,0,0,0,4606,4587,1,0,0,0,4606,4593,
1,0,0,0,4606,4595,1,0,0,0,4606,4597,1,0,0,0,4606,4599,1,0,0,0,4606,4603,
1,0,0,0,4607,549,1,0,0,0,4608,4611,5,760,0,0,4609,4610,5,772,0,0,4610,4612,
5,760,0,0,4611,4609,1,0,0,0,4611,4612,1,0,0,0,4612,4625,1,0,0,0,4613,4616,
3,1058,529,0,4614,4615,5,772,0,0,4615,4617,5,760,0,0,4616,4614,1,0,0,0,4616,
4617,1,0,0,0,4617,4625,1,0,0,0,4618,4625,3,1102,551,0,4619,4620,4,275,107,
0,4620,4621,3,1058,529,0,4621,4622,5,772,0,0,4622,4623,3,1102,551,0,4623,
4625,1,0,0,0,4624,4608,1,0,0,0,4624,4613,1,0,0,0,4624,4618,1,0,0,0,4624,
4619,1,0,0,0,4625,551,1,0,0,0,4626,4633,3,554,277,0,4627,4629,5,15,0,0,4628,
4627,1,0,0,0,4628,4629,1,0,0,0,4629,4630,1,0,0,0,4630,4632,3,554,277,0,4631,
4628,1,0,0,0,4632,4635,1,0,0,0,4633,4631,1,0,0,0,4633,4634,1,0,0,0,4634,
553,1,0,0,0,4635,4633,1,0,0,0,4636,4637,5,63,0,0,4637,4643,3,1156,578,0,
4638,4639,5,259,0,0,4639,4643,3,1156,578,0,4640,4641,5,559,0,0,4641,4643,
3,1156,578,0,4642,4636,1,0,0,0,4642,4638,1,0,0,0,4642,4640,1,0,0,0,4643,
555,1,0,0,0,4644,4645,5,215,0,0,4645,4655,5,391,0,0,4646,4647,5,322,0,0,
4647,4655,3,1140,570,0,4648,4649,5,327,0,0,4649,4655,3,1140,570,0,4650,4651,
5,321,0,0,4651,4655,3,1140,570,0,4652,4653,5,328,0,0,4653,4655,3,1140,570,
0,4654,4644,1,0,0,0,4654,4646,1,0,0,0,4654,4648,1,0,0,0,4654,4650,1,0,0,
0,4654,4652,1,0,0,0,4655,557,1,0,0,0,4656,4657,5,506,0,0,4657,4658,5,659,
0,0,4658,4680,3,560,280,0,4659,4660,5,506,0,0,4660,4661,5,659,0,0,4661,4680,
7,57,0,0,4662,4663,5,506,0,0,4663,4664,5,128,0,0,4664,4668,5,659,0,0,4665,
4669,3,560,280,0,4666,4669,5,369,0,0,4667,4669,5,10,0,0,4668,4665,1,0,0,
0,4668,4666,1,0,0,0,4668,4667,1,0,0,0,4669,4670,1,0,0,0,4670,4671,5,590,
0,0,4671,4680,3,560,280,0,4672,4673,5,506,0,0,4673,4674,5,659,0,0,4674,4677,
5,10,0,0,4675,4676,5,663,0,0,4676,4678,3,560,280,0,4677,4675,1,0,0,0,4677,
4678,1,0,0,0,4678,4680,1,0,0,0,4679,4656,1,0,0,0,4679,4659,1,0,0,0,4679,
4662,1,0,0,0,4679,4672,1,0,0,0,4680,559,1,0,0,0,4681,4686,3,562,281,0,4682,
4683,5,773,0,0,4683,4685,3,562,281,0,4684,4682,1,0,0,0,4685,4688,1,0,0,0,
4686,4684,1,0,0,0,4686,4687,1,0,0,0,4687,561,1,0,0,0,4688,4686,1,0,0,0,4689,
4693,3,1184,592,0,4690,4691,5,783,0,0,4691,4694,3,1180,590,0,4692,4694,5,
784,0,0,4693,4690,1,0,0,0,4693,4692,1,0,0,0,4693,4694,1,0,0,0,4694,563,1,
0,0,0,4695,4697,5,14,0,0,4696,4698,3,1034,517,0,4697,4696,1,0,0,0,4697,4698,
1,0,0,0,4698,4699,1,0,0,0,4699,4700,5,574,0,0,4700,4703,3,1104,552,0,4701,
4702,4,282,108,0,4702,4704,3,566,283,0,4703,4701,1,0,0,0,4703,4704,1,0,0,
0,4704,4739,1,0,0,0,4705,4706,5,62,0,0,4706,4707,5,574,0,0,4707,4711,3,1104,
552,0,4708,4710,3,568,284,0,4709,4708,1,0,0,0,4710,4713,1,0,0,0,4711,4709,
1,0,0,0,4711,4712,1,0,0,0,4712,4739,1,0,0,0,4713,4711,1,0,0,0,4714,4715,
5,61,0,0,4715,4716,5,574,0,0,4716,4718,3,1104,552,0,4717,4719,7,58,0,0,4718,
4717,1,0,0,0,4718,4719,1,0,0,0,4719,4739,1,0,0,0,4720,4722,5,388,0,0,4721,
4723,3,1034,517,0,4722,4721,1,0,0,0,4722,4723,1,0,0,0,4723,4724,1,0,0,0,
4724,4725,5,574,0,0,4725,4739,3,1104,552,0,4726,4728,5,455,0,0,4727,4729,
3,1034,517,0,4728,4727,1,0,0,0,4728,4729,1,0,0,0,4729,4730,1,0,0,0,4730,
4731,5,574,0,0,4731,4735,3,1104,552,0,4732,4734,3,570,285,0,4733,4732,1,
0,0,0,4734,4737,1,0,0,0,4735,4733,1,0,0,0,4735,4736,1,0,0,0,4736,4739,1,
0,0,0,4737,4735,1,0,0,0,4738,4695,1,0,0,0,4738,4705,1,0,0,0,4738,4714,1,
0,0,0,4738,4720,1,0,0,0,4738,4726,1,0,0,0,4739,565,1,0,0,0,4740,4741,5,614,
0,0,4741,4742,5,674,0,0,4742,4743,5,383,0,0,4743,4747,3,1130,565,0,4744,
4745,5,645,0,0,4745,4746,5,747,0,0,4746,4748,5,675,0,0,4747,4744,1,0,0,0,
4747,4748,1,0,0,0,4748,4754,1,0,0,0,4749,4750,5,148,0,0,4750,4751,5,674,
0,0,4751,4752,5,383,0,0,4752,4754,3,1130,565,0,4753,4740,1,0,0,0,4753,4749,
1,0,0,0,4754,567,1,0,0,0,4755,4756,5,200,0,0,4756,4759,5,615,0,0,4757,4759,
7,59,0,0,4758,4755,1,0,0,0,4758,4757,1,0,0,0,4759,569,1,0,0,0,4760,4761,
7,60,0,0,4761,571,1,0,0,0,4762,4763,5,245,0,0,4763,4764,5,410,0,0,4764,4765,
3,1128,564,0,4765,4766,5,520,0,0,4766,4767,3,1154,577,0,4767,4785,1,0,0,
0,4768,4769,5,245,0,0,4769,4770,5,664,0,0,4770,4785,3,1164,582,0,4771,4772,
5,607,0,0,4772,4773,5,410,0,0,4773,4785,3,1118,559,0,4774,4775,5,607,0,0,
4775,4776,5,664,0,0,4776,4781,3,1120,560,0,4777,4778,5,773,0,0,4778,4780,
3,1120,560,0,4779,4777,1,0,0,0,4780,4783,1,0,0,0,4781,4779,1,0,0,0,4781,
4782,1,0,0,0,4782,4785,1,0,0,0,4783,4781,1,0,0,0,4784,4762,1,0,0,0,4784,
4768,1,0,0,0,4784,4771,1,0,0,0,4784,4774,1,0,0,0,4785,573,1,0,0,0,4786,4787,
5,506,0,0,4787,4788,3,576,288,0,4788,575,1,0,0,0,4789,4790,3,586,293,0,4790,
4791,3,584,292,0,4791,4846,1,0,0,0,4792,4793,5,592,0,0,4793,4846,3,578,289,
0,4794,4795,3,1192,596,0,4795,4796,3,592,296,0,4796,4846,1,0,0,0,4797,4800,
5,406,0,0,4798,4799,5,200,0,0,4799,4801,3,1026,513,0,4800,4798,1,0,0,0,4800,
4801,1,0,0,0,4801,4802,1,0,0,0,4802,4829,3,1190,595,0,4803,4805,3,1156,578,
0,4804,4806,3,1022,511,0,4805,4804,1,0,0,0,4805,4806,1,0,0,0,4806,4808,1,
0,0,0,4807,4809,3,1018,509,0,4808,4807,1,0,0,0,4808,4809,1,0,0,0,4809,4830,
1,0,0,0,4810,4812,3,1156,578,0,4811,4813,3,1022,511,0,4812,4811,1,0,0,0,
4812,4813,1,0,0,0,4813,4815,1,0,0,0,4814,4816,3,1018,509,0,4815,4814,1,0,
0,0,4815,4816,1,0,0,0,4816,4830,1,0,0,0,4817,4818,4,288,109,0,4818,4819,
5,382,0,0,4819,4820,5,776,0,0,4820,4821,3,1156,578,0,4821,4822,5,777,0,0,
4822,4830,1,0,0,0,4823,4824,4,288,110,0,4824,4825,5,406,0,0,4825,4826,5,
776,0,0,4826,4827,3,1156,578,0,4827,4828,5,777,0,0,4828,4830,1,0,0,0,4829,
4803,1,0,0,0,4829,4810,1,0,0,0,4829,4817,1,0,0,0,4829,4823,1,0,0,0,4830,
4846,1,0,0,0,4831,4832,4,288,111,0,4832,4835,5,406,0,0,4833,4834,5,200,0,
0,4834,4836,3,1026,513,0,4835,4833,1,0,0,0,4835,4836,1,0,0,0,4836,4837,1,
0,0,0,4837,4838,5,590,0,0,4838,4840,5,734,0,0,4839,4841,3,1022,511,0,4840,
4839,1,0,0,0,4840,4841,1,0,0,0,4841,4843,1,0,0,0,4842,4844,3,1018,509,0,
4843,4842,1,0,0,0,4843,4844,1,0,0,0,4844,4846,1,0,0,0,4845,4789,1,0,0,0,
4845,4792,1,0,0,0,4845,4794,1,0,0,0,4845,4797,1,0,0,0,4845,4831,1,0,0,0,
4846,577,1,0,0,0,4847,4849,3,580,290,0,4848,4850,3,582,291,0,4849,4848,1,
0,0,0,4849,4850,1,0,0,0,4850,4857,1,0,0,0,4851,4854,3,582,291,0,4852,4853,
5,773,0,0,4853,4855,3,580,290,0,4854,4852,1,0,0,0,4854,4855,1,0,0,0,4855,
4857,1,0,0,0,4856,4847,1,0,0,0,4856,4851,1,0,0,0,4857,579,1,0,0,0,4858,4859,
5,435,0,0,4859,4860,7,39,0,0,4860,581,1,0,0,0,4861,4862,5,258,0,0,4862,4868,
5,274,0,0,4863,4864,5,456,0,0,4864,4869,5,435,0,0,4865,4866,5,435,0,0,4866,
4869,7,61,0,0,4867,4869,5,500,0,0,4868,4863,1,0,0,0,4868,4865,1,0,0,0,4868,
4867,1,0,0,0,4869,583,1,0,0,0,4870,4871,5,773,0,0,4871,4873,3,588,294,0,
4872,4870,1,0,0,0,4873,4876,1,0,0,0,4874,4872,1,0,0,0,4874,4875,1,0,0,0,
4875,585,1,0,0,0,4876,4874,1,0,0,0,4877,4878,3,746,373,0,4878,4879,3,1190,
595,0,4879,4880,3,596,298,0,4880,4903,1,0,0,0,4881,4903,3,998,499,0,4882,
4883,3,742,371,0,4883,4884,3,1190,595,0,4884,4885,3,676,338,0,4885,4903,
1,0,0,0,4886,4887,3,590,295,0,4887,4888,3,1190,595,0,4888,4889,3,596,298,
0,4889,4903,1,0,0,0,4890,4900,5,356,0,0,4891,4892,3,1190,595,0,4892,4893,
3,676,338,0,4893,4901,1,0,0,0,4894,4896,3,936,468,0,4895,4897,3,986,493,
0,4896,4895,1,0,0,0,4896,4897,1,0,0,0,4897,4901,1,0,0,0,4898,4899,4,293,
112,0,4899,4901,5,128,0,0,4900,4891,1,0,0,0,4900,4894,1,0,0,0,4900,4898,
1,0,0,0,4901,4903,1,0,0,0,4902,4877,1,0,0,0,4902,4881,1,0,0,0,4902,4882,
1,0,0,0,4902,4886,1,0,0,0,4902,4890,1,0,0,0,4903,587,1,0,0,0,4904,4905,3,
1192,596,0,4905,4906,3,746,373,0,4906,4907,3,1190,595,0,4907,4908,3,596,
298,0,4908,4911,1,0,0,0,4909,4911,3,586,293,0,4910,4904,1,0,0,0,4910,4909,
1,0,0,0,4911,589,1,0,0,0,4912,4914,5,785,0,0,4913,4915,3,1196,598,0,4914,
4913,1,0,0,0,4914,4915,1,0,0,0,4915,4916,1,0,0,0,4916,4917,3,746,373,0,4917,
591,1,0,0,0,4918,4919,3,594,297,0,4919,4920,3,584,292,0,4920,4924,1,0,0,
0,4921,4922,5,592,0,0,4922,4924,3,578,289,0,4923,4918,1,0,0,0,4923,4921,
1,0,0,0,4924,593,1,0,0,0,4925,4926,3,746,373,0,4926,4927,3,1190,595,0,4927,
4928,3,596,298,0,4928,595,1,0,0,0,4929,4934,3,676,338,0,4930,4934,7,62,0,
0,4931,4932,4,298,113,0,4932,4934,7,63,0,0,4933,4929,1,0,0,0,4933,4930,1,
0,0,0,4933,4931,1,0,0,0,4934,597,1,0,0,0,4935,5155,5,509,0,0,4936,4937,4,
299,114,0,4937,5156,5,22,0,0,4938,4940,5,110,0,0,4939,4941,3,1030,515,0,
4940,4939,1,0,0,0,4940,4941,1,0,0,0,4941,5156,1,0,0,0,4942,4944,3,600,300,
0,4943,4942,1,0,0,0,4943,4944,1,0,0,0,4944,4945,1,0,0,0,4945,4947,5,571,
0,0,4946,4948,3,606,303,0,4947,4946,1,0,0,0,4947,4948,1,0,0,0,4948,4950,
1,0,0,0,4949,4951,3,1030,515,0,4950,4949,1,0,0,0,4950,4951,1,0,0,0,4951,
5156,1,0,0,0,4952,4954,5,204,0,0,4953,4952,1,0,0,0,4953,4954,1,0,0,0,4954,
4955,1,0,0,0,4955,4957,5,593,0,0,4956,4958,3,606,303,0,4957,4956,1,0,0,0,
4957,4958,1,0,0,0,4958,4960,1,0,0,0,4959,4961,3,1030,515,0,4960,4959,1,0,
0,0,4960,4961,1,0,0,0,4961,5156,1,0,0,0,4962,4964,5,169,0,0,4963,4965,3,
606,303,0,4964,4963,1,0,0,0,4964,4965,1,0,0,0,4965,4967,1,0,0,0,4966,4968,
3,1030,515,0,4967,4966,1,0,0,0,4967,4968,1,0,0,0,4968,5156,1,0,0,0,4969,
4970,5,574,0,0,4970,4972,5,547,0,0,4971,4973,3,606,303,0,4972,4971,1,0,0,
0,4972,4973,1,0,0,0,4973,4975,1,0,0,0,4974,4976,3,1030,515,0,4975,4974,1,
0,0,0,4975,4976,1,0,0,0,4976,5156,1,0,0,0,4977,4978,5,387,0,0,4978,4980,
5,571,0,0,4979,4981,3,606,303,0,4980,4979,1,0,0,0,4980,4981,1,0,0,0,4981,
4983,1,0,0,0,4982,4984,3,1030,515,0,4983,4982,1,0,0,0,4983,4984,1,0,0,0,
4984,5156,1,0,0,0,4985,5156,5,408,0,0,4986,4989,5,163,0,0,4987,4990,3,1094,
547,0,4988,4990,5,10,0,0,4989,4987,1,0,0,0,4989,4988,1,0,0,0,4990,4991,1,
0,0,0,4991,5156,7,64,0,0,4992,4994,3,600,300,0,4993,4992,1,0,0,0,4993,4994,
1,0,0,0,4994,4995,1,0,0,0,4995,4996,5,71,0,0,4996,4997,7,65,0,0,4997,4999,
3,1102,551,0,4998,5000,3,606,303,0,4999,4998,1,0,0,0,4999,5000,1,0,0,0,5000,
5002,1,0,0,0,5001,5003,3,1030,515,0,5002,5001,1,0,0,0,5002,5003,1,0,0,0,
5003,5156,1,0,0,0,5004,5005,7,42,0,0,5005,5156,5,289,0,0,5006,5013,5,514,
0,0,5007,5014,5,225,0,0,5008,5009,5,547,0,0,5009,5011,3,602,301,0,5010,5012,
3,782,391,0,5011,5010,1,0,0,0,5011,5012,1,0,0,0,5012,5014,1,0,0,0,5013,5007,
1,0,0,0,5013,5008,1,0,0,0,5014,5156,1,0,0,0,5015,5016,7,66,0,0,5016,5019,
5,169,0,0,5017,5018,5,251,0,0,5018,5020,3,1156,578,0,5019,5017,1,0,0,0,5019,
5020,1,0,0,0,5020,5023,1,0,0,0,5021,5022,5,203,0,0,5022,5024,3,1144,572,
0,5023,5021,1,0,0,0,5023,5024,1,0,0,0,5024,5026,1,0,0,0,5025,5027,3,284,
142,0,5026,5025,1,0,0,0,5026,5027,1,0,0,0,5027,5029,1,0,0,0,5028,5030,3,
782,391,0,5029,5028,1,0,0,0,5029,5030,1,0,0,0,5030,5156,1,0,0,0,5031,5032,
4,299,115,0,5032,5034,5,180,0,0,5033,5031,1,0,0,0,5033,5034,1,0,0,0,5034,
5035,1,0,0,0,5035,5036,7,67,0,0,5036,5037,3,604,302,0,5037,5039,3,1102,551,
0,5038,5040,3,606,303,0,5039,5038,1,0,0,0,5039,5040,1,0,0,0,5040,5042,1,
0,0,0,5041,5043,3,358,179,0,5042,5041,1,0,0,0,5042,5043,1,0,0,0,5043,5156,
1,0,0,0,5044,5046,5,553,0,0,5045,5044,1,0,0,0,5045,5046,1,0,0,0,5046,5047,
1,0,0,0,5047,5156,5,162,0,0,5048,5049,5,95,0,0,5049,5050,5,776,0,0,5050,
5051,5,760,0,0,5051,5052,5,777,0,0,5052,5156,7,68,0,0,5053,5055,5,639,0,
0,5054,5056,3,284,142,0,5055,5054,1,0,0,0,5055,5056,1,0,0,0,5056,5156,1,
0,0,0,5057,5059,5,166,0,0,5058,5060,3,284,142,0,5059,5058,1,0,0,0,5059,5060,
1,0,0,0,5060,5156,1,0,0,0,5061,5156,5,426,0,0,5062,5071,5,425,0,0,5063,5068,
3,608,304,0,5064,5065,5,773,0,0,5065,5067,3,608,304,0,5066,5064,1,0,0,0,
5067,5070,1,0,0,0,5068,5066,1,0,0,0,5068,5069,1,0,0,0,5069,5072,1,0,0,0,
5070,5068,1,0,0,0,5071,5063,1,0,0,0,5071,5072,1,0,0,0,5072,5076,1,0,0,0,
5073,5074,5,200,0,0,5074,5075,5,430,0,0,5075,5077,5,747,0,0,5076,5073,1,
0,0,0,5076,5077,1,0,0,0,5077,5079,1,0,0,0,5078,5080,3,284,142,0,5079,5078,
1,0,0,0,5079,5080,1,0,0,0,5080,5156,1,0,0,0,5081,5083,3,1192,596,0,5082,
5081,1,0,0,0,5082,5083,1,0,0,0,5083,5084,1,0,0,0,5084,5086,7,69,0,0,5085,
5087,3,1030,515,0,5086,5085,1,0,0,0,5086,5087,1,0,0,0,5087,5156,1,0,0,0,
5088,5090,5,204,0,0,5089,5088,1,0,0,0,5089,5090,1,0,0,0,5090,5091,1,0,0,
0,5091,5156,5,424,0,0,5092,5094,3,758,379,0,5093,5095,3,1030,515,0,5094,
5093,1,0,0,0,5094,5095,1,0,0,0,5095,5156,1,0,0,0,5096,5098,5,70,0,0,5097,
5099,3,1030,515,0,5098,5097,1,0,0,0,5098,5099,1,0,0,0,5099,5156,1,0,0,0,
5100,5101,4,299,116,0,5101,5156,5,93,0,0,5102,5156,5,421,0,0,5103,5106,5,
216,0,0,5104,5105,5,200,0,0,5105,5107,3,1026,513,0,5106,5104,1,0,0,0,5106,
5107,1,0,0,0,5107,5156,1,0,0,0,5108,5109,5,216,0,0,5109,5110,5,200,0,0,5110,
5111,3,1026,513,0,5111,5112,5,621,0,0,5112,5113,3,1008,504,0,5113,5156,1,
0,0,0,5114,5115,5,316,0,0,5115,5156,5,547,0,0,5116,5137,5,97,0,0,5117,5119,
5,109,0,0,5118,5120,3,980,490,0,5119,5118,1,0,0,0,5119,5120,1,0,0,0,5120,
5121,1,0,0,0,5121,5138,3,1058,529,0,5122,5123,5,170,0,0,5123,5138,3,1086,
543,0,5124,5125,5,206,0,0,5125,5138,3,1066,533,0,5126,5127,5,422,0,0,5127,
5138,3,1062,531,0,5128,5129,5,574,0,0,5129,5138,3,1102,551,0,5130,5131,5,
594,0,0,5131,5138,3,1070,535,0,5132,5133,5,636,0,0,5133,5138,3,1074,537,
0,5134,5135,4,299,117,0,5135,5136,5,618,0,0,5136,5138,3,1026,513,0,5137,
5117,1,0,0,0,5137,5122,1,0,0,0,5137,5124,1,0,0,0,5137,5126,1,0,0,0,5137,
5128,1,0,0,0,5137,5130,1,0,0,0,5137,5132,1,0,0,0,5137,5134,1,0,0,0,5138,
5156,1,0,0,0,5139,5140,5,422,0,0,5140,5142,5,547,0,0,5141,5143,3,1030,515,
0,5142,5141,1,0,0,0,5142,5143,1,0,0,0,5143,5156,1,0,0,0,5144,5145,5,206,
0,0,5145,5147,5,547,0,0,5146,5148,3,1030,515,0,5147,5146,1,0,0,0,5147,5148,
1,0,0,0,5148,5156,1,0,0,0,5149,5150,5,422,0,0,5150,5151,5,68,0,0,5151,5156,
3,1062,531,0,5152,5153,5,206,0,0,5153,5154,5,68,0,0,5154,5156,3,1066,533,
0,5155,4936,1,0,0,0,5155,4938,1,0,0,0,5155,4943,1,0,0,0,5155,4953,1,0,0,
0,5155,4962,1,0,0,0,5155,4969,1,0,0,0,5155,4977,1,0,0,0,5155,4985,1,0,0,
0,5155,4986,1,0,0,0,5155,4993,1,0,0,0,5155,5004,1,0,0,0,5155,5006,1,0,0,
0,5155,5015,1,0,0,0,5155,5033,1,0,0,0,5155,5045,1,0,0,0,5155,5048,1,0,0,
0,5155,5053,1,0,0,0,5155,5057,1,0,0,0,5155,5061,1,0,0,0,5155,5062,1,0,0,
0,5155,5082,1,0,0,0,5155,5089,1,0,0,0,5155,5092,1,0,0,0,5155,5096,1,0,0,
0,5155,5100,1,0,0,0,5155,5102,1,0,0,0,5155,5103,1,0,0,0,5155,5108,1,0,0,
0,5155,5114,1,0,0,0,5155,5116,1,0,0,0,5155,5139,1,0,0,0,5155,5144,1,0,0,
0,5155,5149,1,0,0,0,5155,5152,1,0,0,0,5156,599,1,0,0,0,5157,5164,5,204,0,
0,5158,5159,4,300,118,0,5159,5161,5,180,0,0,5160,5162,5,204,0,0,5161,5160,
1,0,0,0,5161,5162,1,0,0,0,5162,5164,1,0,0,0,5163,5157,1,0,0,0,5163,5158,
1,0,0,0,5164,601,1,0,0,0,5165,5167,4,301,119,0,5166,5168,5,370,0,0,5167,
5166,1,0,0,0,5167,5168,1,0,0,0,5168,5171,1,0,0,0,5169,5171,1,0,0,0,5170,
5165,1,0,0,0,5170,5169,1,0,0,0,5171,603,1,0,0,0,5172,5173,7,65,0,0,5173,
605,1,0,0,0,5174,5175,3,604,302,0,5175,5176,3,1128,564,0,5176,607,1,0,0,
0,5177,5178,5,40,0,0,5178,5185,5,255,0,0,5179,5180,5,91,0,0,5180,5185,5,
568,0,0,5181,5182,5,400,0,0,5182,5185,5,185,0,0,5183,5185,7,70,0,0,5184,
5177,1,0,0,0,5184,5179,1,0,0,0,5184,5181,1,0,0,0,5184,5183,1,0,0,0,5185,
609,1,0,0,0,5186,5187,5,33,0,0,5187,5224,3,1160,580,0,5188,5189,5,47,0,0,
5189,5190,5,236,0,0,5190,5191,3,612,306,0,5191,5194,5,251,0,0,5192,5195,
3,1128,564,0,5193,5195,5,128,0,0,5194,5192,1,0,0,0,5194,5193,1,0,0,0,5195,
5224,1,0,0,0,5196,5198,5,196,0,0,5197,5199,3,1034,517,0,5198,5197,1,0,0,
0,5198,5199,1,0,0,0,5199,5209,1,0,0,0,5200,5210,3,630,315,0,5201,5206,3,
626,313,0,5202,5203,5,773,0,0,5203,5205,3,626,313,0,5204,5202,1,0,0,0,5205,
5208,1,0,0,0,5206,5204,1,0,0,0,5206,5207,1,0,0,0,5207,5210,1,0,0,0,5208,
5206,1,0,0,0,5209,5200,1,0,0,0,5209,5201,1,0,0,0,5210,5224,1,0,0,0,5211,
5213,5,266,0,0,5212,5214,7,71,0,0,5213,5212,1,0,0,0,5213,5214,1,0,0,0,5214,
5215,1,0,0,0,5215,5224,3,676,338,0,5216,5217,5,281,0,0,5217,5218,5,236,0,
0,5218,5219,5,248,0,0,5219,5220,5,47,0,0,5220,5224,3,634,317,0,5221,5222,
4,305,120,0,5222,5224,5,510,0,0,5223,5186,1,0,0,0,5223,5188,1,0,0,0,5223,
5196,1,0,0,0,5223,5211,1,0,0,0,5223,5216,1,0,0,0,5223,5221,1,0,0,0,5224,
611,1,0,0,0,5225,5228,3,614,307,0,5226,5228,3,618,309,0,5227,5225,1,0,0,
0,5227,5226,1,0,0,0,5228,613,1,0,0,0,5229,5234,3,616,308,0,5230,5231,5,773,
0,0,5231,5233,3,616,308,0,5232,5230,1,0,0,0,5233,5236,1,0,0,0,5234,5232,
1,0,0,0,5234,5235,1,0,0,0,5235,615,1,0,0,0,5236,5234,1,0,0,0,5237,5239,3,
1102,551,0,5238,5240,3,620,310,0,5239,5238,1,0,0,0,5239,5240,1,0,0,0,5240,
617,1,0,0,0,5241,5242,3,1102,551,0,5242,5243,5,405,0,0,5243,5244,5,776,0,
0,5244,5245,3,52,26,0,5245,5247,5,777,0,0,5246,5248,3,620,310,0,5247,5246,
1,0,0,0,5247,5248,1,0,0,0,5248,619,1,0,0,0,5249,5250,3,406,203,0,5250,5252,
5,776,0,0,5251,5253,3,624,312,0,5252,5251,1,0,0,0,5252,5253,1,0,0,0,5253,
5254,1,0,0,0,5254,5255,5,777,0,0,5255,621,1,0,0,0,5256,5259,3,1128,564,0,
5257,5259,5,420,0,0,5258,5256,1,0,0,0,5258,5257,1,0,0,0,5259,623,1,0,0,0,
5260,5265,3,622,311,0,5261,5262,5,773,0,0,5262,5264,3,622,311,0,5263,5261,
1,0,0,0,5264,5267,1,0,0,0,5265,5263,1,0,0,0,5265,5266,1,0,0,0,5266,625,1,
0,0,0,5267,5265,1,0,0,0,5268,5284,7,72,0,0,5269,5271,3,628,314,0,5270,5269,
1,0,0,0,5270,5271,1,0,0,0,5271,5272,1,0,0,0,5272,5284,5,289,0,0,5273,5274,
5,445,0,0,5274,5276,5,289,0,0,5275,5277,3,782,391,0,5276,5275,1,0,0,0,5276,
5277,1,0,0,0,5277,5284,1,0,0,0,5278,5279,4,313,121,0,5279,5280,5,430,0,0,
5280,5284,5,47,0,0,5281,5282,4,313,122,0,5282,5284,5,389,0,0,5283,5268,1,
0,0,0,5283,5270,1,0,0,0,5283,5273,1,0,0,0,5283,5278,1,0,0,0,5283,5281,1,
0,0,0,5284,627,1,0,0,0,5285,5286,7,73,0,0,5286,629,1,0,0,0,5287,5295,7,18,
0,0,5288,5289,5,645,0,0,5289,5290,5,435,0,0,5290,5296,5,287,0,0,5291,5293,
3,1130,565,0,5292,5294,3,632,316,0,5293,5292,1,0,0,0,5293,5294,1,0,0,0,5294,
5296,1,0,0,0,5295,5288,1,0,0,0,5295,5291,1,0,0,0,5295,5296,1,0,0,0,5296,
631,1,0,0,0,5297,5298,4,316,123,0,5298,5299,5,200,0,0,5299,5304,5,179,0,
0,5300,5301,5,645,0,0,5301,5302,5,435,0,0,5302,5304,5,287,0,0,5303,5297,
1,0,0,0,5303,5300,1,0,0,0,5304,633,1,0,0,0,5305,5306,3,1102,551,0,5306,5308,
3,640,320,0,5307,5309,3,620,310,0,5308,5307,1,0,0,0,5308,5309,1,0,0,0,5309,
5312,1,0,0,0,5310,5311,5,232,0,0,5311,5313,5,270,0,0,5312,5310,1,0,0,0,5312,
5313,1,0,0,0,5313,5316,1,0,0,0,5314,5316,3,636,318,0,5315,5305,1,0,0,0,5315,
5314,1,0,0,0,5316,635,1,0,0,0,5317,5322,3,638,319,0,5318,5319,5,773,0,0,
5319,5321,3,638,319,0,5320,5318,1,0,0,0,5321,5324,1,0,0,0,5322,5320,1,0,
0,0,5322,5323,1,0,0,0,5323,637,1,0,0,0,5324,5322,1,0,0,0,5325,5327,3,1102,
551,0,5326,5328,3,620,310,0,5327,5326,1,0,0,0,5327,5328,1,0,0,0,5328,5331,
1,0,0,0,5329,5330,5,232,0,0,5330,5332,5,270,0,0,5331,5329,1,0,0,0,5331,5332,
1,0,0,0,5332,639,1,0,0,0,5333,5334,5,405,0,0,5334,5335,5,776,0,0,5335,5336,
3,52,26,0,5336,5337,5,777,0,0,5337,641,1,0,0,0,5338,5343,3,644,322,0,5339,
5343,3,654,327,0,5340,5343,3,656,328,0,5341,5343,3,660,330,0,5342,5338,1,
0,0,0,5342,5339,1,0,0,0,5342,5340,1,0,0,0,5342,5341,1,0,0,0,5343,643,1,0,
0,0,5344,5345,5,97,0,0,5345,5346,5,709,0,0,5346,5347,5,217,0,0,5347,5348,
3,1128,564,0,5348,5350,5,599,0,0,5349,5351,3,1190,595,0,5350,5349,1,0,0,
0,5350,5351,1,0,0,0,5351,5352,1,0,0,0,5352,5354,7,74,0,0,5353,5355,3,646,
323,0,5354,5353,1,0,0,0,5354,5355,1,0,0,0,5355,5357,1,0,0,0,5356,5358,3,
650,325,0,5357,5356,1,0,0,0,5357,5358,1,0,0,0,5358,5360,1,0,0,0,5359,5361,
3,652,326,0,5360,5359,1,0,0,0,5360,5361,1,0,0,0,5361,645,1,0,0,0,5362,5364,
5,711,0,0,5363,5365,3,1190,595,0,5364,5363,1,0,0,0,5364,5365,1,0,0,0,5365,
5366,1,0,0,0,5366,5373,3,648,324,0,5367,5369,5,773,0,0,5368,5367,1,0,0,0,
5368,5369,1,0,0,0,5369,5370,1,0,0,0,5370,5372,3,648,324,0,5371,5368,1,0,
0,0,5372,5375,1,0,0,0,5373,5371,1,0,0,0,5373,5374,1,0,0,0,5374,647,1,0,0,
0,5375,5373,1,0,0,0,5376,5379,5,747,0,0,5377,5378,5,759,0,0,5378,5380,5,
747,0,0,5379,5377,1,0,0,0,5379,5380,1,0,0,0,5380,649,1,0,0,0,5381,5383,5,
708,0,0,5382,5384,3,1190,595,0,5383,5382,1,0,0,0,5383,5384,1,0,0,0,5384,
5385,1,0,0,0,5385,5386,5,747,0,0,5386,651,1,0,0,0,5387,5388,7,75,0,0,5388,
653,1,0,0,0,5389,5390,5,11,0,0,5390,5391,5,709,0,0,5391,5392,5,217,0,0,5392,
5394,3,1122,561,0,5393,5395,3,646,323,0,5394,5393,1,0,0,0,5394,5395,1,0,
0,0,5395,5397,1,0,0,0,5396,5398,3,650,325,0,5397,5396,1,0,0,0,5397,5398,
1,0,0,0,5398,5400,1,0,0,0,5399,5401,3,652,326,0,5400,5399,1,0,0,0,5400,5401,
1,0,0,0,5401,5403,1,0,0,0,5402,5404,5,198,0,0,5403,5402,1,0,0,0,5403,5404,
1,0,0,0,5404,655,1,0,0,0,5405,5406,5,506,0,0,5406,5407,5,709,0,0,5407,5408,
5,217,0,0,5408,5411,3,1128,564,0,5409,5410,5,200,0,0,5410,5412,3,658,329,
0,5411,5409,1,0,0,0,5411,5412,1,0,0,0,5412,657,1,0,0,0,5413,5420,3,1142,
571,0,5414,5416,5,773,0,0,5415,5414,1,0,0,0,5415,5416,1,0,0,0,5416,5417,
1,0,0,0,5417,5419,3,1142,571,0,5418,5415,1,0,0,0,5419,5422,1,0,0,0,5420,
5418,1,0,0,0,5420,5421,1,0,0,0,5421,659,1,0,0,0,5422,5420,1,0,0,0,5423,5424,
5,148,0,0,5424,5425,5,709,0,0,5425,5426,5,217,0,0,5426,5428,3,1122,561,0,
5427,5429,5,198,0,0,5428,5427,1,0,0,0,5428,5429,1,0,0,0,5429,661,1,0,0,0,
5430,5437,3,664,332,0,5431,5437,3,666,333,0,5432,5437,3,670,335,0,5433,5437,
3,672,336,0,5434,5435,4,331,124,0,5435,5437,3,674,337,0,5436,5430,1,0,0,
0,5436,5431,1,0,0,0,5436,5432,1,0,0,0,5436,5433,1,0,0,0,5436,5434,1,0,0,
0,5437,663,1,0,0,0,5438,5439,7,76,0,0,5439,5442,3,1102,551,0,5440,5443,3,
1156,578,0,5441,5443,3,1046,523,0,5442,5440,1,0,0,0,5442,5441,1,0,0,0,5442,
5443,1,0,0,0,5443,665,1,0,0,0,5444,5460,7,76,0,0,5445,5446,4,333,125,0,5446,
5461,5,180,0,0,5447,5448,4,333,126,0,5448,5461,5,404,0,0,5449,5450,4,333,
127,0,5450,5451,5,201,0,0,5451,5452,5,750,0,0,5452,5461,3,1180,590,0,5453,
5454,4,333,128,0,5454,5461,5,14,0,0,5455,5456,4,333,129,0,5456,5457,5,14,
0,0,5457,5458,5,201,0,0,5458,5459,5,750,0,0,5459,5461,3,1180,590,0,5460,
5445,1,0,0,0,5460,5447,1,0,0,0,5460,5449,1,0,0,0,5460,5453,1,0,0,0,5460,
5455,1,0,0,0,5460,5461,1,0,0,0,5461,5462,1,0,0,0,5462,5463,3,668,334,0,5463,
667,1,0,0,0,5464,5477,3,266,133,0,5465,5470,4,334,130,0,5466,5471,3,220,
110,0,5467,5471,3,232,116,0,5468,5471,3,264,132,0,5469,5471,3,416,208,0,
5470,5466,1,0,0,0,5470,5467,1,0,0,0,5470,5468,1,0,0,0,5470,5469,1,0,0,0,
5471,5477,1,0,0,0,5472,5473,4,334,131,0,5473,5474,5,200,0,0,5474,5475,5,
84,0,0,5475,5477,3,1142,571,0,5476,5464,1,0,0,0,5476,5465,1,0,0,0,5476,5472,
1,0,0,0,5477,669,1,0,0,0,5478,5479,5,222,0,0,5479,5480,3,1180,590,0,5480,
671,1,0,0,0,5481,5482,5,620,0,0,5482,5483,3,1128,564,0,5483,673,1,0,0,0,
5484,5485,5,714,0,0,5485,675,1,0,0,0,5486,5487,6,338,-1,0,5487,5493,3,678,
339,0,5488,5490,5,257,0,0,5489,5491,3,760,380,0,5490,5489,1,0,0,0,5490,5491,
1,0,0,0,5491,5492,1,0,0,0,5492,5494,7,77,0,0,5493,5488,1,0,0,0,5493,5494,
1,0,0,0,5494,5498,1,0,0,0,5495,5496,5,371,0,0,5496,5498,3,676,338,4,5497,
5486,1,0,0,0,5497,5495,1,0,0,0,5498,5510,1,0,0,0,5499,5500,10,3,0,0,5500,
5501,7,78,0,0,5501,5509,3,676,338,4,5502,5503,10,2,0,0,5503,5504,5,654,0,
0,5504,5509,3,676,338,3,5505,5506,10,1,0,0,5506,5507,7,79,0,0,5507,5509,
3,676,338,2,5508,5499,1,0,0,0,5508,5502,1,0,0,0,5508,5505,1,0,0,0,5509,5512,
1,0,0,0,5510,5508,1,0,0,0,5510,5511,1,0,0,0,5511,677,1,0,0,0,5512,5510,1,
0,0,0,5513,5514,6,339,-1,0,5514,5515,3,682,341,0,5515,5533,1,0,0,0,5516,
5517,10,3,0,0,5517,5519,5,257,0,0,5518,5520,3,760,380,0,5519,5518,1,0,0,
0,5519,5520,1,0,0,0,5520,5521,1,0,0,0,5521,5532,5,376,0,0,5522,5523,10,2,
0,0,5523,5524,3,680,340,0,5524,5525,3,682,341,0,5525,5532,1,0,0,0,5526,5527,
10,1,0,0,5527,5528,3,680,340,0,5528,5529,7,80,0,0,5529,5530,3,280,140,0,
5530,5532,1,0,0,0,5531,5516,1,0,0,0,5531,5522,1,0,0,0,5531,5526,1,0,0,0,
5532,5535,1,0,0,0,5533,5531,1,0,0,0,5533,5534,1,0,0,0,5534,679,1,0,0,0,5535,
5533,1,0,0,0,5536,5537,7,81,0,0,5537,681,1,0,0,0,5538,5552,3,686,343,0,5539,
5541,3,760,380,0,5540,5539,1,0,0,0,5540,5541,1,0,0,0,5541,5542,1,0,0,0,5542,
5553,3,684,342,0,5543,5544,4,341,138,0,5544,5546,5,733,0,0,5545,5547,5,668,
0,0,5546,5545,1,0,0,0,5546,5547,1,0,0,0,5547,5548,1,0,0,0,5548,5553,3,772,
386,0,5549,5550,5,521,0,0,5550,5551,5,275,0,0,5551,5553,3,686,343,0,5552,
5540,1,0,0,0,5552,5543,1,0,0,0,5552,5549,1,0,0,0,5552,5553,1,0,0,0,5553,
683,1,0,0,0,5554,5560,5,251,0,0,5555,5561,3,280,140,0,5556,5557,5,776,0,
0,5557,5558,3,756,378,0,5558,5559,5,777,0,0,5559,5561,1,0,0,0,5560,5555,
1,0,0,0,5560,5556,1,0,0,0,5561,5576,1,0,0,0,5562,5563,5,30,0,0,5563,5564,
3,686,343,0,5564,5565,5,15,0,0,5565,5566,3,682,341,0,5566,5576,1,0,0,0,5567,
5568,5,275,0,0,5568,5571,3,688,344,0,5569,5570,5,168,0,0,5570,5572,3,688,
344,0,5571,5569,1,0,0,0,5571,5572,1,0,0,0,5572,5576,1,0,0,0,5573,5574,5,
444,0,0,5574,5576,3,686,343,0,5575,5554,1,0,0,0,5575,5562,1,0,0,0,5575,5567,
1,0,0,0,5575,5573,1,0,0,0,5576,685,1,0,0,0,5577,5578,6,343,-1,0,5578,5579,
3,688,344,0,5579,5606,1,0,0,0,5580,5581,10,7,0,0,5581,5582,5,769,0,0,5582,
5605,3,686,343,8,5583,5584,10,6,0,0,5584,5585,7,82,0,0,5585,5605,3,686,343,
7,5586,5587,10,5,0,0,5587,5588,7,83,0,0,5588,5605,3,686,343,6,5589,5590,
10,3,0,0,5590,5591,7,84,0,0,5591,5605,3,686,343,4,5592,5593,10,2,0,0,5593,
5594,5,768,0,0,5594,5605,3,686,343,3,5595,5596,10,1,0,0,5596,5597,5,771,
0,0,5597,5605,3,686,343,2,5598,5599,10,4,0,0,5599,5600,7,83,0,0,5600,5601,
5,247,0,0,5601,5602,3,676,338,0,5602,5603,3,764,382,0,5603,5605,1,0,0,0,
5604,5580,1,0,0,0,5604,5583,1,0,0,0,5604,5586,1,0,0,0,5604,5589,1,0,0,0,
5604,5592,1,0,0,0,5604,5595,1,0,0,0,5604,5598,1,0,0,0,5605,5608,1,0,0,0,
5606,5604,1,0,0,0,5606,5607,1,0,0,0,5607,687,1,0,0,0,5608,5606,1,0,0,0,5609,
5610,6,344,-1,0,5610,5614,3,740,370,0,5611,5612,3,1190,595,0,5612,5613,3,
676,338,0,5613,5615,1,0,0,0,5614,5611,1,0,0,0,5614,5615,1,0,0,0,5615,5719,
1,0,0,0,5616,5618,3,1046,523,0,5617,5619,3,692,346,0,5618,5617,1,0,0,0,5618,
5619,1,0,0,0,5619,5719,1,0,0,0,5620,5719,3,716,358,0,5621,5719,3,734,367,
0,5622,5719,3,1148,574,0,5623,5719,5,787,0,0,5624,5719,3,694,347,0,5625,
5626,4,344,146,0,5626,5719,3,696,348,0,5627,5628,4,344,147,0,5628,5719,3,
698,349,0,5629,5630,7,85,0,0,5630,5719,3,688,344,14,5631,5632,3,762,381,
0,5632,5633,3,688,344,13,5633,5719,1,0,0,0,5634,5636,5,487,0,0,5635,5634,
1,0,0,0,5635,5636,1,0,0,0,5636,5637,1,0,0,0,5637,5638,5,776,0,0,5638,5639,
3,756,378,0,5639,5640,5,777,0,0,5640,5719,1,0,0,0,5641,5643,5,174,0,0,5642,
5641,1,0,0,0,5642,5643,1,0,0,0,5643,5644,1,0,0,0,5644,5719,3,280,140,0,5645,
5646,5,778,0,0,5646,5647,3,1128,564,0,5647,5648,3,676,338,0,5648,5649,5,
779,0,0,5649,5719,1,0,0,0,5650,5651,5,320,0,0,5651,5652,3,710,355,0,5652,
5653,5,7,0,0,5653,5654,5,776,0,0,5654,5656,3,686,343,0,5655,5657,3,714,357,
0,5656,5655,1,0,0,0,5656,5657,1,0,0,0,5657,5658,1,0,0,0,5658,5659,5,777,
0,0,5659,5719,1,0,0,0,5660,5661,5,32,0,0,5661,5719,3,688,344,8,5662,5663,
5,52,0,0,5663,5664,5,776,0,0,5664,5665,3,676,338,0,5665,5666,5,17,0,0,5666,
5668,3,754,377,0,5667,5669,3,690,345,0,5668,5667,1,0,0,0,5668,5669,1,0,0,
0,5669,5670,1,0,0,0,5670,5671,5,777,0,0,5671,5719,1,0,0,0,5672,5674,5,51,
0,0,5673,5675,3,676,338,0,5674,5673,1,0,0,0,5674,5675,1,0,0,0,5675,5679,
1,0,0,0,5676,5677,3,748,374,0,5677,5678,3,750,375,0,5678,5680,1,0,0,0,5679,
5676,1,0,0,0,5680,5681,1,0,0,0,5681,5679,1,0,0,0,5681,5682,1,0,0,0,5682,
5684,1,0,0,0,5683,5685,3,752,376,0,5684,5683,1,0,0,0,5684,5685,1,0,0,0,5685,
5686,1,0,0,0,5686,5687,5,159,0,0,5687,5719,1,0,0,0,5688,5689,5,94,0,0,5689,
5690,5,776,0,0,5690,5691,3,676,338,0,5691,5692,5,773,0,0,5692,5693,3,754,
377,0,5693,5694,5,777,0,0,5694,5719,1,0,0,0,5695,5696,5,94,0,0,5696,5697,
5,776,0,0,5697,5698,3,676,338,0,5698,5699,5,621,0,0,5699,5700,3,936,468,
0,5700,5701,5,777,0,0,5701,5719,1,0,0,0,5702,5703,5,128,0,0,5703,5704,5,
776,0,0,5704,5705,3,1136,568,0,5705,5706,5,777,0,0,5706,5719,1,0,0,0,5707,
5708,5,626,0,0,5708,5709,5,776,0,0,5709,5710,3,1136,568,0,5710,5711,5,777,
0,0,5711,5719,1,0,0,0,5712,5713,5,247,0,0,5713,5714,3,676,338,0,5714,5715,
3,764,382,0,5715,5716,5,758,0,0,5716,5717,3,676,338,0,5717,5719,1,0,0,0,
5718,5609,1,0,0,0,5718,5616,1,0,0,0,5718,5620,1,0,0,0,5718,5621,1,0,0,0,
5718,5622,1,0,0,0,5718,5623,1,0,0,0,5718,5624,1,0,0,0,5718,5625,1,0,0,0,
5718,5627,1,0,0,0,5718,5629,1,0,0,0,5718,5631,1,0,0,0,5718,5635,1,0,0,0,
5718,5642,1,0,0,0,5718,5645,1,0,0,0,5718,5650,1,0,0,0,5718,5660,1,0,0,0,
5718,5662,1,0,0,0,5718,5672,1,0,0,0,5718,5688,1,0,0,0,5718,5695,1,0,0,0,
5718,5702,1,0,0,0,5718,5707,1,0,0,0,5718,5712,1,0,0,0,5719,5728,1,0,0,0,
5720,5721,10,15,0,0,5721,5722,5,746,0,0,5722,5727,3,688,344,16,5723,5724,
10,21,0,0,5724,5725,5,69,0,0,5725,5727,3,1180,590,0,5726,5720,1,0,0,0,5726,
5723,1,0,0,0,5727,5730,1,0,0,0,5728,5726,1,0,0,0,5728,5729,1,0,0,0,5729,
689,1,0,0,0,5730,5728,1,0,0,0,5731,5732,4,345,150,0,5732,5733,5,731,0,0,
5733,691,1,0,0,0,5734,5735,4,346,151,0,5735,5736,5,781,0,0,5736,5741,3,1154,
577,0,5737,5738,4,346,152,0,5738,5739,5,782,0,0,5739,5741,3,1154,577,0,5740,
5734,1,0,0,0,5740,5737,1,0,0,0,5741,693,1,0,0,0,5742,5743,5,26,0,0,5743,
5745,5,776,0,0,5744,5746,5,143,0,0,5745,5744,1,0,0,0,5745,5746,1,0,0,0,5746,
5747,1,0,0,0,5747,5748,3,708,354,0,5748,5751,5,777,0,0,5749,5750,4,347,153,
0,5750,5752,3,700,350,0,5751,5749,1,0,0,0,5751,5752,1,0,0,0,5752,5874,1,
0,0,0,5753,5754,7,86,0,0,5754,5755,5,776,0,0,5755,5756,3,708,354,0,5756,
5759,5,777,0,0,5757,5758,4,347,154,0,5758,5760,3,700,350,0,5759,5757,1,0,
0,0,5759,5760,1,0,0,0,5760,5874,1,0,0,0,5761,5762,4,347,155,0,5762,5874,
3,706,353,0,5763,5764,5,95,0,0,5764,5766,5,776,0,0,5765,5767,5,10,0,0,5766,
5765,1,0,0,0,5766,5767,1,0,0,0,5767,5768,1,0,0,0,5768,5769,5,760,0,0,5769,
5772,5,777,0,0,5770,5771,4,347,156,0,5771,5773,3,700,350,0,5772,5770,1,0,
0,0,5772,5773,1,0,0,0,5773,5874,1,0,0,0,5774,5775,5,95,0,0,5775,5783,5,776,
0,0,5776,5778,5,10,0,0,5777,5776,1,0,0,0,5777,5778,1,0,0,0,5778,5779,1,0,
0,0,5779,5784,5,760,0,0,5780,5784,3,708,354,0,5781,5782,5,143,0,0,5782,5784,
3,756,378,0,5783,5777,1,0,0,0,5783,5780,1,0,0,0,5783,5781,1,0,0,0,5784,5785,
1,0,0,0,5785,5788,5,777,0,0,5786,5787,4,347,157,0,5787,5789,3,700,350,0,
5788,5786,1,0,0,0,5788,5789,1,0,0,0,5789,5874,1,0,0,0,5790,5791,5,345,0,
0,5791,5793,5,776,0,0,5792,5794,5,143,0,0,5793,5792,1,0,0,0,5793,5794,1,
0,0,0,5794,5795,1,0,0,0,5795,5796,3,708,354,0,5796,5799,5,777,0,0,5797,5798,
4,347,158,0,5798,5800,3,700,350,0,5799,5797,1,0,0,0,5799,5800,1,0,0,0,5800,
5874,1,0,0,0,5801,5802,5,326,0,0,5802,5804,5,776,0,0,5803,5805,5,143,0,0,
5804,5803,1,0,0,0,5804,5805,1,0,0,0,5805,5806,1,0,0,0,5806,5807,3,708,354,
0,5807,5810,5,777,0,0,5808,5809,4,347,159,0,5809,5811,3,700,350,0,5810,5808,
1,0,0,0,5810,5811,1,0,0,0,5811,5874,1,0,0,0,5812,5813,5,551,0,0,5813,5814,
5,776,0,0,5814,5815,3,708,354,0,5815,5818,5,777,0,0,5816,5817,4,347,160,
0,5817,5819,3,700,350,0,5818,5816,1,0,0,0,5818,5819,1,0,0,0,5819,5874,1,
0,0,0,5820,5821,5,632,0,0,5821,5822,5,776,0,0,5822,5823,3,708,354,0,5823,
5826,5,777,0,0,5824,5825,4,347,161,0,5825,5827,3,700,350,0,5826,5824,1,0,
0,0,5826,5827,1,0,0,0,5827,5874,1,0,0,0,5828,5829,5,548,0,0,5829,5830,5,
776,0,0,5830,5831,3,708,354,0,5831,5834,5,777,0,0,5832,5833,4,347,162,0,
5833,5835,3,700,350,0,5834,5832,1,0,0,0,5834,5835,1,0,0,0,5835,5874,1,0,
0,0,5836,5837,5,635,0,0,5837,5838,5,776,0,0,5838,5839,3,708,354,0,5839,5842,
5,777,0,0,5840,5841,4,347,163,0,5841,5843,3,700,350,0,5842,5840,1,0,0,0,
5842,5843,1,0,0,0,5843,5874,1,0,0,0,5844,5845,5,564,0,0,5845,5847,5,776,
0,0,5846,5848,5,143,0,0,5847,5846,1,0,0,0,5847,5848,1,0,0,0,5848,5849,1,
0,0,0,5849,5850,3,708,354,0,5850,5853,5,777,0,0,5851,5852,4,347,164,0,5852,
5854,3,700,350,0,5853,5851,1,0,0,0,5853,5854,1,0,0,0,5854,5874,1,0,0,0,5855,
5856,5,218,0,0,5856,5858,5,776,0,0,5857,5859,5,143,0,0,5858,5857,1,0,0,0,
5858,5859,1,0,0,0,5859,5860,1,0,0,0,5860,5862,3,756,378,0,5861,5863,3,328,
164,0,5862,5861,1,0,0,0,5862,5863,1,0,0,0,5863,5866,1,0,0,0,5864,5865,5,
499,0,0,5865,5867,3,1156,578,0,5866,5864,1,0,0,0,5866,5867,1,0,0,0,5867,
5868,1,0,0,0,5868,5871,5,777,0,0,5869,5870,4,347,165,0,5870,5872,3,700,350,
0,5871,5869,1,0,0,0,5871,5872,1,0,0,0,5872,5874,1,0,0,0,5873,5742,1,0,0,
0,5873,5753,1,0,0,0,5873,5761,1,0,0,0,5873,5763,1,0,0,0,5873,5774,1,0,0,
0,5873,5790,1,0,0,0,5873,5801,1,0,0,0,5873,5812,1,0,0,0,5873,5820,1,0,0,
0,5873,5828,1,0,0,0,5873,5836,1,0,0,0,5873,5844,1,0,0,0,5873,5855,1,0,0,
0,5874,695,1,0,0,0,5875,5876,5,672,0,0,5876,5877,5,776,0,0,5877,5878,3,756,
378,0,5878,5879,5,777,0,0,5879,697,1,0,0,0,5880,5881,7,87,0,0,5881,5882,
3,1188,594,0,5882,5883,3,700,350,0,5883,5923,1,0,0,0,5884,5885,5,688,0,0,
5885,5886,3,772,386,0,5886,5887,3,700,350,0,5887,5923,1,0,0,0,5888,5889,
7,88,0,0,5889,5890,5,776,0,0,5890,5892,3,676,338,0,5891,5893,3,702,351,0,
5892,5891,1,0,0,0,5892,5893,1,0,0,0,5893,5894,1,0,0,0,5894,5896,5,777,0,
0,5895,5897,3,704,352,0,5896,5895,1,0,0,0,5896,5897,1,0,0,0,5897,5898,1,
0,0,0,5898,5899,3,700,350,0,5899,5923,1,0,0,0,5900,5901,7,89,0,0,5901,5903,
3,770,385,0,5902,5904,3,704,352,0,5903,5902,1,0,0,0,5903,5904,1,0,0,0,5904,
5905,1,0,0,0,5905,5906,3,700,350,0,5906,5923,1,0,0,0,5907,5908,5,687,0,0,
5908,5909,5,776,0,0,5909,5910,3,676,338,0,5910,5911,5,773,0,0,5911,5912,
3,688,344,0,5912,5915,5,777,0,0,5913,5914,5,203,0,0,5914,5916,7,90,0,0,5915,
5913,1,0,0,0,5915,5916,1,0,0,0,5916,5918,1,0,0,0,5917,5919,3,704,352,0,5918,
5917,1,0,0,0,5918,5919,1,0,0,0,5919,5920,1,0,0,0,5920,5921,3,700,350,0,5921,
5923,1,0,0,0,5922,5880,1,0,0,0,5922,5884,1,0,0,0,5922,5888,1,0,0,0,5922,
5900,1,0,0,0,5922,5907,1,0,0,0,5923,699,1,0,0,0,5924,5927,5,691,0,0,5925,
5928,3,1124,562,0,5926,5928,3,302,151,0,5927,5925,1,0,0,0,5927,5926,1,0,
0,0,5928,701,1,0,0,0,5929,5932,5,773,0,0,5930,5933,3,1144,572,0,5931,5933,
5,787,0,0,5932,5930,1,0,0,0,5932,5931,1,0,0,0,5933,5936,1,0,0,0,5934,5935,
5,773,0,0,5935,5937,3,676,338,0,5936,5934,1,0,0,0,5936,5937,1,0,0,0,5937,
703,1,0,0,0,5938,5939,7,91,0,0,5939,5940,5,689,0,0,5940,705,1,0,0,0,5941,
5942,5,667,0,0,5942,5943,5,776,0,0,5943,5944,3,708,354,0,5944,5946,5,777,
0,0,5945,5947,3,700,350,0,5946,5945,1,0,0,0,5946,5947,1,0,0,0,5947,5958,
1,0,0,0,5948,5949,5,666,0,0,5949,5950,5,776,0,0,5950,5951,3,708,354,0,5951,
5952,5,773,0,0,5952,5953,3,708,354,0,5953,5955,5,777,0,0,5954,5956,3,700,
350,0,5955,5954,1,0,0,0,5955,5956,1,0,0,0,5956,5958,1,0,0,0,5957,5941,1,
0,0,0,5957,5948,1,0,0,0,5958,707,1,0,0,0,5959,5961,5,10,0,0,5960,5959,1,
0,0,0,5960,5961,1,0,0,0,5961,5962,1,0,0,0,5962,5963,3,676,338,0,5963,709,
1,0,0,0,5964,5970,3,712,356,0,5965,5966,5,776,0,0,5966,5967,3,712,356,0,
5967,5968,5,777,0,0,5968,5970,1,0,0,0,5969,5964,1,0,0,0,5969,5965,1,0,0,
0,5970,711,1,0,0,0,5971,5976,3,1136,568,0,5972,5973,5,773,0,0,5973,5975,
3,1136,568,0,5974,5972,1,0,0,0,5975,5978,1,0,0,0,5976,5974,1,0,0,0,5976,
5977,1,0,0,0,5977,713,1,0,0,0,5978,5976,1,0,0,0,5979,5980,5,251,0,0,5980,
5981,5,41,0,0,5981,5995,5,346,0,0,5982,5983,5,251,0,0,5983,5984,5,359,0,
0,5984,5985,5,267,0,0,5985,5989,5,346,0,0,5986,5987,5,645,0,0,5987,5988,
5,430,0,0,5988,5990,5,176,0,0,5989,5986,1,0,0,0,5989,5990,1,0,0,0,5990,5995,
1,0,0,0,5991,5992,5,645,0,0,5992,5993,5,430,0,0,5993,5995,5,176,0,0,5994,
5979,1,0,0,0,5994,5982,1,0,0,0,5994,5991,1,0,0,0,5995,715,1,0,0,0,5996,5997,
5,60,0,0,5997,5998,5,776,0,0,5998,6001,3,756,378,0,5999,6000,5,621,0,0,6000,
6002,3,936,468,0,6001,5999,1,0,0,0,6001,6002,1,0,0,0,6002,6003,1,0,0,0,6003,
6004,5,777,0,0,6004,6270,1,0,0,0,6005,6007,5,105,0,0,6006,6008,3,1188,594,
0,6007,6006,1,0,0,0,6007,6008,1,0,0,0,6008,6270,1,0,0,0,6009,6010,5,116,
0,0,6010,6270,3,770,385,0,6011,6012,5,122,0,0,6012,6270,3,770,385,0,6013,
6014,5,229,0,0,6014,6270,3,770,385,0,6015,6016,5,242,0,0,6016,6017,5,776,
0,0,6017,6018,3,676,338,0,6018,6019,5,773,0,0,6019,6020,3,676,338,0,6020,
6021,5,773,0,0,6021,6022,3,676,338,0,6022,6023,5,773,0,0,6023,6024,3,676,
338,0,6024,6025,5,777,0,0,6025,6270,1,0,0,0,6026,6027,5,247,0,0,6027,6028,
5,776,0,0,6028,6031,3,676,338,0,6029,6030,5,773,0,0,6030,6032,3,676,338,
0,6031,6029,1,0,0,0,6032,6033,1,0,0,0,6033,6031,1,0,0,0,6033,6034,1,0,0,
0,6034,6035,1,0,0,0,6035,6036,5,777,0,0,6036,6270,1,0,0,0,6037,6038,5,272,
0,0,6038,6039,5,776,0,0,6039,6040,3,676,338,0,6040,6041,5,773,0,0,6041,6042,
3,676,338,0,6042,6043,5,777,0,0,6043,6270,1,0,0,0,6044,6045,5,343,0,0,6045,
6270,3,770,385,0,6046,6047,5,350,0,0,6047,6270,3,770,385,0,6048,6049,5,478,
0,0,6049,6050,5,776,0,0,6050,6051,3,676,338,0,6051,6052,5,773,0,0,6052,6053,
3,676,338,0,6053,6054,5,777,0,0,6054,6270,1,0,0,0,6055,6056,5,495,0,0,6056,
6270,3,770,385,0,6057,6058,5,586,0,0,6058,6270,3,770,385,0,6059,6060,5,583,
0,0,6060,6061,5,776,0,0,6061,6064,3,676,338,0,6062,6063,5,773,0,0,6063,6065,
3,676,338,0,6064,6062,1,0,0,0,6064,6065,1,0,0,0,6065,6066,1,0,0,0,6066,6067,
5,777,0,0,6067,6270,1,0,0,0,6068,6270,3,730,365,0,6069,6070,5,618,0,0,6070,
6270,3,1188,594,0,6071,6072,5,626,0,0,6072,6270,3,770,385,0,6073,6074,5,
656,0,0,6074,6270,3,770,385,0,6075,6076,7,92,0,0,6076,6077,5,776,0,0,6077,
6078,3,676,338,0,6078,6084,5,773,0,0,6079,6085,3,676,338,0,6080,6081,5,247,
0,0,6081,6082,3,676,338,0,6082,6083,3,764,382,0,6083,6085,1,0,0,0,6084,6079,
1,0,0,0,6084,6080,1,0,0,0,6085,6086,1,0,0,0,6086,6087,5,777,0,0,6087,6270,
1,0,0,0,6088,6090,5,100,0,0,6089,6091,3,1188,594,0,6090,6089,1,0,0,0,6090,
6091,1,0,0,0,6091,6270,1,0,0,0,6092,6094,5,108,0,0,6093,6095,3,720,360,0,
6094,6093,1,0,0,0,6094,6095,1,0,0,0,6095,6270,1,0,0,0,6096,6097,7,93,0,0,
6097,6098,5,776,0,0,6098,6099,3,676,338,0,6099,6100,5,773,0,0,6100,6101,
5,247,0,0,6101,6102,3,676,338,0,6102,6103,3,764,382,0,6103,6104,5,777,0,
0,6104,6270,1,0,0,0,6105,6106,5,182,0,0,6106,6107,5,776,0,0,6107,6108,3,
764,382,0,6108,6109,5,203,0,0,6109,6110,3,676,338,0,6110,6111,5,777,0,0,
6111,6270,1,0,0,0,6112,6113,5,213,0,0,6113,6114,5,776,0,0,6114,6115,3,728,
364,0,6115,6116,5,773,0,0,6116,6117,3,676,338,0,6117,6118,5,777,0,0,6118,
6270,1,0,0,0,6119,6121,5,372,0,0,6120,6122,3,720,360,0,6121,6120,1,0,0,0,
6121,6122,1,0,0,0,6122,6270,1,0,0,0,6123,6124,5,414,0,0,6124,6125,5,776,
0,0,6125,6126,3,686,343,0,6126,6127,5,251,0,0,6127,6128,3,676,338,0,6128,
6129,5,777,0,0,6129,6270,1,0,0,0,6130,6270,3,732,366,0,6131,6133,5,569,0,
0,6132,6134,3,720,360,0,6133,6132,1,0,0,0,6133,6134,1,0,0,0,6134,6270,1,
0,0,0,6135,6136,7,94,0,0,6136,6137,5,776,0,0,6137,6138,3,766,383,0,6138,
6139,5,773,0,0,6139,6140,3,676,338,0,6140,6141,5,773,0,0,6141,6142,3,676,
338,0,6142,6143,5,777,0,0,6143,6270,1,0,0,0,6144,6146,5,622,0,0,6145,6147,
3,1188,594,0,6146,6145,1,0,0,0,6146,6147,1,0,0,0,6147,6270,1,0,0,0,6148,
6150,5,624,0,0,6149,6151,3,720,360,0,6150,6149,1,0,0,0,6150,6151,1,0,0,0,
6151,6270,1,0,0,0,6152,6154,5,623,0,0,6153,6155,3,720,360,0,6154,6153,1,
0,0,0,6154,6155,1,0,0,0,6155,6270,1,0,0,0,6156,6157,5,19,0,0,6157,6270,3,
770,385,0,6158,6159,5,58,0,0,6159,6270,3,770,385,0,6160,6161,5,67,0,0,6161,
6270,3,768,384,0,6162,6163,5,70,0,0,6163,6270,3,770,385,0,6164,6165,5,109,
0,0,6165,6270,3,1188,594,0,6166,6167,5,231,0,0,6167,6168,5,776,0,0,6168,
6169,3,676,338,0,6169,6170,5,773,0,0,6170,6171,3,676,338,0,6171,6172,5,773,
0,0,6172,6173,3,676,338,0,6173,6174,5,777,0,0,6174,6270,1,0,0,0,6175,6176,
5,201,0,0,6176,6177,5,776,0,0,6177,6178,3,676,338,0,6178,6179,5,773,0,0,
6179,6182,3,676,338,0,6180,6181,5,773,0,0,6181,6183,3,676,338,0,6182,6180,
1,0,0,0,6182,6183,1,0,0,0,6183,6184,1,0,0,0,6184,6185,5,777,0,0,6185,6270,
1,0,0,0,6186,6187,5,337,0,0,6187,6270,3,770,385,0,6188,6189,5,349,0,0,6189,
6190,5,776,0,0,6190,6191,3,676,338,0,6191,6192,5,773,0,0,6192,6193,3,676,
338,0,6193,6194,5,777,0,0,6194,6270,1,0,0,0,6195,6196,4,358,166,0,6196,6197,
5,382,0,0,6197,6198,5,776,0,0,6198,6199,3,1160,580,0,6199,6200,5,777,0,0,
6200,6270,1,0,0,0,6201,6202,4,358,167,0,6202,6203,5,406,0,0,6203,6270,3,
770,385,0,6204,6205,5,429,0,0,6205,6270,3,770,385,0,6206,6207,5,457,0,0,
6207,6208,5,776,0,0,6208,6209,3,676,338,0,6209,6210,5,773,0,0,6210,6211,
3,676,338,0,6211,6212,5,777,0,0,6212,6270,1,0,0,0,6213,6214,5,458,0,0,6214,
6215,5,776,0,0,6215,6216,3,676,338,0,6216,6217,5,773,0,0,6217,6218,3,676,
338,0,6218,6219,5,773,0,0,6219,6220,3,676,338,0,6220,6221,5,777,0,0,6221,
6270,1,0,0,0,6222,6223,5,476,0,0,6223,6270,3,770,385,0,6224,6225,5,485,0,
0,6225,6270,3,1188,594,0,6226,6227,5,597,0,0,6227,6228,5,776,0,0,6228,6229,
3,676,338,0,6229,6230,5,773,0,0,6230,6231,3,676,338,0,6231,6232,5,777,0,
0,6232,6270,1,0,0,0,6233,6234,5,640,0,0,6234,6235,5,776,0,0,6235,6238,3,
676,338,0,6236,6237,5,773,0,0,6237,6239,3,676,338,0,6238,6236,1,0,0,0,6238,
6239,1,0,0,0,6239,6240,1,0,0,0,6240,6241,5,777,0,0,6241,6270,1,0,0,0,6242,
6243,5,641,0,0,6243,6244,5,776,0,0,6244,6264,3,676,338,0,6245,6246,5,17,
0,0,6246,6247,5,60,0,0,6247,6249,3,932,466,0,6248,6245,1,0,0,0,6248,6249,
1,0,0,0,6249,6252,1,0,0,0,6250,6251,4,358,168,0,6251,6253,3,724,362,0,6252,
6250,1,0,0,0,6252,6253,1,0,0,0,6253,6265,1,0,0,0,6254,6255,5,17,0,0,6255,
6256,5,32,0,0,6256,6265,3,932,466,0,6257,6258,5,773,0,0,6258,6259,3,1140,
570,0,6259,6260,5,773,0,0,6260,6261,3,1140,570,0,6261,6262,5,773,0,0,6262,
6263,3,1140,570,0,6263,6265,1,0,0,0,6264,6248,1,0,0,0,6264,6254,1,0,0,0,
6264,6257,1,0,0,0,6265,6266,1,0,0,0,6266,6267,5,777,0,0,6267,6270,1,0,0,
0,6268,6270,3,718,359,0,6269,5996,1,0,0,0,6269,6005,1,0,0,0,6269,6009,1,
0,0,0,6269,6011,1,0,0,0,6269,6013,1,0,0,0,6269,6015,1,0,0,0,6269,6026,1,
0,0,0,6269,6037,1,0,0,0,6269,6044,1,0,0,0,6269,6046,1,0,0,0,6269,6048,1,
0,0,0,6269,6055,1,0,0,0,6269,6057,1,0,0,0,6269,6059,1,0,0,0,6269,6068,1,
0,0,0,6269,6069,1,0,0,0,6269,6071,1,0,0,0,6269,6073,1,0,0,0,6269,6075,1,
0,0,0,6269,6088,1,0,0,0,6269,6092,1,0,0,0,6269,6096,1,0,0,0,6269,6105,1,
0,0,0,6269,6112,1,0,0,0,6269,6119,1,0,0,0,6269,6123,1,0,0,0,6269,6130,1,
0,0,0,6269,6131,1,0,0,0,6269,6135,1,0,0,0,6269,6144,1,0,0,0,6269,6148,1,
0,0,0,6269,6152,1,0,0,0,6269,6156,1,0,0,0,6269,6158,1,0,0,0,6269,6160,1,
0,0,0,6269,6162,1,0,0,0,6269,6164,1,0,0,0,6269,6166,1,0,0,0,6269,6175,1,
0,0,0,6269,6186,1,0,0,0,6269,6188,1,0,0,0,6269,6195,1,0,0,0,6269,6201,1,
0,0,0,6269,6204,1,0,0,0,6269,6206,1,0,0,0,6269,6213,1,0,0,0,6269,6222,1,
0,0,0,6269,6224,1,0,0,0,6269,6226,1,0,0,0,6269,6233,1,0,0,0,6269,6242,1,
0,0,0,6269,6268,1,0,0,0,6270,717,1,0,0,0,6271,6272,4,359,169,0,6272,6273,
5,90,0,0,6273,6274,5,776,0,0,6274,6275,3,676,338,0,6275,6276,5,773,0,0,6276,
6277,3,676,338,0,6277,6278,5,777,0,0,6278,6303,1,0,0,0,6279,6280,5,211,0,
0,6280,6282,5,776,0,0,6281,6283,3,756,378,0,6282,6281,1,0,0,0,6282,6283,
1,0,0,0,6283,6284,1,0,0,0,6284,6303,5,777,0,0,6285,6286,5,279,0,0,6286,6303,
3,768,384,0,6287,6288,5,351,0,0,6288,6303,3,768,384,0,6289,6290,5,352,0,
0,6290,6303,3,768,384,0,6291,6292,5,353,0,0,6292,6303,3,768,384,0,6293,6294,
5,411,0,0,6294,6295,5,776,0,0,6295,6296,3,676,338,0,6296,6297,5,773,0,0,
6297,6298,3,676,338,0,6298,6299,5,777,0,0,6299,6303,1,0,0,0,6300,6301,5,
412,0,0,6301,6303,3,768,384,0,6302,6271,1,0,0,0,6302,6279,1,0,0,0,6302,6285,
1,0,0,0,6302,6287,1,0,0,0,6302,6289,1,0,0,0,6302,6291,1,0,0,0,6302,6293,
1,0,0,0,6302,6300,1,0,0,0,6303,719,1,0,0,0,6304,6306,5,776,0,0,6305,6307,
3,722,361,0,6306,6305,1,0,0,0,6306,6307,1,0,0,0,6307,6308,1,0,0,0,6308,6309,
5,777,0,0,6309,721,1,0,0,0,6310,6311,4,361,170,0,6311,6312,5,747,0,0,6312,
723,1,0,0,0,6313,6326,5,274,0,0,6314,6315,3,1142,571,0,6315,6316,5,759,0,
0,6316,6317,3,1142,571,0,6317,6327,1,0,0,0,6318,6323,3,726,363,0,6319,6320,
5,773,0,0,6320,6322,3,726,363,0,6321,6319,1,0,0,0,6322,6325,1,0,0,0,6323,
6321,1,0,0,0,6323,6324,1,0,0,0,6324,6327,1,0,0,0,6325,6323,1,0,0,0,6326,
6314,1,0,0,0,6326,6318,1,0,0,0,6327,725,1,0,0,0,6328,6334,3,1142,571,0,6329,
6331,7,33,0,0,6330,6332,5,476,0,0,6331,6330,1,0,0,0,6331,6332,1,0,0,0,6332,
6335,1,0,0,0,6333,6335,5,476,0,0,6334,6329,1,0,0,0,6334,6333,1,0,0,0,6334,
6335,1,0,0,0,6335,727,1,0,0,0,6336,6337,7,95,0,0,6337,729,1,0,0,0,6338,6339,
5,595,0,0,6339,6363,5,776,0,0,6340,6343,3,676,338,0,6341,6342,5,203,0,0,
6342,6344,3,676,338,0,6343,6341,1,0,0,0,6343,6344,1,0,0,0,6344,6364,1,0,
0,0,6345,6347,5,269,0,0,6346,6348,3,676,338,0,6347,6346,1,0,0,0,6347,6348,
1,0,0,0,6348,6349,1,0,0,0,6349,6350,5,203,0,0,6350,6364,3,676,338,0,6351,
6353,5,591,0,0,6352,6354,3,676,338,0,6353,6352,1,0,0,0,6353,6354,1,0,0,0,
6354,6355,1,0,0,0,6355,6356,5,203,0,0,6356,6364,3,676,338,0,6357,6359,5,
43,0,0,6358,6360,3,676,338,0,6359,6358,1,0,0,0,6359,6360,1,0,0,0,6360,6361,
1,0,0,0,6361,6362,5,203,0,0,6362,6364,3,676,338,0,6363,6340,1,0,0,0,6363,
6345,1,0,0,0,6363,6351,1,0,0,0,6363,6357,1,0,0,0,6364,6365,1,0,0,0,6365,
6366,5,777,0,0,6366,731,1,0,0,0,6367,6368,5,563,0,0,6368,6369,5,776,0,0,
6369,6382,3,676,338,0,6370,6371,5,773,0,0,6371,6374,3,676,338,0,6372,6373,
5,773,0,0,6373,6375,3,676,338,0,6374,6372,1,0,0,0,6374,6375,1,0,0,0,6375,
6383,1,0,0,0,6376,6377,5,203,0,0,6377,6380,3,676,338,0,6378,6379,5,200,0,
0,6379,6381,3,676,338,0,6380,6378,1,0,0,0,6380,6381,1,0,0,0,6381,6383,1,
0,0,0,6382,6370,1,0,0,0,6382,6376,1,0,0,0,6383,6384,1,0,0,0,6384,6385,5,
777,0,0,6385,733,1,0,0,0,6386,6387,3,1126,563,0,6387,6389,5,776,0,0,6388,
6390,3,736,368,0,6389,6388,1,0,0,0,6389,6390,1,0,0,0,6390,6391,1,0,0,0,6391,
6392,5,777,0,0,6392,6401,1,0,0,0,6393,6394,3,1134,567,0,6394,6396,5,776,
0,0,6395,6397,3,756,378,0,6396,6395,1,0,0,0,6396,6397,1,0,0,0,6397,6398,
1,0,0,0,6398,6399,5,777,0,0,6399,6401,1,0,0,0,6400,6386,1,0,0,0,6400,6393,
1,0,0,0,6401,735,1,0,0,0,6402,6407,3,738,369,0,6403,6404,5,773,0,0,6404,
6406,3,738,369,0,6405,6403,1,0,0,0,6406,6409,1,0,0,0,6407,6405,1,0,0,0,6407,
6408,1,0,0,0,6408,737,1,0,0,0,6409,6407,1,0,0,0,6410,6412,3,676,338,0,6411,
6413,3,356,178,0,6412,6411,1,0,0,0,6412,6413,1,0,0,0,6413,739,1,0,0,0,6414,
6417,3,742,371,0,6415,6417,3,744,372,0,6416,6414,1,0,0,0,6416,6415,1,0,0,
0,6417,741,1,0,0,0,6418,6419,5,783,0,0,6419,6422,3,1180,590,0,6420,6422,
5,784,0,0,6421,6418,1,0,0,0,6421,6420,1,0,0,0,6422,743,1,0,0,0,6423,6425,
5,785,0,0,6424,6426,3,1194,597,0,6425,6424,1,0,0,0,6425,6426,1,0,0,0,6426,
6427,1,0,0,0,6427,6429,3,1180,590,0,6428,6430,3,1138,569,0,6429,6428,1,0,
0,0,6429,6430,1,0,0,0,6430,745,1,0,0,0,6431,6432,4,373,171,0,6432,6434,3,
1128,564,0,6433,6435,3,1138,569,0,6434,6433,1,0,0,0,6434,6435,1,0,0,0,6435,
6442,1,0,0,0,6436,6437,4,373,172,0,6437,6439,3,1182,591,0,6438,6440,3,1138,
569,0,6439,6438,1,0,0,0,6439,6440,1,0,0,0,6440,6442,1,0,0,0,6441,6431,1,
0,0,0,6441,6436,1,0,0,0,6442,6446,1,0,0,0,6443,6444,5,128,0,0,6444,6446,
3,1138,569,0,6445,6441,1,0,0,0,6445,6443,1,0,0,0,6446,747,1,0,0,0,6447,6448,
5,642,0,0,6448,6449,3,676,338,0,6449,749,1,0,0,0,6450,6451,5,582,0,0,6451,
6452,3,676,338,0,6452,751,1,0,0,0,6453,6454,5,154,0,0,6454,6455,3,676,338,
0,6455,753,1,0,0,0,6456,6458,5,32,0,0,6457,6459,3,922,461,0,6458,6457,1,
0,0,0,6458,6459,1,0,0,0,6459,6502,1,0,0,0,6460,6462,5,60,0,0,6461,6463,3,
922,461,0,6462,6461,1,0,0,0,6462,6463,1,0,0,0,6463,6465,1,0,0,0,6464,6466,
3,926,463,0,6465,6464,1,0,0,0,6465,6466,1,0,0,0,6466,6502,1,0,0,0,6467,6469,
3,918,459,0,6468,6470,3,922,461,0,6469,6468,1,0,0,0,6469,6470,1,0,0,0,6470,
6502,1,0,0,0,6471,6473,5,512,0,0,6472,6474,5,249,0,0,6473,6472,1,0,0,0,6473,
6474,1,0,0,0,6474,6502,1,0,0,0,6475,6477,5,612,0,0,6476,6478,5,249,0,0,6477,
6476,1,0,0,0,6477,6478,1,0,0,0,6478,6502,1,0,0,0,6479,6502,5,116,0,0,6480,
6482,5,586,0,0,6481,6483,3,934,467,0,6482,6481,1,0,0,0,6482,6483,1,0,0,0,
6483,6502,1,0,0,0,6484,6486,5,113,0,0,6485,6487,3,934,467,0,6486,6485,1,
0,0,0,6486,6487,1,0,0,0,6487,6502,1,0,0,0,6488,6490,5,126,0,0,6489,6491,
3,1174,587,0,6490,6489,1,0,0,0,6490,6491,1,0,0,0,6491,6502,1,0,0,0,6492,
6493,4,377,173,0,6493,6502,5,262,0,0,6494,6495,4,377,174,0,6495,6502,3,920,
460,0,6496,6497,4,377,175,0,6497,6499,5,195,0,0,6498,6500,3,1176,588,0,6499,
6498,1,0,0,0,6499,6500,1,0,0,0,6500,6502,1,0,0,0,6501,6456,1,0,0,0,6501,
6460,1,0,0,0,6501,6467,1,0,0,0,6501,6471,1,0,0,0,6501,6475,1,0,0,0,6501,
6479,1,0,0,0,6501,6480,1,0,0,0,6501,6484,1,0,0,0,6501,6488,1,0,0,0,6501,
6492,1,0,0,0,6501,6494,1,0,0,0,6501,6496,1,0,0,0,6502,755,1,0,0,0,6503,6508,
3,676,338,0,6504,6505,5,773,0,0,6505,6507,3,676,338,0,6506,6504,1,0,0,0,
6507,6510,1,0,0,0,6508,6506,1,0,0,0,6508,6509,1,0,0,0,6509,757,1,0,0,0,6510,
6508,1,0,0,0,6511,6512,5,60,0,0,6512,6515,5,506,0,0,6513,6515,5,58,0,0,6514,
6511,1,0,0,0,6514,6513,1,0,0,0,6515,759,1,0,0,0,6516,6517,7,96,0,0,6517,
761,1,0,0,0,6518,6519,7,97,0,0,6519,763,1,0,0,0,6520,6523,3,766,383,0,6521,
6523,7,98,0,0,6522,6520,1,0,0,0,6522,6521,1,0,0,0,6523,765,1,0,0,0,6524,
6525,7,99,0,0,6525,767,1,0,0,0,6526,6527,5,776,0,0,6527,6528,3,756,378,0,
6528,6529,5,777,0,0,6529,769,1,0,0,0,6530,6531,5,776,0,0,6531,6532,3,676,
338,0,6532,6533,5,777,0,0,6533,771,1,0,0,0,6534,6535,5,776,0,0,6535,6536,
3,688,344,0,6536,6537,5,777,0,0,6537,773,1,0,0,0,6538,6543,3,776,388,0,6539,
6540,5,773,0,0,6540,6542,3,776,388,0,6541,6539,1,0,0,0,6542,6545,1,0,0,0,
6543,6541,1,0,0,0,6543,6544,1,0,0,0,6544,775,1,0,0,0,6545,6543,1,0,0,0,6546,
6548,3,676,338,0,6547,6549,3,330,165,0,6548,6547,1,0,0,0,6548,6549,1,0,0,
0,6549,777,1,0,0,0,6550,6555,3,780,390,0,6551,6552,5,773,0,0,6552,6554,3,
780,390,0,6553,6551,1,0,0,0,6554,6557,1,0,0,0,6555,6553,1,0,0,0,6555,6556,
1,0,0,0,6556,779,1,0,0,0,6557,6555,1,0,0,0,6558,6559,3,676,338,0,6559,781,
1,0,0,0,6560,6561,4,391,176,0,6561,6562,5,200,0,0,6562,6563,5,57,0,0,6563,
6564,3,1162,581,0,6564,783,1,0,0,0,6565,6579,3,2,1,0,6566,6579,3,786,393,
0,6567,6579,3,788,394,0,6568,6579,3,796,398,0,6569,6579,3,800,400,0,6570,
6579,3,802,401,0,6571,6579,3,808,404,0,6572,6579,3,810,405,0,6573,6579,3,
838,419,0,6574,6579,3,836,418,0,6575,6579,3,856,428,0,6576,6579,3,860,430,
0,6577,6579,3,858,429,0,6578,6565,1,0,0,0,6578,6566,1,0,0,0,6578,6567,1,
0,0,0,6578,6568,1,0,0,0,6578,6569,1,0,0,0,6578,6570,1,0,0,0,6578,6571,1,
0,0,0,6578,6572,1,0,0,0,6578,6573,1,0,0,0,6578,6574,1,0,0,0,6578,6575,1,
0,0,0,6578,6576,1,0,0,0,6578,6577,1,0,0,0,6579,785,1,0,0,0,6580,6581,5,475,
0,0,6581,6582,3,676,338,0,6582,787,1,0,0,0,6583,6584,5,231,0,0,6584,6585,
3,790,395,0,6585,6586,5,159,0,0,6586,6587,5,231,0,0,6587,789,1,0,0,0,6588,
6589,3,676,338,0,6589,6594,3,792,396,0,6590,6591,5,155,0,0,6591,6595,3,790,
395,0,6592,6593,5,154,0,0,6593,6595,3,794,397,0,6594,6590,1,0,0,0,6594,6592,
1,0,0,0,6594,6595,1,0,0,0,6595,791,1,0,0,0,6596,6597,5,582,0,0,6597,6598,
3,794,397,0,6598,793,1,0,0,0,6599,6600,3,784,392,0,6600,6601,5,774,0,0,6601,
6603,1,0,0,0,6602,6599,1,0,0,0,6603,6604,1,0,0,0,6604,6602,1,0,0,0,6604,
6605,1,0,0,0,6605,795,1,0,0,0,6606,6608,5,51,0,0,6607,6609,3,676,338,0,6608,
6607,1,0,0,0,6608,6609,1,0,0,0,6609,6613,1,0,0,0,6610,6611,3,748,374,0,6611,
6612,3,792,396,0,6612,6614,1,0,0,0,6613,6610,1,0,0,0,6614,6615,1,0,0,0,6615,
6613,1,0,0,0,6615,6616,1,0,0,0,6616,6618,1,0,0,0,6617,6619,3,798,399,0,6618,
6617,1,0,0,0,6618,6619,1,0,0,0,6619,6620,1,0,0,0,6620,6621,5,159,0,0,6621,
6622,5,51,0,0,6622,797,1,0,0,0,6623,6624,5,154,0,0,6624,6625,3,794,397,0,
6625,799,1,0,0,0,6626,6627,3,804,402,0,6627,6629,3,806,403,0,6628,6630,3,
1112,556,0,6629,6628,1,0,0,0,6629,6630,1,0,0,0,6630,801,1,0,0,0,6631,6632,
3,806,403,0,6632,803,1,0,0,0,6633,6634,3,1110,555,0,6634,6635,5,775,0,0,
6635,805,1,0,0,0,6636,6638,5,29,0,0,6637,6639,3,818,409,0,6638,6637,1,0,
0,0,6638,6639,1,0,0,0,6639,6641,1,0,0,0,6640,6642,3,794,397,0,6641,6640,
1,0,0,0,6641,6642,1,0,0,0,6642,6643,1,0,0,0,6643,6644,5,159,0,0,6644,807,
1,0,0,0,6645,6646,3,804,402,0,6646,6648,3,810,405,0,6647,6649,3,1112,556,
0,6648,6647,1,0,0,0,6648,6649,1,0,0,0,6649,809,1,0,0,0,6650,6654,3,812,406,
0,6651,6654,3,814,407,0,6652,6654,3,816,408,0,6653,6650,1,0,0,0,6653,6651,
1,0,0,0,6653,6652,1,0,0,0,6654,811,1,0,0,0,6655,6656,5,294,0,0,6656,6657,
3,794,397,0,6657,6658,5,159,0,0,6658,6659,5,294,0,0,6659,813,1,0,0,0,6660,
6661,5,644,0,0,6661,6662,3,676,338,0,6662,6663,5,147,0,0,6663,6664,3,794,
397,0,6664,6665,5,159,0,0,6665,6666,5,644,0,0,6666,815,1,0,0,0,6667,6668,
5,457,0,0,6668,6669,3,794,397,0,6669,6670,5,613,0,0,6670,6671,3,676,338,
0,6671,6672,5,159,0,0,6672,6673,5,457,0,0,6673,817,1,0,0,0,6674,6675,3,820,
410,0,6675,6676,5,774,0,0,6676,6678,1,0,0,0,6677,6674,1,0,0,0,6678,6679,
1,0,0,0,6679,6677,1,0,0,0,6679,6680,1,0,0,0,6680,819,1,0,0,0,6681,6686,3,
822,411,0,6682,6686,3,824,412,0,6683,6686,3,830,415,0,6684,6686,3,834,417,
0,6685,6681,1,0,0,0,6685,6682,1,0,0,0,6685,6683,1,0,0,0,6685,6684,1,0,0,
0,6686,821,1,0,0,0,6687,6688,5,127,0,0,6688,6689,3,1130,565,0,6689,6691,
3,916,458,0,6690,6692,3,986,493,0,6691,6690,1,0,0,0,6691,6692,1,0,0,0,6692,
6695,1,0,0,0,6693,6694,5,128,0,0,6694,6696,3,676,338,0,6695,6693,1,0,0,0,
6695,6696,1,0,0,0,6696,823,1,0,0,0,6697,6698,5,127,0,0,6698,6699,3,1128,
564,0,6699,6700,5,83,0,0,6700,6701,5,200,0,0,6701,6702,3,826,413,0,6702,
825,1,0,0,0,6703,6706,3,1140,570,0,6704,6706,3,828,414,0,6705,6703,1,0,0,
0,6705,6704,1,0,0,0,6706,827,1,0,0,0,6707,6709,5,526,0,0,6708,6710,5,627,
0,0,6709,6708,1,0,0,0,6709,6710,1,0,0,0,6710,6711,1,0,0,0,6711,6712,3,1160,
580,0,6712,829,1,0,0,0,6713,6714,5,127,0,0,6714,6715,7,100,0,0,6715,6716,
5,219,0,0,6716,6717,5,200,0,0,6717,6722,3,832,416,0,6718,6719,5,773,0,0,
6719,6721,3,832,416,0,6720,6718,1,0,0,0,6721,6724,1,0,0,0,6722,6720,1,0,
0,0,6722,6723,1,0,0,0,6723,6725,1,0,0,0,6724,6722,1,0,0,0,6725,6726,3,784,
392,0,6726,831,1,0,0,0,6727,6735,3,826,413,0,6728,6735,3,1128,564,0,6729,
6735,5,527,0,0,6730,6731,3,760,380,0,6731,6732,5,202,0,0,6732,6735,1,0,0,
0,6733,6735,5,525,0,0,6734,6727,1,0,0,0,6734,6728,1,0,0,0,6734,6729,1,0,
0,0,6734,6730,1,0,0,0,6734,6733,1,0,0,0,6735,833,1,0,0,0,6736,6737,5,127,
0,0,6737,6738,3,1128,564,0,6738,6739,5,106,0,0,6739,6740,5,200,0,0,6740,
6741,3,266,133,0,6741,835,1,0,0,0,6742,6743,5,260,0,0,6743,6744,3,1112,556,
0,6744,837,1,0,0,0,6745,6746,5,271,0,0,6746,6747,3,1112,556,0,6747,839,1,
0,0,0,6748,6752,5,207,0,0,6749,6753,5,101,0,0,6750,6751,4,420,177,0,6751,
6753,5,540,0,0,6752,6749,1,0,0,0,6752,6750,1,0,0,0,6752,6753,1,0,0,0,6753,
6754,1,0,0,0,6754,6773,5,138,0,0,6755,6760,3,844,422,0,6756,6757,5,773,0,
0,6757,6759,3,844,422,0,6758,6756,1,0,0,0,6759,6762,1,0,0,0,6760,6758,1,
0,0,0,6760,6761,1,0,0,0,6761,6774,1,0,0,0,6762,6760,1,0,0,0,6763,6764,5,
83,0,0,6764,6765,3,842,421,0,6765,6770,3,846,423,0,6766,6767,5,773,0,0,6767,
6769,3,846,423,0,6768,6766,1,0,0,0,6769,6772,1,0,0,0,6770,6768,1,0,0,0,6770,
6771,1,0,0,0,6771,6774,1,0,0,0,6772,6770,1,0,0,0,6773,6755,1,0,0,0,6773,
6763,1,0,0,0,6774,841,1,0,0,0,6775,6779,3,1148,574,0,6776,6779,3,740,370,
0,6777,6779,3,1134,567,0,6778,6775,1,0,0,0,6778,6776,1,0,0,0,6778,6777,1,
0,0,0,6779,843,1,0,0,0,6780,6783,3,740,370,0,6781,6783,3,1128,564,0,6782,
6780,1,0,0,0,6782,6781,1,0,0,0,6783,6784,1,0,0,0,6784,6785,5,750,0,0,6785,
6786,7,101,0,0,6786,845,1,0,0,0,6787,6790,3,740,370,0,6788,6790,3,1128,564,
0,6789,6787,1,0,0,0,6789,6788,1,0,0,0,6790,6791,1,0,0,0,6791,6794,5,750,
0,0,6792,6795,3,848,424,0,6793,6795,5,473,0,0,6794,6792,1,0,0,0,6794,6793,
1,0,0,0,6795,847,1,0,0,0,6796,6797,7,102,0,0,6797,849,1,0,0,0,6798,6801,
5,511,0,0,6799,6802,3,1128,564,0,6800,6802,3,828,414,0,6801,6799,1,0,0,0,
6801,6800,1,0,0,0,6802,6812,1,0,0,0,6803,6804,5,506,0,0,6804,6809,3,854,
427,0,6805,6806,5,773,0,0,6806,6808,3,854,427,0,6807,6805,1,0,0,0,6808,6811,
1,0,0,0,6809,6807,1,0,0,0,6809,6810,1,0,0,0,6810,6813,1,0,0,0,6811,6809,
1,0,0,0,6812,6803,1,0,0,0,6812,6813,1,0,0,0,6813,851,1,0,0,0,6814,6817,5,
469,0,0,6815,6818,3,1128,564,0,6816,6818,3,828,414,0,6817,6815,1,0,0,0,6817,
6816,1,0,0,0,6817,6818,1,0,0,0,6818,6828,1,0,0,0,6819,6820,5,506,0,0,6820,
6825,3,854,427,0,6821,6822,5,773,0,0,6822,6824,3,854,427,0,6823,6821,1,0,
0,0,6824,6827,1,0,0,0,6825,6823,1,0,0,0,6825,6826,1,0,0,0,6826,6829,1,0,
0,0,6827,6825,1,0,0,0,6828,6819,1,0,0,0,6828,6829,1,0,0,0,6829,853,1,0,0,
0,6830,6831,3,848,424,0,6831,6832,5,750,0,0,6832,6833,3,842,421,0,6833,855,
1,0,0,0,6834,6835,5,387,0,0,6835,6836,3,1128,564,0,6836,857,1,0,0,0,6837,
6838,5,66,0,0,6838,6839,3,1128,564,0,6839,859,1,0,0,0,6840,6845,5,186,0,
0,6841,6843,5,367,0,0,6842,6841,1,0,0,0,6842,6843,1,0,0,0,6843,6844,1,0,
0,0,6844,6846,5,203,0,0,6845,6842,1,0,0,0,6845,6846,1,0,0,0,6846,6847,1,
0,0,0,6847,6848,3,1128,564,0,6848,6849,5,248,0,0,6849,6850,3,1130,565,0,
6850,861,1,0,0,0,6851,6852,5,21,0,0,6852,6865,3,676,338,0,6853,6854,5,171,
0,0,6854,6855,3,676,338,0,6855,6858,3,764,382,0,6856,6857,5,542,0,0,6857,
6859,3,676,338,0,6858,6856,1,0,0,0,6858,6859,1,0,0,0,6859,6862,1,0,0,0,6860,
6861,5,160,0,0,6861,6863,3,676,338,0,6862,6860,1,0,0,0,6862,6863,1,0,0,0,
6863,6865,1,0,0,0,6864,6851,1,0,0,0,6864,6853,1,0,0,0,6865,863,1,0,0,0,6866,
6867,3,1040,520,0,6867,6869,3,876,438,0,6868,6870,3,866,433,0,6869,6868,
1,0,0,0,6869,6870,1,0,0,0,6870,865,1,0,0,0,6871,6872,4,433,178,0,6872,6875,
3,868,434,0,6873,6875,3,886,443,0,6874,6871,1,0,0,0,6874,6873,1,0,0,0,6875,
867,1,0,0,0,6876,6877,5,62,0,0,6877,6878,3,770,385,0,6878,869,1,0,0,0,6879,
6881,5,371,0,0,6880,6879,1,0,0,0,6880,6881,1,0,0,0,6881,6882,1,0,0,0,6882,
6883,5,730,0,0,6883,871,1,0,0,0,6884,6886,7,38,0,0,6885,6887,3,108,54,0,
6886,6885,1,0,0,0,6886,6887,1,0,0,0,6887,6888,1,0,0,0,6888,6892,3,898,449,
0,6889,6891,3,902,451,0,6890,6889,1,0,0,0,6891,6894,1,0,0,0,6892,6890,1,
0,0,0,6892,6893,1,0,0,0,6893,6960,1,0,0,0,6894,6892,1,0,0,0,6895,6897,5,
205,0,0,6896,6898,3,406,203,0,6897,6896,1,0,0,0,6897,6898,1,0,0,0,6898,6900,
1,0,0,0,6899,6901,3,1050,525,0,6900,6899,1,0,0,0,6900,6901,1,0,0,0,6901,
6902,1,0,0,0,6902,6906,3,898,449,0,6903,6905,3,910,455,0,6904,6903,1,0,0,
0,6905,6908,1,0,0,0,6906,6904,1,0,0,0,6906,6907,1,0,0,0,6907,6960,1,0,0,
0,6908,6906,1,0,0,0,6909,6911,5,523,0,0,6910,6912,3,406,203,0,6911,6910,
1,0,0,0,6911,6912,1,0,0,0,6912,6914,1,0,0,0,6913,6915,3,1050,525,0,6914,
6913,1,0,0,0,6914,6915,1,0,0,0,6915,6916,1,0,0,0,6916,6920,3,898,449,0,6917,
6919,3,912,456,0,6918,6917,1,0,0,0,6919,6922,1,0,0,0,6920,6918,1,0,0,0,6920,
6921,1,0,0,0,6921,6960,1,0,0,0,6922,6920,1,0,0,0,6923,6925,3,874,437,0,6924,
6923,1,0,0,0,6924,6925,1,0,0,0,6925,6957,1,0,0,0,6926,6927,5,420,0,0,6927,
6933,5,265,0,0,6928,6930,5,609,0,0,6929,6931,3,406,203,0,6930,6929,1,0,0,
0,6930,6931,1,0,0,0,6931,6933,1,0,0,0,6932,6926,1,0,0,0,6932,6928,1,0,0,
0,6933,6935,1,0,0,0,6934,6936,3,108,54,0,6935,6934,1,0,0,0,6935,6936,1,0,
0,0,6936,6937,1,0,0,0,6937,6941,3,898,449,0,6938,6940,3,902,451,0,6939,6938,
1,0,0,0,6940,6943,1,0,0,0,6941,6939,1,0,0,0,6941,6942,1,0,0,0,6942,6958,
1,0,0,0,6943,6941,1,0,0,0,6944,6945,5,199,0,0,6945,6947,5,265,0,0,6946,6948,
3,1050,525,0,6947,6946,1,0,0,0,6947,6948,1,0,0,0,6948,6949,1,0,0,0,6949,
6950,3,890,445,0,6950,6951,3,886,443,0,6951,6958,1,0,0,0,6952,6955,3,868,
434,0,6953,6954,4,436,179,0,6954,6956,3,870,435,0,6955,6953,1,0,0,0,6955,
6956,1,0,0,0,6956,6958,1,0,0,0,6957,6932,1,0,0,0,6957,6944,1,0,0,0,6957,
6952,1,0,0,0,6958,6960,1,0,0,0,6959,6884,1,0,0,0,6959,6895,1,0,0,0,6959,
6909,1,0,0,0,6959,6924,1,0,0,0,6960,873,1,0,0,0,6961,6963,5,86,0,0,6962,
6964,3,1128,564,0,6963,6962,1,0,0,0,6963,6964,1,0,0,0,6964,875,1,0,0,0,6965,
7001,3,916,458,0,6966,6968,3,878,439,0,6967,6966,1,0,0,0,6968,6971,1,0,0,
0,6969,6967,1,0,0,0,6969,6970,1,0,0,0,6970,7002,1,0,0,0,6971,6969,1,0,0,
0,6972,6974,4,438,180,0,6973,6975,3,986,493,0,6974,6973,1,0,0,0,6974,6975,
1,0,0,0,6975,6978,1,0,0,0,6976,6977,5,209,0,0,6977,6979,5,12,0,0,6978,6976,
1,0,0,0,6978,6979,1,0,0,0,6979,6980,1,0,0,0,6980,6981,5,17,0,0,6981,6983,
3,770,385,0,6982,6984,7,103,0,0,6983,6982,1,0,0,0,6983,6984,1,0,0,0,6984,
6999,1,0,0,0,6985,6989,4,438,181,0,6986,6988,3,884,442,0,6987,6986,1,0,0,
0,6988,6991,1,0,0,0,6989,6987,1,0,0,0,6989,6990,1,0,0,0,6990,7000,1,0,0,
0,6991,6989,1,0,0,0,6992,6996,4,438,182,0,6993,6995,3,878,439,0,6994,6993,
1,0,0,0,6995,6998,1,0,0,0,6996,6994,1,0,0,0,6996,6997,1,0,0,0,6997,7000,
1,0,0,0,6998,6996,1,0,0,0,6999,6985,1,0,0,0,6999,6992,1,0,0,0,7000,7002,
1,0,0,0,7001,6969,1,0,0,0,7001,6972,1,0,0,0,7002,877,1,0,0,0,7003,7005,5,
371,0,0,7004,7003,1,0,0,0,7004,7005,1,0,0,0,7005,7006,1,0,0,0,7006,7056,
3,1170,585,0,7007,7008,4,439,183,0,7008,7009,5,371,0,0,7009,7056,5,720,0,
0,7010,7018,5,128,0,0,7011,7019,3,1150,575,0,7012,7014,5,372,0,0,7013,7015,
3,720,360,0,7014,7013,1,0,0,0,7014,7015,1,0,0,0,7015,7019,1,0,0,0,7016,7017,
4,439,184,0,7017,7019,3,770,385,0,7018,7011,1,0,0,0,7018,7012,1,0,0,0,7018,
7016,1,0,0,0,7019,7056,1,0,0,0,7020,7021,5,383,0,0,7021,7022,5,614,0,0,7022,
7024,5,372,0,0,7023,7025,3,720,360,0,7024,7023,1,0,0,0,7024,7025,1,0,0,0,
7025,7056,1,0,0,0,7026,7056,5,24,0,0,7027,7028,5,501,0,0,7028,7029,5,128,
0,0,7029,7056,5,627,0,0,7030,7032,5,420,0,0,7031,7030,1,0,0,0,7031,7032,
1,0,0,0,7032,7033,1,0,0,0,7033,7056,5,265,0,0,7034,7036,5,609,0,0,7035,7037,
5,265,0,0,7036,7035,1,0,0,0,7036,7037,1,0,0,0,7037,7056,1,0,0,0,7038,7039,
5,75,0,0,7039,7056,3,1160,580,0,7040,7056,3,986,493,0,7041,7042,5,74,0,0,
7042,7056,3,880,440,0,7043,7044,5,553,0,0,7044,7056,3,882,441,0,7045,7046,
4,439,185,0,7046,7047,5,707,0,0,7047,7056,3,1146,573,0,7048,7050,4,439,186,
0,7049,7051,3,874,437,0,7050,7049,1,0,0,0,7050,7051,1,0,0,0,7051,7052,1,
0,0,0,7052,7056,3,868,434,0,7053,7054,4,439,187,0,7054,7056,3,870,435,0,
7055,7004,1,0,0,0,7055,7007,1,0,0,0,7055,7010,1,0,0,0,7055,7020,1,0,0,0,
7055,7026,1,0,0,0,7055,7027,1,0,0,0,7055,7031,1,0,0,0,7055,7034,1,0,0,0,
7055,7038,1,0,0,0,7055,7040,1,0,0,0,7055,7041,1,0,0,0,7055,7043,1,0,0,0,
7055,7045,1,0,0,0,7055,7048,1,0,0,0,7055,7053,1,0,0,0,7056,879,1,0,0,0,7057,
7058,7,104,0,0,7058,881,1,0,0,0,7059,7060,7,105,0,0,7060,883,1,0,0,0,7061,
7063,5,609,0,0,7062,7064,5,265,0,0,7063,7062,1,0,0,0,7063,7064,1,0,0,0,7064,
7076,1,0,0,0,7065,7066,5,75,0,0,7066,7076,3,1156,578,0,7067,7069,3,760,380,
0,7068,7067,1,0,0,0,7068,7069,1,0,0,0,7069,7070,1,0,0,0,7070,7076,5,376,
0,0,7071,7073,5,420,0,0,7072,7071,1,0,0,0,7072,7073,1,0,0,0,7073,7074,1,
0,0,0,7074,7076,5,265,0,0,7075,7061,1,0,0,0,7075,7065,1,0,0,0,7075,7068,
1,0,0,0,7075,7072,1,0,0,0,7076,885,1,0,0,0,7077,7078,5,443,0,0,7078,7080,
3,1102,551,0,7079,7081,3,1132,566,0,7080,7079,1,0,0,0,7080,7081,1,0,0,0,
7081,7084,1,0,0,0,7082,7083,5,320,0,0,7083,7085,7,106,0,0,7084,7082,1,0,
0,0,7084,7085,1,0,0,0,7085,7102,1,0,0,0,7086,7087,5,383,0,0,7087,7088,5,
614,0,0,7088,7092,3,888,444,0,7089,7090,5,383,0,0,7090,7091,5,133,0,0,7091,
7093,3,888,444,0,7092,7089,1,0,0,0,7092,7093,1,0,0,0,7093,7103,1,0,0,0,7094,
7095,5,383,0,0,7095,7096,5,133,0,0,7096,7100,3,888,444,0,7097,7098,5,383,
0,0,7098,7099,5,614,0,0,7099,7101,3,888,444,0,7100,7097,1,0,0,0,7100,7101,
1,0,0,0,7101,7103,1,0,0,0,7102,7086,1,0,0,0,7102,7094,1,0,0,0,7102,7103,
1,0,0,0,7103,887,1,0,0,0,7104,7110,7,2,0,0,7105,7106,5,506,0,0,7106,7110,
3,1170,585,0,7107,7108,5,373,0,0,7108,7110,5,3,0,0,7109,7104,1,0,0,0,7109,
7105,1,0,0,0,7109,7107,1,0,0,0,7110,889,1,0,0,0,7111,7112,5,776,0,0,7112,
7117,3,892,446,0,7113,7114,5,773,0,0,7114,7116,3,892,446,0,7115,7113,1,0,
0,0,7116,7119,1,0,0,0,7117,7115,1,0,0,0,7117,7118,1,0,0,0,7118,7120,1,0,
0,0,7119,7117,1,0,0,0,7120,7121,5,777,0,0,7121,891,1,0,0,0,7122,7124,3,1128,
564,0,7123,7125,3,922,461,0,7124,7123,1,0,0,0,7124,7125,1,0,0,0,7125,7127,
1,0,0,0,7126,7128,3,330,165,0,7127,7126,1,0,0,0,7127,7128,1,0,0,0,7128,893,
1,0,0,0,7129,7130,5,776,0,0,7130,7135,3,896,448,0,7131,7132,5,773,0,0,7132,
7134,3,896,448,0,7133,7131,1,0,0,0,7134,7137,1,0,0,0,7135,7133,1,0,0,0,7135,
7136,1,0,0,0,7136,7138,1,0,0,0,7137,7135,1,0,0,0,7138,7139,5,777,0,0,7139,
895,1,0,0,0,7140,7146,3,892,446,0,7141,7143,3,770,385,0,7142,7144,3,330,
165,0,7143,7142,1,0,0,0,7143,7144,1,0,0,0,7144,7146,1,0,0,0,7145,7140,1,
0,0,0,7145,7141,1,0,0,0,7146,897,1,0,0,0,7147,7148,4,449,188,0,7148,7152,
3,894,447,0,7149,7150,4,449,189,0,7150,7152,3,890,445,0,7151,7147,1,0,0,
0,7151,7149,1,0,0,0,7152,899,1,0,0,0,7153,7154,7,107,0,0,7154,901,1,0,0,
0,7155,7158,3,904,452,0,7156,7158,3,908,454,0,7157,7155,1,0,0,0,7157,7156,
1,0,0,0,7158,903,1,0,0,0,7159,7161,5,264,0,0,7160,7162,5,750,0,0,7161,7160,
1,0,0,0,7161,7162,1,0,0,0,7162,7163,1,0,0,0,7163,7169,3,1140,570,0,7164,
7165,5,75,0,0,7165,7169,3,1160,580,0,7166,7167,4,452,190,0,7167,7169,3,906,
453,0,7168,7159,1,0,0,0,7168,7164,1,0,0,0,7168,7166,1,0,0,0,7169,905,1,0,
0,0,7170,7171,7,108,0,0,7171,907,1,0,0,0,7172,7173,7,109,0,0,7173,7174,3,
900,450,0,7174,909,1,0,0,0,7175,7180,3,904,452,0,7176,7177,5,645,0,0,7177,
7178,5,401,0,0,7178,7180,3,1128,564,0,7179,7175,1,0,0,0,7179,7176,1,0,0,
0,7180,911,1,0,0,0,7181,7182,3,904,452,0,7182,913,1,0,0,0,7183,7184,3,916,
458,0,7184,7185,5,0,0,1,7185,915,1,0,0,0,7186,7188,7,110,0,0,7187,7189,3,
922,461,0,7188,7187,1,0,0,0,7188,7189,1,0,0,0,7189,7191,1,0,0,0,7190,7192,
3,924,462,0,7191,7190,1,0,0,0,7191,7192,1,0,0,0,7192,7334,1,0,0,0,7193,7199,
5,437,0,0,7194,7196,5,146,0,0,7195,7197,5,416,0,0,7196,7195,1,0,0,0,7196,
7197,1,0,0,0,7197,7199,1,0,0,0,7198,7193,1,0,0,0,7198,7194,1,0,0,0,7199,
7201,1,0,0,0,7200,7202,3,1178,589,0,7201,7200,1,0,0,0,7201,7202,1,0,0,0,
7202,7204,1,0,0,0,7203,7205,3,924,462,0,7204,7203,1,0,0,0,7204,7205,1,0,
0,0,7205,7334,1,0,0,0,7206,7208,7,111,0,0,7207,7209,3,1174,587,0,7208,7207,
1,0,0,0,7208,7209,1,0,0,0,7209,7211,1,0,0,0,7210,7212,3,924,462,0,7211,7210,
1,0,0,0,7211,7212,1,0,0,0,7212,7334,1,0,0,0,7213,7215,5,37,0,0,7214,7216,
3,922,461,0,7215,7214,1,0,0,0,7215,7216,1,0,0,0,7216,7334,1,0,0,0,7217,7334,
7,112,0,0,7218,7220,5,60,0,0,7219,7221,3,922,461,0,7220,7219,1,0,0,0,7220,
7221,1,0,0,0,7221,7223,1,0,0,0,7222,7224,3,926,463,0,7223,7222,1,0,0,0,7223,
7224,1,0,0,0,7224,7334,1,0,0,0,7225,7227,3,918,459,0,7226,7228,3,922,461,
0,7227,7226,1,0,0,0,7227,7228,1,0,0,0,7228,7230,1,0,0,0,7229,7231,5,32,0,
0,7230,7229,1,0,0,0,7230,7231,1,0,0,0,7231,7334,1,0,0,0,7232,7234,5,32,0,
0,7233,7235,3,922,461,0,7234,7233,1,0,0,0,7234,7235,1,0,0,0,7235,7334,1,
0,0,0,7236,7237,5,60,0,0,7237,7240,5,633,0,0,7238,7240,5,629,0,0,7239,7236,
1,0,0,0,7239,7238,1,0,0,0,7240,7241,1,0,0,0,7241,7243,3,922,461,0,7242,7244,
3,926,463,0,7243,7242,1,0,0,0,7243,7244,1,0,0,0,7244,7334,1,0,0,0,7245,7246,
5,358,0,0,7246,7256,5,629,0,0,7247,7256,5,379,0,0,7248,7249,5,361,0,0,7249,
7256,5,629,0,0,7250,7251,5,358,0,0,7251,7252,5,60,0,0,7252,7256,5,633,0,
0,7253,7254,5,361,0,0,7254,7256,5,633,0,0,7255,7245,1,0,0,0,7255,7247,1,
0,0,0,7255,7248,1,0,0,0,7255,7250,1,0,0,0,7255,7253,1,0,0,0,7256,7257,1,
0,0,0,7257,7259,3,922,461,0,7258,7260,5,32,0,0,7259,7258,1,0,0,0,7259,7260,
1,0,0,0,7260,7334,1,0,0,0,7261,7262,5,628,0,0,7262,7334,3,922,461,0,7263,
7265,5,656,0,0,7264,7266,3,922,461,0,7265,7264,1,0,0,0,7265,7266,1,0,0,0,
7266,7268,1,0,0,0,7267,7269,3,924,462,0,7268,7267,1,0,0,0,7268,7269,1,0,
0,0,7269,7334,1,0,0,0,7270,7334,5,116,0,0,7271,7273,5,586,0,0,7272,7274,
3,934,467,0,7273,7272,1,0,0,0,7273,7274,1,0,0,0,7274,7334,1,0,0,0,7275,7277,
5,583,0,0,7276,7278,3,934,467,0,7277,7276,1,0,0,0,7277,7278,1,0,0,0,7278,
7334,1,0,0,0,7279,7281,5,113,0,0,7280,7282,3,934,467,0,7281,7280,1,0,0,0,
7281,7282,1,0,0,0,7282,7334,1,0,0,0,7283,7334,5,587,0,0,7284,7286,5,39,0,
0,7285,7287,3,922,461,0,7286,7285,1,0,0,0,7286,7287,1,0,0,0,7287,7334,1,
0,0,0,7288,7334,7,113,0,0,7289,7290,5,293,0,0,7290,7334,5,628,0,0,7291,7295,
5,293,0,0,7292,7293,5,60,0,0,7293,7296,5,633,0,0,7294,7296,5,629,0,0,7295,
7292,1,0,0,0,7295,7294,1,0,0,0,7295,7296,1,0,0,0,7296,7298,1,0,0,0,7297,
7299,3,926,463,0,7298,7297,1,0,0,0,7298,7299,1,0,0,0,7299,7334,1,0,0,0,7300,
7302,5,589,0,0,7301,7303,3,926,463,0,7302,7301,1,0,0,0,7302,7303,1,0,0,0,
7303,7334,1,0,0,0,7304,7306,5,580,0,0,7305,7307,3,922,461,0,7306,7305,1,
0,0,0,7306,7307,1,0,0,0,7307,7309,1,0,0,0,7308,7310,3,926,463,0,7309,7308,
1,0,0,0,7309,7310,1,0,0,0,7310,7334,1,0,0,0,7311,7313,5,332,0,0,7312,7314,
3,926,463,0,7313,7312,1,0,0,0,7313,7314,1,0,0,0,7314,7334,1,0,0,0,7315,7317,
5,291,0,0,7316,7318,3,926,463,0,7317,7316,1,0,0,0,7317,7318,1,0,0,0,7318,
7334,1,0,0,0,7319,7320,5,164,0,0,7320,7322,3,1152,576,0,7321,7323,3,926,
463,0,7322,7321,1,0,0,0,7322,7323,1,0,0,0,7323,7334,1,0,0,0,7324,7325,5,
506,0,0,7325,7327,3,1152,576,0,7326,7328,3,926,463,0,7327,7326,1,0,0,0,7327,
7328,1,0,0,0,7328,7334,1,0,0,0,7329,7334,5,501,0,0,7330,7331,4,458,191,0,
7331,7334,5,262,0,0,7332,7334,7,114,0,0,7333,7186,1,0,0,0,7333,7198,1,0,
0,0,7333,7206,1,0,0,0,7333,7213,1,0,0,0,7333,7217,1,0,0,0,7333,7218,1,0,
0,0,7333,7225,1,0,0,0,7333,7232,1,0,0,0,7333,7239,1,0,0,0,7333,7255,1,0,
0,0,7333,7261,1,0,0,0,7333,7263,1,0,0,0,7333,7270,1,0,0,0,7333,7271,1,0,
0,0,7333,7275,1,0,0,0,7333,7279,1,0,0,0,7333,7283,1,0,0,0,7333,7284,1,0,
0,0,7333,7288,1,0,0,0,7333,7289,1,0,0,0,7333,7291,1,0,0,0,7333,7300,1,0,
0,0,7333,7304,1,0,0,0,7333,7311,1,0,0,0,7333,7315,1,0,0,0,7333,7319,1,0,
0,0,7333,7324,1,0,0,0,7333,7329,1,0,0,0,7333,7330,1,0,0,0,7333,7332,1,0,
0,0,7334,917,1,0,0,0,7335,7339,5,361,0,0,7336,7337,5,358,0,0,7337,7339,5,
60,0,0,7338,7335,1,0,0,0,7338,7336,1,0,0,0,7339,919,1,0,0,0,7340,7346,5,
437,0,0,7341,7343,5,146,0,0,7342,7344,5,416,0,0,7343,7342,1,0,0,0,7343,7344,
1,0,0,0,7344,7346,1,0,0,0,7345,7340,1,0,0,0,7345,7341,1,0,0,0,7346,921,1,
0,0,0,7347,7350,5,776,0,0,7348,7351,3,1146,573,0,7349,7351,5,790,0,0,7350,
7348,1,0,0,0,7350,7349,1,0,0,0,7351,7352,1,0,0,0,7352,7353,5,777,0,0,7353,
923,1,0,0,0,7354,7356,7,115,0,0,7355,7354,1,0,0,0,7356,7357,1,0,0,0,7357,
7355,1,0,0,0,7357,7358,1,0,0,0,7358,925,1,0,0,0,7359,7374,3,928,464,0,7360,
7374,3,930,465,0,7361,7374,5,46,0,0,7362,7363,3,758,379,0,7363,7365,3,936,
468,0,7364,7366,5,32,0,0,7365,7364,1,0,0,0,7365,7366,1,0,0,0,7366,7374,1,
0,0,0,7367,7371,5,32,0,0,7368,7369,3,758,379,0,7369,7370,3,936,468,0,7370,
7372,1,0,0,0,7371,7368,1,0,0,0,7371,7372,1,0,0,0,7372,7374,1,0,0,0,7373,
7359,1,0,0,0,7373,7360,1,0,0,0,7373,7361,1,0,0,0,7373,7362,1,0,0,0,7373,
7367,1,0,0,0,7374,927,1,0,0,0,7375,7377,5,19,0,0,7376,7378,5,32,0,0,7377,
7376,1,0,0,0,7377,7378,1,0,0,0,7378,7382,1,0,0,0,7379,7380,5,32,0,0,7380,
7382,5,19,0,0,7381,7375,1,0,0,0,7381,7379,1,0,0,0,7382,929,1,0,0,0,7383,
7385,5,606,0,0,7384,7386,5,32,0,0,7385,7384,1,0,0,0,7385,7386,1,0,0,0,7386,
7390,1,0,0,0,7387,7388,5,32,0,0,7388,7390,5,606,0,0,7389,7383,1,0,0,0,7389,
7387,1,0,0,0,7390,931,1,0,0,0,7391,7392,5,776,0,0,7392,7393,3,1142,571,0,
7393,7394,5,777,0,0,7394,933,1,0,0,0,7395,7396,5,776,0,0,7396,7397,5,747,
0,0,7397,7398,5,777,0,0,7398,935,1,0,0,0,7399,7404,3,1180,590,0,7400,7404,
5,32,0,0,7401,7402,4,468,192,0,7402,7404,5,128,0,0,7403,7399,1,0,0,0,7403,
7400,1,0,0,0,7403,7401,1,0,0,0,7404,937,1,0,0,0,7405,7411,3,1180,590,0,7406,
7407,4,469,193,0,7407,7411,5,128,0,0,7408,7409,4,469,194,0,7409,7411,5,32,
0,0,7410,7405,1,0,0,0,7410,7406,1,0,0,0,7410,7408,1,0,0,0,7411,939,1,0,0,
0,7412,7419,3,944,472,0,7413,7415,5,773,0,0,7414,7413,1,0,0,0,7414,7415,
1,0,0,0,7415,7416,1,0,0,0,7416,7418,3,944,472,0,7417,7414,1,0,0,0,7418,7421,
1,0,0,0,7419,7417,1,0,0,0,7419,7420,1,0,0,0,7420,941,1,0,0,0,7421,7419,1,
0,0,0,7422,7424,3,944,472,0,7423,7422,1,0,0,0,7424,7425,1,0,0,0,7425,7423,
1,0,0,0,7425,7426,1,0,0,0,7426,943,1,0,0,0,7427,7429,5,163,0,0,7428,7430,
5,750,0,0,7429,7428,1,0,0,0,7429,7430,1,0,0,0,7430,7431,1,0,0,0,7431,7557,
3,1094,547,0,7432,7433,4,472,195,0,7433,7435,5,721,0,0,7434,7436,3,1190,
595,0,7435,7434,1,0,0,0,7435,7436,1,0,0,0,7436,7439,1,0,0,0,7437,7440,5,
376,0,0,7438,7440,3,1180,590,0,7439,7437,1,0,0,0,7439,7438,1,0,0,0,7440,
7557,1,0,0,0,7441,7443,5,323,0,0,7442,7444,5,750,0,0,7443,7442,1,0,0,0,7443,
7444,1,0,0,0,7444,7445,1,0,0,0,7445,7557,3,1144,572,0,7446,7448,5,344,0,
0,7447,7449,5,750,0,0,7448,7447,1,0,0,0,7448,7449,1,0,0,0,7449,7450,1,0,
0,0,7450,7557,3,1144,572,0,7451,7453,5,25,0,0,7452,7454,5,750,0,0,7453,7452,
1,0,0,0,7453,7454,1,0,0,0,7454,7455,1,0,0,0,7455,7557,3,1140,570,0,7456,
7458,5,406,0,0,7457,7459,5,750,0,0,7458,7457,1,0,0,0,7458,7459,1,0,0,0,7459,
7460,1,0,0,0,7460,7557,3,1154,577,0,7461,7463,5,75,0,0,7462,7464,5,750,0,
0,7463,7462,1,0,0,0,7463,7464,1,0,0,0,7464,7465,1,0,0,0,7465,7557,3,1154,
577,0,7466,7467,4,472,196,0,7467,7469,5,81,0,0,7468,7470,5,750,0,0,7469,
7468,1,0,0,0,7469,7470,1,0,0,0,7470,7471,1,0,0,0,7471,7557,3,1156,578,0,
7472,7473,4,472,197,0,7473,7475,5,158,0,0,7474,7476,5,750,0,0,7475,7474,
1,0,0,0,7475,7476,1,0,0,0,7476,7477,1,0,0,0,7477,7557,3,1156,578,0,7478,
7480,5,24,0,0,7479,7481,5,750,0,0,7480,7479,1,0,0,0,7480,7481,1,0,0,0,7481,
7482,1,0,0,0,7482,7557,3,1144,572,0,7483,7485,5,399,0,0,7484,7486,5,750,
0,0,7485,7484,1,0,0,0,7485,7486,1,0,0,0,7486,7487,1,0,0,0,7487,7557,3,946,
473,0,7488,7490,7,116,0,0,7489,7491,5,750,0,0,7490,7489,1,0,0,0,7490,7491,
1,0,0,0,7491,7492,1,0,0,0,7492,7557,3,946,473,0,7493,7495,7,117,0,0,7494,
7496,5,750,0,0,7495,7494,1,0,0,0,7495,7496,1,0,0,0,7496,7497,1,0,0,0,7497,
7557,3,1140,570,0,7498,7500,5,132,0,0,7499,7501,5,750,0,0,7500,7499,1,0,
0,0,7500,7501,1,0,0,0,7501,7502,1,0,0,0,7502,7557,3,1140,570,0,7503,7505,
5,486,0,0,7504,7506,5,750,0,0,7505,7504,1,0,0,0,7505,7506,1,0,0,0,7506,7507,
1,0,0,0,7507,7557,7,118,0,0,7508,7510,5,608,0,0,7509,7511,5,750,0,0,7510,
7509,1,0,0,0,7510,7511,1,0,0,0,7511,7512,1,0,0,0,7512,7513,5,776,0,0,7513,
7514,3,1104,552,0,7514,7515,5,777,0,0,7515,7557,1,0,0,0,7516,7557,3,952,
476,0,7517,7557,3,948,474,0,7518,7520,5,243,0,0,7519,7521,5,750,0,0,7520,
7519,1,0,0,0,7520,7521,1,0,0,0,7521,7522,1,0,0,0,7522,7557,7,119,0,0,7523,
7524,5,112,0,0,7524,7526,5,139,0,0,7525,7527,5,750,0,0,7526,7525,1,0,0,0,
7526,7527,1,0,0,0,7527,7528,1,0,0,0,7528,7557,3,1156,578,0,7529,7530,5,236,
0,0,7530,7532,5,139,0,0,7531,7533,5,750,0,0,7532,7531,1,0,0,0,7532,7533,
1,0,0,0,7533,7534,1,0,0,0,7534,7557,3,1156,578,0,7535,7541,5,572,0,0,7536,
7538,4,472,198,0,7537,7539,5,750,0,0,7538,7537,1,0,0,0,7538,7539,1,0,0,0,
7539,7542,1,0,0,0,7540,7542,1,0,0,0,7541,7536,1,0,0,0,7541,7540,1,0,0,0,
7542,7543,1,0,0,0,7543,7557,3,1128,564,0,7544,7545,5,553,0,0,7545,7557,7,
120,0,0,7546,7548,5,84,0,0,7547,7549,5,750,0,0,7548,7547,1,0,0,0,7548,7549,
1,0,0,0,7549,7550,1,0,0,0,7550,7557,3,1156,578,0,7551,7553,5,264,0,0,7552,
7554,5,750,0,0,7553,7552,1,0,0,0,7553,7554,1,0,0,0,7554,7555,1,0,0,0,7555,
7557,3,1140,570,0,7556,7427,1,0,0,0,7556,7432,1,0,0,0,7556,7441,1,0,0,0,
7556,7446,1,0,0,0,7556,7451,1,0,0,0,7556,7456,1,0,0,0,7556,7461,1,0,0,0,
7556,7466,1,0,0,0,7556,7472,1,0,0,0,7556,7478,1,0,0,0,7556,7483,1,0,0,0,
7556,7488,1,0,0,0,7556,7493,1,0,0,0,7556,7498,1,0,0,0,7556,7503,1,0,0,0,
7556,7508,1,0,0,0,7556,7516,1,0,0,0,7556,7517,1,0,0,0,7556,7518,1,0,0,0,
7556,7523,1,0,0,0,7556,7529,1,0,0,0,7556,7535,1,0,0,0,7556,7544,1,0,0,0,
7556,7546,1,0,0,0,7556,7551,1,0,0,0,7557,945,1,0,0,0,7558,7561,3,1140,570,
0,7559,7561,5,128,0,0,7560,7558,1,0,0,0,7560,7559,1,0,0,0,7561,947,1,0,0,
0,7562,7564,5,128,0,0,7563,7562,1,0,0,0,7563,7564,1,0,0,0,7564,7565,1,0,
0,0,7565,7567,5,69,0,0,7566,7568,5,750,0,0,7567,7566,1,0,0,0,7567,7568,1,
0,0,0,7568,7569,1,0,0,0,7569,7570,3,938,469,0,7570,949,1,0,0,0,7571,7573,
5,128,0,0,7572,7571,1,0,0,0,7572,7573,1,0,0,0,7573,7574,1,0,0,0,7574,7576,
5,158,0,0,7575,7577,5,750,0,0,7576,7575,1,0,0,0,7576,7577,1,0,0,0,7577,7578,
1,0,0,0,7578,7579,3,1154,577,0,7579,951,1,0,0,0,7580,7582,5,128,0,0,7581,
7580,1,0,0,0,7581,7582,1,0,0,0,7582,7583,1,0,0,0,7583,7585,3,758,379,0,7584,
7586,5,750,0,0,7585,7584,1,0,0,0,7585,7586,1,0,0,0,7586,7587,1,0,0,0,7587,
7588,3,936,468,0,7588,953,1,0,0,0,7589,7590,5,405,0,0,7590,7591,5,45,0,0,
7591,7594,3,956,478,0,7592,7593,5,404,0,0,7593,7595,3,1142,571,0,7594,7592,
1,0,0,0,7594,7595,1,0,0,0,7595,7597,1,0,0,0,7596,7598,3,958,479,0,7597,7596,
1,0,0,0,7597,7598,1,0,0,0,7598,7600,1,0,0,0,7599,7601,3,962,481,0,7600,7599,
1,0,0,0,7600,7601,1,0,0,0,7601,955,1,0,0,0,7602,7604,5,277,0,0,7603,7602,
1,0,0,0,7603,7604,1,0,0,0,7604,7605,1,0,0,0,7605,7607,5,265,0,0,7606,7608,
3,960,480,0,7607,7606,1,0,0,0,7607,7608,1,0,0,0,7608,7609,1,0,0,0,7609,7611,
5,776,0,0,7610,7612,3,1130,565,0,7611,7610,1,0,0,0,7611,7612,1,0,0,0,7612,
7613,1,0,0,0,7613,7636,5,777,0,0,7614,7616,5,277,0,0,7615,7614,1,0,0,0,7615,
7616,1,0,0,0,7616,7617,1,0,0,0,7617,7618,5,220,0,0,7618,7619,5,776,0,0,7619,
7620,3,686,343,0,7620,7621,5,777,0,0,7621,7636,1,0,0,0,7622,7633,7,121,0,
0,7623,7624,5,776,0,0,7624,7625,3,686,343,0,7625,7626,5,777,0,0,7626,7634,
1,0,0,0,7627,7628,5,71,0,0,7628,7630,5,776,0,0,7629,7631,3,1130,565,0,7630,
7629,1,0,0,0,7630,7631,1,0,0,0,7631,7632,1,0,0,0,7632,7634,5,777,0,0,7633,
7623,1,0,0,0,7633,7627,1,0,0,0,7634,7636,1,0,0,0,7635,7603,1,0,0,0,7635,
7615,1,0,0,0,7635,7622,1,0,0,0,7636,957,1,0,0,0,7637,7638,5,561,0,0,7638,
7640,5,45,0,0,7639,7641,5,277,0,0,7640,7639,1,0,0,0,7640,7641,1,0,0,0,7641,
7652,1,0,0,0,7642,7643,5,220,0,0,7643,7644,5,776,0,0,7644,7645,3,686,343,
0,7645,7646,5,777,0,0,7646,7653,1,0,0,0,7647,7649,5,265,0,0,7648,7650,3,
960,480,0,7649,7648,1,0,0,0,7649,7650,1,0,0,0,7650,7651,1,0,0,0,7651,7653,
3,1132,566,0,7652,7642,1,0,0,0,7652,7647,1,0,0,0,7653,7656,1,0,0,0,7654,
7655,5,560,0,0,7655,7657,3,1142,571,0,7656,7654,1,0,0,0,7656,7657,1,0,0,
0,7657,959,1,0,0,0,7658,7659,4,480,199,0,7659,7660,5,9,0,0,7660,7661,5,750,
0,0,7661,7662,3,1142,571,0,7662,961,1,0,0,0,7663,7664,5,776,0,0,7664,7669,
3,964,482,0,7665,7666,5,773,0,0,7666,7668,3,964,482,0,7667,7665,1,0,0,0,
7668,7671,1,0,0,0,7669,7667,1,0,0,0,7669,7670,1,0,0,0,7670,7672,1,0,0,0,
7671,7669,1,0,0,0,7672,7673,5,777,0,0,7673,963,1,0,0,0,7674,7675,5,405,0,
0,7675,7686,3,1128,564,0,7676,7677,5,626,0,0,7677,7678,5,273,0,0,7678,7681,
5,581,0,0,7679,7682,3,972,486,0,7680,7682,5,329,0,0,7681,7679,1,0,0,0,7681,
7680,1,0,0,0,7682,7687,1,0,0,0,7683,7684,5,626,0,0,7684,7685,5,251,0,0,7685,
7687,3,966,483,0,7686,7676,1,0,0,0,7686,7683,1,0,0,0,7686,7687,1,0,0,0,7687,
7691,1,0,0,0,7688,7690,3,968,484,0,7689,7688,1,0,0,0,7690,7693,1,0,0,0,7691,
7689,1,0,0,0,7691,7692,1,0,0,0,7692,7705,1,0,0,0,7693,7691,1,0,0,0,7694,
7695,5,776,0,0,7695,7700,3,970,485,0,7696,7697,5,773,0,0,7697,7699,3,970,
485,0,7698,7696,1,0,0,0,7699,7702,1,0,0,0,7700,7698,1,0,0,0,7700,7701,1,
0,0,0,7701,7703,1,0,0,0,7702,7700,1,0,0,0,7703,7704,5,777,0,0,7704,7706,
1,0,0,0,7705,7694,1,0,0,0,7705,7706,1,0,0,0,7706,965,1,0,0,0,7707,7720,3,
972,486,0,7708,7709,5,776,0,0,7709,7714,3,972,486,0,7710,7711,5,773,0,0,
7711,7713,3,972,486,0,7712,7710,1,0,0,0,7713,7716,1,0,0,0,7714,7712,1,0,
0,0,7714,7715,1,0,0,0,7715,7717,1,0,0,0,7716,7714,1,0,0,0,7717,7718,5,777,
0,0,7718,7720,1,0,0,0,7719,7707,1,0,0,0,7719,7708,1,0,0,0,7720,967,1,0,0,
0,7721,7723,5,572,0,0,7722,7724,5,750,0,0,7723,7722,1,0,0,0,7723,7724,1,
0,0,0,7724,7725,1,0,0,0,7725,7756,3,1128,564,0,7726,7728,5,553,0,0,7727,
7726,1,0,0,0,7727,7728,1,0,0,0,7728,7729,1,0,0,0,7729,7731,5,163,0,0,7730,
7732,5,750,0,0,7731,7730,1,0,0,0,7731,7732,1,0,0,0,7732,7733,1,0,0,0,7733,
7756,3,1094,547,0,7734,7736,5,368,0,0,7735,7737,5,750,0,0,7736,7735,1,0,
0,0,7736,7737,1,0,0,0,7737,7738,1,0,0,0,7738,7756,3,1142,571,0,7739,7741,
7,122,0,0,7740,7742,5,750,0,0,7741,7740,1,0,0,0,7741,7742,1,0,0,0,7742,7743,
1,0,0,0,7743,7756,3,1142,571,0,7744,7745,7,123,0,0,7745,7747,5,139,0,0,7746,
7748,5,750,0,0,7747,7746,1,0,0,0,7747,7748,1,0,0,0,7748,7749,1,0,0,0,7749,
7756,3,1160,580,0,7750,7752,5,75,0,0,7751,7753,5,750,0,0,7752,7751,1,0,0,
0,7752,7753,1,0,0,0,7753,7754,1,0,0,0,7754,7756,3,1160,580,0,7755,7721,1,
0,0,0,7755,7727,1,0,0,0,7755,7734,1,0,0,0,7755,7739,1,0,0,0,7755,7744,1,
0,0,0,7755,7750,1,0,0,0,7756,969,1,0,0,0,7757,7758,5,561,0,0,7758,7762,3,
1180,590,0,7759,7761,3,968,484,0,7760,7759,1,0,0,0,7761,7764,1,0,0,0,7762,
7760,1,0,0,0,7762,7763,1,0,0,0,7763,971,1,0,0,0,7764,7762,1,0,0,0,7765,7766,
5,776,0,0,7766,7771,3,974,487,0,7767,7768,5,773,0,0,7768,7770,3,974,487,
0,7769,7767,1,0,0,0,7770,7773,1,0,0,0,7771,7769,1,0,0,0,7771,7772,1,0,0,
0,7772,7774,1,0,0,0,7773,7771,1,0,0,0,7774,7775,5,777,0,0,7775,973,1,0,0,
0,7776,7779,3,686,343,0,7777,7779,5,329,0,0,7778,7776,1,0,0,0,7778,7777,
1,0,0,0,7779,975,1,0,0,0,7780,7781,5,130,0,0,7781,7782,5,750,0,0,7782,7783,
3,1026,513,0,7783,977,1,0,0,0,7784,7785,5,231,0,0,7785,7786,5,174,0,0,7786,
979,1,0,0,0,7787,7788,5,231,0,0,7788,7789,3,760,380,0,7789,7790,5,174,0,
0,7790,981,1,0,0,0,7791,7793,7,124,0,0,7792,7791,1,0,0,0,7792,7793,1,0,0,
0,7793,7794,1,0,0,0,7794,7795,3,984,492,0,7795,983,1,0,0,0,7796,7797,3,1108,
554,0,7797,7798,3,988,494,0,7798,985,1,0,0,0,7799,7800,5,69,0,0,7800,7801,
3,938,469,0,7801,987,1,0,0,0,7802,7804,3,916,458,0,7803,7805,3,986,493,0,
7804,7803,1,0,0,0,7804,7805,1,0,0,0,7805,989,1,0,0,0,7806,7807,5,776,0,0,
7807,7808,3,1058,529,0,7808,7809,5,773,0,0,7809,7810,3,1058,529,0,7810,7811,
5,777,0,0,7811,991,1,0,0,0,7812,7817,3,1074,537,0,7813,7814,5,773,0,0,7814,
7816,3,1074,537,0,7815,7813,1,0,0,0,7816,7819,1,0,0,0,7817,7815,1,0,0,0,
7817,7818,1,0,0,0,7818,993,1,0,0,0,7819,7817,1,0,0,0,7820,7825,3,996,498,
0,7821,7822,5,773,0,0,7822,7824,3,996,498,0,7823,7821,1,0,0,0,7824,7827,
1,0,0,0,7825,7823,1,0,0,0,7825,7826,1,0,0,0,7826,995,1,0,0,0,7827,7825,1,
0,0,0,7828,7829,3,1046,523,0,7829,7832,5,750,0,0,7830,7833,3,676,338,0,7831,
7833,5,128,0,0,7832,7830,1,0,0,0,7832,7831,1,0,0,0,7833,997,1,0,0,0,7834,
7835,3,758,379,0,7835,7836,3,936,468,0,7836,999,1,0,0,0,7837,7839,5,71,0,
0,7838,7840,3,1002,501,0,7839,7838,1,0,0,0,7840,7841,1,0,0,0,7841,7839,1,
0,0,0,7841,7842,1,0,0,0,7842,1001,1,0,0,0,7843,7844,5,579,0,0,7844,7845,
5,45,0,0,7845,7856,3,1156,578,0,7846,7848,5,392,0,0,7847,7846,1,0,0,0,7847,
7848,1,0,0,0,7848,7849,1,0,0,0,7849,7850,5,157,0,0,7850,7851,5,45,0,0,7851,
7856,3,1156,578,0,7852,7853,5,167,0,0,7853,7854,5,45,0,0,7854,7856,3,1156,
578,0,7855,7843,1,0,0,0,7855,7847,1,0,0,0,7855,7852,1,0,0,0,7856,1003,1,
0,0,0,7857,7859,5,278,0,0,7858,7860,3,1006,503,0,7859,7858,1,0,0,0,7860,
7861,1,0,0,0,7861,7859,1,0,0,0,7861,7862,1,0,0,0,7862,1005,1,0,0,0,7863,
7864,7,125,0,0,7864,7865,5,45,0,0,7865,7866,3,1156,578,0,7866,1007,1,0,0,
0,7867,7872,3,1026,513,0,7868,7869,5,773,0,0,7869,7871,3,1026,513,0,7870,
7868,1,0,0,0,7871,7874,1,0,0,0,7872,7870,1,0,0,0,7872,7873,1,0,0,0,7873,
1009,1,0,0,0,7874,7872,1,0,0,0,7875,7880,3,1014,507,0,7876,7877,5,773,0,
0,7877,7879,3,1014,507,0,7878,7876,1,0,0,0,7879,7882,1,0,0,0,7880,7878,1,
0,0,0,7880,7881,1,0,0,0,7881,1011,1,0,0,0,7882,7880,1,0,0,0,7883,7888,3,
1016,508,0,7884,7885,5,773,0,0,7885,7887,3,1016,508,0,7886,7884,1,0,0,0,
7887,7890,1,0,0,0,7888,7886,1,0,0,0,7888,7889,1,0,0,0,7889,1013,1,0,0,0,
7890,7888,1,0,0,0,7891,7918,3,1026,513,0,7892,7916,5,230,0,0,7893,7896,5,
45,0,0,7894,7895,4,507,200,0,7895,7897,5,406,0,0,7896,7894,1,0,0,0,7896,
7897,1,0,0,0,7897,7898,1,0,0,0,7898,7917,3,1156,578,0,7899,7900,5,645,0,
0,7900,7906,3,1180,590,0,7901,7902,5,17,0,0,7902,7907,3,1158,579,0,7903,
7904,4,507,201,0,7904,7905,5,45,0,0,7905,7907,3,1156,578,0,7906,7901,1,0,
0,0,7906,7903,1,0,0,0,7906,7907,1,0,0,0,7907,7917,1,0,0,0,7908,7911,4,507,
202,0,7909,7910,5,645,0,0,7910,7912,3,1180,590,0,7911,7909,1,0,0,0,7911,
7912,1,0,0,0,7912,7913,1,0,0,0,7913,7914,5,45,0,0,7914,7915,5,734,0,0,7915,
7917,5,406,0,0,7916,7893,1,0,0,0,7916,7899,1,0,0,0,7916,7908,1,0,0,0,7917,
7919,1,0,0,0,7918,7892,1,0,0,0,7918,7919,1,0,0,0,7919,1015,1,0,0,0,7920,
7949,3,1026,513,0,7921,7944,5,230,0,0,7922,7923,5,645,0,0,7923,7925,3,1180,
590,0,7924,7922,1,0,0,0,7924,7925,1,0,0,0,7925,7926,1,0,0,0,7926,7927,5,
45,0,0,7927,7930,3,1156,578,0,7928,7929,5,458,0,0,7929,7931,3,1156,578,0,
7930,7928,1,0,0,0,7930,7931,1,0,0,0,7931,7933,1,0,0,0,7932,7934,3,1018,509,
0,7933,7932,1,0,0,0,7933,7934,1,0,0,0,7934,7945,1,0,0,0,7935,7936,5,645,
0,0,7936,7942,3,1180,590,0,7937,7938,5,17,0,0,7938,7940,3,1158,579,0,7939,
7941,3,1018,509,0,7940,7939,1,0,0,0,7940,7941,1,0,0,0,7941,7943,1,0,0,0,
7942,7937,1,0,0,0,7942,7943,1,0,0,0,7943,7945,1,0,0,0,7944,7924,1,0,0,0,
7944,7935,1,0,0,0,7944,7945,1,0,0,0,7945,7950,1,0,0,0,7946,7948,3,1020,510,
0,7947,7946,1,0,0,0,7947,7948,1,0,0,0,7948,7950,1,0,0,0,7949,7921,1,0,0,
0,7949,7947,1,0,0,0,7950,1017,1,0,0,0,7951,7952,5,727,0,0,7952,7953,5,101,
0,0,7953,7954,5,406,0,0,7954,1019,1,0,0,0,7955,7956,5,141,0,0,7956,7957,
5,728,0,0,7957,7958,5,406,0,0,7958,1021,1,0,0,0,7959,7960,5,458,0,0,7960,
7961,3,1156,578,0,7961,1023,1,0,0,0,7962,7966,3,1180,590,0,7963,7964,5,783,
0,0,7964,7967,3,1180,590,0,7965,7967,5,784,0,0,7966,7963,1,0,0,0,7966,7965,
1,0,0,0,7966,7967,1,0,0,0,7967,1025,1,0,0,0,7968,7974,3,1024,512,0,7969,
7971,5,105,0,0,7970,7972,3,1188,594,0,7971,7970,1,0,0,0,7971,7972,1,0,0,
0,7972,7974,1,0,0,0,7973,7968,1,0,0,0,7973,7969,1,0,0,0,7974,1027,1,0,0,
0,7975,7976,5,275,0,0,7976,7977,3,1154,577,0,7977,1029,1,0,0,0,7978,7981,
3,1028,514,0,7979,7981,3,358,179,0,7980,7978,1,0,0,0,7980,7979,1,0,0,0,7981,
1031,1,0,0,0,7982,7983,7,126,0,0,7983,1033,1,0,0,0,7984,7985,7,127,0,0,7985,
1035,1,0,0,0,7986,7987,4,518,203,0,7987,7988,5,405,0,0,7988,7989,3,1132,
566,0,7989,1037,1,0,0,0,7990,7996,3,1138,569,0,7991,7993,3,1134,567,0,7992,
7994,3,1138,569,0,7993,7992,1,0,0,0,7993,7994,1,0,0,0,7994,7996,1,0,0,0,
7995,7990,1,0,0,0,7995,7991,1,0,0,0,7996,1039,1,0,0,0,7997,7998,4,520,204,
0,7998,8002,3,1128,564,0,7999,8000,4,520,205,0,8000,8002,3,1038,519,0,8001,
7997,1,0,0,0,8001,7999,1,0,0,0,8002,1041,1,0,0,0,8003,8004,3,1128,564,0,
8004,1043,1,0,0,0,8005,8006,5,776,0,0,8006,8011,3,1042,521,0,8007,8008,5,
773,0,0,8008,8010,3,1042,521,0,8009,8007,1,0,0,0,8010,8013,1,0,0,0,8011,
8009,1,0,0,0,8011,8012,1,0,0,0,8012,8014,1,0,0,0,8013,8011,1,0,0,0,8014,
8015,5,777,0,0,8015,1045,1,0,0,0,8016,8017,3,1038,519,0,8017,1047,1,0,0,
0,8018,8021,3,1046,523,0,8019,8021,3,1054,527,0,8020,8018,1,0,0,0,8020,8019,
1,0,0,0,8021,1049,1,0,0,0,8022,8023,3,1128,564,0,8023,1051,1,0,0,0,8024,
8025,3,1038,519,0,8025,1053,1,0,0,0,8026,8027,3,1128,564,0,8027,8031,5,772,
0,0,8028,8029,3,1128,564,0,8029,8030,5,772,0,0,8030,8032,1,0,0,0,8031,8028,
1,0,0,0,8031,8032,1,0,0,0,8032,8033,1,0,0,0,8033,8034,5,760,0,0,8034,1055,
1,0,0,0,8035,8036,3,1128,564,0,8036,1057,1,0,0,0,8037,8038,3,1128,564,0,
8038,1059,1,0,0,0,8039,8040,3,1134,567,0,8040,1061,1,0,0,0,8041,8042,3,1134,
567,0,8042,1063,1,0,0,0,8043,8044,3,1134,567,0,8044,1065,1,0,0,0,8045,8046,
3,1134,567,0,8046,1067,1,0,0,0,8047,8048,3,1134,567,0,8048,1069,1,0,0,0,
8049,8050,3,1134,567,0,8050,1071,1,0,0,0,8051,8054,3,1134,567,0,8052,8054,
3,1138,569,0,8053,8051,1,0,0,0,8053,8052,1,0,0,0,8054,1073,1,0,0,0,8055,
8058,3,1134,567,0,8056,8058,3,1138,569,0,8057,8055,1,0,0,0,8057,8056,1,0,
0,0,8058,1075,1,0,0,0,8059,8060,3,1128,564,0,8060,1077,1,0,0,0,8061,8062,
3,1128,564,0,8062,1079,1,0,0,0,8063,8064,3,1128,564,0,8064,1081,1,0,0,0,
8065,8066,3,1128,564,0,8066,1083,1,0,0,0,8067,8068,3,1134,567,0,8068,1085,
1,0,0,0,8069,8070,3,1134,567,0,8070,1087,1,0,0,0,8071,8072,3,1128,564,0,
8072,1089,1,0,0,0,8073,8074,3,1180,590,0,8074,1091,1,0,0,0,8075,8076,3,1180,
590,0,8076,1093,1,0,0,0,8077,8078,3,1180,590,0,8078,1095,1,0,0,0,8079,8082,
3,1134,567,0,8080,8082,3,1138,569,0,8081,8079,1,0,0,0,8081,8080,1,0,0,0,
8082,1097,1,0,0,0,8083,8084,3,1058,529,0,8084,8085,3,1138,569,0,8085,1099,
1,0,0,0,8086,8094,3,1128,564,0,8087,8088,5,772,0,0,8088,8095,5,760,0,0,8089,
8092,3,1138,569,0,8090,8091,5,772,0,0,8091,8093,5,760,0,0,8092,8090,1,0,
0,0,8092,8093,1,0,0,0,8093,8095,1,0,0,0,8094,8087,1,0,0,0,8094,8089,1,0,
0,0,8094,8095,1,0,0,0,8095,1101,1,0,0,0,8096,8099,3,1134,567,0,8097,8099,
3,1138,569,0,8098,8096,1,0,0,0,8098,8097,1,0,0,0,8099,1103,1,0,0,0,8100,
8105,3,1102,551,0,8101,8102,5,773,0,0,8102,8104,3,1102,551,0,8103,8101,1,
0,0,0,8104,8107,1,0,0,0,8105,8103,1,0,0,0,8105,8106,1,0,0,0,8106,1105,1,
0,0,0,8107,8105,1,0,0,0,8108,8113,3,1100,550,0,8109,8110,5,773,0,0,8110,
8112,3,1100,550,0,8111,8109,1,0,0,0,8112,8115,1,0,0,0,8113,8111,1,0,0,0,
8113,8114,1,0,0,0,8114,1107,1,0,0,0,8115,8113,1,0,0,0,8116,8117,3,1128,564,
0,8117,1109,1,0,0,0,8118,8121,3,1126,563,0,8119,8121,3,1204,602,0,8120,8118,
1,0,0,0,8120,8119,1,0,0,0,8121,1111,1,0,0,0,8122,8123,3,1110,555,0,8123,
1113,1,0,0,0,8124,8127,3,1126,563,0,8125,8127,3,1210,605,0,8126,8124,1,0,
0,0,8126,8125,1,0,0,0,8127,1115,1,0,0,0,8128,8129,3,1114,557,0,8129,1117,
1,0,0,0,8130,8131,3,1128,564,0,8131,1119,1,0,0,0,8132,8133,3,1154,577,0,
8133,1121,1,0,0,0,8134,8135,3,1128,564,0,8135,1123,1,0,0,0,8136,8137,3,1128,
564,0,8137,1125,1,0,0,0,8138,8142,7,128,0,0,8139,8140,4,563,206,0,8140,8142,
5,798,0,0,8141,8138,1,0,0,0,8141,8139,1,0,0,0,8142,1127,1,0,0,0,8143,8146,
3,1126,563,0,8144,8146,3,1198,599,0,8145,8143,1,0,0,0,8145,8144,1,0,0,0,
8146,1129,1,0,0,0,8147,8152,3,1128,564,0,8148,8149,5,773,0,0,8149,8151,3,
1128,564,0,8150,8148,1,0,0,0,8151,8154,1,0,0,0,8152,8150,1,0,0,0,8152,8153,
1,0,0,0,8153,1131,1,0,0,0,8154,8152,1,0,0,0,8155,8156,5,776,0,0,8156,8157,
3,1130,565,0,8157,8158,5,777,0,0,8158,1133,1,0,0,0,8159,8161,3,1128,564,
0,8160,8162,3,1138,569,0,8161,8160,1,0,0,0,8161,8162,1,0,0,0,8162,1135,1,
0,0,0,8163,8168,3,1128,564,0,8164,8166,3,1138,569,0,8165,8167,3,1138,569,
0,8166,8165,1,0,0,0,8166,8167,1,0,0,0,8167,8169,1,0,0,0,8168,8164,1,0,0,
0,8168,8169,1,0,0,0,8169,8175,1,0,0,0,8170,8171,4,568,207,0,8171,8172,3,
1138,569,0,8172,8173,3,1138,569,0,8173,8175,1,0,0,0,8174,8163,1,0,0,0,8174,
8170,1,0,0,0,8175,1137,1,0,0,0,8176,8177,5,772,0,0,8177,8178,3,1128,564,
0,8178,1139,1,0,0,0,8179,8180,7,129,0,0,8180,1141,1,0,0,0,8181,8182,7,130,
0,0,8182,1143,1,0,0,0,8183,8184,7,131,0,0,8184,1145,1,0,0,0,8185,8191,5,
747,0,0,8186,8187,4,573,208,0,8187,8191,5,788,0,0,8188,8191,5,749,0,0,8189,
8191,5,748,0,0,8190,8185,1,0,0,0,8190,8186,1,0,0,0,8190,8188,1,0,0,0,8190,
8189,1,0,0,0,8191,1147,1,0,0,0,8192,8202,3,1160,580,0,8193,8202,3,1166,583,
0,8194,8202,3,1172,586,0,8195,8202,3,1170,585,0,8196,8202,3,1168,584,0,8197,
8199,5,794,0,0,8198,8197,1,0,0,0,8198,8199,1,0,0,0,8199,8200,1,0,0,0,8200,
8202,7,132,0,0,8201,8192,1,0,0,0,8201,8193,1,0,0,0,8201,8194,1,0,0,0,8201,
8195,1,0,0,0,8201,8196,1,0,0,0,8201,8198,1,0,0,0,8202,1149,1,0,0,0,8203,
8209,3,1148,574,0,8204,8205,5,758,0,0,8205,8209,3,1140,570,0,8206,8207,5,
759,0,0,8207,8209,3,1140,570,0,8208,8203,1,0,0,0,8208,8204,1,0,0,0,8208,
8206,1,0,0,0,8209,1151,1,0,0,0,8210,8211,5,776,0,0,8211,8216,3,1156,578,
0,8212,8213,5,773,0,0,8213,8215,3,1156,578,0,8214,8212,1,0,0,0,8215,8218,
1,0,0,0,8216,8214,1,0,0,0,8216,8217,1,0,0,0,8217,8219,1,0,0,0,8218,8216,
1,0,0,0,8219,8220,5,777,0,0,8220,1153,1,0,0,0,8221,8225,5,799,0,0,8222,8223,
4,577,209,0,8223,8225,5,798,0,0,8224,8221,1,0,0,0,8224,8222,1,0,0,0,8225,
1155,1,0,0,0,8226,8230,3,1154,577,0,8227,8230,5,788,0,0,8228,8230,5,789,
0,0,8229,8226,1,0,0,0,8229,8227,1,0,0,0,8229,8228,1,0,0,0,8230,1157,1,0,
0,0,8231,8235,3,1154,577,0,8232,8233,4,579,210,0,8233,8235,5,788,0,0,8234,
8231,1,0,0,0,8234,8232,1,0,0,0,8235,1159,1,0,0,0,8236,8238,5,794,0,0,8237,
8236,1,0,0,0,8237,8238,1,0,0,0,8238,8239,1,0,0,0,8239,8242,3,1154,577,0,
8240,8242,5,796,0,0,8241,8237,1,0,0,0,8241,8240,1,0,0,0,8242,8246,1,0,0,
0,8243,8245,3,1154,577,0,8244,8243,1,0,0,0,8245,8248,1,0,0,0,8246,8244,1,
0,0,0,8246,8247,1,0,0,0,8247,1161,1,0,0,0,8248,8246,1,0,0,0,8249,8250,3,
1154,577,0,8250,1163,1,0,0,0,8251,8256,3,1154,577,0,8252,8253,5,773,0,0,
8253,8255,3,1154,577,0,8254,8252,1,0,0,0,8255,8258,1,0,0,0,8256,8254,1,0,
0,0,8256,8257,1,0,0,0,8257,1165,1,0,0,0,8258,8256,1,0,0,0,8259,8260,7,131,
0,0,8260,1167,1,0,0,0,8261,8262,7,133,0,0,8262,1169,1,0,0,0,8263,8264,7,
134,0,0,8264,1171,1,0,0,0,8265,8266,5,116,0,0,8266,8272,5,799,0,0,8267,8268,
5,586,0,0,8268,8272,5,799,0,0,8269,8270,5,583,0,0,8270,8272,5,799,0,0,8271,
8265,1,0,0,0,8271,8267,1,0,0,0,8271,8269,1,0,0,0,8272,1173,1,0,0,0,8273,
8276,3,922,461,0,8274,8276,3,1178,589,0,8275,8273,1,0,0,0,8275,8274,1,0,
0,0,8276,1175,1,0,0,0,8277,8278,3,1178,589,0,8278,1177,1,0,0,0,8279,8280,
5,776,0,0,8280,8281,5,747,0,0,8281,8282,5,773,0,0,8282,8283,5,747,0,0,8283,
8284,5,777,0,0,8284,1179,1,0,0,0,8285,8288,3,1128,564,0,8286,8288,3,1154,
577,0,8287,8285,1,0,0,0,8287,8286,1,0,0,0,8288,1181,1,0,0,0,8289,8292,3,
1126,563,0,8290,8292,3,1212,606,0,8291,8289,1,0,0,0,8291,8290,1,0,0,0,8292,
1183,1,0,0,0,8293,8296,3,1114,557,0,8294,8296,3,1154,577,0,8295,8293,1,0,
0,0,8295,8294,1,0,0,0,8296,1185,1,0,0,0,8297,8300,3,1146,573,0,8298,8300,
3,1126,563,0,8299,8297,1,0,0,0,8299,8298,1,0,0,0,8300,1187,1,0,0,0,8301,
8302,5,776,0,0,8302,8303,5,777,0,0,8303,1189,1,0,0,0,8304,8305,7,135,0,0,
8305,1191,1,0,0,0,8306,8307,7,136,0,0,8307,1193,1,0,0,0,8308,8309,5,214,
0,0,8309,8315,5,772,0,0,8310,8311,5,284,0,0,8311,8315,5,772,0,0,8312,8313,
5,502,0,0,8313,8315,5,772,0,0,8314,8308,1,0,0,0,8314,8310,1,0,0,0,8314,8312,
1,0,0,0,8315,1195,1,0,0,0,8316,8317,5,658,0,0,8317,8327,5,772,0,0,8318,8319,
5,673,0,0,8319,8327,5,772,0,0,8320,8321,5,214,0,0,8321,8327,5,772,0,0,8322,
8323,5,284,0,0,8323,8327,5,772,0,0,8324,8325,5,502,0,0,8325,8327,5,772,0,
0,8326,8316,1,0,0,0,8326,8318,1,0,0,0,8326,8320,1,0,0,0,8326,8322,1,0,0,
0,8326,8324,1,0,0,0,8327,1197,1,0,0,0,8328,8336,4,599,211,0,8329,8337,3,
1204,602,0,8330,8337,3,1216,608,0,8331,8337,5,173,0,0,8332,8333,4,599,212,
0,8333,8337,5,510,0,0,8334,8335,4,599,213,0,8335,8337,5,714,0,0,8336,8329,
1,0,0,0,8336,8330,1,0,0,0,8336,8331,1,0,0,0,8336,8332,1,0,0,0,8336,8334,
1,0,0,0,8337,8346,1,0,0,0,8338,8344,3,1208,604,0,8339,8344,3,1200,600,0,
8340,8344,3,1202,601,0,8341,8344,3,1206,603,0,8342,8344,3,1214,607,0,8343,
8338,1,0,0,0,8343,8339,1,0,0,0,8343,8340,1,0,0,0,8343,8341,1,0,0,0,8343,
8342,1,0,0,0,8344,8346,1,0,0,0,8345,8328,1,0,0,0,8345,8343,1,0,0,0,8346,
1199,1,0,0,0,8347,8348,7,137,0,0,8348,1201,1,0,0,0,8349,8350,7,138,0,0,8350,
1203,1,0,0,0,8351,8362,4,602,214,0,8352,8363,3,1218,609,0,8353,8363,5,170,
0,0,8354,8363,5,188,0,0,8355,8363,5,369,0,0,8356,8363,5,423,0,0,8357,8363,
5,427,0,0,8358,8363,5,451,0,0,8359,8363,5,459,0,0,8360,8363,5,709,0,0,8361,
8363,5,565,0,0,8362,8352,1,0,0,0,8362,8353,1,0,0,0,8362,8354,1,0,0,0,8362,
8355,1,0,0,0,8362,8356,1,0,0,0,8362,8357,1,0,0,0,8362,8358,1,0,0,0,8362,
8359,1,0,0,0,8362,8360,1,0,0,0,8362,8361,1,0,0,0,8363,8370,1,0,0,0,8364,
8368,3,1208,604,0,8365,8368,3,1206,603,0,8366,8368,3,1214,607,0,8367,8364,
1,0,0,0,8367,8365,1,0,0,0,8367,8366,1,0,0,0,8368,8370,1,0,0,0,8369,8351,
1,0,0,0,8369,8367,1,0,0,0,8370,1205,1,0,0,0,8371,8372,7,139,0,0,8372,1207,
1,0,0,0,8373,8377,7,140,0,0,8374,8375,4,604,215,0,8375,8377,7,141,0,0,8376,
8373,1,0,0,0,8376,8374,1,0,0,0,8377,1209,1,0,0,0,8378,8381,4,605,216,0,8379,
8382,3,1218,609,0,8380,8382,3,1216,608,0,8381,8379,1,0,0,0,8381,8380,1,0,
0,0,8382,8389,1,0,0,0,8383,8387,3,1208,604,0,8384,8387,3,1202,601,0,8385,
8387,3,1214,607,0,8386,8383,1,0,0,0,8386,8384,1,0,0,0,8386,8385,1,0,0,0,
8387,8389,1,0,0,0,8388,8378,1,0,0,0,8388,8386,1,0,0,0,8389,1211,1,0,0,0,
8390,8395,3,1208,604,0,8391,8395,3,1200,600,0,8392,8395,3,1202,601,0,8393,
8395,3,1206,603,0,8394,8390,1,0,0,0,8394,8391,1,0,0,0,8394,8392,1,0,0,0,
8394,8393,1,0,0,0,8395,1213,1,0,0,0,8396,8397,7,136,0,0,8397,1215,1,0,0,
0,8398,8404,7,142,0,0,8399,8400,4,608,217,0,8400,8404,5,510,0,0,8401,8402,
4,608,218,0,8402,8404,5,234,0,0,8403,8398,1,0,0,0,8403,8399,1,0,0,0,8403,
8401,1,0,0,0,8404,1217,1,0,0,0,8405,8415,7,143,0,0,8406,8407,4,609,219,0,
8407,8415,5,510,0,0,8408,8409,4,609,220,0,8409,8415,7,144,0,0,8410,8411,
4,609,221,0,8411,8415,7,145,0,0,8412,8413,4,609,222,0,8413,8415,5,660,0,
0,8414,8405,1,0,0,0,8414,8406,1,0,0,0,8414,8408,1,0,0,0,8414,8410,1,0,0,
0,8414,8412,1,0,0,0,8415,1219,1,0,0,0,1123,1223,1227,1230,1232,1268,1276,
1281,1297,1304,1311,1314,1321,1326,1329,1334,1340,1342,1346,1350,1359,1363,
1368,1374,1381,1385,1390,1395,1402,1405,1411,1414,1421,1431,1436,1441,1449,
1455,1459,1464,1473,1479,1485,1491,1500,1506,1515,1529,1533,1539,1543,1549,
1553,1558,1561,1567,1573,1579,1583,1588,1592,1596,1604,1606,1619,1627,1635,
1639,1668,1684,1687,1696,1701,1707,1712,1716,1721,1725,1729,1733,1737,1741,
1743,1754,1762,1771,1776,1779,1784,1791,1799,1803,1808,1815,1820,1825,1833,
1837,1842,1845,1848,1851,1858,1865,1869,1893,1897,1903,1910,1913,1917,1924,
1927,1930,1933,1942,1949,1954,1957,1960,1966,1972,1975,1980,1990,1993,1999,
2005,2015,2018,2026,2032,2043,2046,2051,2070,2073,2076,2082,2085,2087,2093,
2103,2113,2116,2119,2124,2130,2143,2147,2152,2161,2178,2197,2206,2209,2217,
2222,2226,2233,2238,2253,2257,2263,2269,2275,2281,2287,2292,2296,2304,2310,
2316,2321,2324,2327,2336,2339,2350,2362,2371,2375,2384,2387,2393,2395,2399,
2406,2419,2426,2432,2435,2452,2472,2476,2482,2488,2494,2499,2506,2513,2518,
2521,2525,2529,2534,2538,2542,2548,2553,2556,2560,2566,2570,2574,2582,2590,
2599,2608,2621,2624,2628,2634,2642,2647,2650,2653,2656,2659,2661,2667,2669,
2684,2690,2697,2700,2702,2704,2714,2716,2720,2723,2726,2730,2735,2741,2744,
2747,2753,2756,2765,2774,2778,2782,2788,2793,2798,2803,2807,2813,2824,2827,
2832,2838,2841,2844,2847,2850,2864,2867,2871,2875,2881,2886,2890,2895,2898,
2902,2908,2912,2916,2925,2930,2934,2938,2941,2945,2948,2950,2954,2960,2964,
2966,2970,2974,2978,2985,2987,2996,3002,3007,3010,3013,3016,3019,3023,3038,
3042,3048,3051,3054,3060,3065,3069,3072,3080,3082,3095,3107,3112,3115,3118,
3123,3129,3145,3165,3174,3178,3185,3190,3199,3206,3217,3224,3233,3242,3254,
3259,3266,3270,3276,3281,3286,3290,3296,3302,3304,3307,3311,3321,3326,3331,
3338,3347,3355,3360,3364,3370,3373,3376,3380,3384,3394,3398,3401,3404,3409,
3415,3419,3425,3428,3430,3435,3447,3456,3469,3472,3477,3484,3488,3492,3494,
3508,3515,3524,3530,3539,3543,3547,3557,3559,3567,3574,3579,3583,3587,3590,
3596,3599,3602,3608,3615,3620,3624,3627,3630,3633,3635,3639,3647,3653,3657,
3662,3665,3668,3671,3673,3678,3687,3700,3702,3706,3712,3715,3718,3724,3731,
3733,3741,3747,3752,3755,3762,3764,3773,3782,3791,3799,3803,3810,3813,3815,
3823,3829,3839,3846,3940,3944,3950,3964,3972,3975,3987,3992,3998,4005,4012,
4019,4026,4033,4040,4043,4050,4058,4066,4076,4082,4086,4090,4095,4098,4100,
4109,4115,4122,4127,4132,4137,4140,4147,4160,4166,4172,4179,4187,4193,4205,
4207,4213,4217,4219,4223,4236,4242,4250,4261,4265,4278,4285,4291,4298,4300,
4310,4318,4321,4326,4330,4336,4339,4344,4355,4357,4369,4374,4382,4388,4390,
4392,4398,4410,4415,4417,4421,4427,4430,4433,4443,4445,4451,4458,4464,4474,
4478,4483,4500,4516,4521,4529,4537,4542,4548,4551,4553,4562,4568,4574,4576,
4580,4591,4601,4606,4611,4616,4624,4628,4633,4642,4654,4668,4677,4679,4686,
4693,4697,4703,4711,4718,4722,4728,4735,4738,4747,4753,4758,4781,4784,4800,
4805,4808,4812,4815,4829,4835,4840,4843,4845,4849,4854,4856,4868,4874,4896,
4900,4902,4910,4914,4923,4933,4940,4943,4947,4950,4953,4957,4960,4964,4967,
4972,4975,4980,4983,4989,4993,4999,5002,5011,5013,5019,5023,5026,5029,5033,
5039,5042,5045,5055,5059,5068,5071,5076,5079,5082,5086,5089,5094,5098,5106,
5119,5137,5142,5147,5155,5161,5163,5167,5170,5184,5194,5198,5206,5209,5213,
5223,5227,5234,5239,5247,5252,5258,5265,5270,5276,5283,5293,5295,5303,5308,
5312,5315,5322,5327,5331,5342,5350,5354,5357,5360,5364,5368,5373,5379,5383,
5394,5397,5400,5403,5411,5415,5420,5428,5436,5442,5460,5470,5476,5490,5493,
5497,5508,5510,5519,5531,5533,5540,5546,5552,5560,5571,5575,5604,5606,5614,
5618,5635,5642,5656,5668,5674,5681,5684,5718,5726,5728,5740,5745,5751,5759,
5766,5772,5777,5783,5788,5793,5799,5804,5810,5818,5826,5834,5842,5847,5853,
5858,5862,5866,5871,5873,5892,5896,5903,5915,5918,5922,5927,5932,5936,5946,
5955,5957,5960,5969,5976,5989,5994,6001,6007,6033,6064,6084,6090,6094,6121,
6133,6146,6150,6154,6182,6238,6248,6252,6264,6269,6282,6302,6306,6323,6326,
6331,6334,6343,6347,6353,6359,6363,6374,6380,6382,6389,6396,6400,6407,6412,
6416,6421,6425,6429,6434,6439,6441,6445,6458,6462,6465,6469,6473,6477,6482,
6486,6490,6499,6501,6508,6514,6522,6543,6548,6555,6578,6594,6604,6608,6615,
6618,6629,6638,6641,6648,6653,6679,6685,6691,6695,6705,6709,6722,6734,6752,
6760,6770,6773,6778,6782,6789,6794,6801,6809,6812,6817,6825,6828,6842,6845,
6858,6862,6864,6869,6874,6880,6886,6892,6897,6900,6906,6911,6914,6920,6924,
6930,6932,6935,6941,6947,6955,6957,6959,6963,6969,6974,6978,6983,6989,6996,
6999,7001,7004,7014,7018,7024,7031,7036,7050,7055,7063,7068,7072,7075,7080,
7084,7092,7100,7102,7109,7117,7124,7127,7135,7143,7145,7151,7157,7161,7168,
7179,7188,7191,7196,7198,7201,7204,7208,7211,7215,7220,7223,7227,7230,7234,
7239,7243,7255,7259,7265,7268,7273,7277,7281,7286,7295,7298,7302,7306,7309,
7313,7317,7322,7327,7333,7338,7343,7345,7350,7357,7365,7371,7373,7377,7381,
7385,7389,7403,7410,7414,7419,7425,7429,7435,7439,7443,7448,7453,7458,7463,
7469,7475,7480,7485,7490,7495,7500,7505,7510,7520,7526,7532,7538,7541,7548,
7553,7556,7560,7563,7567,7572,7576,7581,7585,7594,7597,7600,7603,7607,7611,
7615,7630,7633,7635,7640,7649,7652,7656,7669,7681,7686,7691,7700,7705,7714,
7719,7723,7727,7731,7736,7741,7747,7752,7755,7762,7771,7778,7792,7804,7817,
7825,7832,7841,7847,7855,7861,7872,7880,7888,7896,7906,7911,7916,7918,7924,
7930,7933,7940,7942,7944,7947,7949,7966,7971,7973,7980,7993,7995,8001,8011,
8020,8031,8053,8057,8081,8092,8094,8098,8105,8113,8120,8126,8141,8145,8152,
8161,8166,8168,8174,8190,8198,8201,8208,8216,8224,8229,8234,8237,8241,8246,
8256,8271,8275,8287,8291,8295,8299,8314,8326,8336,8343,8345,8362,8367,8369,
8376,8381,8386,8388,8394,8403,8414];


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.atn.PredictionContextCache();

export default class MySQLParser extends MySQLBaseRecognizer {

    static grammarFileName = "MySQLParser.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, "'='", "':='", 
                            "'<=>'", "'>='", "'>'", "'<='", "'<'", "'!='", 
                            "'+'", "'-'", "'*'", "'/'", "'%'", "'!'", "'~'", 
                            "'<<'", "'>>'", "'&&'", "'&'", "'^'", "'||'", 
                            "'|'", "'.'", "','", "';'", "':'", "'('", "')'", 
                            "'{'", "'}'", "'_'", "'->'", "'->>'", "'@'", 
                            null, "'@@'", "'\\N'", "'?'", null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, "'<>'" ];
    static symbolicNames = [ null, "ACCESSIBLE_SYMBOL", "ACCOUNT_SYMBOL", 
                             "ACTION_SYMBOL", "ADD_SYMBOL", "ADDDATE_SYMBOL", 
                             "AFTER_SYMBOL", "AGAINST_SYMBOL", "AGGREGATE_SYMBOL", 
                             "ALGORITHM_SYMBOL", "ALL_SYMBOL", "ALTER_SYMBOL", 
                             "ALWAYS_SYMBOL", "ANALYSE_SYMBOL", "ANALYZE_SYMBOL", 
                             "AND_SYMBOL", "ANY_SYMBOL", "AS_SYMBOL", "ASC_SYMBOL", 
                             "ASCII_SYMBOL", "ASENSITIVE_SYMBOL", "AT_SYMBOL", 
                             "AUTHORS_SYMBOL", "AUTOEXTEND_SIZE_SYMBOL", 
                             "AUTO_INCREMENT_SYMBOL", "AVG_ROW_LENGTH_SYMBOL", 
                             "AVG_SYMBOL", "BACKUP_SYMBOL", "BEFORE_SYMBOL", 
                             "BEGIN_SYMBOL", "BETWEEN_SYMBOL", "BIGINT_SYMBOL", 
                             "BINARY_SYMBOL", "BINLOG_SYMBOL", "BIN_NUM_SYMBOL", 
                             "BIT_AND_SYMBOL", "BIT_OR_SYMBOL", "BIT_SYMBOL", 
                             "BIT_XOR_SYMBOL", "BLOB_SYMBOL", "BLOCK_SYMBOL", 
                             "BOOLEAN_SYMBOL", "BOOL_SYMBOL", "BOTH_SYMBOL", 
                             "BTREE_SYMBOL", "BY_SYMBOL", "BYTE_SYMBOL", 
                             "CACHE_SYMBOL", "CALL_SYMBOL", "CASCADE_SYMBOL", 
                             "CASCADED_SYMBOL", "CASE_SYMBOL", "CAST_SYMBOL", 
                             "CATALOG_NAME_SYMBOL", "CHAIN_SYMBOL", "CHANGE_SYMBOL", 
                             "CHANGED_SYMBOL", "CHANNEL_SYMBOL", "CHARSET_SYMBOL", 
                             "CHARACTER_SYMBOL", "CHAR_SYMBOL", "CHECKSUM_SYMBOL", 
                             "CHECK_SYMBOL", "CIPHER_SYMBOL", "CLASS_ORIGIN_SYMBOL", 
                             "CLIENT_SYMBOL", "CLOSE_SYMBOL", "COALESCE_SYMBOL", 
                             "CODE_SYMBOL", "COLLATE_SYMBOL", "COLLATION_SYMBOL", 
                             "COLUMNS_SYMBOL", "COLUMN_SYMBOL", "COLUMN_NAME_SYMBOL", 
                             "COLUMN_FORMAT_SYMBOL", "COMMENT_SYMBOL", "COMMITTED_SYMBOL", 
                             "COMMIT_SYMBOL", "COMPACT_SYMBOL", "COMPLETION_SYMBOL", 
                             "COMPRESSED_SYMBOL", "COMPRESSION_SYMBOL", 
                             "CONCURRENT_SYMBOL", "CONDITION_SYMBOL", "CONNECTION_SYMBOL", 
                             "CONSISTENT_SYMBOL", "CONSTRAINT_SYMBOL", "CONSTRAINT_CATALOG_SYMBOL", 
                             "CONSTRAINT_NAME_SYMBOL", "CONSTRAINT_SCHEMA_SYMBOL", 
                             "CONTAINS_SYMBOL", "CONTEXT_SYMBOL", "CONTINUE_SYMBOL", 
                             "CONTRIBUTORS_SYMBOL", "CONVERT_SYMBOL", "COUNT_SYMBOL", 
                             "CPU_SYMBOL", "CREATE_SYMBOL", "CROSS_SYMBOL", 
                             "CUBE_SYMBOL", "CURDATE_SYMBOL", "CURRENT_SYMBOL", 
                             "CURRENT_DATE_SYMBOL", "CURRENT_TIME_SYMBOL", 
                             "CURRENT_TIMESTAMP_SYMBOL", "CURRENT_USER_SYMBOL", 
                             "CURSOR_SYMBOL", "CURSOR_NAME_SYMBOL", "CURTIME_SYMBOL", 
                             "DATABASE_SYMBOL", "DATABASES_SYMBOL", "DATAFILE_SYMBOL", 
                             "DATA_SYMBOL", "DATETIME_SYMBOL", "DATE_ADD_SYMBOL", 
                             "DATE_SUB_SYMBOL", "DATE_SYMBOL", "DAYOFMONTH_SYMBOL", 
                             "DAY_HOUR_SYMBOL", "DAY_MICROSECOND_SYMBOL", 
                             "DAY_MINUTE_SYMBOL", "DAY_SECOND_SYMBOL", "DAY_SYMBOL", 
                             "DEALLOCATE_SYMBOL", "DEC_SYMBOL", "DECIMAL_NUM_SYMBOL", 
                             "DECIMAL_SYMBOL", "DECLARE_SYMBOL", "DEFAULT_SYMBOL", 
                             "DEFAULT_AUTH_SYMBOL", "DEFINER_SYMBOL", "DELAYED_SYMBOL", 
                             "DELAY_KEY_WRITE_SYMBOL", "DELETE_SYMBOL", 
                             "DESC_SYMBOL", "DESCRIBE_SYMBOL", "DES_KEY_FILE_SYMBOL", 
                             "DETERMINISTIC_SYMBOL", "DIAGNOSTICS_SYMBOL", 
                             "DIRECTORY_SYMBOL", "DISABLE_SYMBOL", "DISCARD_SYMBOL", 
                             "DISK_SYMBOL", "DISTINCT_SYMBOL", "DISTINCTROW_SYMBOL", 
                             "DIV_SYMBOL", "DOUBLE_SYMBOL", "DO_SYMBOL", 
                             "DROP_SYMBOL", "DUAL_SYMBOL", "DUMPFILE_SYMBOL", 
                             "DUPLICATE_SYMBOL", "DYNAMIC_SYMBOL", "EACH_SYMBOL", 
                             "ELSE_SYMBOL", "ELSEIF_SYMBOL", "ENABLE_SYMBOL", 
                             "ENCLOSED_SYMBOL", "ENCRYPTION_SYMBOL", "END_SYMBOL", 
                             "ENDS_SYMBOL", "END_OF_INPUT_SYMBOL", "ENGINES_SYMBOL", 
                             "ENGINE_SYMBOL", "ENUM_SYMBOL", "ERROR_SYMBOL", 
                             "ERRORS_SYMBOL", "ESCAPED_SYMBOL", "ESCAPE_SYMBOL", 
                             "EVENTS_SYMBOL", "EVENT_SYMBOL", "EVERY_SYMBOL", 
                             "EXCHANGE_SYMBOL", "EXECUTE_SYMBOL", "EXISTS_SYMBOL", 
                             "EXIT_SYMBOL", "EXPANSION_SYMBOL", "EXPIRE_SYMBOL", 
                             "EXPLAIN_SYMBOL", "EXPORT_SYMBOL", "EXTENDED_SYMBOL", 
                             "EXTENT_SIZE_SYMBOL", "EXTRACT_SYMBOL", "FALSE_SYMBOL", 
                             "FAST_SYMBOL", "FAULTS_SYMBOL", "FETCH_SYMBOL", 
                             "FIELDS_SYMBOL", "FILE_SYMBOL", "FILE_BLOCK_SIZE_SYMBOL", 
                             "FILTER_SYMBOL", "FIRST_SYMBOL", "FIXED_SYMBOL", 
                             "FLOAT4_SYMBOL", "FLOAT8_SYMBOL", "FLOAT_SYMBOL", 
                             "FLUSH_SYMBOL", "FOLLOWS_SYMBOL", "FORCE_SYMBOL", 
                             "FOREIGN_SYMBOL", "FOR_SYMBOL", "FORMAT_SYMBOL", 
                             "FOUND_SYMBOL", "FROM_SYMBOL", "FULL_SYMBOL", 
                             "FULLTEXT_SYMBOL", "FUNCTION_SYMBOL", "GET_SYMBOL", 
                             "GENERAL_SYMBOL", "GENERATED_SYMBOL", "GROUP_REPLICATION_SYMBOL", 
                             "GEOMETRYCOLLECTION_SYMBOL", "GEOMETRY_SYMBOL", 
                             "GET_FORMAT_SYMBOL", "GLOBAL_SYMBOL", "GRANT_SYMBOL", 
                             "GRANTS_SYMBOL", "GROUP_SYMBOL", "GROUP_CONCAT_SYMBOL", 
                             "HANDLER_SYMBOL", "HASH_SYMBOL", "HAVING_SYMBOL", 
                             "HELP_SYMBOL", "HIGH_PRIORITY_SYMBOL", "HOST_SYMBOL", 
                             "HOSTS_SYMBOL", "HOUR_MICROSECOND_SYMBOL", 
                             "HOUR_MINUTE_SYMBOL", "HOUR_SECOND_SYMBOL", 
                             "HOUR_SYMBOL", "IDENTIFIED_SYMBOL", "IF_SYMBOL", 
                             "IGNORE_SYMBOL", "IGNORE_SERVER_IDS_SYMBOL", 
                             "IMPORT_SYMBOL", "INDEXES_SYMBOL", "INDEX_SYMBOL", 
                             "INFILE_SYMBOL", "INITIAL_SIZE_SYMBOL", "INNER_SYMBOL", 
                             "INOUT_SYMBOL", "INSENSITIVE_SYMBOL", "INSERT_SYMBOL", 
                             "INSERT_METHOD_SYMBOL", "INSTANCE_SYMBOL", 
                             "INSTALL_SYMBOL", "INTEGER_SYMBOL", "INTERVAL_SYMBOL", 
                             "INTO_SYMBOL", "INT_SYMBOL", "INVOKER_SYMBOL", 
                             "IN_SYMBOL", "IO_AFTER_GTIDS_SYMBOL", "IO_BEFORE_GTIDS_SYMBOL", 
                             "IO_THREAD_SYMBOL", "IO_SYMBOL", "IPC_SYMBOL", 
                             "IS_SYMBOL", "ISOLATION_SYMBOL", "ISSUER_SYMBOL", 
                             "ITERATE_SYMBOL", "JOIN_SYMBOL", "JSON_SYMBOL", 
                             "KEYS_SYMBOL", "KEY_BLOCK_SIZE_SYMBOL", "KEY_SYMBOL", 
                             "KILL_SYMBOL", "LANGUAGE_SYMBOL", "LAST_SYMBOL", 
                             "LEADING_SYMBOL", "LEAVES_SYMBOL", "LEAVE_SYMBOL", 
                             "LEFT_SYMBOL", "LESS_SYMBOL", "LEVEL_SYMBOL", 
                             "LIKE_SYMBOL", "LIMIT_SYMBOL", "LINEAR_SYMBOL", 
                             "LINES_SYMBOL", "LINESTRING_SYMBOL", "LIST_SYMBOL", 
                             "LOAD_SYMBOL", "LOCALTIME_SYMBOL", "LOCALTIMESTAMP_SYMBOL", 
                             "LOCAL_SYMBOL", "LOCATOR_SYMBOL", "LOCKS_SYMBOL", 
                             "LOCK_SYMBOL", "LOGFILE_SYMBOL", "LOGS_SYMBOL", 
                             "LONGBLOB_SYMBOL", "LONGTEXT_SYMBOL", "LONG_NUM_SYMBOL", 
                             "LONG_SYMBOL", "LOOP_SYMBOL", "LOW_PRIORITY_SYMBOL", 
                             "MASTER_AUTO_POSITION_SYMBOL", "MASTER_BIND_SYMBOL", 
                             "MASTER_CONNECT_RETRY_SYMBOL", "MASTER_DELAY_SYMBOL", 
                             "MASTER_HOST_SYMBOL", "MASTER_LOG_FILE_SYMBOL", 
                             "MASTER_LOG_POS_SYMBOL", "MASTER_PASSWORD_SYMBOL", 
                             "MASTER_PORT_SYMBOL", "MASTER_RETRY_COUNT_SYMBOL", 
                             "MASTER_SERVER_ID_SYMBOL", "MASTER_SSL_CAPATH_SYMBOL", 
                             "MASTER_SSL_CA_SYMBOL", "MASTER_SSL_CERT_SYMBOL", 
                             "MASTER_SSL_CIPHER_SYMBOL", "MASTER_SSL_CRL_SYMBOL", 
                             "MASTER_SSL_CRLPATH_SYMBOL", "MASTER_SSL_KEY_SYMBOL", 
                             "MASTER_SSL_SYMBOL", "MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL", 
                             "MASTER_SYMBOL", "MASTER_TLS_VERSION_SYMBOL", 
                             "MASTER_USER_SYMBOL", "MASTER_HEARTBEAT_PERIOD_SYMBOL", 
                             "MATCH_SYMBOL", "MAX_CONNECTIONS_PER_HOUR_SYMBOL", 
                             "MAX_QUERIES_PER_HOUR_SYMBOL", "MAX_ROWS_SYMBOL", 
                             "MAX_SIZE_SYMBOL", "MAX_STATEMENT_TIME_SYMBOL", 
                             "MAX_SYMBOL", "MAX_UPDATES_PER_HOUR_SYMBOL", 
                             "MAX_USER_CONNECTIONS_SYMBOL", "MAXVALUE_SYMBOL", 
                             "MEDIUMBLOB_SYMBOL", "MEDIUMINT_SYMBOL", "MEDIUMTEXT_SYMBOL", 
                             "MEDIUM_SYMBOL", "MEMORY_SYMBOL", "MERGE_SYMBOL", 
                             "MESSAGE_TEXT_SYMBOL", "MICROSECOND_SYMBOL", 
                             "MID_SYMBOL", "MIDDLEINT_SYMBOL", "MIGRATE_SYMBOL", 
                             "MINUTE_MICROSECOND_SYMBOL", "MINUTE_SECOND_SYMBOL", 
                             "MINUTE_SYMBOL", "MIN_ROWS_SYMBOL", "MIN_SYMBOL", 
                             "MODE_SYMBOL", "MODIFIES_SYMBOL", "MODIFY_SYMBOL", 
                             "MOD_SYMBOL", "MONTH_SYMBOL", "MULTILINESTRING_SYMBOL", 
                             "MULTIPOINT_SYMBOL", "MULTIPOLYGON_SYMBOL", 
                             "MUTEX_SYMBOL", "MYSQL_ERRNO_SYMBOL", "NAMES_SYMBOL", 
                             "NAME_SYMBOL", "NATIONAL_SYMBOL", "NATURAL_SYMBOL", 
                             "NCHAR_STRING_SYMBOL", "NCHAR_SYMBOL", "NDB_SYMBOL", 
                             "NDBCLUSTER_SYMBOL", "NEG_SYMBOL", "NEVER_SYMBOL", 
                             "NEW_SYMBOL", "NEXT_SYMBOL", "NODEGROUP_SYMBOL", 
                             "NONE_SYMBOL", "NONBLOCKING_SYMBOL", "NOT_SYMBOL", 
                             "NOW_SYMBOL", "NO_SYMBOL", "NO_WAIT_SYMBOL", 
                             "NO_WRITE_TO_BINLOG_SYMBOL", "NULL_SYMBOL", 
                             "NUMBER_SYMBOL", "NUMERIC_SYMBOL", "NVARCHAR_SYMBOL", 
                             "OFFLINE_SYMBOL", "OFFSET_SYMBOL", "OLD_PASSWORD_SYMBOL", 
                             "ON_SYMBOL", "ONE_SYMBOL", "ONLINE_SYMBOL", 
                             "ONLY_SYMBOL", "OPEN_SYMBOL", "OPTIMIZE_SYMBOL", 
                             "OPTIMIZER_COSTS_SYMBOL", "OPTIONS_SYMBOL", 
                             "OPTION_SYMBOL", "OPTIONALLY_SYMBOL", "ORDER_SYMBOL", 
                             "OR_SYMBOL", "OUTER_SYMBOL", "OUTFILE_SYMBOL", 
                             "OUT_SYMBOL", "OWNER_SYMBOL", "PACK_KEYS_SYMBOL", 
                             "PAGE_SYMBOL", "PARSER_SYMBOL", "PARTIAL_SYMBOL", 
                             "PARTITIONING_SYMBOL", "PARTITIONS_SYMBOL", 
                             "PARTITION_SYMBOL", "PASSWORD_SYMBOL", "PHASE_SYMBOL", 
                             "PLUGINS_SYMBOL", "PLUGIN_DIR_SYMBOL", "PLUGIN_SYMBOL", 
                             "POINT_SYMBOL", "POLYGON_SYMBOL", "PORT_SYMBOL", 
                             "POSITION_SYMBOL", "PRECEDES_SYMBOL", "PRECISION_SYMBOL", 
                             "PREPARE_SYMBOL", "PRESERVE_SYMBOL", "PREV_SYMBOL", 
                             "PRIMARY_SYMBOL", "PRIVILEGES_SYMBOL", "PROCEDURE_SYMBOL", 
                             "PROCESS_SYMBOL", "PROCESSLIST_SYMBOL", "PROFILE_SYMBOL", 
                             "PROFILES_SYMBOL", "PROXY_SYMBOL", "PURGE_SYMBOL", 
                             "QUARTER_SYMBOL", "QUERY_SYMBOL", "QUICK_SYMBOL", 
                             "RANGE_SYMBOL", "READS_SYMBOL", "READ_ONLY_SYMBOL", 
                             "READ_SYMBOL", "READ_WRITE_SYMBOL", "REAL_SYMBOL", 
                             "REBUILD_SYMBOL", "RECOVER_SYMBOL", "REDOFILE_SYMBOL", 
                             "REDO_BUFFER_SIZE_SYMBOL", "REDUNDANT_SYMBOL", 
                             "REFERENCES_SYMBOL", "REGEXP_SYMBOL", "RELAY_SYMBOL", 
                             "RELAYLOG_SYMBOL", "RELAY_LOG_FILE_SYMBOL", 
                             "RELAY_LOG_POS_SYMBOL", "RELAY_THREAD_SYMBOL", 
                             "RELEASE_SYMBOL", "RELOAD_SYMBOL", "REMOVE_SYMBOL", 
                             "RENAME_SYMBOL", "REORGANIZE_SYMBOL", "REPAIR_SYMBOL", 
                             "REPEATABLE_SYMBOL", "REPEAT_SYMBOL", "REPLACE_SYMBOL", 
                             "REPLICATION_SYMBOL", "REPLICATE_DO_DB_SYMBOL", 
                             "REPLICATE_IGNORE_DB_SYMBOL", "REPLICATE_DO_TABLE_SYMBOL", 
                             "REPLICATE_IGNORE_TABLE_SYMBOL", "REPLICATE_WILD_DO_TABLE_SYMBOL", 
                             "REPLICATE_WILD_IGNORE_TABLE_SYMBOL", "REPLICATE_REWRITE_DB_SYMBOL", 
                             "REQUIRE_SYMBOL", "RESET_SYMBOL", "RESIGNAL_SYMBOL", 
                             "RESTORE_SYMBOL", "RESTRICT_SYMBOL", "RESUME_SYMBOL", 
                             "RETURNED_SQLSTATE_SYMBOL", "RETURNS_SYMBOL", 
                             "RETURN_SYMBOL", "REVERSE_SYMBOL", "REVOKE_SYMBOL", 
                             "RIGHT_SYMBOL", "RLIKE_SYMBOL", "ROLLBACK_SYMBOL", 
                             "ROLLUP_SYMBOL", "ROTATE_SYMBOL", "ROUTINE_SYMBOL", 
                             "ROWS_SYMBOL", "ROW_COUNT_SYMBOL", "ROW_FORMAT_SYMBOL", 
                             "ROW_SYMBOL", "RTREE_SYMBOL", "SAVEPOINT_SYMBOL", 
                             "SCHEDULE_SYMBOL", "SCHEMA_SYMBOL", "SCHEMA_NAME_SYMBOL", 
                             "SCHEMAS_SYMBOL", "SECOND_MICROSECOND_SYMBOL", 
                             "SECOND_SYMBOL", "SECURITY_SYMBOL", "SELECT_SYMBOL", 
                             "SENSITIVE_SYMBOL", "SEPARATOR_SYMBOL", "SERIALIZABLE_SYMBOL", 
                             "SERIAL_SYMBOL", "SESSION_SYMBOL", "SERVER_SYMBOL", 
                             "SERVER_OPTIONS_SYMBOL", "SESSION_USER_SYMBOL", 
                             "SET_SYMBOL", "SET_VAR_SYMBOL", "SHARE_SYMBOL", 
                             "SHOW_SYMBOL", "SHUTDOWN_SYMBOL", "SIGNAL_SYMBOL", 
                             "SIGNED_SYMBOL", "SIMPLE_SYMBOL", "SLAVE_SYMBOL", 
                             "SLOW_SYMBOL", "SMALLINT_SYMBOL", "SNAPSHOT_SYMBOL", 
                             "SOME_SYMBOL", "SOCKET_SYMBOL", "SONAME_SYMBOL", 
                             "SOUNDS_SYMBOL", "SOURCE_SYMBOL", "SPATIAL_SYMBOL", 
                             "SPECIFIC_SYMBOL", "SQLEXCEPTION_SYMBOL", "SQLSTATE_SYMBOL", 
                             "SQLWARNING_SYMBOL", "SQL_AFTER_GTIDS_SYMBOL", 
                             "SQL_AFTER_MTS_GAPS_SYMBOL", "SQL_BEFORE_GTIDS_SYMBOL", 
                             "SQL_BIG_RESULT_SYMBOL", "SQL_BUFFER_RESULT_SYMBOL", 
                             "SQL_CACHE_SYMBOL", "SQL_CALC_FOUND_ROWS_SYMBOL", 
                             "SQL_NO_CACHE_SYMBOL", "SQL_SMALL_RESULT_SYMBOL", 
                             "SQL_SYMBOL", "SQL_THREAD_SYMBOL", "SSL_SYMBOL", 
                             "STACKED_SYMBOL", "STARTING_SYMBOL", "STARTS_SYMBOL", 
                             "START_SYMBOL", "STATS_AUTO_RECALC_SYMBOL", 
                             "STATS_PERSISTENT_SYMBOL", "STATS_SAMPLE_PAGES_SYMBOL", 
                             "STATUS_SYMBOL", "STDDEV_SAMP_SYMBOL", "STDDEV_SYMBOL", 
                             "STDDEV_POP_SYMBOL", "STD_SYMBOL", "STOP_SYMBOL", 
                             "STORAGE_SYMBOL", "STORED_SYMBOL", "STRAIGHT_JOIN_SYMBOL", 
                             "STRING_SYMBOL", "SUBCLASS_ORIGIN_SYMBOL", 
                             "SUBDATE_SYMBOL", "SUBJECT_SYMBOL", "SUBPARTITIONS_SYMBOL", 
                             "SUBPARTITION_SYMBOL", "SUBSTR_SYMBOL", "SUBSTRING_SYMBOL", 
                             "SUM_SYMBOL", "SUPER_SYMBOL", "SUSPEND_SYMBOL", 
                             "SWAPS_SYMBOL", "SWITCHES_SYMBOL", "SYSDATE_SYMBOL", 
                             "SYSTEM_USER_SYMBOL", "TABLES_SYMBOL", "TABLESPACE_SYMBOL", 
                             "TABLE_REF_PRIORITY_SYMBOL", "TABLE_SYMBOL", 
                             "TABLE_CHECKSUM_SYMBOL", "TABLE_NAME_SYMBOL", 
                             "TEMPORARY_SYMBOL", "TEMPTABLE_SYMBOL", "TERMINATED_SYMBOL", 
                             "TEXT_SYMBOL", "THAN_SYMBOL", "THEN_SYMBOL", 
                             "TIMESTAMP_SYMBOL", "TIMESTAMP_ADD_SYMBOL", 
                             "TIMESTAMP_DIFF_SYMBOL", "TIME_SYMBOL", "TINYBLOB_SYMBOL", 
                             "TINYINT_SYMBOL", "TINYTEXT_SYMBOL", "TO_SYMBOL", 
                             "TRAILING_SYMBOL", "TRANSACTION_SYMBOL", "TRIGGERS_SYMBOL", 
                             "TRIGGER_SYMBOL", "TRIM_SYMBOL", "TRUE_SYMBOL", 
                             "TRUNCATE_SYMBOL", "TYPES_SYMBOL", "TYPE_SYMBOL", 
                             "UDF_RETURNS_SYMBOL", "UNCOMMITTED_SYMBOL", 
                             "UNDEFINED_SYMBOL", "UNDOFILE_SYMBOL", "UNDO_BUFFER_SIZE_SYMBOL", 
                             "UNDO_SYMBOL", "UNICODE_SYMBOL", "UNINSTALL_SYMBOL", 
                             "UNION_SYMBOL", "UNIQUE_SYMBOL", "UNKNOWN_SYMBOL", 
                             "UNLOCK_SYMBOL", "UNSIGNED_SYMBOL", "UNTIL_SYMBOL", 
                             "UPDATE_SYMBOL", "UPGRADE_SYMBOL", "USAGE_SYMBOL", 
                             "USER_RESOURCES_SYMBOL", "USER_SYMBOL", "USE_FRM_SYMBOL", 
                             "USE_SYMBOL", "USING_SYMBOL", "UTC_DATE_SYMBOL", 
                             "UTC_TIMESTAMP_SYMBOL", "UTC_TIME_SYMBOL", 
                             "VALIDATION_SYMBOL", "VALUES_SYMBOL", "VALUE_SYMBOL", 
                             "VARBINARY_SYMBOL", "VARCHAR_SYMBOL", "VARCHARACTER_SYMBOL", 
                             "VARIABLES_SYMBOL", "VARIANCE_SYMBOL", "VARYING_SYMBOL", 
                             "VAR_POP_SYMBOL", "VAR_SAMP_SYMBOL", "VIEW_SYMBOL", 
                             "VIRTUAL_SYMBOL", "WAIT_SYMBOL", "WARNINGS_SYMBOL", 
                             "WEEK_SYMBOL", "WEIGHT_STRING_SYMBOL", "WHEN_SYMBOL", 
                             "WHERE_SYMBOL", "WHILE_SYMBOL", "WITH_SYMBOL", 
                             "WITHOUT_SYMBOL", "WORK_SYMBOL", "WRAPPER_SYMBOL", 
                             "WRITE_SYMBOL", "X509_SYMBOL", "XA_SYMBOL", 
                             "XID_SYMBOL", "XML_SYMBOL", "XOR_SYMBOL", "YEAR_MONTH_SYMBOL", 
                             "YEAR_SYMBOL", "ZEROFILL_SYMBOL", "PERSIST_SYMBOL", 
                             "ROLE_SYMBOL", "ADMIN_SYMBOL", "INVISIBLE_SYMBOL", 
                             "VISIBLE_SYMBOL", "EXCEPT_SYMBOL", "COMPONENT_SYMBOL", 
                             "RECURSIVE_SYMBOL", "JSON_OBJECTAGG_SYMBOL", 
                             "JSON_ARRAYAGG_SYMBOL", "OF_SYMBOL", "SKIP_SYMBOL", 
                             "LOCKED_SYMBOL", "NOWAIT_SYMBOL", "GROUPING_SYMBOL", 
                             "PERSIST_ONLY_SYMBOL", "HISTOGRAM_SYMBOL", 
                             "BUCKETS_SYMBOL", "REMOTE_SYMBOL", "CLONE_SYMBOL", 
                             "CUME_DIST_SYMBOL", "DENSE_RANK_SYMBOL", "EXCLUDE_SYMBOL", 
                             "FIRST_VALUE_SYMBOL", "FOLLOWING_SYMBOL", "GROUPS_SYMBOL", 
                             "LAG_SYMBOL", "LAST_VALUE_SYMBOL", "LEAD_SYMBOL", 
                             "NTH_VALUE_SYMBOL", "NTILE_SYMBOL", "NULLS_SYMBOL", 
                             "OTHERS_SYMBOL", "OVER_SYMBOL", "PERCENT_RANK_SYMBOL", 
                             "PRECEDING_SYMBOL", "RANK_SYMBOL", "RESPECT_SYMBOL", 
                             "ROW_NUMBER_SYMBOL", "TIES_SYMBOL", "UNBOUNDED_SYMBOL", 
                             "WINDOW_SYMBOL", "EMPTY_SYMBOL", "JSON_TABLE_SYMBOL", 
                             "NESTED_SYMBOL", "ORDINALITY_SYMBOL", "PATH_SYMBOL", 
                             "HISTORY_SYMBOL", "REUSE_SYMBOL", "SRID_SYMBOL", 
                             "THREAD_PRIORITY_SYMBOL", "RESOURCE_SYMBOL", 
                             "SYSTEM_SYMBOL", "VCPU_SYMBOL", "MASTER_PUBLIC_KEY_PATH_SYMBOL", 
                             "GET_MASTER_PUBLIC_KEY_SYMBOL", "RESTART_SYMBOL", 
                             "DEFINITION_SYMBOL", "DESCRIPTION_SYMBOL", 
                             "ORGANIZATION_SYMBOL", "REFERENCE_SYMBOL", 
                             "OPTIONAL_SYMBOL", "SECONDARY_SYMBOL", "SECONDARY_ENGINE_SYMBOL", 
                             "SECONDARY_LOAD_SYMBOL", "SECONDARY_UNLOAD_SYMBOL", 
                             "ACTIVE_SYMBOL", "INACTIVE_SYMBOL", "LATERAL_SYMBOL", 
                             "RETAIN_SYMBOL", "OLD_SYMBOL", "NETWORK_NAMESPACE_SYMBOL", 
                             "ENFORCED_SYMBOL", "ARRAY_SYMBOL", "OJ_SYMBOL", 
                             "MEMBER_SYMBOL", "RANDOM_SYMBOL", "MASTER_COMPRESSION_ALGORITHM_SYMBOL", 
                             "MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL", "PRIVILEGE_CHECKS_USER_SYMBOL", 
                             "MASTER_TLS_CIPHERSUITES_SYMBOL", "REQUIRE_ROW_FORMAT_SYMBOL", 
                             "PASSWORD_LOCK_TIME_SYMBOL", "FAILED_LOGIN_ATTEMPTS_SYMBOL", 
                             "REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL", "STREAM_SYMBOL", 
                             "OFF_SYMBOL", "NOT2_SYMBOL", "CONCAT_PIPES_SYMBOL", 
                             "INT_NUMBER", "LONG_NUMBER", "ULONGLONG_NUMBER", 
                             "EQUAL_OPERATOR", "ASSIGN_OPERATOR", "NULL_SAFE_EQUAL_OPERATOR", 
                             "GREATER_OR_EQUAL_OPERATOR", "GREATER_THAN_OPERATOR", 
                             "LESS_OR_EQUAL_OPERATOR", "LESS_THAN_OPERATOR", 
                             "NOT_EQUAL_OPERATOR", "PLUS_OPERATOR", "MINUS_OPERATOR", 
                             "MULT_OPERATOR", "DIV_OPERATOR", "MOD_OPERATOR", 
                             "LOGICAL_NOT_OPERATOR", "BITWISE_NOT_OPERATOR", 
                             "SHIFT_LEFT_OPERATOR", "SHIFT_RIGHT_OPERATOR", 
                             "LOGICAL_AND_OPERATOR", "BITWISE_AND_OPERATOR", 
                             "BITWISE_XOR_OPERATOR", "LOGICAL_OR_OPERATOR", 
                             "BITWISE_OR_OPERATOR", "DOT_SYMBOL", "COMMA_SYMBOL", 
                             "SEMICOLON_SYMBOL", "COLON_SYMBOL", "OPEN_PAR_SYMBOL", 
                             "CLOSE_PAR_SYMBOL", "OPEN_CURLY_SYMBOL", "CLOSE_CURLY_SYMBOL", 
                             "UNDERLINE_SYMBOL", "JSON_SEPARATOR_SYMBOL", 
                             "JSON_UNQUOTED_SEPARATOR_SYMBOL", "AT_SIGN_SYMBOL", 
                             "AT_TEXT_SUFFIX", "AT_AT_SIGN_SYMBOL", "NULL2_SYMBOL", 
                             "PARAM_MARKER", "HEX_NUMBER", "BIN_NUMBER", 
                             "DECIMAL_NUMBER", "FLOAT_NUMBER", "WHITESPACE", 
                             "INVALID_INPUT", "UNDERSCORE_CHARSET", "IDENTIFIER", 
                             "NCHAR_TEXT", "BACK_TICK_QUOTED_ID", "DOUBLE_QUOTED_TEXT", 
                             "SINGLE_QUOTED_TEXT", "VERSION_COMMENT_START", 
                             "MYSQL_COMMENT_START", "VERSION_COMMENT_END", 
                             "BLOCK_COMMENT", "POUND_COMMENT", "DASHDASH_COMMENT", 
                             "NOT_EQUAL2_OPERATOR" ];
    static ruleNames = [ "query", "simpleStatement", "alterStatement", "alterDatabase", 
                         "alterEvent", "alterLogfileGroup", "alterLogfileGroupOptions", 
                         "alterLogfileGroupOption", "alterServer", "alterTable", 
                         "alterTableActions", "alterCommandList", "alterCommandsModifierList", 
                         "standaloneAlterCommands", "alterPartition", "alterList", 
                         "alterCommandsModifier", "alterListItem", "place", 
                         "restrict", "alterOrderList", "alterAlgorithmOption", 
                         "alterLockOption", "indexLockAndAlgorithm", "withValidation", 
                         "removePartitioning", "allOrPartitionNameList", 
                         "alterTablespace", "alterUndoTablespace", "undoTableSpaceOptions", 
                         "undoTableSpaceOption", "alterTablespaceOptions", 
                         "alterTablespaceOption", "changeTablespaceOption", 
                         "alterView", "viewTail", "viewSelect", "viewCheckOption", 
                         "createStatement", "createDatabase", "createDatabaseOption", 
                         "createTable", "tableElementList", "tableElement", 
                         "duplicateAsQueryExpression", "queryExpressionOrParens", 
                         "createRoutine", "createProcedure", "createFunction", 
                         "createUdf", "routineCreateOption", "routineAlterOptions", 
                         "routineOption", "createIndex", "indexNameAndType", 
                         "createIndexTarget", "createLogfileGroup", "logfileGroupOptions", 
                         "logfileGroupOption", "createServer", "serverOptions", 
                         "serverOption", "createTablespace", "createUndoTablespace", 
                         "tsDataFileName", "tsDataFile", "tablespaceOptions", 
                         "tablespaceOption", "tsOptionInitialSize", "tsOptionUndoRedoBufferSize", 
                         "tsOptionAutoextendSize", "tsOptionMaxSize", "tsOptionExtentSize", 
                         "tsOptionNodegroup", "tsOptionEngine", "tsOptionWait", 
                         "tsOptionComment", "tsOptionFileblockSize", "tsOptionEncryption", 
                         "createView", "viewReplaceOrAlgorithm", "viewAlgorithm", 
                         "viewSuid", "createTrigger", "triggerFollowsPrecedesClause", 
                         "createEvent", "createRole", "createSpatialReference", 
                         "srsAttribute", "dropStatement", "dropDatabase", 
                         "dropEvent", "dropFunction", "dropProcedure", "dropIndex", 
                         "dropLogfileGroup", "dropLogfileGroupOption", "dropServer", 
                         "dropTable", "dropTableSpace", "dropTrigger", "dropView", 
                         "dropRole", "dropSpatialReference", "dropUndoTablespace", 
                         "renameTableStatement", "renamePair", "truncateTableStatement", 
                         "importStatement", "callStatement", "deleteStatement", 
                         "partitionDelete", "deleteStatementOption", "doStatement", 
                         "handlerStatement", "handlerReadOrScan", "insertStatement", 
                         "insertLockOption", "insertFromConstructor", "fields", 
                         "insertValues", "insertQueryExpression", "valueList", 
                         "values", "valuesReference", "insertUpdateList", 
                         "loadStatement", "dataOrXml", "xmlRowsIdentifiedBy", 
                         "loadDataFileTail", "loadDataFileTargetList", "fieldOrVariableList", 
                         "replaceStatement", "selectStatement", "selectStatementWithInto", 
                         "queryExpression", "queryExpressionBody", "queryExpressionParens", 
                         "queryPrimary", "querySpecification", "subquery", 
                         "querySpecOption", "limitClause", "simpleLimitClause", 
                         "limitOptions", "limitOption", "intoClause", "procedureAnalyseClause", 
                         "havingClause", "windowClause", "windowDefinition", 
                         "windowSpec", "windowSpecDetails", "windowFrameClause", 
                         "windowFrameUnits", "windowFrameExtent", "windowFrameStart", 
                         "windowFrameBetween", "windowFrameBound", "windowFrameExclusion", 
                         "withClause", "commonTableExpression", "groupByClause", 
                         "olapOption", "orderClause", "direction", "fromClause", 
                         "tableReferenceList", "tableValueConstructor", 
                         "explicitTable", "rowValueExplicit", "selectOption", 
                         "lockingClauseList", "lockingClause", "lockStrengh", 
                         "lockedRowAction", "selectItemList", "selectItem", 
                         "selectAlias", "whereClause", "tableReference", 
                         "escapedTableReference", "joinedTable", "naturalJoinType", 
                         "innerJoinType", "outerJoinType", "tableFactor", 
                         "singleTable", "singleTableParens", "derivedTable", 
                         "tableReferenceListParens", "tableFunction", "columnsClause", 
                         "jtColumn", "onEmptyOrError", "onEmpty", "onError", 
                         "jtOnResponse", "unionOption", "tableAlias", "indexHintList", 
                         "indexHint", "indexHintType", "keyOrIndex", "constraintKeyType", 
                         "indexHintClause", "indexList", "indexListElement", 
                         "updateStatement", "transactionOrLockingStatement", 
                         "transactionStatement", "beginWork", "transactionCharacteristic", 
                         "savepointStatement", "lockStatement", "lockItem", 
                         "lockOption", "xaStatement", "xaConvert", "xid", 
                         "replicationStatement", "resetOption", "masterResetOptions", 
                         "replicationLoad", "changeMaster", "changeMasterOptions", 
                         "masterOption", "privilegeCheckDef", "tablePrimaryKeyCheckDef", 
                         "masterTlsCiphersuitesDef", "masterFileDef", "serverIdList", 
                         "changeReplication", "filterDefinition", "filterDbList", 
                         "filterTableList", "filterStringList", "filterWildDbTableString", 
                         "filterDbPairList", "slave", "slaveUntilOptions", 
                         "slaveConnectionOptions", "slaveThreadOptions", 
                         "slaveThreadOption", "groupReplication", "preparedStatement", 
                         "executeStatement", "executeVarList", "cloneStatement", 
                         "dataDirSSL", "ssl", "accountManagementStatement", 
                         "alterUser", "alterUserTail", "userFunction", "createUser", 
                         "createUserTail", "defaultRoleClause", "requireClause", 
                         "connectOptions", "accountLockPasswordExpireOptions", 
                         "dropUser", "grant", "grantTargetList", "grantOptions", 
                         "exceptRoleList", "withRoles", "grantAs", "versionedRequireClause", 
                         "renameUser", "revoke", "onTypeTo", "aclType", 
                         "roleOrPrivilegesList", "roleOrPrivilege", "grantIdentifier", 
                         "requireList", "requireListElement", "grantOption", 
                         "setRole", "roleList", "role", "tableAdministrationStatement", 
                         "histogram", "checkOption", "repairType", "installUninstallStatment", 
                         "setStatement", "startOptionValueList", "transactionCharacteristics", 
                         "transactionAccessMode", "isolationLevel", "optionValueListContinued", 
                         "optionValueNoOptionType", "optionValue", "setSystemVariable", 
                         "startOptionValueListFollowingOptionType", "optionValueFollowingOptionType", 
                         "setExprOrDefault", "showStatement", "showCommandType", 
                         "nonBlocking", "fromOrIn", "inDb", "profileType", 
                         "otherAdministrativeStatement", "keyCacheListOrParts", 
                         "keyCacheList", "assignToKeycache", "assignToKeycachePartition", 
                         "cacheKeyList", "keyUsageElement", "keyUsageList", 
                         "flushOption", "logType", "flushTables", "flushTablesOptions", 
                         "preloadTail", "preloadList", "preloadKeys", "adminPartition", 
                         "resourceGroupManagement", "createResourceGroup", 
                         "resourceGroupVcpuList", "vcpuNumOrRange", "resourceGroupPriority", 
                         "resourceGroupEnableDisable", "alterResourceGroup", 
                         "setResourceGroup", "threadIdList", "dropResourceGroup", 
                         "utilityStatement", "describeStatement", "explainStatement", 
                         "explainableStatement", "helpCommand", "useCommand", 
                         "restartServer", "expr", "boolPri", "compOp", "predicate", 
                         "predicateOperations", "bitExpr", "simpleExpr", 
                         "arrayCast", "jsonOperator", "sumExpr", "groupingOperation", 
                         "windowFunctionCall", "windowingClause", "leadLagInfo", 
                         "nullTreatment", "jsonFunction", "inSumExpr", "identListArg", 
                         "identList", "fulltextOptions", "runtimeFunctionCall", 
                         "geometryFunction", "timeFunctionParameters", "fractionalPrecision", 
                         "weightStringLevels", "weightStringLevelListItem", 
                         "dateTimeTtype", "trimFunction", "substringFunction", 
                         "functionCall", "udfExprList", "udfExpr", "variable", 
                         "userVariable", "systemVariable", "internalVariableName", 
                         "whenExpression", "thenExpression", "elseExpression", 
                         "castType", "exprList", "charset", "notRule", "not2Rule", 
                         "interval", "intervalTimeStamp", "exprListWithParentheses", 
                         "exprWithParentheses", "simpleExprWithParentheses", 
                         "orderList", "orderExpression", "groupList", "groupingExpression", 
                         "channel", "compoundStatement", "returnStatement", 
                         "ifStatement", "ifBody", "thenStatement", "compoundStatementList", 
                         "caseStatement", "elseStatement", "labeledBlock", 
                         "unlabeledBlock", "label", "beginEndBlock", "labeledControl", 
                         "unlabeledControl", "loopBlock", "whileDoBlock", 
                         "repeatUntilBlock", "spDeclarations", "spDeclaration", 
                         "variableDeclaration", "conditionDeclaration", 
                         "spCondition", "sqlstate", "handlerDeclaration", 
                         "handlerCondition", "cursorDeclaration", "iterateStatement", 
                         "leaveStatement", "getDiagnostics", "signalAllowedExpr", 
                         "statementInformationItem", "conditionInformationItem", 
                         "signalInformationItemName", "signalStatement", 
                         "resignalStatement", "signalInformationItem", "cursorOpen", 
                         "cursorClose", "cursorFetch", "schedule", "columnDefinition", 
                         "checkOrReferences", "checkConstraint", "constraintEnforcement", 
                         "tableConstraintDef", "constraintName", "fieldDefinition", 
                         "columnAttribute", "columnFormat", "storageMedia", 
                         "gcolAttribute", "references", "deleteOption", 
                         "keyList", "keyPart", "keyListWithExpression", 
                         "keyPartOrExpression", "keyListVariants", "indexType", 
                         "indexOption", "commonIndexOption", "visibility", 
                         "indexTypeClause", "fulltextIndexOption", "spatialIndexOption", 
                         "dataTypeDefinition", "dataType", "nchar", "realType", 
                         "fieldLength", "fieldOptions", "charsetWithOptBinary", 
                         "ascii", "unicode", "wsNumCodepoints", "typeDatetimePrecision", 
                         "charsetName", "collationName", "createTableOptions", 
                         "createTableOptionsSpaceSeparated", "createTableOption", 
                         "ternaryOption", "defaultCollation", "defaultEncryption", 
                         "defaultCharset", "partitionClause", "partitionTypeDef", 
                         "subPartitions", "partitionKeyAlgorithm", "partitionDefinitions", 
                         "partitionDefinition", "partitionValuesIn", "partitionOption", 
                         "subpartitionDefinition", "partitionValueItemListParen", 
                         "partitionValueItem", "definerClause", "ifExists", 
                         "ifNotExists", "procedureParameter", "functionParameter", 
                         "collate", "typeWithOptCollate", "schemaIdentifierPair", 
                         "viewRefList", "updateList", "updateElement", "charsetClause", 
                         "fieldsClause", "fieldTerm", "linesClause", "lineTerm", 
                         "userList", "createUserList", "alterUserList", 
                         "createUserEntry", "alterUserEntry", "retainCurrentPassword", 
                         "discardOldPassword", "replacePassword", "userIdentifierOrText", 
                         "user", "likeClause", "likeOrWhere", "onlineOption", 
                         "noWriteToBinLog", "usePartition", "fieldIdentifier", 
                         "columnName", "columnInternalRef", "columnInternalRefList", 
                         "columnRef", "insertIdentifier", "indexName", "indexRef", 
                         "tableWild", "schemaName", "schemaRef", "procedureName", 
                         "procedureRef", "functionName", "functionRef", 
                         "triggerName", "triggerRef", "viewName", "viewRef", 
                         "tablespaceName", "tablespaceRef", "logfileGroupName", 
                         "logfileGroupRef", "eventName", "eventRef", "udfName", 
                         "serverName", "serverRef", "engineRef", "tableName", 
                         "filterTableRef", "tableRefWithWildcard", "tableRef", 
                         "tableRefList", "tableAliasRefList", "parameterName", 
                         "labelIdentifier", "labelRef", "roleIdentifier", 
                         "roleRef", "pluginRef", "componentRef", "resourceGroupRef", 
                         "windowName", "pureIdentifier", "identifier", "identifierList", 
                         "identifierListWithParentheses", "qualifiedIdentifier", 
                         "simpleIdentifier", "dotIdentifier", "ulong_number", 
                         "real_ulong_number", "ulonglong_number", "real_ulonglong_number", 
                         "literal", "signedLiteral", "stringList", "textStringLiteral", 
                         "textString", "textStringHash", "textLiteral", 
                         "textStringNoLinebreak", "textStringLiteralList", 
                         "numLiteral", "boolLiteral", "nullLiteral", "temporalLiteral", 
                         "floatOptions", "standardFloatOptions", "precision", 
                         "textOrIdentifier", "lValueIdentifier", "roleIdentifierOrText", 
                         "sizeNumber", "parentheses", "equal", "optionType", 
                         "varIdentType", "setVarIdentType", "identifierKeyword", 
                         "identifierKeywordsAmbiguous1RolesAndLabels", "identifierKeywordsAmbiguous2Labels", 
                         "labelKeyword", "identifierKeywordsAmbiguous3Roles", 
                         "identifierKeywordsUnambiguous", "roleKeyword", 
                         "lValueKeyword", "identifierKeywordsAmbiguous4SystemVariables", 
                         "roleOrIdentifierKeyword", "roleOrLabelKeyword" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = MySQLParser.ruleNames;
        this.literalNames = MySQLParser.literalNames;
        this.symbolicNames = MySQLParser.symbolicNames;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 1:
    	    		return this.simpleStatement_sempred(localctx, predIndex);
    	case 2:
    	    		return this.alterStatement_sempred(localctx, predIndex);
    	case 3:
    	    		return this.alterDatabase_sempred(localctx, predIndex);
    	case 9:
    	    		return this.alterTable_sempred(localctx, predIndex);
    	case 13:
    	    		return this.standaloneAlterCommands_sempred(localctx, predIndex);
    	case 14:
    	    		return this.alterPartition_sempred(localctx, predIndex);
    	case 17:
    	    		return this.alterListItem_sempred(localctx, predIndex);
    	case 24:
    	    		return this.withValidation_sempred(localctx, predIndex);
    	case 27:
    	    		return this.alterTablespace_sempred(localctx, predIndex);
    	case 38:
    	    		return this.createStatement_sempred(localctx, predIndex);
    	case 40:
    	    		return this.createDatabaseOption_sempred(localctx, predIndex);
    	case 53:
    	    		return this.createIndex_sempred(localctx, predIndex);
    	case 64:
    	    		return this.tsDataFileName_sempred(localctx, predIndex);
    	case 67:
    	    		return this.tablespaceOption_sempred(localctx, predIndex);
    	case 84:
    	    		return this.triggerFollowsPrecedesClause_sempred(localctx, predIndex);
    	case 89:
    	    		return this.dropStatement_sempred(localctx, predIndex);
    	case 110:
    	    		return this.deleteStatement_sempred(localctx, predIndex);
    	case 111:
    	    		return this.partitionDelete_sempred(localctx, predIndex);
    	case 113:
    	    		return this.doStatement_sempred(localctx, predIndex);
    	case 116:
    	    		return this.insertStatement_sempred(localctx, predIndex);
    	case 135:
    	    		return this.queryExpression_sempred(localctx, predIndex);
    	case 138:
    	    		return this.queryPrimary_sempred(localctx, predIndex);
    	case 139:
    	    		return this.querySpecification_sempred(localctx, predIndex);
    	case 163:
    	    		return this.olapOption_sempred(localctx, predIndex);
    	case 171:
    	    		return this.selectOption_sempred(localctx, predIndex);
    	case 173:
    	    		return this.lockingClause_sempred(localctx, predIndex);
    	case 174:
    	    		return this.lockStrengh_sempred(localctx, predIndex);
    	case 180:
    	    		return this.tableReference_sempred(localctx, predIndex);
    	case 186:
    	    		return this.tableFactor_sempred(localctx, predIndex);
    	case 189:
    	    		return this.derivedTable_sempred(localctx, predIndex);
    	case 193:
    	    		return this.jtColumn_sempred(localctx, predIndex);
    	case 199:
    	    		return this.tableAlias_sempred(localctx, predIndex);
    	case 208:
    	    		return this.updateStatement_sempred(localctx, predIndex);
    	case 212:
    	    		return this.transactionCharacteristic_sempred(localctx, predIndex);
    	case 214:
    	    		return this.lockStatement_sempred(localctx, predIndex);
    	case 218:
    	    		return this.xaConvert_sempred(localctx, predIndex);
    	case 220:
    	    		return this.replicationStatement_sempred(localctx, predIndex);
    	case 221:
    	    		return this.resetOption_sempred(localctx, predIndex);
    	case 222:
    	    		return this.masterResetOptions_sempred(localctx, predIndex);
    	case 232:
    	    		return this.changeReplication_sempred(localctx, predIndex);
    	case 240:
    	    		return this.slaveUntilOptions_sempred(localctx, predIndex);
    	case 241:
    	    		return this.slaveConnectionOptions_sempred(localctx, predIndex);
    	case 248:
    	    		return this.cloneStatement_sempred(localctx, predIndex);
    	case 251:
    	    		return this.accountManagementStatement_sempred(localctx, predIndex);
    	case 252:
    	    		return this.alterUser_sempred(localctx, predIndex);
    	case 253:
    	    		return this.alterUserTail_sempred(localctx, predIndex);
    	case 255:
    	    		return this.createUser_sempred(localctx, predIndex);
    	case 256:
    	    		return this.createUserTail_sempred(localctx, predIndex);
    	case 257:
    	    		return this.defaultRoleClause_sempred(localctx, predIndex);
    	case 260:
    	    		return this.accountLockPasswordExpireOptions_sempred(localctx, predIndex);
    	case 261:
    	    		return this.dropUser_sempred(localctx, predIndex);
    	case 262:
    	    		return this.grant_sempred(localctx, predIndex);
    	case 263:
    	    		return this.grantTargetList_sempred(localctx, predIndex);
    	case 264:
    	    		return this.grantOptions_sempred(localctx, predIndex);
    	case 268:
    	    		return this.versionedRequireClause_sempred(localctx, predIndex);
    	case 270:
    	    		return this.revoke_sempred(localctx, predIndex);
    	case 271:
    	    		return this.onTypeTo_sempred(localctx, predIndex);
    	case 274:
    	    		return this.roleOrPrivilege_sempred(localctx, predIndex);
    	case 275:
    	    		return this.grantIdentifier_sempred(localctx, predIndex);
    	case 282:
    	    		return this.tableAdministrationStatement_sempred(localctx, predIndex);
    	case 288:
    	    		return this.startOptionValueList_sempred(localctx, predIndex);
    	case 293:
    	    		return this.optionValueNoOptionType_sempred(localctx, predIndex);
    	case 298:
    	    		return this.setExprOrDefault_sempred(localctx, predIndex);
    	case 299:
    	    		return this.showStatement_sempred(localctx, predIndex);
    	case 300:
    	    		return this.showCommandType_sempred(localctx, predIndex);
    	case 301:
    	    		return this.nonBlocking_sempred(localctx, predIndex);
    	case 305:
    	    		return this.otherAdministrativeStatement_sempred(localctx, predIndex);
    	case 313:
    	    		return this.flushOption_sempred(localctx, predIndex);
    	case 316:
    	    		return this.flushTablesOptions_sempred(localctx, predIndex);
    	case 331:
    	    		return this.utilityStatement_sempred(localctx, predIndex);
    	case 333:
    	    		return this.explainStatement_sempred(localctx, predIndex);
    	case 334:
    	    		return this.explainableStatement_sempred(localctx, predIndex);
    	case 338:
    	    		return this.expr_sempred(localctx, predIndex);
    	case 339:
    	    		return this.boolPri_sempred(localctx, predIndex);
    	case 341:
    	    		return this.predicate_sempred(localctx, predIndex);
    	case 343:
    	    		return this.bitExpr_sempred(localctx, predIndex);
    	case 344:
    	    		return this.simpleExpr_sempred(localctx, predIndex);
    	case 345:
    	    		return this.arrayCast_sempred(localctx, predIndex);
    	case 346:
    	    		return this.jsonOperator_sempred(localctx, predIndex);
    	case 347:
    	    		return this.sumExpr_sempred(localctx, predIndex);
    	case 358:
    	    		return this.runtimeFunctionCall_sempred(localctx, predIndex);
    	case 359:
    	    		return this.geometryFunction_sempred(localctx, predIndex);
    	case 361:
    	    		return this.fractionalPrecision_sempred(localctx, predIndex);
    	case 373:
    	    		return this.internalVariableName_sempred(localctx, predIndex);
    	case 377:
    	    		return this.castType_sempred(localctx, predIndex);
    	case 391:
    	    		return this.channel_sempred(localctx, predIndex);
    	case 420:
    	    		return this.getDiagnostics_sempred(localctx, predIndex);
    	case 433:
    	    		return this.checkOrReferences_sempred(localctx, predIndex);
    	case 436:
    	    		return this.tableConstraintDef_sempred(localctx, predIndex);
    	case 438:
    	    		return this.fieldDefinition_sempred(localctx, predIndex);
    	case 439:
    	    		return this.columnAttribute_sempred(localctx, predIndex);
    	case 449:
    	    		return this.keyListVariants_sempred(localctx, predIndex);
    	case 452:
    	    		return this.commonIndexOption_sempred(localctx, predIndex);
    	case 458:
    	    		return this.dataType_sempred(localctx, predIndex);
    	case 468:
    	    		return this.charsetName_sempred(localctx, predIndex);
    	case 469:
    	    		return this.collationName_sempred(localctx, predIndex);
    	case 472:
    	    		return this.createTableOption_sempred(localctx, predIndex);
    	case 480:
    	    		return this.partitionKeyAlgorithm_sempred(localctx, predIndex);
    	case 507:
    	    		return this.createUserEntry_sempred(localctx, predIndex);
    	case 518:
    	    		return this.usePartition_sempred(localctx, predIndex);
    	case 520:
    	    		return this.columnName_sempred(localctx, predIndex);
    	case 563:
    	    		return this.pureIdentifier_sempred(localctx, predIndex);
    	case 568:
    	    		return this.simpleIdentifier_sempred(localctx, predIndex);
    	case 573:
    	    		return this.real_ulonglong_number_sempred(localctx, predIndex);
    	case 577:
    	    		return this.textStringLiteral_sempred(localctx, predIndex);
    	case 579:
    	    		return this.textStringHash_sempred(localctx, predIndex);
    	case 599:
    	    		return this.identifierKeyword_sempred(localctx, predIndex);
    	case 602:
    	    		return this.labelKeyword_sempred(localctx, predIndex);
    	case 604:
    	    		return this.identifierKeywordsUnambiguous_sempred(localctx, predIndex);
    	case 605:
    	    		return this.roleKeyword_sempred(localctx, predIndex);
    	case 608:
    	    		return this.roleOrIdentifierKeyword_sempred(localctx, predIndex);
    	case 609:
    	    		return this.roleOrLabelKeyword_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    simpleStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return serverVersion >= 80000;
    		case 1:
    			return serverVersion >= 80000;
    		case 2:
    			return serverVersion >= 80000;
    		case 3:
    			return serverVersion >= 50604;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    alterStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 4:
    			return serverVersion >= 80014;
    		case 5:
    			return serverVersion >= 50713;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    alterDatabase_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 6:
    			return serverVersion < 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    alterTable_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 7:
    			return serverVersion < 50700;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    standaloneAlterCommands_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 8:
    			return serverVersion >= 80014;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    alterPartition_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 9:
    			return serverVersion >= 50704;
    		case 10:
    			return serverVersion >= 50704;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    alterListItem_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 11:
    			return serverVersion >= 50700;
    		case 12:
    			return serverVersion < 50700;
    		case 13:
    			return serverVersion >= 80017;
    		case 14:
    			return serverVersion >= 80019;
    		case 15:
    			return serverVersion >= 80014;
    		case 16:
    			return serverVersion >= 80000;
    		case 17:
    			return serverVersion >= 80017;
    		case 18:
    			return serverVersion >= 80019;
    		case 19:
    			return serverVersion >= 80000;
    		case 20:
    			return serverVersion >= 50700;
    		case 21:
    			return serverVersion >= 80014;
    		case 22:
    			return serverVersion >= 50708 && serverVersion < 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    withValidation_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 23:
    			return serverVersion >= 50706;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    alterTablespace_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 24:
    			return serverVersion < 80000;
    		case 25:
    			return serverVersion >= 80014;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 26:
    			return serverVersion >= 80000;
    		case 27:
    			return serverVersion >= 80011;
    		case 28:
    			return serverVersion >= 80014;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createDatabaseOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 29:
    			return serverVersion >= 80016;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createIndex_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 30:
    			return serverVersion >= 80014;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tsDataFileName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 31:
    			return serverVersion >= 80014;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tablespaceOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 32:
    			return serverVersion >= 50707;
    		case 33:
    			return serverVersion >= 80014;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    triggerFollowsPrecedesClause_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 34:
    			return serverVersion >= 50700;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dropStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 35:
    			return serverVersion >= 80000;
    		case 36:
    			return serverVersion >= 80011;
    		case 37:
    			return serverVersion >= 80014;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    deleteStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 38:
    			return serverVersion >= 80000;
    		case 39:
    			return serverVersion >= 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    partitionDelete_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 40:
    			return serverVersion >= 50602;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    doStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 41:
    			return serverVersion < 50709;
    		case 42:
    			return serverVersion >= 50709;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    insertStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 43:
    			return  serverVersion >= 80018;
    		case 44:
    			return  serverVersion >= 80018;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    queryExpression_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 45:
    			return serverVersion >= 80000;
    		case 46:
    			return serverVersion < 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    queryPrimary_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 47:
    			return serverVersion >= 80019;
    		case 48:
    			return serverVersion >= 80019;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    querySpecification_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 49:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    olapOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 50:
    			return serverVersion < 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    selectOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 51:
    			return serverVersion < 80000;
    		case 52:
    			return serverVersion >= 50704 && serverVersion < 50708;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    lockingClause_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 53:
    			return serverVersion >= 80000;
    		case 54:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    lockStrengh_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 55:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tableReference_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 56:
    			return serverVersion < 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tableFactor_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 57:
    			return serverVersion >= 80004;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    derivedTable_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 58:
    			return serverVersion >= 80000;
    		case 59:
    			return serverVersion >= 80014;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    jtColumn_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 60:
    			return serverVersion >= 80014;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tableAlias_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 61:
    			return serverVersion < 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    updateStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 62:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    transactionCharacteristic_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 63:
    			return serverVersion >= 50605;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    lockStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 64:
    			return serverVersion >= 80000;
    		case 65:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    xaConvert_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 66:
    			return serverVersion >= 50704;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    replicationStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 67:
    			return serverVersion > 80000;
    		case 68:
    			return serverVersion >= 50700;
    		case 69:
    			return serverVersion > 50706;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    resetOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 70:
    			return serverVersion < 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    masterResetOptions_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 71:
    			return serverVersion >= 80000;
    		case 72:
    			return serverVersion < 80017;
    		case 73:
    			return serverVersion >= 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    changeReplication_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 74:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    slaveUntilOptions_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 75:
    			return serverVersion >= 50606;
    		case 76:
    			return serverVersion >= 50606;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    slaveConnectionOptions_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 77:
    			return serverVersion >= 50604;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    cloneStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 78:
    			return serverVersion >= 80014;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    accountManagementStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 79:
    			return serverVersion >= 50606;
    		case 80:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    alterUser_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 81:
    			return serverVersion >= 50706;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    alterUserTail_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 82:
    			return serverVersion < 80014;
    		case 83:
    			return serverVersion >= 80014;
    		case 84:
    			return serverVersion >= 50706;
    		case 85:
    			return serverVersion >= 80014;
    		case 86:
    			return serverVersion >= 80014;
    		case 87:
    			return serverVersion >= 80014;
    		case 88:
    			return serverVersion >= 80000;
    		case 89:
    			return serverVersion >= 80018;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createUser_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 90:
    			return serverVersion >= 50706;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createUserTail_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 91:
    			return serverVersion >= 50706;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    defaultRoleClause_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 92:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    accountLockPasswordExpireOptions_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 93:
    			return serverVersion >= 80014;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dropUser_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 94:
    			return serverVersion >= 50706;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    grant_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 95:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    grantTargetList_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 96:
    			return serverVersion < 80011;
    		case 97:
    			return serverVersion >= 80011;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    grantOptions_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 98:
    			return serverVersion < 80011;
    		case 99:
    			return serverVersion >= 80011;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    versionedRequireClause_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 100:
    			return serverVersion < 80011;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    revoke_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 101:
    			return serverVersion >= 80000;
    		case 102:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    onTypeTo_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 103:
    			return serverVersion < 80000;
    		case 104:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    roleOrPrivilege_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 105:
    			return serverVersion > 80000;
    		case 106:
    			return serverVersion > 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    grantIdentifier_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 107:
    			return serverVersion >= 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tableAdministrationStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 108:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    startOptionValueList_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 109:
    			return serverVersion < 50706;
    		case 110:
    			return serverVersion < 80014;
    		case 111:
    			return serverVersion >= 80018;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    optionValueNoOptionType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 112:
    			return serverVersion >= 80011;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    setExprOrDefault_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 113:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    showStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 114:
    			return serverVersion < 50700;
    		case 115:
    			return serverVersion >= 80000;
    		case 116:
    			return serverVersion < 50700;
    		case 117:
    			return serverVersion >= 50704;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    showCommandType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 118:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    nonBlocking_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 119:
    			return serverVersion >= 50700 && serverVersion < 50706;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    otherAdministrativeStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 120:
    			return serverVersion >= 50709;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    flushOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 121:
    			return serverVersion < 80000;
    		case 122:
    			return serverVersion >= 50706;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    flushTablesOptions_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 123:
    			return serverVersion >= 50606;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    utilityStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 124:
    			return serverVersion >= 80011;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    explainStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 125:
    			return serverVersion < 80000;
    		case 126:
    			return serverVersion < 80000;
    		case 127:
    			return serverVersion >= 50605;
    		case 128:
    			return serverVersion >= 80018;
    		case 129:
    			return serverVersion >= 80019;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    explainableStatement_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 130:
    			return serverVersion >= 50603;
    		case 131:
    			return serverVersion >= 50700;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    expr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 132:
    			return this.precpred(this._ctx, 3);
    		case 133:
    			return this.precpred(this._ctx, 2);
    		case 134:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    boolPri_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 135:
    			return this.precpred(this._ctx, 3);
    		case 136:
    			return this.precpred(this._ctx, 2);
    		case 137:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    predicate_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 138:
    			return serverVersion >= 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    bitExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 139:
    			return this.precpred(this._ctx, 7);
    		case 140:
    			return this.precpred(this._ctx, 6);
    		case 141:
    			return this.precpred(this._ctx, 5);
    		case 142:
    			return this.precpred(this._ctx, 3);
    		case 143:
    			return this.precpred(this._ctx, 2);
    		case 144:
    			return this.precpred(this._ctx, 1);
    		case 145:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    simpleExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 146:
    			return serverVersion >= 80000;
    		case 147:
    			return serverVersion >= 80000;
    		case 148:
    			return this.precpred(this._ctx, 15);
    		case 149:
    			return this.precpred(this._ctx, 21);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    arrayCast_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 150:
    			return serverVersion >= 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    jsonOperator_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 151:
    			return serverVersion >= 50708;
    		case 152:
    			return serverVersion >= 50713;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    sumExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 153:
    			return serverVersion >= 80000;
    		case 154:
    			return serverVersion >= 80000;
    		case 155:
    			return serverVersion >= 80000;
    		case 156:
    			return serverVersion >= 80000;
    		case 157:
    			return serverVersion >= 80000;
    		case 158:
    			return serverVersion >= 80000;
    		case 159:
    			return serverVersion >= 80000;
    		case 160:
    			return serverVersion >= 80000;
    		case 161:
    			return serverVersion >= 80000;
    		case 162:
    			return serverVersion >= 80000;
    		case 163:
    			return serverVersion >= 80000;
    		case 164:
    			return serverVersion >= 80000;
    		case 165:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    runtimeFunctionCall_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 166:
    			return serverVersion < 50607;
    		case 167:
    			return serverVersion < 80011;
    		case 168:
    			return serverVersion < 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    geometryFunction_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 169:
    			return serverVersion < 50706;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    fractionalPrecision_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 170:
    			return serverVersion >= 50604;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    internalVariableName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 171:
    			return serverVersion < 80017;
    		case 172:
    			return serverVersion >= 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    castType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 173:
    			return serverVersion >= 50708;
    		case 174:
    			return serverVersion >= 80017;
    		case 175:
    			return serverVersion >= 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    channel_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 176:
    			return serverVersion >= 50706;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    getDiagnostics_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 177:
    			return serverVersion >= 50700;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    checkOrReferences_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 178:
    			return serverVersion < 80016;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tableConstraintDef_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 179:
    			return serverVersion >= 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    fieldDefinition_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 180:
    			return serverVersion >= 50707;
    		case 181:
    			return serverVersion < 80000;
    		case 182:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    columnAttribute_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 183:
    			return serverVersion >= 80014;
    		case 184:
    			return serverVersion >= 80013;
    		case 185:
    			return serverVersion >= 80000;
    		case 186:
    			return serverVersion >= 80017;
    		case 187:
    			return serverVersion >= 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    keyListVariants_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 188:
    			return serverVersion >= 80013;
    		case 189:
    			return serverVersion < 80013;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    commonIndexOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 190:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dataType_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 191:
    			return serverVersion >= 50708;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    charsetName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 192:
    			return serverVersion < 80011;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    collationName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 193:
    			return serverVersion < 80011;
    		case 194:
    			return serverVersion >= 80018;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createTableOption_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 195:
    			return serverVersion >= 80014;
    		case 196:
    			return serverVersion >= 50708;
    		case 197:
    			return serverVersion >= 50711;
    		case 198:
    			return serverVersion >= 50707;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    partitionKeyAlgorithm_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 199:
    			return serverVersion >= 50700;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    createUserEntry_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 200:
    			return serverVersion < 80011;
    		case 201:
    			return serverVersion >= 50706;
    		case 202:
    			return serverVersion >= 80018;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    usePartition_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 203:
    			return serverVersion >= 50602;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    columnName_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 204:
    			return serverVersion >= 80000;
    		case 205:
    			return serverVersion < 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    pureIdentifier_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 206:
    			return isSqlModeActive(AnsiQuotes);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    simpleIdentifier_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 207:
    			return serverVersion < 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    real_ulonglong_number_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 208:
    			return serverVersion >= 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    textStringLiteral_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 209:
    			return !isSqlModeActive(AnsiQuotes);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    textStringHash_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 210:
    			return serverVersion >= 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    identifierKeyword_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 211:
    			return serverVersion < 80017;
    		case 212:
    			return serverVersion >= 50709;
    		case 213:
    			return serverVersion >= 80011;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    labelKeyword_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 214:
    			return serverVersion < 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    identifierKeywordsUnambiguous_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 215:
    			return serverVersion >= 80019;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    roleKeyword_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 216:
    			return serverVersion < 80017;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    roleOrIdentifierKeyword_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 217:
    			return serverVersion >= 50709;
    		case 218:
    			return serverVersion >= 80000;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    roleOrLabelKeyword_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 219:
    			return serverVersion < 50709;
    		case 220:
    			return serverVersion < 80000;
    		case 221:
    			return serverVersion >= 80000;
    		case 222:
    			return serverVersion >= 80014;
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, MySQLParser.RULE_query);
	    try {
	        this.state = 1232;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,3,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1220;
	            this.match(MySQLParser.EOF);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1223;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,0,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1221;
	                this.simpleStatement();
	                break;

	            case 2:
	                this.state = 1222;
	                this.beginWork();
	                break;

	            }
	            this.state = 1230;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 774:
	                this.state = 1225;
	                this.match(MySQLParser.SEMICOLON_SYMBOL);
	                this.state = 1227;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1,this._ctx);
	                if(la_===1) {
	                    this.state = 1226;
	                    this.match(MySQLParser.EOF);

	                }
	                break;
	            case -1:
	                this.state = 1229;
	                this.match(MySQLParser.EOF);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleStatement() {
	    let localctx = new SimpleStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, MySQLParser.RULE_simpleStatement);
	    try {
	        this.state = 1268;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1234;
	            this.alterStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1235;
	            this.createStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1236;
	            this.dropStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1237;
	            this.renameTableStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1238;
	            this.truncateTableStatement();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1239;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 1240;
	            this.importStatement();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1241;
	            this.callStatement();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1242;
	            this.deleteStatement();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1243;
	            this.doStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1244;
	            this.handlerStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1245;
	            this.insertStatement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1246;
	            this.loadStatement();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1247;
	            this.replaceStatement();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1248;
	            this.selectStatement();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1249;
	            this.updateStatement();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1250;
	            this.transactionOrLockingStatement();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1251;
	            this.replicationStatement();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1252;
	            this.preparedStatement();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 1253;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 1254;
	            this.cloneStatement();
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 1255;
	            this.accountManagementStatement();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 1256;
	            this.tableAdministrationStatement();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 1257;
	            this.installUninstallStatment();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 1258;
	            this.setStatement();
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 1259;
	            this.showStatement();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 1260;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 1261;
	            this.resourceGroupManagement();
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 1262;
	            this.otherAdministrativeStatement();
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 1263;
	            this.utilityStatement();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 1264;
	            if (!( serverVersion >= 50604)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50604");
	            }
	            this.state = 1265;
	            this.getDiagnostics();
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 1266;
	            this.signalStatement();
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 1267;
	            this.resignalStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStatement() {
	    let localctx = new AlterStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, MySQLParser.RULE_alterStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1270;
	        this.match(MySQLParser.ALTER_SYMBOL);
	        this.state = 1297;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,7,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1271;
	            this.alterTable();
	            break;

	        case 2:
	            this.state = 1272;
	            this.alterDatabase();
	            break;

	        case 3:
	            this.state = 1273;
	            this.match(MySQLParser.PROCEDURE_SYMBOL);
	            this.state = 1274;
	            this.procedureRef();
	            this.state = 1276;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75 || _la===90 || _la===137 || _la===267 || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 83886081) !== 0) || _la===433 || _la===537) {
	                this.state = 1275;
	                this.routineAlterOptions();
	            }

	            break;

	        case 4:
	            this.state = 1278;
	            this.match(MySQLParser.FUNCTION_SYMBOL);
	            this.state = 1279;
	            this.functionRef();
	            this.state = 1281;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===75 || _la===90 || _la===137 || _la===267 || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 83886081) !== 0) || _la===433 || _la===537) {
	                this.state = 1280;
	                this.routineAlterOptions();
	            }

	            break;

	        case 5:
	            this.state = 1283;
	            this.alterView();
	            break;

	        case 6:
	            this.state = 1284;
	            this.alterEvent();
	            break;

	        case 7:
	            this.state = 1285;
	            this.alterTablespace();
	            break;

	        case 8:
	            this.state = 1286;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 1287;
	            this.alterUndoTablespace();
	            break;

	        case 9:
	            this.state = 1288;
	            this.alterLogfileGroup();
	            break;

	        case 10:
	            this.state = 1289;
	            this.alterServer();
	            break;

	        case 11:
	            this.state = 1290;
	            if (!( serverVersion >= 50713)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50713");
	            }
	            this.state = 1291;
	            this.match(MySQLParser.INSTANCE_SYMBOL);
	            this.state = 1292;
	            this.match(MySQLParser.ROTATE_SYMBOL);
	            this.state = 1293;
	            this.textOrIdentifier();
	            this.state = 1294;
	            this.match(MySQLParser.MASTER_SYMBOL);
	            this.state = 1295;
	            this.match(MySQLParser.KEY_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterDatabase() {
	    let localctx = new AlterDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, MySQLParser.RULE_alterDatabase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1299;
	        this.match(MySQLParser.DATABASE_SYMBOL);
	        this.state = 1300;
	        this.schemaRef();
	        this.state = 1311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1302; 
	            this._errHandler.sync(this);
	            var _alt = 1;
	            do {
	            	switch (_alt) {
	            	case 1:
	            		this.state = 1301;
	            		this.createDatabaseOption();
	            		break;
	            	default:
	            		throw new antlr4.error.NoViableAltException(this);
	            	}
	            	this.state = 1304; 
	            	this._errHandler.sync(this);
	            	_alt = this._interp.adaptivePredict(this._input,8, this._ctx);
	            } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	            break;

	        case 2:
	            this.state = 1306;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 1307;
	            this.match(MySQLParser.UPGRADE_SYMBOL);
	            this.state = 1308;
	            this.match(MySQLParser.DATA_SYMBOL);
	            this.state = 1309;
	            this.match(MySQLParser.DIRECTORY_SYMBOL);
	            this.state = 1310;
	            this.match(MySQLParser.NAME_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterEvent() {
	    let localctx = new AlterEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, MySQLParser.RULE_alterEvent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1314;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===130) {
	            this.state = 1313;
	            this.definerClause();
	        }

	        this.state = 1316;
	        this.match(MySQLParser.EVENT_SYMBOL);
	        this.state = 1317;
	        this.eventRef();
	        this.state = 1321;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	        if(la_===1) {
	            this.state = 1318;
	            this.match(MySQLParser.ON_SYMBOL);
	            this.state = 1319;
	            this.match(MySQLParser.SCHEDULE_SYMBOL);
	            this.state = 1320;
	            this.schedule();

	        }
	        this.state = 1329;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===383) {
	            this.state = 1323;
	            this.match(MySQLParser.ON_SYMBOL);
	            this.state = 1324;
	            this.match(MySQLParser.COMPLETION_SYMBOL);
	            this.state = 1326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===371) {
	                this.state = 1325;
	                this.match(MySQLParser.NOT_SYMBOL);
	            }

	            this.state = 1328;
	            this.match(MySQLParser.PRESERVE_SYMBOL);
	        }

	        this.state = 1334;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===453) {
	            this.state = 1331;
	            this.match(MySQLParser.RENAME_SYMBOL);
	            this.state = 1332;
	            this.match(MySQLParser.TO_SYMBOL);
	            this.state = 1333;
	            this.identifier();
	        }

	        this.state = 1342;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 156:
	        	this.state = 1336;
	        	this.match(MySQLParser.ENABLE_SYMBOL);
	        	break;
	        case 140:
	        	this.state = 1337;
	        	this.match(MySQLParser.DISABLE_SYMBOL);
	        	this.state = 1340;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===383) {
	        	    this.state = 1338;
	        	    this.match(MySQLParser.ON_SYMBOL);
	        	    this.state = 1339;
	        	    this.match(MySQLParser.SLAVE_SYMBOL);
	        	}

	        	break;
	        case -1:
	        case 75:
	        case 147:
	        case 774:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 1346;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75) {
	            this.state = 1344;
	            this.match(MySQLParser.COMMENT_SYMBOL);
	            this.state = 1345;
	            this.textLiteral();
	        }

	        this.state = 1350;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===147) {
	            this.state = 1348;
	            this.match(MySQLParser.DO_SYMBOL);
	            this.state = 1349;
	            this.compoundStatement();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterLogfileGroup() {
	    let localctx = new AlterLogfileGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, MySQLParser.RULE_alterLogfileGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1352;
	        this.match(MySQLParser.LOGFILE_SYMBOL);
	        this.state = 1353;
	        this.match(MySQLParser.GROUP_SYMBOL);
	        this.state = 1354;
	        this.logfileGroupRef();
	        this.state = 1355;
	        this.match(MySQLParser.ADD_SYMBOL);
	        this.state = 1356;
	        this.match(MySQLParser.UNDOFILE_SYMBOL);
	        this.state = 1357;
	        this.textLiteral();
	        this.state = 1359;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===163 || _la===238 || _la===374 || _la===553 || _la===638) {
	            this.state = 1358;
	            this.alterLogfileGroupOptions();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterLogfileGroupOptions() {
	    let localctx = new AlterLogfileGroupOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, MySQLParser.RULE_alterLogfileGroupOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1361;
	        this.alterLogfileGroupOption();
	        this.state = 1368;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===163 || _la===238 || _la===374 || _la===553 || _la===638 || _la===773) {
	            this.state = 1363;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 1362;
	                this.match(MySQLParser.COMMA_SYMBOL);
	            }

	            this.state = 1365;
	            this.alterLogfileGroupOption();
	            this.state = 1370;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterLogfileGroupOption() {
	    let localctx = new AlterLogfileGroupOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, MySQLParser.RULE_alterLogfileGroupOption);
	    try {
	        this.state = 1374;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 238:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1371;
	            this.tsOptionInitialSize();
	            break;
	        case 163:
	        case 553:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1372;
	            this.tsOptionEngine();
	            break;
	        case 374:
	        case 638:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1373;
	            this.tsOptionWait();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterServer() {
	    let localctx = new AlterServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, MySQLParser.RULE_alterServer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1376;
	        this.match(MySQLParser.SERVER_SYMBOL);
	        this.state = 1377;
	        this.serverRef();
	        this.state = 1378;
	        this.serverOptions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTable() {
	    let localctx = new AlterTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, MySQLParser.RULE_alterTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1381;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	        if(la_===1) {
	            this.state = 1380;
	            this.onlineOption();

	        }
	        this.state = 1385;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	        if(la_===1) {
	            this.state = 1383;
	            if (!( serverVersion < 50700)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50700");
	            }
	            this.state = 1384;
	            this.match(MySQLParser.IGNORE_SYMBOL);

	        }
	        this.state = 1387;
	        this.match(MySQLParser.TABLE_SYMBOL);
	        this.state = 1388;
	        this.tableRef();
	        this.state = 1390;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	        if(la_===1) {
	            this.state = 1389;
	            this.alterTableActions();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableActions() {
	    let localctx = new AlterTableActionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, MySQLParser.RULE_alterTableActions);
	    try {
	        this.state = 1405;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,28,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1392;
	            this.alterCommandList();
	            this.state = 1395;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case 405:
	            	this.state = 1393;
	            	this.partitionClause();
	            	break;
	            case 452:
	            	this.state = 1394;
	            	this.removePartitioning();
	            	break;
	            case -1:
	            case 774:
	            	break;
	            default:
	            	break;
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1397;
	            this.partitionClause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1398;
	            this.removePartitioning();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1402;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	            if(la_===1) {
	                this.state = 1399;
	                this.alterCommandsModifierList();
	                this.state = 1400;
	                this.match(MySQLParser.COMMA_SYMBOL);

	            }
	            this.state = 1404;
	            this.standaloneAlterCommands();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterCommandList() {
	    let localctx = new AlterCommandListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, MySQLParser.RULE_alterCommandList);
	    try {
	        this.state = 1414;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,30,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1407;
	            this.alterCommandsModifierList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1411;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            if(la_===1) {
	                this.state = 1408;
	                this.alterCommandsModifierList();
	                this.state = 1409;
	                this.match(MySQLParser.COMMA_SYMBOL);

	            }
	            this.state = 1413;
	            this.alterList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterCommandsModifierList() {
	    let localctx = new AlterCommandsModifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, MySQLParser.RULE_alterCommandsModifierList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1416;
	        this.alterCommandsModifier();
	        this.state = 1421;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,31,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1417;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 1418;
	                this.alterCommandsModifier(); 
	            }
	            this.state = 1423;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,31,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	standaloneAlterCommands() {
	    let localctx = new StandaloneAlterCommandsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, MySQLParser.RULE_standaloneAlterCommands);
	    var _la = 0;
	    try {
	        this.state = 1431;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1424;
	            this.match(MySQLParser.DISCARD_SYMBOL);
	            this.state = 1425;
	            this.match(MySQLParser.TABLESPACE_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1426;
	            this.match(MySQLParser.IMPORT_SYMBOL);
	            this.state = 1427;
	            this.match(MySQLParser.TABLESPACE_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1428;
	            this.alterPartition();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1429;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 1430;
	            _la = this._input.LA(1);
	            if(!(_la===722 || _la===723)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterPartition() {
	    let localctx = new AlterPartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, MySQLParser.RULE_alterPartition);
	    var _la = 0;
	    try {
	        this.state = 1529;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,46,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1433;
	            this.match(MySQLParser.ADD_SYMBOL);
	            this.state = 1434;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1436;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===284 || _la===375) {
	                this.state = 1435;
	                this.noWriteToBinLog();
	            }

	            this.state = 1441;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 776:
	                this.state = 1438;
	                this.partitionDefinitions();
	                break;
	            case 404:
	                this.state = 1439;
	                this.match(MySQLParser.PARTITIONS_SYMBOL);
	                this.state = 1440;
	                this.real_ulong_number();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1443;
	            this.match(MySQLParser.DROP_SYMBOL);
	            this.state = 1444;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1445;
	            this.identifierList();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1446;
	            this.match(MySQLParser.REBUILD_SYMBOL);
	            this.state = 1447;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1449;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	            if(la_===1) {
	                this.state = 1448;
	                this.noWriteToBinLog();

	            }
	            this.state = 1451;
	            this.allOrPartitionNameList();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1452;
	            this.match(MySQLParser.OPTIMIZE_SYMBOL);
	            this.state = 1453;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1455;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	            if(la_===1) {
	                this.state = 1454;
	                this.noWriteToBinLog();

	            }
	            this.state = 1457;
	            this.allOrPartitionNameList();
	            this.state = 1459;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===284 || _la===375) {
	                this.state = 1458;
	                this.noWriteToBinLog();
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1461;
	            this.match(MySQLParser.ANALYZE_SYMBOL);
	            this.state = 1462;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1464;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,38,this._ctx);
	            if(la_===1) {
	                this.state = 1463;
	                this.noWriteToBinLog();

	            }
	            this.state = 1466;
	            this.allOrPartitionNameList();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1467;
	            this.match(MySQLParser.CHECK_SYMBOL);
	            this.state = 1468;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1469;
	            this.allOrPartitionNameList();
	            this.state = 1473;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===56 || ((((_la - 180)) & ~0x1f) === 0 && ((1 << (_la - 180)) & 1048593) !== 0) || _la===333 || _la===431) {
	                this.state = 1470;
	                this.checkOption();
	                this.state = 1475;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1476;
	            this.match(MySQLParser.REPAIR_SYMBOL);
	            this.state = 1477;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1479;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,40,this._ctx);
	            if(la_===1) {
	                this.state = 1478;
	                this.noWriteToBinLog();

	            }
	            this.state = 1481;
	            this.allOrPartitionNameList();
	            this.state = 1485;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===180 || _la===431 || _la===619) {
	                this.state = 1482;
	                this.repairType();
	                this.state = 1487;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1488;
	            this.match(MySQLParser.COALESCE_SYMBOL);
	            this.state = 1489;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1491;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===284 || _la===375) {
	                this.state = 1490;
	                this.noWriteToBinLog();
	            }

	            this.state = 1493;
	            this.real_ulong_number();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1494;
	            this.match(MySQLParser.TRUNCATE_SYMBOL);
	            this.state = 1495;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1496;
	            this.allOrPartitionNameList();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1497;
	            this.match(MySQLParser.REORGANIZE_SYMBOL);
	            this.state = 1498;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1500;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,43,this._ctx);
	            if(la_===1) {
	                this.state = 1499;
	                this.noWriteToBinLog();

	            }
	            this.state = 1506;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,44,this._ctx);
	            if(la_===1) {
	                this.state = 1502;
	                this.identifierList();
	                this.state = 1503;
	                this.match(MySQLParser.INTO_SYMBOL);
	                this.state = 1504;
	                this.partitionDefinitions();

	            }
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1508;
	            this.match(MySQLParser.EXCHANGE_SYMBOL);
	            this.state = 1509;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1510;
	            this.identifier();
	            this.state = 1511;
	            this.match(MySQLParser.WITH_SYMBOL);
	            this.state = 1512;
	            this.match(MySQLParser.TABLE_SYMBOL);
	            this.state = 1513;
	            this.tableRef();
	            this.state = 1515;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,45,this._ctx);
	            if(la_===1) {
	                this.state = 1514;
	                this.withValidation();

	            }
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1517;
	            if (!( serverVersion >= 50704)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50704");
	            }
	            this.state = 1518;
	            this.match(MySQLParser.DISCARD_SYMBOL);
	            this.state = 1519;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1520;
	            this.allOrPartitionNameList();
	            this.state = 1521;
	            this.match(MySQLParser.TABLESPACE_SYMBOL);
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1523;
	            if (!( serverVersion >= 50704)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50704");
	            }
	            this.state = 1524;
	            this.match(MySQLParser.IMPORT_SYMBOL);
	            this.state = 1525;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 1526;
	            this.allOrPartitionNameList();
	            this.state = 1527;
	            this.match(MySQLParser.TABLESPACE_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterList() {
	    let localctx = new AlterListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, MySQLParser.RULE_alterList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1533;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1531;
	            this.alterListItem();
	            break;

	        case 2:
	            this.state = 1532;
	            this.createTableOptionsSpaceSeparated();
	            break;

	        }
	        this.state = 1543;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 1535;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 1539;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,48,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1536;
	                this.alterListItem();
	                break;

	            case 2:
	                this.state = 1537;
	                this.alterCommandsModifier();
	                break;

	            case 3:
	                this.state = 1538;
	                this.createTableOptionsSpaceSeparated();
	                break;

	            }
	            this.state = 1545;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterCommandsModifier() {
	    let localctx = new AlterCommandsModifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, MySQLParser.RULE_alterCommandsModifier);
	    try {
	        this.state = 1549;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1546;
	            this.alterAlgorithmOption();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1547;
	            this.alterLockOption();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1548;
	            this.withValidation();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterListItem() {
	    let localctx = new AlterListItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, MySQLParser.RULE_alterListItem);
	    var _la = 0;
	    try {
	        this.state = 1696;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,70,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1551;
	            this.match(MySQLParser.ADD_SYMBOL);
	            this.state = 1553;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,51,this._ctx);
	            if(la_===1) {
	                this.state = 1552;
	                this.match(MySQLParser.COLUMN_SYMBOL);

	            }
	            this.state = 1567;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,54,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1555;
	                this.identifier();
	                this.state = 1556;
	                this.fieldDefinition();
	                this.state = 1558;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,52,this._ctx);
	                if(la_===1) {
	                    this.state = 1557;
	                    this.checkOrReferences();

	                }
	                this.state = 1561;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===6 || _la===191) {
	                    this.state = 1560;
	                    this.place();
	                }

	                break;

	            case 2:
	                this.state = 1563;
	                this.match(MySQLParser.OPEN_PAR_SYMBOL);
	                this.state = 1564;
	                this.tableElementList();
	                this.state = 1565;
	                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1569;
	            this.match(MySQLParser.ADD_SYMBOL);
	            this.state = 1570;
	            this.tableConstraintDef();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1571;
	            this.match(MySQLParser.CHANGE_SYMBOL);
	            this.state = 1573;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,55,this._ctx);
	            if(la_===1) {
	                this.state = 1572;
	                this.match(MySQLParser.COLUMN_SYMBOL);

	            }
	            this.state = 1575;
	            this.columnInternalRef();
	            this.state = 1576;
	            this.identifier();
	            this.state = 1577;
	            this.fieldDefinition();
	            this.state = 1579;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===6 || _la===191) {
	                this.state = 1578;
	                this.place();
	            }

	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1581;
	            this.match(MySQLParser.MODIFY_SYMBOL);
	            this.state = 1583;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	            if(la_===1) {
	                this.state = 1582;
	                this.match(MySQLParser.COLUMN_SYMBOL);

	            }
	            this.state = 1585;
	            this.columnInternalRef();
	            this.state = 1586;
	            this.fieldDefinition();
	            this.state = 1588;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===6 || _la===191) {
	                this.state = 1587;
	                this.place();
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1590;
	            this.match(MySQLParser.DROP_SYMBOL);
	            this.state = 1619;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,63,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1592;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,59,this._ctx);
	                if(la_===1) {
	                    this.state = 1591;
	                    this.match(MySQLParser.COLUMN_SYMBOL);

	                }
	                this.state = 1594;
	                this.columnInternalRef();
	                this.state = 1596;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===49 || _la===471) {
	                    this.state = 1595;
	                    this.restrict();
	                }

	                break;

	            case 2:
	                this.state = 1598;
	                this.match(MySQLParser.FOREIGN_SYMBOL);
	                this.state = 1599;
	                this.match(MySQLParser.KEY_SYMBOL);
	                this.state = 1606;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,62,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1600;
	                    if (!( serverVersion >= 50700)) {
	                        throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
	                    }
	                    this.state = 1601;
	                    this.columnInternalRef();
	                    break;

	                case 2:
	                    this.state = 1602;
	                    if (!( serverVersion < 50700)) {
	                        throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50700");
	                    }
	                    this.state = 1604;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,61,this._ctx);
	                    if(la_===1) {
	                        this.state = 1603;
	                        this.columnInternalRef();

	                    }
	                    break;

	                }
	                break;

	            case 3:
	                this.state = 1608;
	                this.match(MySQLParser.PRIMARY_SYMBOL);
	                this.state = 1609;
	                this.match(MySQLParser.KEY_SYMBOL);
	                break;

	            case 4:
	                this.state = 1610;
	                this.keyOrIndex();
	                this.state = 1611;
	                this.indexRef();
	                break;

	            case 5:
	                this.state = 1613;
	                if (!( serverVersion >= 80017)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	                }
	                this.state = 1614;
	                this.match(MySQLParser.CHECK_SYMBOL);
	                this.state = 1615;
	                this.identifier();
	                break;

	            case 6:
	                this.state = 1616;
	                if (!( serverVersion >= 80019)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80019");
	                }
	                this.state = 1617;
	                this.match(MySQLParser.CONSTRAINT_SYMBOL);
	                this.state = 1618;
	                this.identifier();
	                break;

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1621;
	            this.match(MySQLParser.DISABLE_SYMBOL);
	            this.state = 1622;
	            this.match(MySQLParser.KEYS_SYMBOL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1623;
	            this.match(MySQLParser.ENABLE_SYMBOL);
	            this.state = 1624;
	            this.match(MySQLParser.KEYS_SYMBOL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 1625;
	            this.match(MySQLParser.ALTER_SYMBOL);
	            this.state = 1627;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,64,this._ctx);
	            if(la_===1) {
	                this.state = 1626;
	                this.match(MySQLParser.COLUMN_SYMBOL);

	            }
	            this.state = 1629;
	            this.columnInternalRef();
	            this.state = 1639;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 506:
	                this.state = 1630;
	                this.match(MySQLParser.SET_SYMBOL);
	                this.state = 1631;
	                this.match(MySQLParser.DEFAULT_SYMBOL);
	                this.state = 1635;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,65,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 1632;
	                    if (!( serverVersion >= 80014)) {
	                        throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	                    }
	                    this.state = 1633;
	                    this.exprWithParentheses();
	                    break;

	                case 2:
	                    this.state = 1634;
	                    this.signedLiteral();
	                    break;

	                }
	                break;
	            case 148:
	                this.state = 1637;
	                this.match(MySQLParser.DROP_SYMBOL);
	                this.state = 1638;
	                this.match(MySQLParser.DEFAULT_SYMBOL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 1641;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 1642;
	            this.match(MySQLParser.ALTER_SYMBOL);
	            this.state = 1643;
	            this.match(MySQLParser.INDEX_SYMBOL);
	            this.state = 1644;
	            this.indexRef();
	            this.state = 1645;
	            this.visibility();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 1647;
	            if (!( serverVersion >= 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	            }
	            this.state = 1648;
	            this.match(MySQLParser.ALTER_SYMBOL);
	            this.state = 1649;
	            this.match(MySQLParser.CHECK_SYMBOL);
	            this.state = 1650;
	            this.identifier();
	            this.state = 1651;
	            this.constraintEnforcement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 1653;
	            if (!( serverVersion >= 80019)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80019");
	            }
	            this.state = 1654;
	            this.match(MySQLParser.ALTER_SYMBOL);
	            this.state = 1655;
	            this.match(MySQLParser.CONSTRAINT_SYMBOL);
	            this.state = 1656;
	            this.identifier();
	            this.state = 1657;
	            this.constraintEnforcement();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 1659;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 1660;
	            this.match(MySQLParser.RENAME_SYMBOL);
	            this.state = 1661;
	            this.match(MySQLParser.COLUMN_SYMBOL);
	            this.state = 1662;
	            this.columnInternalRef();
	            this.state = 1663;
	            this.match(MySQLParser.TO_SYMBOL);
	            this.state = 1664;
	            this.identifier();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 1666;
	            this.match(MySQLParser.RENAME_SYMBOL);
	            this.state = 1668;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,67,this._ctx);
	            if(la_===1) {
	                this.state = 1667;
	                _la = this._input.LA(1);
	                if(!(_la===17 || _la===590)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 1670;
	            this.tableName();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 1671;
	            if (!( serverVersion >= 50700)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
	            }
	            this.state = 1672;
	            this.match(MySQLParser.RENAME_SYMBOL);
	            this.state = 1673;
	            this.keyOrIndex();
	            this.state = 1674;
	            this.indexRef();
	            this.state = 1675;
	            this.match(MySQLParser.TO_SYMBOL);
	            this.state = 1676;
	            this.indexName();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 1678;
	            this.match(MySQLParser.CONVERT_SYMBOL);
	            this.state = 1679;
	            this.match(MySQLParser.TO_SYMBOL);
	            this.state = 1680;
	            this.charset();
	            this.state = 1684;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,68,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1681;
	                if (!( serverVersion >= 80014)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	                }
	                this.state = 1682;
	                this.match(MySQLParser.DEFAULT_SYMBOL);
	                break;

	            case 2:
	                this.state = 1683;
	                this.charsetName();
	                break;

	            }
	            this.state = 1687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 1686;
	                this.collate();
	            }

	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 1689;
	            this.match(MySQLParser.FORCE_SYMBOL);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 1690;
	            this.match(MySQLParser.ORDER_SYMBOL);
	            this.state = 1691;
	            this.match(MySQLParser.BY_SYMBOL);
	            this.state = 1692;
	            this.alterOrderList();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 1693;
	            if (!( serverVersion >= 50708 && serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50708 && serverVersion < 80000");
	            }
	            this.state = 1694;
	            this.match(MySQLParser.UPGRADE_SYMBOL);
	            this.state = 1695;
	            this.match(MySQLParser.PARTITIONING_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	place() {
	    let localctx = new PlaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, MySQLParser.RULE_place);
	    try {
	        this.state = 1701;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 6:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1698;
	            this.match(MySQLParser.AFTER_SYMBOL);
	            this.state = 1699;
	            this.identifier();
	            break;
	        case 191:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1700;
	            this.match(MySQLParser.FIRST_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restrict() {
	    let localctx = new RestrictContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, MySQLParser.RULE_restrict);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1703;
	        _la = this._input.LA(1);
	        if(!(_la===49 || _la===471)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterOrderList() {
	    let localctx = new AlterOrderListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, MySQLParser.RULE_alterOrderList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1705;
	        this.identifier();
	        this.state = 1707;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18 || _la===134) {
	            this.state = 1706;
	            this.direction();
	        }

	        this.state = 1716;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,74,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1709;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 1710;
	                this.identifier();
	                this.state = 1712;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===18 || _la===134) {
	                    this.state = 1711;
	                    this.direction();
	                }
	         
	            }
	            this.state = 1718;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,74,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterAlgorithmOption() {
	    let localctx = new AlterAlgorithmOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, MySQLParser.RULE_alterAlgorithmOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1719;
	        this.match(MySQLParser.ALGORITHM_SYMBOL);
	        this.state = 1721;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,75,this._ctx);
	        if(la_===1) {
	            this.state = 1720;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 1725;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1723;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            break;

	        case 2:
	            this.state = 1724;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterLockOption() {
	    let localctx = new AlterLockOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, MySQLParser.RULE_alterLockOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1727;
	        this.match(MySQLParser.LOCK_SYMBOL);
	        this.state = 1729;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        if(la_===1) {
	            this.state = 1728;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 1733;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,78,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1731;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            break;

	        case 2:
	            this.state = 1732;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexLockAndAlgorithm() {
	    let localctx = new IndexLockAndAlgorithmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, MySQLParser.RULE_indexLockAndAlgorithm);
	    var _la = 0;
	    try {
	        this.state = 1743;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 9:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1735;
	            this.alterAlgorithmOption();
	            this.state = 1737;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===287) {
	                this.state = 1736;
	                this.alterLockOption();
	            }

	            break;
	        case 287:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1739;
	            this.alterLockOption();
	            this.state = 1741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===9) {
	                this.state = 1740;
	                this.alterAlgorithmOption();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withValidation() {
	    let localctx = new WithValidationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, MySQLParser.RULE_withValidation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1745;
	        if (!( serverVersion >= 50706)) {
	            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
	        }
	        this.state = 1746;
	        _la = this._input.LA(1);
	        if(!(_la===645 || _la===646)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1747;
	        this.match(MySQLParser.VALIDATION_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	removePartitioning() {
	    let localctx = new RemovePartitioningContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, MySQLParser.RULE_removePartitioning);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1749;
	        this.match(MySQLParser.REMOVE_SYMBOL);
	        this.state = 1750;
	        this.match(MySQLParser.PARTITIONING_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	allOrPartitionNameList() {
	    let localctx = new AllOrPartitionNameListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, MySQLParser.RULE_allOrPartitionNameList);
	    try {
	        this.state = 1754;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1752;
	            this.match(MySQLParser.ALL_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1753;
	            this.identifierList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTablespace() {
	    let localctx = new AlterTablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, MySQLParser.RULE_alterTablespace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1756;
	        this.match(MySQLParser.TABLESPACE_SYMBOL);
	        this.state = 1757;
	        this.tablespaceRef();
	        this.state = 1791;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,88,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1758;
	            _la = this._input.LA(1);
	            if(!(_la===4 || _la===148)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1759;
	            this.match(MySQLParser.DATAFILE_SYMBOL);
	            this.state = 1760;
	            this.textLiteral();
	            this.state = 1762;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===23 || _la===158 || _la===163 || _la===238 || _la===324 || _la===374 || _la===553 || _la===638) {
	                this.state = 1761;
	                this.alterTablespaceOptions();
	            }

	            break;

	        case 2:
	            this.state = 1764;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 1784;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case -1:
	            case 774:
	                break;
	            case 55:
	                this.state = 1766;
	                this.match(MySQLParser.CHANGE_SYMBOL);
	                this.state = 1767;
	                this.match(MySQLParser.DATAFILE_SYMBOL);
	                this.state = 1768;
	                this.textLiteral();
	                this.state = 1779;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===23 || _la===238 || _la===324) {
	                    this.state = 1769;
	                    this.changeTablespaceOption();
	                    this.state = 1776;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    while(_la===23 || _la===238 || _la===324 || _la===773) {
	                        this.state = 1771;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===773) {
	                            this.state = 1770;
	                            this.match(MySQLParser.COMMA_SYMBOL);
	                        }

	                        this.state = 1773;
	                        this.changeTablespaceOption();
	                        this.state = 1778;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                    }
	                }

	                break;
	            case 434:
	            case 436:
	                this.state = 1781;
	                _la = this._input.LA(1);
	                if(!(_la===434 || _la===436)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            case 371:
	                this.state = 1782;
	                this.match(MySQLParser.NOT_SYMBOL);
	                this.state = 1783;
	                this.match(MySQLParser.ACCESSIBLE_SYMBOL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 3:
	            this.state = 1786;
	            this.match(MySQLParser.RENAME_SYMBOL);
	            this.state = 1787;
	            this.match(MySQLParser.TO_SYMBOL);
	            this.state = 1788;
	            this.identifier();
	            break;

	        case 4:
	            this.state = 1789;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 1790;
	            this.alterTablespaceOptions();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterUndoTablespace() {
	    let localctx = new AlterUndoTablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, MySQLParser.RULE_alterUndoTablespace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1793;
	        this.match(MySQLParser.UNDO_SYMBOL);
	        this.state = 1794;
	        this.match(MySQLParser.TABLESPACE_SYMBOL);
	        this.state = 1795;
	        this.tablespaceRef();
	        this.state = 1796;
	        this.match(MySQLParser.SET_SYMBOL);
	        this.state = 1797;
	        _la = this._input.LA(1);
	        if(!(_la===724 || _la===725)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1799;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===163 || _la===553) {
	            this.state = 1798;
	            this.undoTableSpaceOptions();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	undoTableSpaceOptions() {
	    let localctx = new UndoTableSpaceOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, MySQLParser.RULE_undoTableSpaceOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1801;
	        this.undoTableSpaceOption();
	        this.state = 1808;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===163 || _la===553 || _la===773) {
	            this.state = 1803;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 1802;
	                this.match(MySQLParser.COMMA_SYMBOL);
	            }

	            this.state = 1805;
	            this.undoTableSpaceOption();
	            this.state = 1810;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	undoTableSpaceOption() {
	    let localctx = new UndoTableSpaceOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, MySQLParser.RULE_undoTableSpaceOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1811;
	        this.tsOptionEngine();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTablespaceOptions() {
	    let localctx = new AlterTablespaceOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, MySQLParser.RULE_alterTablespaceOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1813;
	        this.alterTablespaceOption();
	        this.state = 1820;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===23 || _la===158 || _la===163 || _la===238 || _la===324 || _la===374 || _la===553 || _la===638 || _la===773) {
	            this.state = 1815;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 1814;
	                this.match(MySQLParser.COMMA_SYMBOL);
	            }

	            this.state = 1817;
	            this.alterTablespaceOption();
	            this.state = 1822;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTablespaceOption() {
	    let localctx = new AlterTablespaceOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, MySQLParser.RULE_alterTablespaceOption);
	    try {
	        this.state = 1833;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 238:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1823;
	            this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
	            this.state = 1825;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,94,this._ctx);
	            if(la_===1) {
	                this.state = 1824;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 1827;
	            this.sizeNumber();
	            break;
	        case 23:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1828;
	            this.tsOptionAutoextendSize();
	            break;
	        case 324:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1829;
	            this.tsOptionMaxSize();
	            break;
	        case 163:
	        case 553:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1830;
	            this.tsOptionEngine();
	            break;
	        case 374:
	        case 638:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1831;
	            this.tsOptionWait();
	            break;
	        case 158:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1832;
	            this.tsOptionEncryption();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changeTablespaceOption() {
	    let localctx = new ChangeTablespaceOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, MySQLParser.RULE_changeTablespaceOption);
	    try {
	        this.state = 1842;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 238:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1835;
	            this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
	            this.state = 1837;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,96,this._ctx);
	            if(la_===1) {
	                this.state = 1836;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 1839;
	            this.sizeNumber();
	            break;
	        case 23:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1840;
	            this.tsOptionAutoextendSize();
	            break;
	        case 324:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1841;
	            this.tsOptionMaxSize();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterView() {
	    let localctx = new AlterViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, MySQLParser.RULE_alterView);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1845;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9) {
	            this.state = 1844;
	            this.viewAlgorithm();
	        }

	        this.state = 1848;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===130) {
	            this.state = 1847;
	            this.definerClause();
	        }

	        this.state = 1851;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===537) {
	            this.state = 1850;
	            this.viewSuid();
	        }

	        this.state = 1853;
	        this.match(MySQLParser.VIEW_SYMBOL);
	        this.state = 1854;
	        this.viewRef();
	        this.state = 1855;
	        this.viewTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewTail() {
	    let localctx = new ViewTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, MySQLParser.RULE_viewTail);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1858;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===776) {
	            this.state = 1857;
	            this.columnInternalRefList();
	        }

	        this.state = 1860;
	        this.match(MySQLParser.AS_SYMBOL);
	        this.state = 1861;
	        this.viewSelect();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewSelect() {
	    let localctx = new ViewSelectContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, MySQLParser.RULE_viewSelect);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1863;
	        this.queryExpressionOrParens();
	        this.state = 1865;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===645) {
	            this.state = 1864;
	            this.viewCheckOption();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewCheckOption() {
	    let localctx = new ViewCheckOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, MySQLParser.RULE_viewCheckOption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1867;
	        this.match(MySQLParser.WITH_SYMBOL);
	        this.state = 1869;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===50 || _la===284) {
	            this.state = 1868;
	            _la = this._input.LA(1);
	            if(!(_la===50 || _la===284)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1871;
	        this.match(MySQLParser.CHECK_SYMBOL);
	        this.state = 1872;
	        this.match(MySQLParser.OPTION_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createStatement() {
	    let localctx = new CreateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, MySQLParser.RULE_createStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1874;
	        this.match(MySQLParser.CREATE_SYMBOL);
	        this.state = 1893;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1875;
	            this.createDatabase();
	            break;

	        case 2:
	            this.state = 1876;
	            this.createTable();
	            break;

	        case 3:
	            this.state = 1877;
	            this.createFunction();
	            break;

	        case 4:
	            this.state = 1878;
	            this.createProcedure();
	            break;

	        case 5:
	            this.state = 1879;
	            this.createUdf();
	            break;

	        case 6:
	            this.state = 1880;
	            this.createLogfileGroup();
	            break;

	        case 7:
	            this.state = 1881;
	            this.createView();
	            break;

	        case 8:
	            this.state = 1882;
	            this.createTrigger();
	            break;

	        case 9:
	            this.state = 1883;
	            this.createIndex();
	            break;

	        case 10:
	            this.state = 1884;
	            this.createServer();
	            break;

	        case 11:
	            this.state = 1885;
	            this.createTablespace();
	            break;

	        case 12:
	            this.state = 1886;
	            this.createEvent();
	            break;

	        case 13:
	            this.state = 1887;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 1888;
	            this.createRole();
	            break;

	        case 14:
	            this.state = 1889;
	            if (!( serverVersion >= 80011)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
	            }
	            this.state = 1890;
	            this.createSpatialReference();
	            break;

	        case 15:
	            this.state = 1891;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 1892;
	            this.createUndoTablespace();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDatabase() {
	    let localctx = new CreateDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, MySQLParser.RULE_createDatabase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1895;
	        this.match(MySQLParser.DATABASE_SYMBOL);
	        this.state = 1897;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,105,this._ctx);
	        if(la_===1) {
	            this.state = 1896;
	            this.ifNotExists();

	        }
	        this.state = 1899;
	        this.schemaName();
	        this.state = 1903;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,106,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1900;
	                this.createDatabaseOption(); 
	            }
	            this.state = 1905;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,106,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createDatabaseOption() {
	    let localctx = new CreateDatabaseOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, MySQLParser.RULE_createDatabaseOption);
	    try {
	        this.state = 1910;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1906;
	            this.defaultCharset();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1907;
	            this.defaultCollation();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1908;
	            if (!( serverVersion >= 80016)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80016");
	            }
	            this.state = 1909;
	            this.defaultEncryption();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTable() {
	    let localctx = new CreateTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, MySQLParser.RULE_createTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1913;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===577) {
	            this.state = 1912;
	            this.match(MySQLParser.TEMPORARY_SYMBOL);
	        }

	        this.state = 1915;
	        this.match(MySQLParser.TABLE_SYMBOL);
	        this.state = 1917;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,109,this._ctx);
	        if(la_===1) {
	            this.state = 1916;
	            this.ifNotExists();

	        }
	        this.state = 1919;
	        this.tableName();
	        this.state = 1942;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1924;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,110,this._ctx);
	            if(la_===1) {
	                this.state = 1920;
	                this.match(MySQLParser.OPEN_PAR_SYMBOL);
	                this.state = 1921;
	                this.tableElementList();
	                this.state = 1922;
	                this.match(MySQLParser.CLOSE_PAR_SYMBOL);

	            }
	            this.state = 1927;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,111,this._ctx);
	            if(la_===1) {
	                this.state = 1926;
	                this.createTableOptions();

	            }
	            this.state = 1930;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	            if(la_===1) {
	                this.state = 1929;
	                this.partitionClause();

	            }
	            this.state = 1933;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	            if(la_===1) {
	                this.state = 1932;
	                this.duplicateAsQueryExpression();

	            }
	            break;

	        case 2:
	            this.state = 1935;
	            this.match(MySQLParser.LIKE_SYMBOL);
	            this.state = 1936;
	            this.tableRef();
	            break;

	        case 3:
	            this.state = 1937;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 1938;
	            this.match(MySQLParser.LIKE_SYMBOL);
	            this.state = 1939;
	            this.tableRef();
	            this.state = 1940;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableElementList() {
	    let localctx = new TableElementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, MySQLParser.RULE_tableElementList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1944;
	        this.tableElement();
	        this.state = 1949;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 1945;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 1946;
	            this.tableElement();
	            this.state = 1951;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableElement() {
	    let localctx = new TableElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, MySQLParser.RULE_tableElement);
	    try {
	        this.state = 1954;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1952;
	            this.columnDefinition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1953;
	            this.tableConstraintDef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	duplicateAsQueryExpression() {
	    let localctx = new DuplicateAsQueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, MySQLParser.RULE_duplicateAsQueryExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1957;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,117,this._ctx);
	        if(la_===1) {
	            this.state = 1956;
	            _la = this._input.LA(1);
	            if(!(_la===232 || _la===458)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1960;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	        if(la_===1) {
	            this.state = 1959;
	            this.match(MySQLParser.AS_SYMBOL);

	        }
	        this.state = 1962;
	        this.queryExpressionOrParens();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpressionOrParens() {
	    let localctx = new QueryExpressionOrParensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, MySQLParser.RULE_queryExpressionOrParens);
	    try {
	        this.state = 1966;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,119,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1964;
	            this.queryExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1965;
	            this.queryExpressionParens();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRoutine() {
	    let localctx = new CreateRoutineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, MySQLParser.RULE_createRoutine);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1968;
	        this.match(MySQLParser.CREATE_SYMBOL);
	        this.state = 1972;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1969;
	            this.createProcedure();
	            break;

	        case 2:
	            this.state = 1970;
	            this.createFunction();
	            break;

	        case 3:
	            this.state = 1971;
	            this.createUdf();
	            break;

	        }
	        this.state = 1975;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===774) {
	            this.state = 1974;
	            this.match(MySQLParser.SEMICOLON_SYMBOL);
	        }

	        this.state = 1977;
	        this.match(MySQLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createProcedure() {
	    let localctx = new CreateProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, MySQLParser.RULE_createProcedure);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1980;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===130) {
	            this.state = 1979;
	            this.definerClause();
	        }

	        this.state = 1982;
	        this.match(MySQLParser.PROCEDURE_SYMBOL);
	        this.state = 1983;
	        this.procedureName();
	        this.state = 1984;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 1993;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        if(la_===1) {
	            this.state = 1985;
	            this.procedureParameter();
	            this.state = 1990;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 1986;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 1987;
	                this.procedureParameter();
	                this.state = 1992;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 1995;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	        this.state = 1999;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,125,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1996;
	                this.routineCreateOption(); 
	            }
	            this.state = 2001;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,125,this._ctx);
	        }

	        this.state = 2002;
	        this.compoundStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createFunction() {
	    let localctx = new CreateFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, MySQLParser.RULE_createFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2005;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===130) {
	            this.state = 2004;
	            this.definerClause();
	        }

	        this.state = 2007;
	        this.match(MySQLParser.FUNCTION_SYMBOL);
	        this.state = 2008;
	        this.functionName();
	        this.state = 2009;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 2018;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	        if(la_===1) {
	            this.state = 2010;
	            this.functionParameter();
	            this.state = 2015;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 2011;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 2012;
	                this.functionParameter();
	                this.state = 2017;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }

	        }
	        this.state = 2020;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	        this.state = 2021;
	        this.match(MySQLParser.RETURNS_SYMBOL);
	        this.state = 2022;
	        this.typeWithOptCollate();
	        this.state = 2026;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,129,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2023;
	                this.routineCreateOption(); 
	            }
	            this.state = 2028;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,129,this._ctx);
	        }

	        this.state = 2029;
	        this.compoundStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUdf() {
	    let localctx = new CreateUdfContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, MySQLParser.RULE_createUdf);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2032;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===8) {
	            this.state = 2031;
	            this.match(MySQLParser.AGGREGATE_SYMBOL);
	        }

	        this.state = 2034;
	        this.match(MySQLParser.FUNCTION_SYMBOL);
	        this.state = 2035;
	        this.udfName();
	        this.state = 2036;
	        this.match(MySQLParser.RETURNS_SYMBOL);
	        this.state = 2037;
	        localctx.type = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===126 || _la===249 || _la===437 || _la===556)) {
	            localctx.type = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2038;
	        this.match(MySQLParser.SONAME_SYMBOL);
	        this.state = 2039;
	        this.textLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineCreateOption() {
	    let localctx = new RoutineCreateOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, MySQLParser.RULE_routineCreateOption);
	    var _la = 0;
	    try {
	        this.state = 2046;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 75:
	        case 90:
	        case 267:
	        case 347:
	        case 373:
	        case 433:
	        case 537:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2041;
	            this.routineOption();
	            break;
	        case 137:
	        case 371:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2043;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===371) {
	                this.state = 2042;
	                this.match(MySQLParser.NOT_SYMBOL);
	            }

	            this.state = 2045;
	            this.match(MySQLParser.DETERMINISTIC_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineAlterOptions() {
	    let localctx = new RoutineAlterOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, MySQLParser.RULE_routineAlterOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2049; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 2048;
	            this.routineCreateOption();
	            this.state = 2051; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===75 || _la===90 || _la===137 || _la===267 || ((((_la - 347)) & ~0x1f) === 0 && ((1 << (_la - 347)) & 83886081) !== 0) || _la===433 || _la===537);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	routineOption() {
	    let localctx = new RoutineOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, MySQLParser.RULE_routineOption);
	    var _la = 0;
	    try {
	        this.state = 2070;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 75:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2053;
	            localctx.option = this.match(MySQLParser.COMMENT_SYMBOL);
	            this.state = 2054;
	            this.textLiteral();
	            break;
	        case 267:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2055;
	            localctx.option = this.match(MySQLParser.LANGUAGE_SYMBOL);
	            this.state = 2056;
	            this.match(MySQLParser.SQL_SYMBOL);
	            break;
	        case 373:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2057;
	            localctx.option = this.match(MySQLParser.NO_SYMBOL);
	            this.state = 2058;
	            this.match(MySQLParser.SQL_SYMBOL);
	            break;
	        case 90:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2059;
	            localctx.option = this.match(MySQLParser.CONTAINS_SYMBOL);
	            this.state = 2060;
	            this.match(MySQLParser.SQL_SYMBOL);
	            break;
	        case 433:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2061;
	            localctx.option = this.match(MySQLParser.READS_SYMBOL);
	            this.state = 2062;
	            this.match(MySQLParser.SQL_SYMBOL);
	            this.state = 2063;
	            this.match(MySQLParser.DATA_SYMBOL);
	            break;
	        case 347:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2064;
	            localctx.option = this.match(MySQLParser.MODIFIES_SYMBOL);
	            this.state = 2065;
	            this.match(MySQLParser.SQL_SYMBOL);
	            this.state = 2066;
	            this.match(MySQLParser.DATA_SYMBOL);
	            break;
	        case 537:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2067;
	            localctx.option = this.match(MySQLParser.SQL_SYMBOL);
	            this.state = 2068;
	            this.match(MySQLParser.SECURITY_SYMBOL);
	            this.state = 2069;
	            localctx.security = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===130 || _la===250)) {
	                localctx.security = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndex() {
	    let localctx = new CreateIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, MySQLParser.RULE_createIndex);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2073;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===380 || _la===385) {
	            this.state = 2072;
	            this.onlineOption();
	        }

	        this.state = 2116;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 236:
	        case 609:
	            this.state = 2076;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===609) {
	                this.state = 2075;
	                this.match(MySQLParser.UNIQUE_SYMBOL);
	            }

	            this.state = 2078;
	            localctx.type = this.match(MySQLParser.INDEX_SYMBOL);
	            this.state = 2087;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,139,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2079;
	                if (!( serverVersion >= 80014)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	                }
	                this.state = 2080;
	                this.indexName();
	                this.state = 2082;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===599 || _la===621) {
	                    this.state = 2081;
	                    this.indexTypeClause();
	                }

	                break;

	            case 2:
	                this.state = 2085;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,138,this._ctx);
	                if(la_===1) {
	                    this.state = 2084;
	                    this.indexNameAndType();

	                }
	                break;

	            }
	            this.state = 2089;
	            this.createIndexTarget();
	            this.state = 2093;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,140,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2090;
	                    this.indexOption(); 
	                }
	                this.state = 2095;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,140,this._ctx);
	            }

	            break;
	        case 205:
	            this.state = 2096;
	            localctx.type = this.match(MySQLParser.FULLTEXT_SYMBOL);
	            this.state = 2097;
	            this.match(MySQLParser.INDEX_SYMBOL);
	            this.state = 2098;
	            this.indexName();
	            this.state = 2099;
	            this.createIndexTarget();
	            this.state = 2103;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,141,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2100;
	                    this.fulltextIndexOption(); 
	                }
	                this.state = 2105;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,141,this._ctx);
	            }

	            break;
	        case 523:
	            this.state = 2106;
	            localctx.type = this.match(MySQLParser.SPATIAL_SYMBOL);
	            this.state = 2107;
	            this.match(MySQLParser.INDEX_SYMBOL);
	            this.state = 2108;
	            this.indexName();
	            this.state = 2109;
	            this.createIndexTarget();
	            this.state = 2113;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,142,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 2110;
	                    this.spatialIndexOption(); 
	                }
	                this.state = 2115;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,142,this._ctx);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 2119;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9 || _la===287) {
	            this.state = 2118;
	            this.indexLockAndAlgorithm();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexNameAndType() {
	    let localctx = new IndexNameAndTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, MySQLParser.RULE_indexNameAndType);
	    try {
	        this.state = 2130;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2121;
	            this.indexName();
	            this.state = 2124;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,145,this._ctx);
	            if(la_===1) {
	                this.state = 2122;
	                this.match(MySQLParser.USING_SYMBOL);
	                this.state = 2123;
	                this.indexType();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2126;
	            this.indexName();
	            this.state = 2127;
	            this.match(MySQLParser.TYPE_SYMBOL);
	            this.state = 2128;
	            this.indexType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createIndexTarget() {
	    let localctx = new CreateIndexTargetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, MySQLParser.RULE_createIndexTarget);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2132;
	        this.match(MySQLParser.ON_SYMBOL);
	        this.state = 2133;
	        this.tableRef();
	        this.state = 2134;
	        this.keyListVariants();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createLogfileGroup() {
	    let localctx = new CreateLogfileGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, MySQLParser.RULE_createLogfileGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2136;
	        this.match(MySQLParser.LOGFILE_SYMBOL);
	        this.state = 2137;
	        this.match(MySQLParser.GROUP_SYMBOL);
	        this.state = 2138;
	        this.logfileGroupName();
	        this.state = 2139;
	        this.match(MySQLParser.ADD_SYMBOL);
	        this.state = 2140;
	        _la = this._input.LA(1);
	        if(!(_la===440 || _la===603)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2141;
	        this.textLiteral();
	        this.state = 2143;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75 || _la===163 || _la===238 || _la===368 || _la===374 || _la===441 || _la===553 || _la===604 || _la===638) {
	            this.state = 2142;
	            this.logfileGroupOptions();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logfileGroupOptions() {
	    let localctx = new LogfileGroupOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, MySQLParser.RULE_logfileGroupOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2145;
	        this.logfileGroupOption();
	        this.state = 2152;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===75 || _la===163 || _la===238 || _la===368 || _la===374 || _la===441 || _la===553 || _la===604 || _la===638 || _la===773) {
	            this.state = 2147;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 2146;
	                this.match(MySQLParser.COMMA_SYMBOL);
	            }

	            this.state = 2149;
	            this.logfileGroupOption();
	            this.state = 2154;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logfileGroupOption() {
	    let localctx = new LogfileGroupOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, MySQLParser.RULE_logfileGroupOption);
	    try {
	        this.state = 2161;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 238:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2155;
	            this.tsOptionInitialSize();
	            break;
	        case 441:
	        case 604:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2156;
	            this.tsOptionUndoRedoBufferSize();
	            break;
	        case 368:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2157;
	            this.tsOptionNodegroup();
	            break;
	        case 163:
	        case 553:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2158;
	            this.tsOptionEngine();
	            break;
	        case 374:
	        case 638:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2159;
	            this.tsOptionWait();
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2160;
	            this.tsOptionComment();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createServer() {
	    let localctx = new CreateServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, MySQLParser.RULE_createServer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2163;
	        this.match(MySQLParser.SERVER_SYMBOL);
	        this.state = 2164;
	        this.serverName();
	        this.state = 2165;
	        this.match(MySQLParser.FOREIGN_SYMBOL);
	        this.state = 2166;
	        this.match(MySQLParser.DATA_SYMBOL);
	        this.state = 2167;
	        this.match(MySQLParser.WRAPPER_SYMBOL);
	        this.state = 2168;
	        this.textOrIdentifier();
	        this.state = 2169;
	        this.serverOptions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serverOptions() {
	    let localctx = new ServerOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, MySQLParser.RULE_serverOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2171;
	        this.match(MySQLParser.OPTIONS_SYMBOL);
	        this.state = 2172;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 2173;
	        this.serverOption();
	        this.state = 2178;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 2174;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 2175;
	            this.serverOption();
	            this.state = 2180;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 2181;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serverOption() {
	    let localctx = new ServerOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, MySQLParser.RULE_serverOption);
	    try {
	        this.state = 2197;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 224:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2183;
	            localctx.option = this.match(MySQLParser.HOST_SYMBOL);
	            this.state = 2184;
	            this.textLiteral();
	            break;
	        case 109:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2185;
	            localctx.option = this.match(MySQLParser.DATABASE_SYMBOL);
	            this.state = 2186;
	            this.textLiteral();
	            break;
	        case 618:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2187;
	            localctx.option = this.match(MySQLParser.USER_SYMBOL);
	            this.state = 2188;
	            this.textLiteral();
	            break;
	        case 406:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2189;
	            localctx.option = this.match(MySQLParser.PASSWORD_SYMBOL);
	            this.state = 2190;
	            this.textLiteral();
	            break;
	        case 519:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2191;
	            localctx.option = this.match(MySQLParser.SOCKET_SYMBOL);
	            this.state = 2192;
	            this.textLiteral();
	            break;
	        case 398:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2193;
	            localctx.option = this.match(MySQLParser.OWNER_SYMBOL);
	            this.state = 2194;
	            this.textLiteral();
	            break;
	        case 413:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2195;
	            localctx.option = this.match(MySQLParser.PORT_SYMBOL);
	            this.state = 2196;
	            this.ulong_number();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTablespace() {
	    let localctx = new CreateTablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, MySQLParser.RULE_createTablespace);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2199;
	        this.match(MySQLParser.TABLESPACE_SYMBOL);
	        this.state = 2200;
	        this.tablespaceName();
	        this.state = 2201;
	        this.tsDataFileName();
	        this.state = 2206;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,153,this._ctx);
	        if(la_===1) {
	            this.state = 2202;
	            this.match(MySQLParser.USE_SYMBOL);
	            this.state = 2203;
	            this.match(MySQLParser.LOGFILE_SYMBOL);
	            this.state = 2204;
	            this.match(MySQLParser.GROUP_SYMBOL);
	            this.state = 2205;
	            this.logfileGroupRef();

	        }
	        this.state = 2209;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        if(la_===1) {
	            this.state = 2208;
	            this.tablespaceOptions();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUndoTablespace() {
	    let localctx = new CreateUndoTablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, MySQLParser.RULE_createUndoTablespace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2211;
	        this.match(MySQLParser.UNDO_SYMBOL);
	        this.state = 2212;
	        this.match(MySQLParser.TABLESPACE_SYMBOL);
	        this.state = 2213;
	        this.tablespaceName();
	        this.state = 2214;
	        this.match(MySQLParser.ADD_SYMBOL);
	        this.state = 2215;
	        this.tsDataFile();
	        this.state = 2217;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===163 || _la===553) {
	            this.state = 2216;
	            this.undoTableSpaceOptions();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsDataFileName() {
	    let localctx = new TsDataFileNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, MySQLParser.RULE_tsDataFileName);
	    try {
	        this.state = 2226;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,157,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2219;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 2222;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,156,this._ctx);
	            if(la_===1) {
	                this.state = 2220;
	                this.match(MySQLParser.ADD_SYMBOL);
	                this.state = 2221;
	                this.tsDataFile();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2224;
	            this.match(MySQLParser.ADD_SYMBOL);
	            this.state = 2225;
	            this.tsDataFile();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsDataFile() {
	    let localctx = new TsDataFileContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, MySQLParser.RULE_tsDataFile);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2228;
	        this.match(MySQLParser.DATAFILE_SYMBOL);
	        this.state = 2229;
	        this.textLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablespaceOptions() {
	    let localctx = new TablespaceOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, MySQLParser.RULE_tablespaceOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2231;
	        this.tablespaceOption();
	        this.state = 2238;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,159,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2233;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	                if(la_===1) {
	                    this.state = 2232;
	                    this.match(MySQLParser.COMMA_SYMBOL);

	                }
	                this.state = 2235;
	                this.tablespaceOption(); 
	            }
	            this.state = 2240;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,159,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablespaceOption() {
	    let localctx = new TablespaceOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, MySQLParser.RULE_tablespaceOption);
	    try {
	        this.state = 2253;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,160,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2241;
	            this.tsOptionInitialSize();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2242;
	            this.tsOptionAutoextendSize();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2243;
	            this.tsOptionMaxSize();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2244;
	            this.tsOptionExtentSize();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 2245;
	            this.tsOptionNodegroup();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 2246;
	            this.tsOptionEngine();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 2247;
	            this.tsOptionWait();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 2248;
	            this.tsOptionComment();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 2249;
	            if (!( serverVersion >= 50707)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50707");
	            }
	            this.state = 2250;
	            this.tsOptionFileblockSize();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 2251;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 2252;
	            this.tsOptionEncryption();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsOptionInitialSize() {
	    let localctx = new TsOptionInitialSizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, MySQLParser.RULE_tsOptionInitialSize);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2255;
	        this.match(MySQLParser.INITIAL_SIZE_SYMBOL);
	        this.state = 2257;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        if(la_===1) {
	            this.state = 2256;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 2259;
	        this.sizeNumber();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsOptionUndoRedoBufferSize() {
	    let localctx = new TsOptionUndoRedoBufferSizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 138, MySQLParser.RULE_tsOptionUndoRedoBufferSize);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2261;
	        _la = this._input.LA(1);
	        if(!(_la===441 || _la===604)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2263;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,162,this._ctx);
	        if(la_===1) {
	            this.state = 2262;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 2265;
	        this.sizeNumber();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsOptionAutoextendSize() {
	    let localctx = new TsOptionAutoextendSizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, MySQLParser.RULE_tsOptionAutoextendSize);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2267;
	        this.match(MySQLParser.AUTOEXTEND_SIZE_SYMBOL);
	        this.state = 2269;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	        if(la_===1) {
	            this.state = 2268;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 2271;
	        this.sizeNumber();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsOptionMaxSize() {
	    let localctx = new TsOptionMaxSizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, MySQLParser.RULE_tsOptionMaxSize);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2273;
	        this.match(MySQLParser.MAX_SIZE_SYMBOL);
	        this.state = 2275;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        if(la_===1) {
	            this.state = 2274;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 2277;
	        this.sizeNumber();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsOptionExtentSize() {
	    let localctx = new TsOptionExtentSizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, MySQLParser.RULE_tsOptionExtentSize);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2279;
	        this.match(MySQLParser.EXTENT_SIZE_SYMBOL);
	        this.state = 2281;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	        if(la_===1) {
	            this.state = 2280;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 2283;
	        this.sizeNumber();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsOptionNodegroup() {
	    let localctx = new TsOptionNodegroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, MySQLParser.RULE_tsOptionNodegroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2285;
	        this.match(MySQLParser.NODEGROUP_SYMBOL);
	        this.state = 2287;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===750) {
	            this.state = 2286;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	        }

	        this.state = 2289;
	        this.real_ulong_number();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsOptionEngine() {
	    let localctx = new TsOptionEngineContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, MySQLParser.RULE_tsOptionEngine);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2292;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===553) {
	            this.state = 2291;
	            this.match(MySQLParser.STORAGE_SYMBOL);
	        }

	        this.state = 2294;
	        this.match(MySQLParser.ENGINE_SYMBOL);
	        this.state = 2296;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,168,this._ctx);
	        if(la_===1) {
	            this.state = 2295;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 2298;
	        this.engineRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsOptionWait() {
	    let localctx = new TsOptionWaitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, MySQLParser.RULE_tsOptionWait);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2300;
	        _la = this._input.LA(1);
	        if(!(_la===374 || _la===638)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsOptionComment() {
	    let localctx = new TsOptionCommentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, MySQLParser.RULE_tsOptionComment);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2302;
	        this.match(MySQLParser.COMMENT_SYMBOL);
	        this.state = 2304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,169,this._ctx);
	        if(la_===1) {
	            this.state = 2303;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 2306;
	        this.textLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsOptionFileblockSize() {
	    let localctx = new TsOptionFileblockSizeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, MySQLParser.RULE_tsOptionFileblockSize);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2308;
	        this.match(MySQLParser.FILE_BLOCK_SIZE_SYMBOL);
	        this.state = 2310;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	        if(la_===1) {
	            this.state = 2309;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 2312;
	        this.sizeNumber();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tsOptionEncryption() {
	    let localctx = new TsOptionEncryptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, MySQLParser.RULE_tsOptionEncryption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2314;
	        this.match(MySQLParser.ENCRYPTION_SYMBOL);
	        this.state = 2316;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,171,this._ctx);
	        if(la_===1) {
	            this.state = 2315;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 2318;
	        this.textStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createView() {
	    let localctx = new CreateViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, MySQLParser.RULE_createView);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2321;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9 || _la===394) {
	            this.state = 2320;
	            this.viewReplaceOrAlgorithm();
	        }

	        this.state = 2324;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===130) {
	            this.state = 2323;
	            this.definerClause();
	        }

	        this.state = 2327;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===537) {
	            this.state = 2326;
	            this.viewSuid();
	        }

	        this.state = 2329;
	        this.match(MySQLParser.VIEW_SYMBOL);
	        this.state = 2330;
	        this.viewName();
	        this.state = 2331;
	        this.viewTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewReplaceOrAlgorithm() {
	    let localctx = new ViewReplaceOrAlgorithmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, MySQLParser.RULE_viewReplaceOrAlgorithm);
	    var _la = 0;
	    try {
	        this.state = 2339;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 394:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2333;
	            this.match(MySQLParser.OR_SYMBOL);
	            this.state = 2334;
	            this.match(MySQLParser.REPLACE_SYMBOL);
	            this.state = 2336;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===9) {
	                this.state = 2335;
	                this.viewAlgorithm();
	            }

	            break;
	        case 9:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2338;
	            this.viewAlgorithm();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewAlgorithm() {
	    let localctx = new ViewAlgorithmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, MySQLParser.RULE_viewAlgorithm);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2341;
	        this.match(MySQLParser.ALGORITHM_SYMBOL);
	        this.state = 2342;
	        this.match(MySQLParser.EQUAL_OPERATOR);
	        this.state = 2343;
	        localctx.algorithm = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===335 || _la===578 || _la===602)) {
	            localctx.algorithm = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewSuid() {
	    let localctx = new ViewSuidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, MySQLParser.RULE_viewSuid);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2345;
	        this.match(MySQLParser.SQL_SYMBOL);
	        this.state = 2346;
	        this.match(MySQLParser.SECURITY_SYMBOL);
	        this.state = 2347;
	        _la = this._input.LA(1);
	        if(!(_la===130 || _la===250)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTrigger() {
	    let localctx = new CreateTriggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, MySQLParser.RULE_createTrigger);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2350;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===130) {
	            this.state = 2349;
	            this.definerClause();
	        }

	        this.state = 2352;
	        this.match(MySQLParser.TRIGGER_SYMBOL);
	        this.state = 2353;
	        this.triggerName();
	        this.state = 2354;
	        localctx.timing = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===6 || _la===28)) {
	            localctx.timing = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2355;
	        localctx.event = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===133 || _la===242 || _la===614)) {
	            localctx.event = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2356;
	        this.match(MySQLParser.ON_SYMBOL);
	        this.state = 2357;
	        this.tableRef();
	        this.state = 2358;
	        this.match(MySQLParser.FOR_SYMBOL);
	        this.state = 2359;
	        this.match(MySQLParser.EACH_SYMBOL);
	        this.state = 2360;
	        this.match(MySQLParser.ROW_SYMBOL);
	        this.state = 2362;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,178,this._ctx);
	        if(la_===1) {
	            this.state = 2361;
	            this.triggerFollowsPrecedesClause();

	        }
	        this.state = 2364;
	        this.compoundStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerFollowsPrecedesClause() {
	    let localctx = new TriggerFollowsPrecedesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, MySQLParser.RULE_triggerFollowsPrecedesClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2366;
	        if (!( serverVersion >= 50700)) {
	            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
	        }
	        this.state = 2367;
	        localctx.ordering = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===197 || _la===415)) {
	            localctx.ordering = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2368;
	        this.textOrIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createEvent() {
	    let localctx = new CreateEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, MySQLParser.RULE_createEvent);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2371;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===130) {
	            this.state = 2370;
	            this.definerClause();
	        }

	        this.state = 2373;
	        this.match(MySQLParser.EVENT_SYMBOL);
	        this.state = 2375;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,180,this._ctx);
	        if(la_===1) {
	            this.state = 2374;
	            this.ifNotExists();

	        }
	        this.state = 2377;
	        this.eventName();
	        this.state = 2378;
	        this.match(MySQLParser.ON_SYMBOL);
	        this.state = 2379;
	        this.match(MySQLParser.SCHEDULE_SYMBOL);
	        this.state = 2380;
	        this.schedule();
	        this.state = 2387;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===383) {
	            this.state = 2381;
	            this.match(MySQLParser.ON_SYMBOL);
	            this.state = 2382;
	            this.match(MySQLParser.COMPLETION_SYMBOL);
	            this.state = 2384;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===371) {
	                this.state = 2383;
	                this.match(MySQLParser.NOT_SYMBOL);
	            }

	            this.state = 2386;
	            this.match(MySQLParser.PRESERVE_SYMBOL);
	        }

	        this.state = 2395;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 156:
	        	this.state = 2389;
	        	this.match(MySQLParser.ENABLE_SYMBOL);
	        	break;
	        case 140:
	        	this.state = 2390;
	        	this.match(MySQLParser.DISABLE_SYMBOL);
	        	this.state = 2393;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===383) {
	        	    this.state = 2391;
	        	    this.match(MySQLParser.ON_SYMBOL);
	        	    this.state = 2392;
	        	    this.match(MySQLParser.SLAVE_SYMBOL);
	        	}

	        	break;
	        case 75:
	        case 147:
	        	break;
	        default:
	        	break;
	        }
	        this.state = 2399;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===75) {
	            this.state = 2397;
	            this.match(MySQLParser.COMMENT_SYMBOL);
	            this.state = 2398;
	            this.textLiteral();
	        }

	        this.state = 2401;
	        this.match(MySQLParser.DO_SYMBOL);
	        this.state = 2402;
	        this.compoundStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createRole() {
	    let localctx = new CreateRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, MySQLParser.RULE_createRole);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2404;
	        this.match(MySQLParser.ROLE_SYMBOL);
	        this.state = 2406;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,186,this._ctx);
	        if(la_===1) {
	            this.state = 2405;
	            this.ifNotExists();

	        }
	        this.state = 2408;
	        this.roleList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createSpatialReference() {
	    let localctx = new CreateSpatialReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, MySQLParser.RULE_createSpatialReference);
	    var _la = 0;
	    try {
	        this.state = 2435;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 394:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2410;
	            this.match(MySQLParser.OR_SYMBOL);
	            this.state = 2411;
	            this.match(MySQLParser.REPLACE_SYMBOL);
	            this.state = 2412;
	            this.match(MySQLParser.SPATIAL_SYMBOL);
	            this.state = 2413;
	            this.match(MySQLParser.REFERENCE_SYMBOL);
	            this.state = 2414;
	            this.match(MySQLParser.SYSTEM_SYMBOL);
	            this.state = 2415;
	            this.real_ulonglong_number();
	            this.state = 2419;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===357 || ((((_la - 715)) & ~0x1f) === 0 && ((1 << (_la - 715)) & 7) !== 0)) {
	                this.state = 2416;
	                this.srsAttribute();
	                this.state = 2421;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 523:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2422;
	            this.match(MySQLParser.SPATIAL_SYMBOL);
	            this.state = 2423;
	            this.match(MySQLParser.REFERENCE_SYMBOL);
	            this.state = 2424;
	            this.match(MySQLParser.SYSTEM_SYMBOL);
	            this.state = 2426;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
	            if(la_===1) {
	                this.state = 2425;
	                this.ifNotExists();

	            }
	            this.state = 2428;
	            this.real_ulonglong_number();
	            this.state = 2432;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===357 || ((((_la - 715)) & ~0x1f) === 0 && ((1 << (_la - 715)) & 7) !== 0)) {
	                this.state = 2429;
	                this.srsAttribute();
	                this.state = 2434;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	srsAttribute() {
	    let localctx = new SrsAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, MySQLParser.RULE_srsAttribute);
	    try {
	        this.state = 2452;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 357:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2437;
	            this.match(MySQLParser.NAME_SYMBOL);
	            this.state = 2438;
	            this.match(MySQLParser.TEXT_SYMBOL);
	            this.state = 2439;
	            this.textStringNoLinebreak();
	            break;
	        case 715:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2440;
	            this.match(MySQLParser.DEFINITION_SYMBOL);
	            this.state = 2441;
	            this.match(MySQLParser.TEXT_SYMBOL);
	            this.state = 2442;
	            this.textStringNoLinebreak();
	            break;
	        case 717:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2443;
	            this.match(MySQLParser.ORGANIZATION_SYMBOL);
	            this.state = 2444;
	            this.textStringNoLinebreak();
	            this.state = 2445;
	            this.match(MySQLParser.IDENTIFIED_SYMBOL);
	            this.state = 2446;
	            this.match(MySQLParser.BY_SYMBOL);
	            this.state = 2447;
	            this.real_ulonglong_number();
	            break;
	        case 716:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 2449;
	            this.match(MySQLParser.DESCRIPTION_SYMBOL);
	            this.state = 2450;
	            this.match(MySQLParser.TEXT_SYMBOL);
	            this.state = 2451;
	            this.textStringNoLinebreak();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropStatement() {
	    let localctx = new DropStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, MySQLParser.RULE_dropStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2454;
	        this.match(MySQLParser.DROP_SYMBOL);
	        this.state = 2472;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2455;
	            this.dropDatabase();
	            break;

	        case 2:
	            this.state = 2456;
	            this.dropEvent();
	            break;

	        case 3:
	            this.state = 2457;
	            this.dropFunction();
	            break;

	        case 4:
	            this.state = 2458;
	            this.dropProcedure();
	            break;

	        case 5:
	            this.state = 2459;
	            this.dropIndex();
	            break;

	        case 6:
	            this.state = 2460;
	            this.dropLogfileGroup();
	            break;

	        case 7:
	            this.state = 2461;
	            this.dropServer();
	            break;

	        case 8:
	            this.state = 2462;
	            this.dropTable();
	            break;

	        case 9:
	            this.state = 2463;
	            this.dropTableSpace();
	            break;

	        case 10:
	            this.state = 2464;
	            this.dropTrigger();
	            break;

	        case 11:
	            this.state = 2465;
	            this.dropView();
	            break;

	        case 12:
	            this.state = 2466;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 2467;
	            this.dropRole();
	            break;

	        case 13:
	            this.state = 2468;
	            if (!( serverVersion >= 80011)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
	            }
	            this.state = 2469;
	            this.dropSpatialReference();
	            break;

	        case 14:
	            this.state = 2470;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 2471;
	            this.dropUndoTablespace();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropDatabase() {
	    let localctx = new DropDatabaseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, MySQLParser.RULE_dropDatabase);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2474;
	        this.match(MySQLParser.DATABASE_SYMBOL);
	        this.state = 2476;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	        if(la_===1) {
	            this.state = 2475;
	            this.ifExists();

	        }
	        this.state = 2478;
	        this.schemaRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropEvent() {
	    let localctx = new DropEventContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, MySQLParser.RULE_dropEvent);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2480;
	        this.match(MySQLParser.EVENT_SYMBOL);
	        this.state = 2482;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        if(la_===1) {
	            this.state = 2481;
	            this.ifExists();

	        }
	        this.state = 2484;
	        this.eventRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropFunction() {
	    let localctx = new DropFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, MySQLParser.RULE_dropFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2486;
	        this.match(MySQLParser.FUNCTION_SYMBOL);
	        this.state = 2488;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	        if(la_===1) {
	            this.state = 2487;
	            this.ifExists();

	        }
	        this.state = 2490;
	        this.functionRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropProcedure() {
	    let localctx = new DropProcedureContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, MySQLParser.RULE_dropProcedure);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2492;
	        this.match(MySQLParser.PROCEDURE_SYMBOL);
	        this.state = 2494;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,196,this._ctx);
	        if(la_===1) {
	            this.state = 2493;
	            this.ifExists();

	        }
	        this.state = 2496;
	        this.procedureRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropIndex() {
	    let localctx = new DropIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, MySQLParser.RULE_dropIndex);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2499;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===380 || _la===385) {
	            this.state = 2498;
	            this.onlineOption();
	        }

	        this.state = 2501;
	        localctx.type = this.match(MySQLParser.INDEX_SYMBOL);
	        this.state = 2502;
	        this.indexRef();
	        this.state = 2503;
	        this.match(MySQLParser.ON_SYMBOL);
	        this.state = 2504;
	        this.tableRef();
	        this.state = 2506;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===9 || _la===287) {
	            this.state = 2505;
	            this.indexLockAndAlgorithm();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropLogfileGroup() {
	    let localctx = new DropLogfileGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 190, MySQLParser.RULE_dropLogfileGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2508;
	        this.match(MySQLParser.LOGFILE_SYMBOL);
	        this.state = 2509;
	        this.match(MySQLParser.GROUP_SYMBOL);
	        this.state = 2510;
	        this.logfileGroupRef();
	        this.state = 2521;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===163 || _la===374 || _la===553 || _la===638) {
	            this.state = 2511;
	            this.dropLogfileGroupOption();
	            this.state = 2518;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===163 || _la===374 || _la===553 || _la===638 || _la===773) {
	                this.state = 2513;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===773) {
	                    this.state = 2512;
	                    this.match(MySQLParser.COMMA_SYMBOL);
	                }

	                this.state = 2515;
	                this.dropLogfileGroupOption();
	                this.state = 2520;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropLogfileGroupOption() {
	    let localctx = new DropLogfileGroupOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, MySQLParser.RULE_dropLogfileGroupOption);
	    try {
	        this.state = 2525;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 374:
	        case 638:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2523;
	            this.tsOptionWait();
	            break;
	        case 163:
	        case 553:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2524;
	            this.tsOptionEngine();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropServer() {
	    let localctx = new DropServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, MySQLParser.RULE_dropServer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2527;
	        this.match(MySQLParser.SERVER_SYMBOL);
	        this.state = 2529;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	        if(la_===1) {
	            this.state = 2528;
	            this.ifExists();

	        }
	        this.state = 2531;
	        this.serverRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTable() {
	    let localctx = new DropTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, MySQLParser.RULE_dropTable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2534;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===577) {
	            this.state = 2533;
	            this.match(MySQLParser.TEMPORARY_SYMBOL);
	        }

	        this.state = 2536;
	        localctx.type = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===571 || _la===574)) {
	            localctx.type = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2538;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,205,this._ctx);
	        if(la_===1) {
	            this.state = 2537;
	            this.ifExists();

	        }
	        this.state = 2540;
	        this.tableRefList();
	        this.state = 2542;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49 || _la===471) {
	            this.state = 2541;
	            _la = this._input.LA(1);
	            if(!(_la===49 || _la===471)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTableSpace() {
	    let localctx = new DropTableSpaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, MySQLParser.RULE_dropTableSpace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2544;
	        this.match(MySQLParser.TABLESPACE_SYMBOL);
	        this.state = 2545;
	        this.tablespaceRef();
	        this.state = 2556;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===163 || _la===374 || _la===553 || _la===638) {
	            this.state = 2546;
	            this.dropLogfileGroupOption();
	            this.state = 2553;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===163 || _la===374 || _la===553 || _la===638 || _la===773) {
	                this.state = 2548;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===773) {
	                    this.state = 2547;
	                    this.match(MySQLParser.COMMA_SYMBOL);
	                }

	                this.state = 2550;
	                this.dropLogfileGroupOption();
	                this.state = 2555;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropTrigger() {
	    let localctx = new DropTriggerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, MySQLParser.RULE_dropTrigger);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2558;
	        this.match(MySQLParser.TRIGGER_SYMBOL);
	        this.state = 2560;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,210,this._ctx);
	        if(la_===1) {
	            this.state = 2559;
	            this.ifExists();

	        }
	        this.state = 2562;
	        this.triggerRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropView() {
	    let localctx = new DropViewContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 202, MySQLParser.RULE_dropView);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2564;
	        this.match(MySQLParser.VIEW_SYMBOL);
	        this.state = 2566;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,211,this._ctx);
	        if(la_===1) {
	            this.state = 2565;
	            this.ifExists();

	        }
	        this.state = 2568;
	        this.viewRefList();
	        this.state = 2570;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===49 || _la===471) {
	            this.state = 2569;
	            _la = this._input.LA(1);
	            if(!(_la===49 || _la===471)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropRole() {
	    let localctx = new DropRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, MySQLParser.RULE_dropRole);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2572;
	        this.match(MySQLParser.ROLE_SYMBOL);
	        this.state = 2574;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        if(la_===1) {
	            this.state = 2573;
	            this.ifExists();

	        }
	        this.state = 2576;
	        this.roleList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropSpatialReference() {
	    let localctx = new DropSpatialReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, MySQLParser.RULE_dropSpatialReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2578;
	        this.match(MySQLParser.SPATIAL_SYMBOL);
	        this.state = 2579;
	        this.match(MySQLParser.REFERENCE_SYMBOL);
	        this.state = 2580;
	        this.match(MySQLParser.SYSTEM_SYMBOL);
	        this.state = 2582;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        if(la_===1) {
	            this.state = 2581;
	            this.ifExists();

	        }
	        this.state = 2584;
	        this.real_ulonglong_number();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropUndoTablespace() {
	    let localctx = new DropUndoTablespaceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, MySQLParser.RULE_dropUndoTablespace);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2586;
	        this.match(MySQLParser.UNDO_SYMBOL);
	        this.state = 2587;
	        this.match(MySQLParser.TABLESPACE_SYMBOL);
	        this.state = 2588;
	        this.tablespaceRef();
	        this.state = 2590;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===163 || _la===553) {
	            this.state = 2589;
	            this.undoTableSpaceOptions();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameTableStatement() {
	    let localctx = new RenameTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, MySQLParser.RULE_renameTableStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2592;
	        this.match(MySQLParser.RENAME_SYMBOL);
	        this.state = 2593;
	        _la = this._input.LA(1);
	        if(!(_la===571 || _la===574)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2594;
	        this.renamePair();
	        this.state = 2599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 2595;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 2596;
	            this.renamePair();
	            this.state = 2601;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renamePair() {
	    let localctx = new RenamePairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, MySQLParser.RULE_renamePair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2602;
	        this.tableRef();
	        this.state = 2603;
	        this.match(MySQLParser.TO_SYMBOL);
	        this.state = 2604;
	        this.tableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncateTableStatement() {
	    let localctx = new TruncateTableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, MySQLParser.RULE_truncateTableStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2606;
	        this.match(MySQLParser.TRUNCATE_SYMBOL);
	        this.state = 2608;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,217,this._ctx);
	        if(la_===1) {
	            this.state = 2607;
	            this.match(MySQLParser.TABLE_SYMBOL);

	        }
	        this.state = 2610;
	        this.tableRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	importStatement() {
	    let localctx = new ImportStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, MySQLParser.RULE_importStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2612;
	        this.match(MySQLParser.IMPORT_SYMBOL);
	        this.state = 2613;
	        this.match(MySQLParser.TABLE_SYMBOL);
	        this.state = 2614;
	        this.match(MySQLParser.FROM_SYMBOL);
	        this.state = 2615;
	        this.textStringLiteralList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	callStatement() {
	    let localctx = new CallStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, MySQLParser.RULE_callStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2617;
	        this.match(MySQLParser.CALL_SYMBOL);
	        this.state = 2618;
	        this.procedureRef();
	        this.state = 2624;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===776) {
	            this.state = 2619;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 2621;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,218,this._ctx);
	            if(la_===1) {
	                this.state = 2620;
	                this.exprList();

	            }
	            this.state = 2623;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatement() {
	    let localctx = new DeleteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, MySQLParser.RULE_deleteStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2628;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,220,this._ctx);
	        if(la_===1) {
	            this.state = 2626;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 2627;
	            this.withClause();

	        }
	        this.state = 2630;
	        this.match(MySQLParser.DELETE_SYMBOL);
	        this.state = 2634;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,221,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2631;
	                this.deleteStatementOption(); 
	            }
	            this.state = 2636;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,221,this._ctx);
	        }

	        this.state = 2669;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,230,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2637;
	            this.match(MySQLParser.FROM_SYMBOL);
	            this.state = 2661;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,228,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2638;
	                this.tableAliasRefList();
	                this.state = 2639;
	                this.match(MySQLParser.USING_SYMBOL);
	                this.state = 2640;
	                this.tableReferenceList();
	                this.state = 2642;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===643) {
	                    this.state = 2641;
	                    this.whereClause();
	                }

	                break;

	            case 2:
	                this.state = 2644;
	                this.tableRef();
	                this.state = 2647;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	                if(la_===1) {
	                    this.state = 2645;
	                    if (!( serverVersion >= 80017)) {
	                        throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	                    }
	                    this.state = 2646;
	                    this.tableAlias();

	                }
	                this.state = 2650;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,224,this._ctx);
	                if(la_===1) {
	                    this.state = 2649;
	                    this.partitionDelete();

	                }
	                this.state = 2653;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===643) {
	                    this.state = 2652;
	                    this.whereClause();
	                }

	                this.state = 2656;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===393) {
	                    this.state = 2655;
	                    this.orderClause();
	                }

	                this.state = 2659;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===276) {
	                    this.state = 2658;
	                    this.simpleLimitClause();
	                }

	                break;

	            }
	            break;

	        case 2:
	            this.state = 2663;
	            this.tableAliasRefList();
	            this.state = 2664;
	            this.match(MySQLParser.FROM_SYMBOL);
	            this.state = 2665;
	            this.tableReferenceList();
	            this.state = 2667;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===643) {
	                this.state = 2666;
	                this.whereClause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDelete() {
	    let localctx = new PartitionDeleteContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, MySQLParser.RULE_partitionDelete);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2671;
	        if (!( serverVersion >= 50602)) {
	            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50602");
	        }
	        this.state = 2672;
	        this.match(MySQLParser.PARTITION_SYMBOL);
	        this.state = 2673;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 2674;
	        this.identifierList();
	        this.state = 2675;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteStatementOption() {
	    let localctx = new DeleteStatementOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, MySQLParser.RULE_deleteStatementOption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2677;
	        _la = this._input.LA(1);
	        if(!(_la===232 || _la===295 || _la===431)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	doStatement() {
	    let localctx = new DoStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, MySQLParser.RULE_doStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2679;
	        this.match(MySQLParser.DO_SYMBOL);
	        this.state = 2684;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,231,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2680;
	            if (!( serverVersion < 50709)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50709");
	            }
	            this.state = 2681;
	            this.exprList();
	            break;

	        case 2:
	            this.state = 2682;
	            if (!( serverVersion >= 50709)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50709");
	            }
	            this.state = 2683;
	            this.selectItemList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerStatement() {
	    let localctx = new HandlerStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, MySQLParser.RULE_handlerStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2686;
	        this.match(MySQLParser.HANDLER_SYMBOL);
	        this.state = 2704;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,236,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2687;
	            this.tableRef();
	            this.state = 2688;
	            this.match(MySQLParser.OPEN_SYMBOL);
	            this.state = 2690;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,232,this._ctx);
	            if(la_===1) {
	                this.state = 2689;
	                this.tableAlias();

	            }
	            break;

	        case 2:
	            this.state = 2692;
	            this.identifier();
	            this.state = 2702;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 66:
	                this.state = 2693;
	                this.match(MySQLParser.CLOSE_SYMBOL);
	                break;
	            case 435:
	                this.state = 2694;
	                this.match(MySQLParser.READ_SYMBOL);
	                this.state = 2695;
	                this.handlerReadOrScan();
	                this.state = 2697;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===643) {
	                    this.state = 2696;
	                    this.whereClause();
	                }

	                this.state = 2700;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===276) {
	                    this.state = 2699;
	                    this.limitClause();
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerReadOrScan() {
	    let localctx = new HandlerReadOrScanContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, MySQLParser.RULE_handlerReadOrScan);
	    var _la = 0;
	    try {
	        this.state = 2716;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,238,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2706;
	            _la = this._input.LA(1);
	            if(!(_la===191 || _la===367)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2707;
	            this.identifier();
	            this.state = 2714;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 191:
	            case 268:
	            case 367:
	            case 419:
	                this.state = 2708;
	                _la = this._input.LA(1);
	                if(!(_la===191 || _la===268 || _la===367 || _la===419)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;
	            case 750:
	            case 753:
	            case 754:
	            case 755:
	            case 756:
	                this.state = 2709;
	                _la = this._input.LA(1);
	                if(!(((((_la - 750)) & ~0x1f) === 0 && ((1 << (_la - 750)) & 121) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 2710;
	                this.match(MySQLParser.OPEN_PAR_SYMBOL);
	                this.state = 2711;
	                this.values();
	                this.state = 2712;
	                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStatement() {
	    let localctx = new InsertStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, MySQLParser.RULE_insertStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2718;
	        this.match(MySQLParser.INSERT_SYMBOL);
	        this.state = 2720;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	        if(la_===1) {
	            this.state = 2719;
	            this.insertLockOption();

	        }
	        this.state = 2723;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,240,this._ctx);
	        if(la_===1) {
	            this.state = 2722;
	            this.match(MySQLParser.IGNORE_SYMBOL);

	        }
	        this.state = 2726;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,241,this._ctx);
	        if(la_===1) {
	            this.state = 2725;
	            this.match(MySQLParser.INTO_SYMBOL);

	        }
	        this.state = 2728;
	        this.tableRef();
	        this.state = 2730;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,242,this._ctx);
	        if(la_===1) {
	            this.state = 2729;
	            this.usePartition();

	        }
	        this.state = 2744;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,245,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2732;
	            this.insertFromConstructor();
	            this.state = 2735;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	            if(la_===1) {
	                this.state = 2733;
	                if (!(  serverVersion >= 80018)) {
	                    throw new antlr4.error.FailedPredicateException(this, " serverVersion >= 80018");
	                }
	                this.state = 2734;
	                this.valuesReference();

	            }
	            break;

	        case 2:
	            this.state = 2737;
	            this.match(MySQLParser.SET_SYMBOL);
	            this.state = 2738;
	            this.updateList();
	            this.state = 2741;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,244,this._ctx);
	            if(la_===1) {
	                this.state = 2739;
	                if (!(  serverVersion >= 80018)) {
	                    throw new antlr4.error.FailedPredicateException(this, " serverVersion >= 80018");
	                }
	                this.state = 2740;
	                this.valuesReference();

	            }
	            break;

	        case 3:
	            this.state = 2743;
	            this.insertQueryExpression();
	            break;

	        }
	        this.state = 2747;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===383) {
	            this.state = 2746;
	            this.insertUpdateList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertLockOption() {
	    let localctx = new InsertLockOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 234, MySQLParser.RULE_insertLockOption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2749;
	        _la = this._input.LA(1);
	        if(!(_la===131 || _la===223 || _la===295)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertFromConstructor() {
	    let localctx = new InsertFromConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 236, MySQLParser.RULE_insertFromConstructor);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2756;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===776) {
	            this.state = 2751;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 2753;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	            if(la_===1) {
	                this.state = 2752;
	                this.fields();

	            }
	            this.state = 2755;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	        }

	        this.state = 2758;
	        this.insertValues();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fields() {
	    let localctx = new FieldsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 238, MySQLParser.RULE_fields);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2760;
	        this.insertIdentifier();
	        this.state = 2765;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 2761;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 2762;
	            this.insertIdentifier();
	            this.state = 2767;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertValues() {
	    let localctx = new InsertValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 240, MySQLParser.RULE_insertValues);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2768;
	        _la = this._input.LA(1);
	        if(!(_la===626 || _la===627)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 2769;
	        this.valueList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertQueryExpression() {
	    let localctx = new InsertQueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 242, MySQLParser.RULE_insertQueryExpression);
	    try {
	        this.state = 2778;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,251,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2771;
	            this.queryExpressionOrParens();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2772;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 2774;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
	            if(la_===1) {
	                this.state = 2773;
	                this.fields();

	            }
	            this.state = 2776;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 2777;
	            this.queryExpressionOrParens();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valueList() {
	    let localctx = new ValueListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 244, MySQLParser.RULE_valueList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2780;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 2782;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,252,this._ctx);
	        if(la_===1) {
	            this.state = 2781;
	            this.values();

	        }
	        this.state = 2784;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	        this.state = 2793;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,254,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2785;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 2786;
	                this.match(MySQLParser.OPEN_PAR_SYMBOL);
	                this.state = 2788;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,253,this._ctx);
	                if(la_===1) {
	                    this.state = 2787;
	                    this.values();

	                }
	                this.state = 2790;
	                this.match(MySQLParser.CLOSE_PAR_SYMBOL); 
	            }
	            this.state = 2795;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,254,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	values() {
	    let localctx = new ValuesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 246, MySQLParser.RULE_values);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2798;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2796;
	            this.expr(0);
	            break;

	        case 2:
	            this.state = 2797;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            break;

	        }
	        this.state = 2807;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 2800;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 2803;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2801;
	                this.expr(0);
	                break;

	            case 2:
	                this.state = 2802;
	                this.match(MySQLParser.DEFAULT_SYMBOL);
	                break;

	            }
	            this.state = 2809;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	valuesReference() {
	    let localctx = new ValuesReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 248, MySQLParser.RULE_valuesReference);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2810;
	        this.match(MySQLParser.AS_SYMBOL);
	        this.state = 2811;
	        this.identifier();
	        this.state = 2813;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===776) {
	            this.state = 2812;
	            this.columnInternalRefList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertUpdateList() {
	    let localctx = new InsertUpdateListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 250, MySQLParser.RULE_insertUpdateList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2815;
	        this.match(MySQLParser.ON_SYMBOL);
	        this.state = 2816;
	        this.match(MySQLParser.DUPLICATE_SYMBOL);
	        this.state = 2817;
	        this.match(MySQLParser.KEY_SYMBOL);
	        this.state = 2818;
	        this.match(MySQLParser.UPDATE_SYMBOL);
	        this.state = 2819;
	        this.updateList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadStatement() {
	    let localctx = new LoadStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 252, MySQLParser.RULE_loadStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2821;
	        this.match(MySQLParser.LOAD_SYMBOL);
	        this.state = 2822;
	        this.dataOrXml();
	        this.state = 2824;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===82 || _la===295) {
	            this.state = 2823;
	            _la = this._input.LA(1);
	            if(!(_la===82 || _la===295)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2827;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===284) {
	            this.state = 2826;
	            this.match(MySQLParser.LOCAL_SYMBOL);
	        }

	        this.state = 2829;
	        this.match(MySQLParser.INFILE_SYMBOL);
	        this.state = 2830;
	        this.textLiteral();
	        this.state = 2832;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===232 || _la===458) {
	            this.state = 2831;
	            _la = this._input.LA(1);
	            if(!(_la===232 || _la===458)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2834;
	        this.match(MySQLParser.INTO_SYMBOL);
	        this.state = 2835;
	        this.match(MySQLParser.TABLE_SYMBOL);
	        this.state = 2836;
	        this.tableRef();
	        this.state = 2838;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	        if(la_===1) {
	            this.state = 2837;
	            this.usePartition();

	        }
	        this.state = 2841;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===58 || _la===60) {
	            this.state = 2840;
	            this.charsetClause();
	        }

	        this.state = 2844;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===484) {
	            this.state = 2843;
	            this.xmlRowsIdentifiedBy();
	        }

	        this.state = 2847;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===71) {
	            this.state = 2846;
	            this.fieldsClause();
	        }

	        this.state = 2850;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===278) {
	            this.state = 2849;
	            this.linesClause();
	        }

	        this.state = 2852;
	        this.loadDataFileTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataOrXml() {
	    let localctx = new DataOrXmlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 254, MySQLParser.RULE_dataOrXml);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2854;
	        _la = this._input.LA(1);
	        if(!(_la===112 || _la===653)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xmlRowsIdentifiedBy() {
	    let localctx = new XmlRowsIdentifiedByContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 256, MySQLParser.RULE_xmlRowsIdentifiedBy);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2856;
	        this.match(MySQLParser.ROWS_SYMBOL);
	        this.state = 2857;
	        this.match(MySQLParser.IDENTIFIED_SYMBOL);
	        this.state = 2858;
	        this.match(MySQLParser.BY_SYMBOL);
	        this.state = 2859;
	        this.textString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadDataFileTail() {
	    let localctx = new LoadDataFileTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 258, MySQLParser.RULE_loadDataFileTail);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2864;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===232) {
	            this.state = 2861;
	            this.match(MySQLParser.IGNORE_SYMBOL);
	            this.state = 2862;
	            this.match(MySQLParser.INT_NUMBER);
	            this.state = 2863;
	            _la = this._input.LA(1);
	            if(!(_la===278 || _la===484)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2867;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===776) {
	            this.state = 2866;
	            this.loadDataFileTargetList();
	        }

	        this.state = 2871;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===506) {
	            this.state = 2869;
	            this.match(MySQLParser.SET_SYMBOL);
	            this.state = 2870;
	            this.updateList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loadDataFileTargetList() {
	    let localctx = new LoadDataFileTargetListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 260, MySQLParser.RULE_loadDataFileTargetList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2873;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 2875;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,270,this._ctx);
	        if(la_===1) {
	            this.state = 2874;
	            this.fieldOrVariableList();

	        }
	        this.state = 2877;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldOrVariableList() {
	    let localctx = new FieldOrVariableListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 262, MySQLParser.RULE_fieldOrVariableList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2881;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,271,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2879;
	            this.columnRef();
	            break;

	        case 2:
	            this.state = 2880;
	            this.userVariable();
	            break;

	        }
	        this.state = 2890;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 2883;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 2886;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,272,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2884;
	                this.columnRef();
	                break;

	            case 2:
	                this.state = 2885;
	                this.userVariable();
	                break;

	            }
	            this.state = 2892;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replaceStatement() {
	    let localctx = new ReplaceStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 264, MySQLParser.RULE_replaceStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2893;
	        this.match(MySQLParser.REPLACE_SYMBOL);
	        this.state = 2895;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,274,this._ctx);
	        if(la_===1) {
	            this.state = 2894;
	            _la = this._input.LA(1);
	            if(!(_la===131 || _la===295)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 2898;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,275,this._ctx);
	        if(la_===1) {
	            this.state = 2897;
	            this.match(MySQLParser.INTO_SYMBOL);

	        }
	        this.state = 2900;
	        this.tableRef();
	        this.state = 2902;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,276,this._ctx);
	        if(la_===1) {
	            this.state = 2901;
	            this.usePartition();

	        }
	        this.state = 2908;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,277,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2904;
	            this.insertFromConstructor();
	            break;

	        case 2:
	            this.state = 2905;
	            this.match(MySQLParser.SET_SYMBOL);
	            this.state = 2906;
	            this.updateList();
	            break;

	        case 3:
	            this.state = 2907;
	            this.insertQueryExpression();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatement() {
	    let localctx = new SelectStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 266, MySQLParser.RULE_selectStatement);
	    var _la = 0;
	    try {
	        this.state = 2916;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,279,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2910;
	            this.queryExpression();
	            this.state = 2912;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200 || _la===287) {
	                this.state = 2911;
	                this.lockingClauseList();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2914;
	            this.queryExpressionParens();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2915;
	            this.selectStatementWithInto();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStatementWithInto() {
	    let localctx = new SelectStatementWithIntoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 268, MySQLParser.RULE_selectStatementWithInto);
	    var _la = 0;
	    try {
	        this.state = 2930;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,281,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2918;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 2919;
	            this.selectStatementWithInto();
	            this.state = 2920;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2922;
	            this.queryExpression();
	            this.state = 2923;
	            this.intoClause();
	            this.state = 2925;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200 || _la===287) {
	                this.state = 2924;
	                this.lockingClauseList();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2927;
	            this.lockingClauseList();
	            this.state = 2928;
	            this.intoClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpression() {
	    let localctx = new QueryExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 270, MySQLParser.RULE_queryExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2934;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,282,this._ctx);
	        if(la_===1) {
	            this.state = 2932;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 2933;
	            this.withClause();

	        }
	        this.state = 2950;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,287,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2936;
	            this.queryExpressionBody();
	            this.state = 2938;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,283,this._ctx);
	            if(la_===1) {
	                this.state = 2937;
	                this.orderClause();

	            }
	            this.state = 2941;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,284,this._ctx);
	            if(la_===1) {
	                this.state = 2940;
	                this.limitClause();

	            }
	            break;

	        case 2:
	            this.state = 2943;
	            this.queryExpressionParens();
	            this.state = 2945;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,285,this._ctx);
	            if(la_===1) {
	                this.state = 2944;
	                this.orderClause();

	            }
	            this.state = 2948;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,286,this._ctx);
	            if(la_===1) {
	                this.state = 2947;
	                this.limitClause();

	            }
	            break;

	        }
	        this.state = 2954;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,288,this._ctx);
	        if(la_===1) {
	            this.state = 2952;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 2953;
	            this.procedureAnalyseClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpressionBody() {
	    let localctx = new QueryExpressionBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 272, MySQLParser.RULE_queryExpressionBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2966;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,291,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2956;
	            this.queryPrimary();
	            break;

	        case 2:
	            this.state = 2957;
	            this.queryExpressionParens();
	            this.state = 2958;
	            this.match(MySQLParser.UNION_SYMBOL);
	            this.state = 2960;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,289,this._ctx);
	            if(la_===1) {
	                this.state = 2959;
	                this.unionOption();

	            }
	            this.state = 2964;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,290,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 2962;
	                this.queryPrimary();
	                break;

	            case 2:
	                this.state = 2963;
	                this.queryExpressionParens();
	                break;

	            }
	            break;

	        }
	        this.state = 2978;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,294,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2968;
	                this.match(MySQLParser.UNION_SYMBOL);
	                this.state = 2970;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,292,this._ctx);
	                if(la_===1) {
	                    this.state = 2969;
	                    this.unionOption();

	                }
	                this.state = 2974;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,293,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 2972;
	                    this.queryPrimary();
	                    break;

	                case 2:
	                    this.state = 2973;
	                    this.queryExpressionParens();
	                    break;

	                } 
	            }
	            this.state = 2980;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,294,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryExpressionParens() {
	    let localctx = new QueryExpressionParensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 274, MySQLParser.RULE_queryExpressionParens);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2981;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 2987;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,296,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 2982;
	            this.queryExpressionParens();
	            break;

	        case 2:
	            this.state = 2983;
	            this.queryExpression();
	            this.state = 2985;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200 || _la===287) {
	                this.state = 2984;
	                this.lockingClauseList();
	            }

	            break;

	        }
	        this.state = 2989;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryPrimary() {
	    let localctx = new QueryPrimaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 276, MySQLParser.RULE_queryPrimary);
	    try {
	        this.state = 2996;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,297,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2991;
	            this.querySpecification();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2992;
	            if (!( serverVersion >= 80019)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80019");
	            }
	            this.state = 2993;
	            this.tableValueConstructor();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2994;
	            if (!( serverVersion >= 80019)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80019");
	            }
	            this.state = 2995;
	            this.explicitTable();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecification() {
	    let localctx = new QuerySpecificationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 278, MySQLParser.RULE_querySpecification);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2998;
	        this.match(MySQLParser.SELECT_SYMBOL);
	        this.state = 3002;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,298,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 2999;
	                this.selectOption(); 
	            }
	            this.state = 3004;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,298,this._ctx);
	        }

	        this.state = 3005;
	        this.selectItemList();
	        this.state = 3007;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,299,this._ctx);
	        if(la_===1) {
	            this.state = 3006;
	            this.intoClause();

	        }
	        this.state = 3010;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,300,this._ctx);
	        if(la_===1) {
	            this.state = 3009;
	            this.fromClause();

	        }
	        this.state = 3013;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,301,this._ctx);
	        if(la_===1) {
	            this.state = 3012;
	            this.whereClause();

	        }
	        this.state = 3016;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,302,this._ctx);
	        if(la_===1) {
	            this.state = 3015;
	            this.groupByClause();

	        }
	        this.state = 3019;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,303,this._ctx);
	        if(la_===1) {
	            this.state = 3018;
	            this.havingClause();

	        }
	        this.state = 3023;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,304,this._ctx);
	        if(la_===1) {
	            this.state = 3021;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 3022;
	            this.windowClause();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subquery() {
	    let localctx = new SubqueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 280, MySQLParser.RULE_subquery);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3025;
	        this.queryExpressionParens();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	querySpecOption() {
	    let localctx = new QuerySpecOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 282, MySQLParser.RULE_querySpecOption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3027;
	        _la = this._input.LA(1);
	        if(!(_la===10 || _la===143 || _la===223 || ((((_la - 531)) & ~0x1f) === 0 && ((1 << (_la - 531)) & 16777259) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 284, MySQLParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3029;
	        this.match(MySQLParser.LIMIT_SYMBOL);
	        this.state = 3030;
	        this.limitOptions();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleLimitClause() {
	    let localctx = new SimpleLimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 286, MySQLParser.RULE_simpleLimitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3032;
	        this.match(MySQLParser.LIMIT_SYMBOL);
	        this.state = 3033;
	        this.limitOption();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitOptions() {
	    let localctx = new LimitOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 288, MySQLParser.RULE_limitOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3035;
	        this.limitOption();
	        this.state = 3038;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,305,this._ctx);
	        if(la_===1) {
	            this.state = 3036;
	            _la = this._input.LA(1);
	            if(!(_la===381 || _la===773)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3037;
	            this.limitOption();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitOption() {
	    let localctx = new LimitOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 290, MySQLParser.RULE_limitOption);
	    var _la = 0;
	    try {
	        this.state = 3042;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,306,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3040;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3041;
	            _la = this._input.LA(1);
	            if(!(((((_la - 747)) & ~0x1f) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la===787)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intoClause() {
	    let localctx = new IntoClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 292, MySQLParser.RULE_intoClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3044;
	        this.match(MySQLParser.INTO_SYMBOL);
	        this.state = 3072;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,313,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3045;
	            this.match(MySQLParser.OUTFILE_SYMBOL);
	            this.state = 3046;
	            this.textStringLiteral();
	            this.state = 3048;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,307,this._ctx);
	            if(la_===1) {
	                this.state = 3047;
	                this.charsetClause();

	            }
	            this.state = 3051;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,308,this._ctx);
	            if(la_===1) {
	                this.state = 3050;
	                this.fieldsClause();

	            }
	            this.state = 3054;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,309,this._ctx);
	            if(la_===1) {
	                this.state = 3053;
	                this.linesClause();

	            }
	            break;

	        case 2:
	            this.state = 3056;
	            this.match(MySQLParser.DUMPFILE_SYMBOL);
	            this.state = 3057;
	            this.textStringLiteral();
	            break;

	        case 3:
	            this.state = 3060;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,310,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3058;
	                this.textOrIdentifier();
	                break;

	            case 2:
	                this.state = 3059;
	                this.userVariable();
	                break;

	            }
	            this.state = 3069;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,312,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3062;
	                    this.match(MySQLParser.COMMA_SYMBOL);
	                    this.state = 3065;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,311,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 3063;
	                        this.textOrIdentifier();
	                        break;

	                    case 2:
	                        this.state = 3064;
	                        this.userVariable();
	                        break;

	                    } 
	                }
	                this.state = 3071;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,312,this._ctx);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureAnalyseClause() {
	    let localctx = new ProcedureAnalyseClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 294, MySQLParser.RULE_procedureAnalyseClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3074;
	        this.match(MySQLParser.PROCEDURE_SYMBOL);
	        this.state = 3075;
	        this.match(MySQLParser.ANALYSE_SYMBOL);
	        this.state = 3076;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 3082;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===747) {
	            this.state = 3077;
	            this.match(MySQLParser.INT_NUMBER);
	            this.state = 3080;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 3078;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3079;
	                this.match(MySQLParser.INT_NUMBER);
	            }

	        }

	        this.state = 3084;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 296, MySQLParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3086;
	        this.match(MySQLParser.HAVING_SYMBOL);
	        this.state = 3087;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowClause() {
	    let localctx = new WindowClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 298, MySQLParser.RULE_windowClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3089;
	        this.match(MySQLParser.WINDOW_SYMBOL);
	        this.state = 3090;
	        this.windowDefinition();
	        this.state = 3095;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,316,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3091;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3092;
	                this.windowDefinition(); 
	            }
	            this.state = 3097;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,316,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowDefinition() {
	    let localctx = new WindowDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 300, MySQLParser.RULE_windowDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3098;
	        this.windowName();
	        this.state = 3099;
	        this.match(MySQLParser.AS_SYMBOL);
	        this.state = 3100;
	        this.windowSpec();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowSpec() {
	    let localctx = new WindowSpecContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 302, MySQLParser.RULE_windowSpec);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3102;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 3103;
	        this.windowSpecDetails();
	        this.state = 3104;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowSpecDetails() {
	    let localctx = new WindowSpecDetailsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 304, MySQLParser.RULE_windowSpecDetails);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3107;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,317,this._ctx);
	        if(la_===1) {
	            this.state = 3106;
	            this.windowName();

	        }
	        this.state = 3112;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===405) {
	            this.state = 3109;
	            this.match(MySQLParser.PARTITION_SYMBOL);
	            this.state = 3110;
	            this.match(MySQLParser.BY_SYMBOL);
	            this.state = 3111;
	            this.orderList();
	        }

	        this.state = 3115;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===393) {
	            this.state = 3114;
	            this.orderClause();
	        }

	        this.state = 3118;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===432 || _la===484 || _la===683) {
	            this.state = 3117;
	            this.windowFrameClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameClause() {
	    let localctx = new WindowFrameClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 306, MySQLParser.RULE_windowFrameClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3120;
	        this.windowFrameUnits();
	        this.state = 3121;
	        this.windowFrameExtent();
	        this.state = 3123;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===680) {
	            this.state = 3122;
	            this.windowFrameExclusion();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameUnits() {
	    let localctx = new WindowFrameUnitsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 308, MySQLParser.RULE_windowFrameUnits);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3125;
	        _la = this._input.LA(1);
	        if(!(_la===432 || _la===484 || _la===683)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameExtent() {
	    let localctx = new WindowFrameExtentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 310, MySQLParser.RULE_windowFrameExtent);
	    try {
	        this.state = 3129;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 101:
	        case 247:
	        case 698:
	        case 747:
	        case 748:
	        case 749:
	        case 787:
	        case 790:
	        case 791:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3127;
	            this.windowFrameStart();
	            break;
	        case 30:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3128;
	            this.windowFrameBetween();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameStart() {
	    let localctx = new WindowFrameStartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 312, MySQLParser.RULE_windowFrameStart);
	    try {
	        this.state = 3145;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 698:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3131;
	            this.match(MySQLParser.UNBOUNDED_SYMBOL);
	            this.state = 3132;
	            this.match(MySQLParser.PRECEDING_SYMBOL);
	            break;
	        case 747:
	        case 748:
	        case 749:
	        case 790:
	        case 791:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3133;
	            this.ulonglong_number();
	            this.state = 3134;
	            this.match(MySQLParser.PRECEDING_SYMBOL);
	            break;
	        case 787:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3136;
	            this.match(MySQLParser.PARAM_MARKER);
	            this.state = 3137;
	            this.match(MySQLParser.PRECEDING_SYMBOL);
	            break;
	        case 247:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3138;
	            this.match(MySQLParser.INTERVAL_SYMBOL);
	            this.state = 3139;
	            this.expr(0);
	            this.state = 3140;
	            this.interval();
	            this.state = 3141;
	            this.match(MySQLParser.PRECEDING_SYMBOL);
	            break;
	        case 101:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3143;
	            this.match(MySQLParser.CURRENT_SYMBOL);
	            this.state = 3144;
	            this.match(MySQLParser.ROW_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameBetween() {
	    let localctx = new WindowFrameBetweenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 314, MySQLParser.RULE_windowFrameBetween);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3147;
	        this.match(MySQLParser.BETWEEN_SYMBOL);
	        this.state = 3148;
	        this.windowFrameBound();
	        this.state = 3149;
	        this.match(MySQLParser.AND_SYMBOL);
	        this.state = 3150;
	        this.windowFrameBound();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameBound() {
	    let localctx = new WindowFrameBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 316, MySQLParser.RULE_windowFrameBound);
	    try {
	        this.state = 3165;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,324,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3152;
	            this.windowFrameStart();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3153;
	            this.match(MySQLParser.UNBOUNDED_SYMBOL);
	            this.state = 3154;
	            this.match(MySQLParser.FOLLOWING_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3155;
	            this.ulonglong_number();
	            this.state = 3156;
	            this.match(MySQLParser.FOLLOWING_SYMBOL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3158;
	            this.match(MySQLParser.PARAM_MARKER);
	            this.state = 3159;
	            this.match(MySQLParser.FOLLOWING_SYMBOL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3160;
	            this.match(MySQLParser.INTERVAL_SYMBOL);
	            this.state = 3161;
	            this.expr(0);
	            this.state = 3162;
	            this.interval();
	            this.state = 3163;
	            this.match(MySQLParser.FOLLOWING_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFrameExclusion() {
	    let localctx = new WindowFrameExclusionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 318, MySQLParser.RULE_windowFrameExclusion);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3167;
	        this.match(MySQLParser.EXCLUDE_SYMBOL);
	        this.state = 3174;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 101:
	            this.state = 3168;
	            this.match(MySQLParser.CURRENT_SYMBOL);
	            this.state = 3169;
	            this.match(MySQLParser.ROW_SYMBOL);
	            break;
	        case 217:
	            this.state = 3170;
	            this.match(MySQLParser.GROUP_SYMBOL);
	            break;
	        case 697:
	            this.state = 3171;
	            this.match(MySQLParser.TIES_SYMBOL);
	            break;
	        case 373:
	            this.state = 3172;
	            this.match(MySQLParser.NO_SYMBOL);
	            this.state = 3173;
	            this.match(MySQLParser.OTHERS_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withClause() {
	    let localctx = new WithClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 320, MySQLParser.RULE_withClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3176;
	        this.match(MySQLParser.WITH_SYMBOL);
	        this.state = 3178;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,326,this._ctx);
	        if(la_===1) {
	            this.state = 3177;
	            this.match(MySQLParser.RECURSIVE_SYMBOL);

	        }
	        this.state = 3180;
	        this.commonTableExpression();
	        this.state = 3185;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,327,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3181;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3182;
	                this.commonTableExpression(); 
	            }
	            this.state = 3187;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,327,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonTableExpression() {
	    let localctx = new CommonTableExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 322, MySQLParser.RULE_commonTableExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3188;
	        this.identifier();
	        this.state = 3190;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===776) {
	            this.state = 3189;
	            this.columnInternalRefList();
	        }

	        this.state = 3192;
	        this.match(MySQLParser.AS_SYMBOL);
	        this.state = 3193;
	        this.subquery();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 324, MySQLParser.RULE_groupByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3195;
	        this.match(MySQLParser.GROUP_SYMBOL);
	        this.state = 3196;
	        this.match(MySQLParser.BY_SYMBOL);
	        this.state = 3197;
	        this.orderList();
	        this.state = 3199;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,329,this._ctx);
	        if(la_===1) {
	            this.state = 3198;
	            this.olapOption();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	olapOption() {
	    let localctx = new OlapOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 326, MySQLParser.RULE_olapOption);
	    try {
	        this.state = 3206;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,330,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3201;
	            this.match(MySQLParser.WITH_SYMBOL);
	            this.state = 3202;
	            this.match(MySQLParser.ROLLUP_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3203;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 3204;
	            this.match(MySQLParser.WITH_SYMBOL);
	            this.state = 3205;
	            this.match(MySQLParser.CUBE_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderClause() {
	    let localctx = new OrderClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 328, MySQLParser.RULE_orderClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3208;
	        this.match(MySQLParser.ORDER_SYMBOL);
	        this.state = 3209;
	        this.match(MySQLParser.BY_SYMBOL);
	        this.state = 3210;
	        this.orderList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	direction() {
	    let localctx = new DirectionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 330, MySQLParser.RULE_direction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3212;
	        _la = this._input.LA(1);
	        if(!(_la===18 || _la===134)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromClause() {
	    let localctx = new FromClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 332, MySQLParser.RULE_fromClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3214;
	        this.match(MySQLParser.FROM_SYMBOL);
	        this.state = 3217;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,331,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3215;
	            this.match(MySQLParser.DUAL_SYMBOL);
	            break;

	        case 2:
	            this.state = 3216;
	            this.tableReferenceList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableReferenceList() {
	    let localctx = new TableReferenceListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 334, MySQLParser.RULE_tableReferenceList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3219;
	        this.tableReference();
	        this.state = 3224;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,332,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3220;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3221;
	                this.tableReference(); 
	            }
	            this.state = 3226;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,332,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableValueConstructor() {
	    let localctx = new TableValueConstructorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 336, MySQLParser.RULE_tableValueConstructor);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3227;
	        this.match(MySQLParser.VALUES_SYMBOL);
	        this.state = 3228;
	        this.rowValueExplicit();
	        this.state = 3233;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,333,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3229;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3230;
	                this.rowValueExplicit(); 
	            }
	            this.state = 3235;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,333,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explicitTable() {
	    let localctx = new ExplicitTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 338, MySQLParser.RULE_explicitTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3236;
	        this.match(MySQLParser.TABLE_SYMBOL);
	        this.state = 3237;
	        this.tableRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rowValueExplicit() {
	    let localctx = new RowValueExplicitContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 340, MySQLParser.RULE_rowValueExplicit);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3239;
	        this.match(MySQLParser.ROW_SYMBOL);
	        this.state = 3240;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 3242;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,334,this._ctx);
	        if(la_===1) {
	            this.state = 3241;
	            this.values();

	        }
	        this.state = 3244;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectOption() {
	    let localctx = new SelectOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 342, MySQLParser.RULE_selectOption);
	    try {
	        this.state = 3254;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,335,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3246;
	            this.querySpecOption();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3247;
	            this.match(MySQLParser.SQL_NO_CACHE_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3248;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 3249;
	            this.match(MySQLParser.SQL_CACHE_SYMBOL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3250;
	            if (!( serverVersion >= 50704 && serverVersion < 50708)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50704 && serverVersion < 50708");
	            }
	            this.state = 3251;
	            this.match(MySQLParser.MAX_STATEMENT_TIME_SYMBOL);
	            this.state = 3252;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3253;
	            this.real_ulong_number();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockingClauseList() {
	    let localctx = new LockingClauseListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 344, MySQLParser.RULE_lockingClauseList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3257; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 3256;
	            this.lockingClause();
	            this.state = 3259; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===200 || _la===287);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockingClause() {
	    let localctx = new LockingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 346, MySQLParser.RULE_lockingClause);
	    try {
	        this.state = 3276;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 200:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3261;
	            this.match(MySQLParser.FOR_SYMBOL);
	            this.state = 3262;
	            this.lockStrengh();
	            this.state = 3266;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,337,this._ctx);
	            if(la_===1) {
	                this.state = 3263;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 3264;
	                this.match(MySQLParser.OF_SYMBOL);
	                this.state = 3265;
	                this.tableAliasRefList();

	            }
	            this.state = 3270;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,338,this._ctx);
	            if(la_===1) {
	                this.state = 3268;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 3269;
	                this.lockedRowAction();

	            }
	            break;
	        case 287:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3272;
	            this.match(MySQLParser.LOCK_SYMBOL);
	            this.state = 3273;
	            this.match(MySQLParser.IN_SYMBOL);
	            this.state = 3274;
	            this.match(MySQLParser.SHARE_SYMBOL);
	            this.state = 3275;
	            this.match(MySQLParser.MODE_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockStrengh() {
	    let localctx = new LockStrenghContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 348, MySQLParser.RULE_lockStrengh);
	    try {
	        this.state = 3281;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,340,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3278;
	            this.match(MySQLParser.UPDATE_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3279;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 3280;
	            this.match(MySQLParser.SHARE_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockedRowAction() {
	    let localctx = new LockedRowActionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 350, MySQLParser.RULE_lockedRowAction);
	    try {
	        this.state = 3286;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 669:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3283;
	            this.match(MySQLParser.SKIP_SYMBOL);
	            this.state = 3284;
	            this.match(MySQLParser.LOCKED_SYMBOL);
	            break;
	        case 671:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3285;
	            this.match(MySQLParser.NOWAIT_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItemList() {
	    let localctx = new SelectItemListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 352, MySQLParser.RULE_selectItemList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3290;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,342,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3288;
	            this.selectItem();
	            break;

	        case 2:
	            this.state = 3289;
	            this.match(MySQLParser.MULT_OPERATOR);
	            break;

	        }
	        this.state = 3296;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,343,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3292;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3293;
	                this.selectItem(); 
	            }
	            this.state = 3298;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,343,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectItem() {
	    let localctx = new SelectItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 354, MySQLParser.RULE_selectItem);
	    try {
	        this.state = 3304;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,345,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3299;
	            this.tableWild();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3300;
	            this.expr(0);
	            this.state = 3302;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,344,this._ctx);
	            if(la_===1) {
	                this.state = 3301;
	                this.selectAlias();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectAlias() {
	    let localctx = new SelectAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 356, MySQLParser.RULE_selectAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3307;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,346,this._ctx);
	        if(la_===1) {
	            this.state = 3306;
	            this.match(MySQLParser.AS_SYMBOL);

	        }
	        this.state = 3311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,347,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3309;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 3310;
	            this.textStringLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 358, MySQLParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3313;
	        this.match(MySQLParser.WHERE_SYMBOL);
	        this.state = 3314;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableReference() {
	    let localctx = new TableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 360, MySQLParser.RULE_tableReference);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3326;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,349,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3316;
	            this.tableFactor();
	            break;

	        case 2:
	            this.state = 3317;
	            this.match(MySQLParser.OPEN_CURLY_SYMBOL);
	            this.state = 3321;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,348,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3318;
	                if (!( serverVersion < 80017)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
	                }
	                this.state = 3319;
	                this.identifier();
	                break;

	            case 2:
	                this.state = 3320;
	                this.match(MySQLParser.OJ_SYMBOL);
	                break;

	            }
	            this.state = 3323;
	            this.escapedTableReference();
	            this.state = 3324;
	            this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
	            break;

	        }
	        this.state = 3331;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,350,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3328;
	                this.joinedTable(); 
	            }
	            this.state = 3333;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,350,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	escapedTableReference() {
	    let localctx = new EscapedTableReferenceContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 362, MySQLParser.RULE_escapedTableReference);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3334;
	        this.tableFactor();
	        this.state = 3338;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===98 || _la===239 || _la===261 || _la===272 || _la===359 || _la===478 || _la===555) {
	            this.state = 3335;
	            this.joinedTable();
	            this.state = 3340;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinedTable() {
	    let localctx = new JoinedTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 364, MySQLParser.RULE_joinedTable);
	    try {
	        this.state = 3360;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 98:
	        case 239:
	        case 261:
	        case 555:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3341;
	            this.innerJoinType();
	            this.state = 3342;
	            this.tableReference();
	            this.state = 3347;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,352,this._ctx);
	            if(la_===1) {
	                this.state = 3343;
	                this.match(MySQLParser.ON_SYMBOL);
	                this.state = 3344;
	                this.expr(0);

	            } else if(la_===2) {
	                this.state = 3345;
	                this.match(MySQLParser.USING_SYMBOL);
	                this.state = 3346;
	                this.identifierListWithParentheses();

	            }
	            break;
	        case 272:
	        case 478:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3349;
	            this.outerJoinType();
	            this.state = 3350;
	            this.tableReference();
	            this.state = 3355;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 383:
	                this.state = 3351;
	                this.match(MySQLParser.ON_SYMBOL);
	                this.state = 3352;
	                this.expr(0);
	                break;
	            case 621:
	                this.state = 3353;
	                this.match(MySQLParser.USING_SYMBOL);
	                this.state = 3354;
	                this.identifierListWithParentheses();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 359:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3357;
	            this.naturalJoinType();
	            this.state = 3358;
	            this.tableFactor();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	naturalJoinType() {
	    let localctx = new NaturalJoinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 366, MySQLParser.RULE_naturalJoinType);
	    var _la = 0;
	    try {
	        this.state = 3373;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,357,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3362;
	            this.match(MySQLParser.NATURAL_SYMBOL);
	            this.state = 3364;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===239) {
	                this.state = 3363;
	                this.match(MySQLParser.INNER_SYMBOL);
	            }

	            this.state = 3366;
	            this.match(MySQLParser.JOIN_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3367;
	            this.match(MySQLParser.NATURAL_SYMBOL);
	            this.state = 3368;
	            _la = this._input.LA(1);
	            if(!(_la===272 || _la===478)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3370;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===395) {
	                this.state = 3369;
	                this.match(MySQLParser.OUTER_SYMBOL);
	            }

	            this.state = 3372;
	            this.match(MySQLParser.JOIN_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	innerJoinType() {
	    let localctx = new InnerJoinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 368, MySQLParser.RULE_innerJoinType);
	    var _la = 0;
	    try {
	        this.state = 3380;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 98:
	        case 239:
	        case 261:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3376;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===98 || _la===239) {
	                this.state = 3375;
	                localctx.type = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===98 || _la===239)) {
	                    localctx.type = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 3378;
	            this.match(MySQLParser.JOIN_SYMBOL);
	            break;
	        case 555:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3379;
	            localctx.type = this.match(MySQLParser.STRAIGHT_JOIN_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	outerJoinType() {
	    let localctx = new OuterJoinTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 370, MySQLParser.RULE_outerJoinType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3382;
	        localctx.type = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===272 || _la===478)) {
	            localctx.type = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 3384;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===395) {
	            this.state = 3383;
	            this.match(MySQLParser.OUTER_SYMBOL);
	        }

	        this.state = 3386;
	        this.match(MySQLParser.JOIN_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableFactor() {
	    let localctx = new TableFactorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 372, MySQLParser.RULE_tableFactor);
	    try {
	        this.state = 3394;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,361,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3388;
	            this.singleTable();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3389;
	            this.singleTableParens();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3390;
	            this.derivedTable();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3391;
	            this.tableReferenceListParens();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3392;
	            if (!( serverVersion >= 80004)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80004");
	            }
	            this.state = 3393;
	            this.tableFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTable() {
	    let localctx = new SingleTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 374, MySQLParser.RULE_singleTable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3396;
	        this.tableRef();
	        this.state = 3398;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,362,this._ctx);
	        if(la_===1) {
	            this.state = 3397;
	            this.usePartition();

	        }
	        this.state = 3401;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,363,this._ctx);
	        if(la_===1) {
	            this.state = 3400;
	            this.tableAlias();

	        }
	        this.state = 3404;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,364,this._ctx);
	        if(la_===1) {
	            this.state = 3403;
	            this.indexHintList();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	singleTableParens() {
	    let localctx = new SingleTableParensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 376, MySQLParser.RULE_singleTableParens);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3406;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 3409;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,365,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3407;
	            this.singleTable();
	            break;

	        case 2:
	            this.state = 3408;
	            this.singleTableParens();
	            break;

	        }
	        this.state = 3411;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	derivedTable() {
	    let localctx = new DerivedTableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 378, MySQLParser.RULE_derivedTable);
	    try {
	        this.state = 3430;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,370,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3413;
	            this.subquery();
	            this.state = 3415;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,366,this._ctx);
	            if(la_===1) {
	                this.state = 3414;
	                this.tableAlias();

	            }
	            this.state = 3419;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,367,this._ctx);
	            if(la_===1) {
	                this.state = 3417;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 3418;
	                this.columnInternalRefList();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3421;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 3422;
	            this.match(MySQLParser.LATERAL_SYMBOL);
	            this.state = 3423;
	            this.subquery();
	            this.state = 3425;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,368,this._ctx);
	            if(la_===1) {
	                this.state = 3424;
	                this.tableAlias();

	            }
	            this.state = 3428;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,369,this._ctx);
	            if(la_===1) {
	                this.state = 3427;
	                this.columnInternalRefList();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableReferenceListParens() {
	    let localctx = new TableReferenceListParensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 380, MySQLParser.RULE_tableReferenceListParens);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3432;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 3435;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,371,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3433;
	            this.tableReferenceList();
	            break;

	        case 2:
	            this.state = 3434;
	            this.tableReferenceListParens();
	            break;

	        }
	        this.state = 3437;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableFunction() {
	    let localctx = new TableFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 382, MySQLParser.RULE_tableFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3439;
	        this.match(MySQLParser.JSON_TABLE_SYMBOL);
	        this.state = 3440;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 3441;
	        this.expr(0);
	        this.state = 3442;
	        this.match(MySQLParser.COMMA_SYMBOL);
	        this.state = 3443;
	        this.textStringLiteral();
	        this.state = 3444;
	        this.columnsClause();
	        this.state = 3445;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	        this.state = 3447;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,372,this._ctx);
	        if(la_===1) {
	            this.state = 3446;
	            this.tableAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnsClause() {
	    let localctx = new ColumnsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 384, MySQLParser.RULE_columnsClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3449;
	        this.match(MySQLParser.COLUMNS_SYMBOL);
	        this.state = 3450;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 3451;
	        this.jtColumn();
	        this.state = 3456;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 3452;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 3453;
	            this.jtColumn();
	            this.state = 3458;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 3459;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jtColumn() {
	    let localctx = new JtColumnContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 386, MySQLParser.RULE_jtColumn);
	    var _la = 0;
	    try {
	        this.state = 3484;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,377,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3461;
	            this.identifier();
	            this.state = 3462;
	            this.match(MySQLParser.FOR_SYMBOL);
	            this.state = 3463;
	            this.match(MySQLParser.ORDINALITY_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3465;
	            this.identifier();
	            this.state = 3466;
	            this.dataType();
	            this.state = 3469;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,374,this._ctx);
	            if(la_===1) {
	                this.state = 3467;
	                if (!( serverVersion >= 80014)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	                }
	                this.state = 3468;
	                this.collate();

	            }
	            this.state = 3472;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===174) {
	                this.state = 3471;
	                this.match(MySQLParser.EXISTS_SYMBOL);
	            }

	            this.state = 3474;
	            this.match(MySQLParser.PATH_SYMBOL);
	            this.state = 3475;
	            this.textStringLiteral();
	            this.state = 3477;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===128 || _la===165 || _la===376) {
	                this.state = 3476;
	                this.onEmptyOrError();
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3479;
	            this.match(MySQLParser.NESTED_SYMBOL);
	            this.state = 3480;
	            this.match(MySQLParser.PATH_SYMBOL);
	            this.state = 3481;
	            this.textStringLiteral();
	            this.state = 3482;
	            this.columnsClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onEmptyOrError() {
	    let localctx = new OnEmptyOrErrorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 388, MySQLParser.RULE_onEmptyOrError);
	    var _la = 0;
	    try {
	        this.state = 3494;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,380,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3486;
	            this.onEmpty();
	            this.state = 3488;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===128 || _la===165 || _la===376) {
	                this.state = 3487;
	                this.onError();
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3490;
	            this.onError();
	            this.state = 3492;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===128 || _la===165 || _la===376) {
	                this.state = 3491;
	                this.onEmpty();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onEmpty() {
	    let localctx = new OnEmptyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 390, MySQLParser.RULE_onEmpty);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3496;
	        this.jtOnResponse();
	        this.state = 3497;
	        this.match(MySQLParser.ON_SYMBOL);
	        this.state = 3498;
	        this.match(MySQLParser.EMPTY_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onError() {
	    let localctx = new OnErrorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 392, MySQLParser.RULE_onError);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3500;
	        this.jtOnResponse();
	        this.state = 3501;
	        this.match(MySQLParser.ON_SYMBOL);
	        this.state = 3502;
	        this.match(MySQLParser.ERROR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jtOnResponse() {
	    let localctx = new JtOnResponseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 394, MySQLParser.RULE_jtOnResponse);
	    try {
	        this.state = 3508;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 165:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3504;
	            this.match(MySQLParser.ERROR_SYMBOL);
	            break;
	        case 376:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3505;
	            this.match(MySQLParser.NULL_SYMBOL);
	            break;
	        case 128:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3506;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            this.state = 3507;
	            this.textStringLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unionOption() {
	    let localctx = new UnionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 396, MySQLParser.RULE_unionOption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3510;
	        _la = this._input.LA(1);
	        if(!(_la===10 || _la===143)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableAlias() {
	    let localctx = new TableAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 398, MySQLParser.RULE_tableAlias);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3515;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,382,this._ctx);
	        if(la_===1) {
	            this.state = 3512;
	            this.match(MySQLParser.AS_SYMBOL);

	        } else if(la_===2) {
	            this.state = 3513;
	            if (!( serverVersion < 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
	            }
	            this.state = 3514;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 3517;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHintList() {
	    let localctx = new IndexHintListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 400, MySQLParser.RULE_indexHintList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3519;
	        this.indexHint();
	        this.state = 3524;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,383,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3520;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3521;
	                this.indexHint(); 
	            }
	            this.state = 3526;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,383,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHint() {
	    let localctx = new IndexHintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 402, MySQLParser.RULE_indexHint);
	    var _la = 0;
	    try {
	        this.state = 3547;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 198:
	        case 232:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3527;
	            this.indexHintType();
	            this.state = 3528;
	            this.keyOrIndex();
	            this.state = 3530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200) {
	                this.state = 3529;
	                this.indexHintClause();
	            }

	            this.state = 3532;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 3533;
	            this.indexList();
	            this.state = 3534;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 620:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3536;
	            this.match(MySQLParser.USE_SYMBOL);
	            this.state = 3537;
	            this.keyOrIndex();
	            this.state = 3539;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200) {
	                this.state = 3538;
	                this.indexHintClause();
	            }

	            this.state = 3541;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 3543;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,386,this._ctx);
	            if(la_===1) {
	                this.state = 3542;
	                this.indexList();

	            }
	            this.state = 3545;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHintType() {
	    let localctx = new IndexHintTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 404, MySQLParser.RULE_indexHintType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3549;
	        _la = this._input.LA(1);
	        if(!(_la===198 || _la===232)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyOrIndex() {
	    let localctx = new KeyOrIndexContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 406, MySQLParser.RULE_keyOrIndex);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3551;
	        _la = this._input.LA(1);
	        if(!(_la===236 || _la===265)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintKeyType() {
	    let localctx = new ConstraintKeyTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 408, MySQLParser.RULE_constraintKeyType);
	    var _la = 0;
	    try {
	        this.state = 3559;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 420:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3553;
	            this.match(MySQLParser.PRIMARY_SYMBOL);
	            this.state = 3554;
	            this.match(MySQLParser.KEY_SYMBOL);
	            break;
	        case 609:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3555;
	            this.match(MySQLParser.UNIQUE_SYMBOL);
	            this.state = 3557;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===236 || _la===265) {
	                this.state = 3556;
	                this.keyOrIndex();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexHintClause() {
	    let localctx = new IndexHintClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 410, MySQLParser.RULE_indexHintClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3561;
	        this.match(MySQLParser.FOR_SYMBOL);
	        this.state = 3567;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 261:
	            this.state = 3562;
	            this.match(MySQLParser.JOIN_SYMBOL);
	            break;
	        case 393:
	            this.state = 3563;
	            this.match(MySQLParser.ORDER_SYMBOL);
	            this.state = 3564;
	            this.match(MySQLParser.BY_SYMBOL);
	            break;
	        case 217:
	            this.state = 3565;
	            this.match(MySQLParser.GROUP_SYMBOL);
	            this.state = 3566;
	            this.match(MySQLParser.BY_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexList() {
	    let localctx = new IndexListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 412, MySQLParser.RULE_indexList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3569;
	        this.indexListElement();
	        this.state = 3574;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 3570;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 3571;
	            this.indexListElement();
	            this.state = 3576;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexListElement() {
	    let localctx = new IndexListElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 414, MySQLParser.RULE_indexListElement);
	    try {
	        this.state = 3579;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,392,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3577;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3578;
	            this.match(MySQLParser.PRIMARY_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateStatement() {
	    let localctx = new UpdateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 416, MySQLParser.RULE_updateStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3583;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,393,this._ctx);
	        if(la_===1) {
	            this.state = 3581;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 3582;
	            this.withClause();

	        }
	        this.state = 3585;
	        this.match(MySQLParser.UPDATE_SYMBOL);
	        this.state = 3587;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,394,this._ctx);
	        if(la_===1) {
	            this.state = 3586;
	            this.match(MySQLParser.LOW_PRIORITY_SYMBOL);

	        }
	        this.state = 3590;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,395,this._ctx);
	        if(la_===1) {
	            this.state = 3589;
	            this.match(MySQLParser.IGNORE_SYMBOL);

	        }
	        this.state = 3592;
	        this.tableReferenceList();
	        this.state = 3593;
	        this.match(MySQLParser.SET_SYMBOL);
	        this.state = 3594;
	        this.updateList();
	        this.state = 3596;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===643) {
	            this.state = 3595;
	            this.whereClause();
	        }

	        this.state = 3599;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===393) {
	            this.state = 3598;
	            this.orderClause();
	        }

	        this.state = 3602;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===276) {
	            this.state = 3601;
	            this.simpleLimitClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionOrLockingStatement() {
	    let localctx = new TransactionOrLockingStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 418, MySQLParser.RULE_transactionOrLockingStatement);
	    try {
	        this.state = 3608;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,399,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3604;
	            this.transactionStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3605;
	            this.savepointStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3606;
	            this.lockStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3607;
	            this.xaStatement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionStatement() {
	    let localctx = new TransactionStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 420, MySQLParser.RULE_transactionStatement);
	    var _la = 0;
	    try {
	        this.state = 3635;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 543:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3610;
	            this.match(MySQLParser.START_SYMBOL);
	            this.state = 3611;
	            this.match(MySQLParser.TRANSACTION_SYMBOL);
	            this.state = 3615;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,400,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 3612;
	                    this.transactionCharacteristic(); 
	                }
	                this.state = 3617;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,400,this._ctx);
	            }

	            break;
	        case 77:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3618;
	            this.match(MySQLParser.COMMIT_SYMBOL);
	            this.state = 3620;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===647) {
	                this.state = 3619;
	                this.match(MySQLParser.WORK_SYMBOL);
	            }

	            this.state = 3627;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===15) {
	                this.state = 3622;
	                this.match(MySQLParser.AND_SYMBOL);
	                this.state = 3624;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===373) {
	                    this.state = 3623;
	                    this.match(MySQLParser.NO_SYMBOL);
	                }

	                this.state = 3626;
	                this.match(MySQLParser.CHAIN_SYMBOL);
	            }

	            this.state = 3633;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===373 || _la===450) {
	                this.state = 3630;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===373) {
	                    this.state = 3629;
	                    this.match(MySQLParser.NO_SYMBOL);
	                }

	                this.state = 3632;
	                this.match(MySQLParser.RELEASE_SYMBOL);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beginWork() {
	    let localctx = new BeginWorkContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 422, MySQLParser.RULE_beginWork);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3637;
	        this.match(MySQLParser.BEGIN_SYMBOL);
	        this.state = 3639;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===647) {
	            this.state = 3638;
	            this.match(MySQLParser.WORK_SYMBOL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionCharacteristic() {
	    let localctx = new TransactionCharacteristicContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 424, MySQLParser.RULE_transactionCharacteristic);
	    var _la = 0;
	    try {
	        this.state = 3647;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,408,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3641;
	            this.match(MySQLParser.WITH_SYMBOL);
	            this.state = 3642;
	            this.match(MySQLParser.CONSISTENT_SYMBOL);
	            this.state = 3643;
	            this.match(MySQLParser.SNAPSHOT_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3644;
	            if (!( serverVersion >= 50605)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50605");
	            }
	            this.state = 3645;
	            this.match(MySQLParser.READ_SYMBOL);
	            this.state = 3646;
	            _la = this._input.LA(1);
	            if(!(_la===386 || _la===649)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	savepointStatement() {
	    let localctx = new SavepointStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 426, MySQLParser.RULE_savepointStatement);
	    var _la = 0;
	    try {
	        this.state = 3678;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 489:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3649;
	            this.match(MySQLParser.SAVEPOINT_SYMBOL);
	            this.state = 3650;
	            this.identifier();
	            break;
	        case 480:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3651;
	            this.match(MySQLParser.ROLLBACK_SYMBOL);
	            this.state = 3653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===647) {
	                this.state = 3652;
	                this.match(MySQLParser.WORK_SYMBOL);
	            }

	            this.state = 3673;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 590:
	                this.state = 3655;
	                this.match(MySQLParser.TO_SYMBOL);
	                this.state = 3657;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,410,this._ctx);
	                if(la_===1) {
	                    this.state = 3656;
	                    this.match(MySQLParser.SAVEPOINT_SYMBOL);

	                }
	                this.state = 3659;
	                this.identifier();
	                break;
	            case -1:
	            case 15:
	            case 373:
	            case 450:
	            case 774:
	                this.state = 3665;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===15) {
	                    this.state = 3660;
	                    this.match(MySQLParser.AND_SYMBOL);
	                    this.state = 3662;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===373) {
	                        this.state = 3661;
	                        this.match(MySQLParser.NO_SYMBOL);
	                    }

	                    this.state = 3664;
	                    this.match(MySQLParser.CHAIN_SYMBOL);
	                }

	                this.state = 3671;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===373 || _la===450) {
	                    this.state = 3668;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===373) {
	                        this.state = 3667;
	                        this.match(MySQLParser.NO_SYMBOL);
	                    }

	                    this.state = 3670;
	                    this.match(MySQLParser.RELEASE_SYMBOL);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        case 450:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3675;
	            this.match(MySQLParser.RELEASE_SYMBOL);
	            this.state = 3676;
	            this.match(MySQLParser.SAVEPOINT_SYMBOL);
	            this.state = 3677;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockStatement() {
	    let localctx = new LockStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 428, MySQLParser.RULE_lockStatement);
	    var _la = 0;
	    try {
	        this.state = 3702;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,419,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3680;
	            this.match(MySQLParser.LOCK_SYMBOL);
	            this.state = 3681;
	            _la = this._input.LA(1);
	            if(!(_la===571 || _la===574)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3682;
	            this.lockItem();
	            this.state = 3687;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 3683;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3684;
	                this.lockItem();
	                this.state = 3689;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3690;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 3691;
	            this.match(MySQLParser.LOCK_SYMBOL);
	            this.state = 3692;
	            this.match(MySQLParser.INSTANCE_SYMBOL);
	            this.state = 3693;
	            this.match(MySQLParser.FOR_SYMBOL);
	            this.state = 3694;
	            this.match(MySQLParser.BACKUP_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3695;
	            this.match(MySQLParser.UNLOCK_SYMBOL);
	            this.state = 3700;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,418,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 3696;
	                this.match(MySQLParser.TABLES_SYMBOL);
	                break;

	            case 2:
	                this.state = 3697;
	                this.match(MySQLParser.TABLE_SYMBOL);
	                break;

	            case 3:
	                this.state = 3698;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 3699;
	                this.match(MySQLParser.INSTANCE_SYMBOL);
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockItem() {
	    let localctx = new LockItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 430, MySQLParser.RULE_lockItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3704;
	        this.tableRef();
	        this.state = 3706;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,420,this._ctx);
	        if(la_===1) {
	            this.state = 3705;
	            this.tableAlias();

	        }
	        this.state = 3708;
	        this.lockOption();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lockOption() {
	    let localctx = new LockOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 432, MySQLParser.RULE_lockOption);
	    var _la = 0;
	    try {
	        this.state = 3718;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 435:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3710;
	            this.match(MySQLParser.READ_SYMBOL);
	            this.state = 3712;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===284) {
	                this.state = 3711;
	                this.match(MySQLParser.LOCAL_SYMBOL);
	            }

	            break;
	        case 295:
	        case 649:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3715;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===295) {
	                this.state = 3714;
	                this.match(MySQLParser.LOW_PRIORITY_SYMBOL);
	            }

	            this.state = 3717;
	            this.match(MySQLParser.WRITE_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaStatement() {
	    let localctx = new XaStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 434, MySQLParser.RULE_xaStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3720;
	        this.match(MySQLParser.XA_SYMBOL);
	        this.state = 3747;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 29:
	        case 543:
	            this.state = 3721;
	            _la = this._input.LA(1);
	            if(!(_la===29 || _la===543)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3722;
	            this.xid();
	            this.state = 3724;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===261 || _la===472) {
	                this.state = 3723;
	                _la = this._input.LA(1);
	                if(!(_la===261 || _la===472)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        case 159:
	            this.state = 3726;
	            this.match(MySQLParser.END_SYMBOL);
	            this.state = 3727;
	            this.xid();
	            this.state = 3733;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===566) {
	                this.state = 3728;
	                this.match(MySQLParser.SUSPEND_SYMBOL);
	                this.state = 3731;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===200) {
	                    this.state = 3729;
	                    this.match(MySQLParser.FOR_SYMBOL);
	                    this.state = 3730;
	                    this.match(MySQLParser.MIGRATE_SYMBOL);
	                }

	            }

	            break;
	        case 417:
	            this.state = 3735;
	            this.match(MySQLParser.PREPARE_SYMBOL);
	            this.state = 3736;
	            this.xid();
	            break;
	        case 77:
	            this.state = 3737;
	            this.match(MySQLParser.COMMIT_SYMBOL);
	            this.state = 3738;
	            this.xid();
	            this.state = 3741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===384) {
	                this.state = 3739;
	                this.match(MySQLParser.ONE_SYMBOL);
	                this.state = 3740;
	                this.match(MySQLParser.PHASE_SYMBOL);
	            }

	            break;
	        case 480:
	            this.state = 3743;
	            this.match(MySQLParser.ROLLBACK_SYMBOL);
	            this.state = 3744;
	            this.xid();
	            break;
	        case 439:
	            this.state = 3745;
	            this.match(MySQLParser.RECOVER_SYMBOL);
	            this.state = 3746;
	            this.xaConvert();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xaConvert() {
	    let localctx = new XaConvertContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 436, MySQLParser.RULE_xaConvert);
	    var _la = 0;
	    try {
	        this.state = 3755;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,430,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3749;
	            if (!( serverVersion >= 50704)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50704");
	            }
	            this.state = 3752;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===94) {
	                this.state = 3750;
	                this.match(MySQLParser.CONVERT_SYMBOL);
	                this.state = 3751;
	                this.match(MySQLParser.XID_SYMBOL);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	xid() {
	    let localctx = new XidContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 438, MySQLParser.RULE_xid);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3757;
	        this.textString();
	        this.state = 3764;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===773) {
	            this.state = 3758;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 3759;
	            this.textString();
	            this.state = 3762;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 3760;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3761;
	                this.ulong_number();
	            }

	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replicationStatement() {
	    let localctx = new ReplicationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 440, MySQLParser.RULE_replicationStatement);
	    var _la = 0;
	    try {
	        this.state = 3799;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,436,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3766;
	            this.match(MySQLParser.PURGE_SYMBOL);
	            this.state = 3767;
	            _la = this._input.LA(1);
	            if(!(_la===32 || _la===316)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 3768;
	            this.match(MySQLParser.LOGS_SYMBOL);
	            this.state = 3773;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 590:
	                this.state = 3769;
	                this.match(MySQLParser.TO_SYMBOL);
	                this.state = 3770;
	                this.textLiteral();
	                break;
	            case 28:
	                this.state = 3771;
	                this.match(MySQLParser.BEFORE_SYMBOL);
	                this.state = 3772;
	                this.expr(0);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3775;
	            this.changeMaster();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3776;
	            this.match(MySQLParser.RESET_SYMBOL);
	            this.state = 3777;
	            this.resetOption();
	            this.state = 3782;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 3778;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3779;
	                this.resetOption();
	                this.state = 3784;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3785;
	            if (!( serverVersion > 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion > 80000");
	            }
	            this.state = 3786;
	            this.match(MySQLParser.RESET_SYMBOL);
	            this.state = 3787;
	            this.match(MySQLParser.PERSIST_SYMBOL);
	            this.state = 3791;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===231) {
	                this.state = 3788;
	                this.ifExists();
	                this.state = 3789;
	                this.identifier();
	            }

	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3793;
	            this.slave();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3794;
	            if (!( serverVersion >= 50700)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
	            }
	            this.state = 3795;
	            this.changeReplication();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3796;
	            this.replicationLoad();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3797;
	            if (!( serverVersion > 50706)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion > 50706");
	            }
	            this.state = 3798;
	            this.groupReplication();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resetOption() {
	    let localctx = new ResetOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 442, MySQLParser.RULE_resetOption);
	    try {
	        this.state = 3815;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,440,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3801;
	            localctx.option = this.match(MySQLParser.MASTER_SYMBOL);
	            this.state = 3803;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,437,this._ctx);
	            if(la_===1) {
	                this.state = 3802;
	                this.masterResetOptions();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3805;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 3806;
	            localctx.option = this.match(MySQLParser.QUERY_SYMBOL);
	            this.state = 3807;
	            this.match(MySQLParser.CACHE_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3808;
	            localctx.option = this.match(MySQLParser.SLAVE_SYMBOL);
	            this.state = 3810;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,438,this._ctx);
	            if(la_===1) {
	                this.state = 3809;
	                this.match(MySQLParser.ALL_SYMBOL);

	            }
	            this.state = 3813;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,439,this._ctx);
	            if(la_===1) {
	                this.state = 3812;
	                this.channel();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	masterResetOptions() {
	    let localctx = new MasterResetOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 444, MySQLParser.RULE_masterResetOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3817;
	        if (!( serverVersion >= 80000)) {
	            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	        }
	        this.state = 3818;
	        this.match(MySQLParser.TO_SYMBOL);
	        this.state = 3823;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,441,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 3819;
	            if (!( serverVersion < 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
	            }
	            this.state = 3820;
	            this.real_ulong_number();
	            break;

	        case 2:
	            this.state = 3821;
	            if (!( serverVersion >= 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	            }
	            this.state = 3822;
	            this.real_ulonglong_number();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replicationLoad() {
	    let localctx = new ReplicationLoadContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 446, MySQLParser.RULE_replicationLoad);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3825;
	        this.match(MySQLParser.LOAD_SYMBOL);
	        this.state = 3829;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 112:
	            this.state = 3826;
	            this.match(MySQLParser.DATA_SYMBOL);
	            break;
	        case 574:
	            this.state = 3827;
	            this.match(MySQLParser.TABLE_SYMBOL);
	            this.state = 3828;
	            this.tableRef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 3831;
	        this.match(MySQLParser.FROM_SYMBOL);
	        this.state = 3832;
	        this.match(MySQLParser.MASTER_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changeMaster() {
	    let localctx = new ChangeMasterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 448, MySQLParser.RULE_changeMaster);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3834;
	        this.match(MySQLParser.CHANGE_SYMBOL);
	        this.state = 3835;
	        this.match(MySQLParser.MASTER_SYMBOL);
	        this.state = 3836;
	        this.match(MySQLParser.TO_SYMBOL);
	        this.state = 3837;
	        this.changeMasterOptions();
	        this.state = 3839;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,443,this._ctx);
	        if(la_===1) {
	            this.state = 3838;
	            this.channel();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changeMasterOptions() {
	    let localctx = new ChangeMasterOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 450, MySQLParser.RULE_changeMasterOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3841;
	        this.masterOption();
	        this.state = 3846;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,444,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3842;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3843;
	                this.masterOption(); 
	            }
	            this.state = 3848;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,444,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	masterOption() {
	    let localctx = new MasterOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 452, MySQLParser.RULE_masterOption);
	    try {
	        this.state = 3940;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 300:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3849;
	            this.match(MySQLParser.MASTER_HOST_SYMBOL);
	            this.state = 3850;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3851;
	            this.textStringNoLinebreak();
	            break;
	        case 729:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3852;
	            this.match(MySQLParser.NETWORK_NAMESPACE_SYMBOL);
	            this.state = 3853;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3854;
	            this.textStringNoLinebreak();
	            break;
	        case 297:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3855;
	            this.match(MySQLParser.MASTER_BIND_SYMBOL);
	            this.state = 3856;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3857;
	            this.textStringNoLinebreak();
	            break;
	        case 318:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3858;
	            this.match(MySQLParser.MASTER_USER_SYMBOL);
	            this.state = 3859;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3860;
	            this.textStringNoLinebreak();
	            break;
	        case 303:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 3861;
	            this.match(MySQLParser.MASTER_PASSWORD_SYMBOL);
	            this.state = 3862;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3863;
	            this.textStringNoLinebreak();
	            break;
	        case 304:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 3864;
	            this.match(MySQLParser.MASTER_PORT_SYMBOL);
	            this.state = 3865;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3866;
	            this.ulong_number();
	            break;
	        case 298:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 3867;
	            this.match(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL);
	            this.state = 3868;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3869;
	            this.ulong_number();
	            break;
	        case 305:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 3870;
	            this.match(MySQLParser.MASTER_RETRY_COUNT_SYMBOL);
	            this.state = 3871;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3872;
	            this.ulong_number();
	            break;
	        case 299:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 3873;
	            this.match(MySQLParser.MASTER_DELAY_SYMBOL);
	            this.state = 3874;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3875;
	            this.ulong_number();
	            break;
	        case 314:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 3876;
	            this.match(MySQLParser.MASTER_SSL_SYMBOL);
	            this.state = 3877;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3878;
	            this.ulong_number();
	            break;
	        case 308:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 3879;
	            this.match(MySQLParser.MASTER_SSL_CA_SYMBOL);
	            this.state = 3880;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3881;
	            this.textStringNoLinebreak();
	            break;
	        case 307:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 3882;
	            this.match(MySQLParser.MASTER_SSL_CAPATH_SYMBOL);
	            this.state = 3883;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3884;
	            this.textStringNoLinebreak();
	            break;
	        case 317:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 3885;
	            this.match(MySQLParser.MASTER_TLS_VERSION_SYMBOL);
	            this.state = 3886;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3887;
	            this.textStringNoLinebreak();
	            break;
	        case 309:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 3888;
	            this.match(MySQLParser.MASTER_SSL_CERT_SYMBOL);
	            this.state = 3889;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3890;
	            this.textStringNoLinebreak();
	            break;
	        case 738:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 3891;
	            this.match(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL);
	            this.state = 3892;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3893;
	            this.masterTlsCiphersuitesDef();
	            break;
	        case 310:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 3894;
	            this.match(MySQLParser.MASTER_SSL_CIPHER_SYMBOL);
	            this.state = 3895;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3896;
	            this.textStringNoLinebreak();
	            break;
	        case 313:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 3897;
	            this.match(MySQLParser.MASTER_SSL_KEY_SYMBOL);
	            this.state = 3898;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3899;
	            this.textStringNoLinebreak();
	            break;
	        case 315:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 3900;
	            this.match(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL);
	            this.state = 3901;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3902;
	            this.ulong_number();
	            break;
	        case 311:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 3903;
	            this.match(MySQLParser.MASTER_SSL_CRL_SYMBOL);
	            this.state = 3904;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3905;
	            this.textLiteral();
	            break;
	        case 312:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 3906;
	            this.match(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL);
	            this.state = 3907;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3908;
	            this.textStringNoLinebreak();
	            break;
	        case 712:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 3909;
	            this.match(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL);
	            this.state = 3910;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3911;
	            this.textStringNoLinebreak();
	            break;
	        case 713:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 3912;
	            this.match(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL);
	            this.state = 3913;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3914;
	            this.ulong_number();
	            break;
	        case 319:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 3915;
	            this.match(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL);
	            this.state = 3916;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3917;
	            this.ulong_number();
	            break;
	        case 233:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 3918;
	            this.match(MySQLParser.IGNORE_SERVER_IDS_SYMBOL);
	            this.state = 3919;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3920;
	            this.serverIdList();
	            break;
	        case 735:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 3921;
	            this.match(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL);
	            this.state = 3922;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3923;
	            this.textStringLiteral();
	            break;
	        case 736:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 3924;
	            this.match(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL);
	            this.state = 3925;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3926;
	            this.ulong_number();
	            break;
	        case 296:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 3927;
	            this.match(MySQLParser.MASTER_AUTO_POSITION_SYMBOL);
	            this.state = 3928;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3929;
	            this.ulong_number();
	            break;
	        case 737:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 3930;
	            this.match(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL);
	            this.state = 3931;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3932;
	            this.privilegeCheckDef();
	            break;
	        case 739:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 3933;
	            this.match(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL);
	            this.state = 3934;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3935;
	            this.ulong_number();
	            break;
	        case 742:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 3936;
	            this.match(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL);
	            this.state = 3937;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3938;
	            this.tablePrimaryKeyCheckDef();
	            break;
	        case 301:
	        case 302:
	        case 447:
	        case 448:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 3939;
	            this.masterFileDef();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	privilegeCheckDef() {
	    let localctx = new PrivilegeCheckDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 454, MySQLParser.RULE_privilegeCheckDef);
	    try {
	        this.state = 3944;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,446,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3942;
	            this.userIdentifierOrText();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3943;
	            this.match(MySQLParser.NULL_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablePrimaryKeyCheckDef() {
	    let localctx = new TablePrimaryKeyCheckDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 456, MySQLParser.RULE_tablePrimaryKeyCheckDef);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3946;
	        _la = this._input.LA(1);
	        if(!(_la===383 || _la===743 || _la===744)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	masterTlsCiphersuitesDef() {
	    let localctx = new MasterTlsCiphersuitesDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 458, MySQLParser.RULE_masterTlsCiphersuitesDef);
	    try {
	        this.state = 3950;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,447,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3948;
	            this.textStringNoLinebreak();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3949;
	            this.match(MySQLParser.NULL_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	masterFileDef() {
	    let localctx = new MasterFileDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 460, MySQLParser.RULE_masterFileDef);
	    try {
	        this.state = 3964;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 301:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3952;
	            this.match(MySQLParser.MASTER_LOG_FILE_SYMBOL);
	            this.state = 3953;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3954;
	            this.textStringNoLinebreak();
	            break;
	        case 302:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 3955;
	            this.match(MySQLParser.MASTER_LOG_POS_SYMBOL);
	            this.state = 3956;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3957;
	            this.ulonglong_number();
	            break;
	        case 447:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 3958;
	            this.match(MySQLParser.RELAY_LOG_FILE_SYMBOL);
	            this.state = 3959;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3960;
	            this.textStringNoLinebreak();
	            break;
	        case 448:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 3961;
	            this.match(MySQLParser.RELAY_LOG_POS_SYMBOL);
	            this.state = 3962;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3963;
	            this.ulong_number();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serverIdList() {
	    let localctx = new ServerIdListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 462, MySQLParser.RULE_serverIdList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3966;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 3975;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(((((_la - 747)) & ~0x1f) === 0 && ((1 << (_la - 747)) & 7) !== 0) || ((((_la - 788)) & ~0x1f) === 0 && ((1 << (_la - 788)) & 13) !== 0)) {
	            this.state = 3967;
	            this.ulong_number();
	            this.state = 3972;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 3968;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3969;
	                this.ulong_number();
	                this.state = 3974;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	        this.state = 3977;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	changeReplication() {
	    let localctx = new ChangeReplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 464, MySQLParser.RULE_changeReplication);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 3979;
	        this.match(MySQLParser.CHANGE_SYMBOL);
	        this.state = 3980;
	        this.match(MySQLParser.REPLICATION_SYMBOL);
	        this.state = 3981;
	        this.match(MySQLParser.FILTER_SYMBOL);
	        this.state = 3982;
	        this.filterDefinition();
	        this.state = 3987;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,451,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 3983;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 3984;
	                this.filterDefinition(); 
	            }
	            this.state = 3989;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,451,this._ctx);
	        }

	        this.state = 3992;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,452,this._ctx);
	        if(la_===1) {
	            this.state = 3990;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 3991;
	            this.channel();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterDefinition() {
	    let localctx = new FilterDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 466, MySQLParser.RULE_filterDefinition);
	    var _la = 0;
	    try {
	        this.state = 4043;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 460:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 3994;
	            this.match(MySQLParser.REPLICATE_DO_DB_SYMBOL);
	            this.state = 3995;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 3996;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 3998;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,453,this._ctx);
	            if(la_===1) {
	                this.state = 3997;
	                this.filterDbList();

	            }
	            this.state = 4000;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 461:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4001;
	            this.match(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL);
	            this.state = 4002;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 4003;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 4005;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,454,this._ctx);
	            if(la_===1) {
	                this.state = 4004;
	                this.filterDbList();

	            }
	            this.state = 4007;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 462:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4008;
	            this.match(MySQLParser.REPLICATE_DO_TABLE_SYMBOL);
	            this.state = 4009;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 4010;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 4012;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,455,this._ctx);
	            if(la_===1) {
	                this.state = 4011;
	                this.filterTableList();

	            }
	            this.state = 4014;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 463:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4015;
	            this.match(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL);
	            this.state = 4016;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 4017;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 4019;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,456,this._ctx);
	            if(la_===1) {
	                this.state = 4018;
	                this.filterTableList();

	            }
	            this.state = 4021;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 464:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4022;
	            this.match(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL);
	            this.state = 4023;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 4024;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 4026;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,457,this._ctx);
	            if(la_===1) {
	                this.state = 4025;
	                this.filterStringList();

	            }
	            this.state = 4028;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 465:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4029;
	            this.match(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL);
	            this.state = 4030;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 4031;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 4033;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,458,this._ctx);
	            if(la_===1) {
	                this.state = 4032;
	                this.filterStringList();

	            }
	            this.state = 4035;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 466:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4036;
	            this.match(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL);
	            this.state = 4037;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 4038;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 4040;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===776) {
	                this.state = 4039;
	                this.filterDbPairList();
	            }

	            this.state = 4042;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterDbList() {
	    let localctx = new FilterDbListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 468, MySQLParser.RULE_filterDbList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4045;
	        this.schemaRef();
	        this.state = 4050;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 4046;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 4047;
	            this.schemaRef();
	            this.state = 4052;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterTableList() {
	    let localctx = new FilterTableListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 470, MySQLParser.RULE_filterTableList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4053;
	        this.filterTableRef();
	        this.state = 4058;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 4054;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 4055;
	            this.filterTableRef();
	            this.state = 4060;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterStringList() {
	    let localctx = new FilterStringListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 472, MySQLParser.RULE_filterStringList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4061;
	        this.filterWildDbTableString();
	        this.state = 4066;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 4062;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 4063;
	            this.filterWildDbTableString();
	            this.state = 4068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterWildDbTableString() {
	    let localctx = new FilterWildDbTableStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 474, MySQLParser.RULE_filterWildDbTableString);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4069;
	        this.textStringNoLinebreak();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterDbPairList() {
	    let localctx = new FilterDbPairListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 476, MySQLParser.RULE_filterDbPairList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4071;
	        this.schemaIdentifierPair();
	        this.state = 4076;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 4072;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 4073;
	            this.schemaIdentifierPair();
	            this.state = 4078;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slave() {
	    let localctx = new SlaveContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 478, MySQLParser.RULE_slave);
	    try {
	        this.state = 4100;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 543:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4079;
	            this.match(MySQLParser.START_SYMBOL);
	            this.state = 4080;
	            this.match(MySQLParser.SLAVE_SYMBOL);
	            this.state = 4082;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,465,this._ctx);
	            if(la_===1) {
	                this.state = 4081;
	                this.slaveThreadOptions();

	            }
	            this.state = 4086;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,466,this._ctx);
	            if(la_===1) {
	                this.state = 4084;
	                this.match(MySQLParser.UNTIL_SYMBOL);
	                this.state = 4085;
	                this.slaveUntilOptions();

	            }
	            this.state = 4088;
	            this.slaveConnectionOptions();
	            this.state = 4090;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,467,this._ctx);
	            if(la_===1) {
	                this.state = 4089;
	                this.channel();

	            }
	            break;
	        case 552:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4092;
	            this.match(MySQLParser.STOP_SYMBOL);
	            this.state = 4093;
	            this.match(MySQLParser.SLAVE_SYMBOL);
	            this.state = 4095;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,468,this._ctx);
	            if(la_===1) {
	                this.state = 4094;
	                this.slaveThreadOptions();

	            }
	            this.state = 4098;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,469,this._ctx);
	            if(la_===1) {
	                this.state = 4097;
	                this.channel();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slaveUntilOptions() {
	    let localctx = new SlaveUntilOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 480, MySQLParser.RULE_slaveUntilOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4109;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,471,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4102;
	            this.masterFileDef();
	            break;

	        case 2:
	            this.state = 4103;
	            if (!( serverVersion >= 50606)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50606");
	            }
	            this.state = 4104;
	            _la = this._input.LA(1);
	            if(!(_la===528 || _la===530)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4105;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 4106;
	            this.textString();
	            break;

	        case 3:
	            this.state = 4107;
	            if (!( serverVersion >= 50606)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50606");
	            }
	            this.state = 4108;
	            this.match(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL);
	            break;

	        }
	        this.state = 4115;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,472,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4111;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 4112;
	                this.masterFileDef(); 
	            }
	            this.state = 4117;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,472,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slaveConnectionOptions() {
	    let localctx = new SlaveConnectionOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 482, MySQLParser.RULE_slaveConnectionOptions);
	    try {
	        this.state = 4140;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,477,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4118;
	            if (!( serverVersion >= 50604)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50604");
	            }
	            this.state = 4122;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,473,this._ctx);
	            if(la_===1) {
	                this.state = 4119;
	                this.match(MySQLParser.USER_SYMBOL);
	                this.state = 4120;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	                this.state = 4121;
	                this.textString();

	            }
	            this.state = 4127;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,474,this._ctx);
	            if(la_===1) {
	                this.state = 4124;
	                this.match(MySQLParser.PASSWORD_SYMBOL);
	                this.state = 4125;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	                this.state = 4126;
	                this.textString();

	            }
	            this.state = 4132;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,475,this._ctx);
	            if(la_===1) {
	                this.state = 4129;
	                this.match(MySQLParser.DEFAULT_AUTH_SYMBOL);
	                this.state = 4130;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	                this.state = 4131;
	                this.textString();

	            }
	            this.state = 4137;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,476,this._ctx);
	            if(la_===1) {
	                this.state = 4134;
	                this.match(MySQLParser.PLUGIN_DIR_SYMBOL);
	                this.state = 4135;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	                this.state = 4136;
	                this.textString();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slaveThreadOptions() {
	    let localctx = new SlaveThreadOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 484, MySQLParser.RULE_slaveThreadOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4142;
	        this.slaveThreadOption();
	        this.state = 4147;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,478,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4143;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 4144;
	                this.slaveThreadOption(); 
	            }
	            this.state = 4149;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,478,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	slaveThreadOption() {
	    let localctx = new SlaveThreadOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 486, MySQLParser.RULE_slaveThreadOption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4150;
	        _la = this._input.LA(1);
	        if(!(_la===449 || _la===538)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupReplication() {
	    let localctx = new GroupReplicationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 488, MySQLParser.RULE_groupReplication);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4152;
	        _la = this._input.LA(1);
	        if(!(_la===543 || _la===552)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 4153;
	        this.match(MySQLParser.GROUP_REPLICATION_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preparedStatement() {
	    let localctx = new PreparedStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 490, MySQLParser.RULE_preparedStatement);
	    var _la = 0;
	    try {
	        this.state = 4166;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 417:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4155;
	            localctx.type = this.match(MySQLParser.PREPARE_SYMBOL);
	            this.state = 4156;
	            this.identifier();
	            this.state = 4157;
	            this.match(MySQLParser.FROM_SYMBOL);
	            this.state = 4160;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,479,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4158;
	                this.textLiteral();
	                break;

	            case 2:
	                this.state = 4159;
	                this.userVariable();
	                break;

	            }
	            break;
	        case 173:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4162;
	            this.executeStatement();
	            break;
	        case 123:
	        case 148:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4163;
	            localctx.type = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===123 || _la===148)) {
	                localctx.type = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4164;
	            this.match(MySQLParser.PREPARE_SYMBOL);
	            this.state = 4165;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executeStatement() {
	    let localctx = new ExecuteStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 492, MySQLParser.RULE_executeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4168;
	        this.match(MySQLParser.EXECUTE_SYMBOL);
	        this.state = 4169;
	        this.identifier();
	        this.state = 4172;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===621) {
	            this.state = 4170;
	            this.match(MySQLParser.USING_SYMBOL);
	            this.state = 4171;
	            this.executeVarList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	executeVarList() {
	    let localctx = new ExecuteVarListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 494, MySQLParser.RULE_executeVarList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4174;
	        this.userVariable();
	        this.state = 4179;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 4175;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 4176;
	            this.userVariable();
	            this.state = 4181;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cloneStatement() {
	    let localctx = new CloneStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 496, MySQLParser.RULE_cloneStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4182;
	        this.match(MySQLParser.CLONE_SYMBOL);
	        this.state = 4207;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,486,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4183;
	            this.match(MySQLParser.LOCAL_SYMBOL);
	            this.state = 4184;
	            this.match(MySQLParser.DATA_SYMBOL);
	            this.state = 4185;
	            this.match(MySQLParser.DIRECTORY_SYMBOL);
	            this.state = 4187;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,483,this._ctx);
	            if(la_===1) {
	                this.state = 4186;
	                this.equal();

	            }
	            this.state = 4189;
	            this.textStringLiteral();
	            break;

	        case 2:
	            this.state = 4190;
	            this.match(MySQLParser.REMOTE_SYMBOL);
	            this.state = 4193;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200) {
	                this.state = 4191;
	                this.match(MySQLParser.FOR_SYMBOL);
	                this.state = 4192;
	                this.match(MySQLParser.REPLICATION_SYMBOL);
	            }

	            break;

	        case 3:
	            this.state = 4195;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 4196;
	            this.match(MySQLParser.INSTANCE_SYMBOL);
	            this.state = 4197;
	            this.match(MySQLParser.FROM_SYMBOL);
	            this.state = 4198;
	            this.user();
	            this.state = 4199;
	            this.match(MySQLParser.COLON_SYMBOL);
	            this.state = 4200;
	            this.ulong_number();
	            this.state = 4201;
	            this.match(MySQLParser.IDENTIFIED_SYMBOL);
	            this.state = 4202;
	            this.match(MySQLParser.BY_SYMBOL);
	            this.state = 4203;
	            this.textStringLiteral();
	            this.state = 4205;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===112 || _la===467) {
	                this.state = 4204;
	                this.dataDirSSL();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataDirSSL() {
	    let localctx = new DataDirSSLContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 498, MySQLParser.RULE_dataDirSSL);
	    var _la = 0;
	    try {
	        this.state = 4219;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 467:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4209;
	            this.ssl();
	            break;
	        case 112:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4210;
	            this.match(MySQLParser.DATA_SYMBOL);
	            this.state = 4211;
	            this.match(MySQLParser.DIRECTORY_SYMBOL);
	            this.state = 4213;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,487,this._ctx);
	            if(la_===1) {
	                this.state = 4212;
	                this.equal();

	            }
	            this.state = 4215;
	            this.textStringLiteral();
	            this.state = 4217;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===467) {
	                this.state = 4216;
	                this.ssl();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ssl() {
	    let localctx = new SslContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 500, MySQLParser.RULE_ssl);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4221;
	        this.match(MySQLParser.REQUIRE_SYMBOL);
	        this.state = 4223;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===373) {
	            this.state = 4222;
	            this.match(MySQLParser.NO_SYMBOL);
	        }

	        this.state = 4225;
	        this.match(MySQLParser.SSL_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accountManagementStatement() {
	    let localctx = new AccountManagementStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 502, MySQLParser.RULE_accountManagementStatement);
	    try {
	        this.state = 4236;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,491,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4227;
	            if (!( serverVersion >= 50606)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50606");
	            }
	            this.state = 4228;
	            this.alterUser();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4229;
	            this.createUser();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4230;
	            this.dropUser();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4231;
	            this.grant();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4232;
	            this.renameUser();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4233;
	            this.revoke();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4234;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 4235;
	            this.setRole();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterUser() {
	    let localctx = new AlterUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 504, MySQLParser.RULE_alterUser);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4238;
	        this.match(MySQLParser.ALTER_SYMBOL);
	        this.state = 4239;
	        this.match(MySQLParser.USER_SYMBOL);
	        this.state = 4242;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,492,this._ctx);
	        if(la_===1) {
	            this.state = 4240;
	            if (!( serverVersion >= 50706)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
	            }
	            this.state = 4241;
	            this.ifExists();

	        }
	        this.state = 4244;
	        this.alterUserTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterUserTail() {
	    let localctx = new AlterUserTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 506, MySQLParser.RULE_alterUserTail);
	    var _la = 0;
	    try {
	        this.state = 4300;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,500,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4250;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,493,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4246;
	                if (!( serverVersion < 80014)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80014");
	                }
	                this.state = 4247;
	                this.createUserList();
	                break;

	            case 2:
	                this.state = 4248;
	                if (!( serverVersion >= 80014)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	                }
	                this.state = 4249;
	                this.alterUserList();
	                break;

	            }
	            this.state = 4252;
	            this.createUserTail();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4254;
	            if (!( serverVersion >= 50706)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
	            }
	            this.state = 4255;
	            this.user();
	            this.state = 4256;
	            this.match(MySQLParser.IDENTIFIED_SYMBOL);
	            this.state = 4257;
	            this.match(MySQLParser.BY_SYMBOL);
	            this.state = 4258;
	            this.textString();
	            this.state = 4261;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,494,this._ctx);
	            if(la_===1) {
	                this.state = 4259;
	                if (!( serverVersion >= 80014)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	                }
	                this.state = 4260;
	                this.replacePassword();

	            }
	            this.state = 4265;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,495,this._ctx);
	            if(la_===1) {
	                this.state = 4263;
	                if (!( serverVersion >= 80014)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	                }
	                this.state = 4264;
	                this.retainCurrentPassword();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4267;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 4268;
	            this.user();
	            this.state = 4269;
	            this.discardOldPassword();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4271;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 4272;
	            this.user();
	            this.state = 4273;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            this.state = 4274;
	            this.match(MySQLParser.ROLE_SYMBOL);
	            this.state = 4278;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,496,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4275;
	                this.match(MySQLParser.ALL_SYMBOL);
	                break;

	            case 2:
	                this.state = 4276;
	                this.match(MySQLParser.NONE_SYMBOL);
	                break;

	            case 3:
	                this.state = 4277;
	                this.roleList();
	                break;

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4280;
	            if (!( serverVersion >= 80018)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80018");
	            }
	            this.state = 4281;
	            this.user();
	            this.state = 4282;
	            this.match(MySQLParser.IDENTIFIED_SYMBOL);
	            this.state = 4285;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===645) {
	                this.state = 4283;
	                this.match(MySQLParser.WITH_SYMBOL);
	                this.state = 4284;
	                this.textOrIdentifier();
	            }

	            this.state = 4287;
	            this.match(MySQLParser.BY_SYMBOL);
	            this.state = 4288;
	            this.match(MySQLParser.RANDOM_SYMBOL);
	            this.state = 4289;
	            this.match(MySQLParser.PASSWORD_SYMBOL);
	            this.state = 4291;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===727) {
	                this.state = 4290;
	                this.retainCurrentPassword();
	            }

	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4293;
	            this.match(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL);
	            this.state = 4294;
	            this.real_ulong_number();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4295;
	            this.match(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL);
	            this.state = 4298;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 747:
	            case 748:
	            case 749:
	            case 788:
	                this.state = 4296;
	                this.real_ulong_number();
	                break;
	            case 698:
	                this.state = 4297;
	                this.match(MySQLParser.UNBOUNDED_SYMBOL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userFunction() {
	    let localctx = new UserFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 508, MySQLParser.RULE_userFunction);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4302;
	        this.match(MySQLParser.USER_SYMBOL);
	        this.state = 4303;
	        this.parentheses();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUser() {
	    let localctx = new CreateUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 510, MySQLParser.RULE_createUser);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4305;
	        this.match(MySQLParser.CREATE_SYMBOL);
	        this.state = 4306;
	        this.match(MySQLParser.USER_SYMBOL);
	        this.state = 4310;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,501,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4307;
	            if (!( serverVersion >= 50706)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
	            }
	            this.state = 4308;
	            this.ifNotExists();
	            break;

	        case 2:
	            break;

	        }
	        this.state = 4312;
	        this.createUserList();
	        this.state = 4313;
	        this.defaultRoleClause();
	        this.state = 4314;
	        this.createUserTail();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUserTail() {
	    let localctx = new CreateUserTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 512, MySQLParser.RULE_createUserTail);
	    var _la = 0;
	    try {
	        this.state = 4330;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,505,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4316;
	            if (!( serverVersion >= 50706)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
	            }
	            this.state = 4318;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===467) {
	                this.state = 4317;
	                this.requireClause();
	            }

	            this.state = 4321;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===645) {
	                this.state = 4320;
	                this.connectOptions();
	            }

	            this.state = 4326;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===2 || _la===406) {
	                this.state = 4323;
	                this.accountLockPasswordExpireOptions();
	                this.state = 4328;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultRoleClause() {
	    let localctx = new DefaultRoleClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 514, MySQLParser.RULE_defaultRoleClause);
	    try {
	        this.state = 4339;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,507,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4332;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 4336;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,506,this._ctx);
	            if(la_===1) {
	                this.state = 4333;
	                this.match(MySQLParser.DEFAULT_SYMBOL);
	                this.state = 4334;
	                this.match(MySQLParser.ROLE_SYMBOL);
	                this.state = 4335;
	                this.roleList();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requireClause() {
	    let localctx = new RequireClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 516, MySQLParser.RULE_requireClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4341;
	        this.match(MySQLParser.REQUIRE_SYMBOL);
	        this.state = 4344;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 63:
	        case 259:
	        case 559:
	            this.state = 4342;
	            this.requireList();
	            break;
	        case 369:
	        case 539:
	        case 650:
	            this.state = 4343;
	            localctx.option = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===369 || _la===539 || _la===650)) {
	                localctx.option = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	connectOptions() {
	    let localctx = new ConnectOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 518, MySQLParser.RULE_connectOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4346;
	        this.match(MySQLParser.WITH_SYMBOL);
	        this.state = 4355; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 4355;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 322:
	                this.state = 4347;
	                this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
	                this.state = 4348;
	                this.ulong_number();
	                break;
	            case 327:
	                this.state = 4349;
	                this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
	                this.state = 4350;
	                this.ulong_number();
	                break;
	            case 321:
	                this.state = 4351;
	                this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
	                this.state = 4352;
	                this.ulong_number();
	                break;
	            case 328:
	                this.state = 4353;
	                this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
	                this.state = 4354;
	                this.ulong_number();
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 4357; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(((((_la - 321)) & ~0x1f) === 0 && ((1 << (_la - 321)) & 195) !== 0));
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	accountLockPasswordExpireOptions() {
	    let localctx = new AccountLockPasswordExpireOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 520, MySQLParser.RULE_accountLockPasswordExpireOptions);
	    var _la = 0;
	    try {
	        this.state = 4392;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 2:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4359;
	            this.match(MySQLParser.ACCOUNT_SYMBOL);
	            this.state = 4360;
	            _la = this._input.LA(1);
	            if(!(_la===287 || _la===611)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 406:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4361;
	            this.match(MySQLParser.PASSWORD_SYMBOL);
	            this.state = 4390;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,515,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4362;
	                this.match(MySQLParser.EXPIRE_SYMBOL);
	                this.state = 4369;
	                this._errHandler.sync(this);
	                switch (this._input.LA(1)) {
	                case 247:
	                	this.state = 4363;
	                	this.match(MySQLParser.INTERVAL_SYMBOL);
	                	this.state = 4364;
	                	this.real_ulong_number();
	                	this.state = 4365;
	                	this.match(MySQLParser.DAY_SYMBOL);
	                	break;
	                case 365:
	                	this.state = 4367;
	                	this.match(MySQLParser.NEVER_SYMBOL);
	                	break;
	                case 128:
	                	this.state = 4368;
	                	this.match(MySQLParser.DEFAULT_SYMBOL);
	                	break;
	                case -1:
	                case 2:
	                case 406:
	                case 774:
	                	break;
	                default:
	                	break;
	                }
	                break;

	            case 2:
	                this.state = 4371;
	                this.match(MySQLParser.HISTORY_SYMBOL);
	                this.state = 4374;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 747:
	                case 748:
	                case 749:
	                case 788:
	                    this.state = 4372;
	                    this.real_ulong_number();
	                    break;
	                case 128:
	                    this.state = 4373;
	                    this.match(MySQLParser.DEFAULT_SYMBOL);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 3:
	                this.state = 4376;
	                this.match(MySQLParser.REUSE_SYMBOL);
	                this.state = 4377;
	                this.match(MySQLParser.INTERVAL_SYMBOL);
	                this.state = 4382;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 747:
	                case 748:
	                case 749:
	                case 788:
	                    this.state = 4378;
	                    this.real_ulong_number();
	                    this.state = 4379;
	                    this.match(MySQLParser.DAY_SYMBOL);
	                    break;
	                case 128:
	                    this.state = 4381;
	                    this.match(MySQLParser.DEFAULT_SYMBOL);
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            case 4:
	                this.state = 4384;
	                if (!( serverVersion >= 80014)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	                }
	                this.state = 4385;
	                this.match(MySQLParser.REQUIRE_SYMBOL);
	                this.state = 4386;
	                this.match(MySQLParser.CURRENT_SYMBOL);
	                this.state = 4388;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===128 || _la===719) {
	                    this.state = 4387;
	                    _la = this._input.LA(1);
	                    if(!(_la===128 || _la===719)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                break;

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropUser() {
	    let localctx = new DropUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 522, MySQLParser.RULE_dropUser);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4394;
	        this.match(MySQLParser.DROP_SYMBOL);
	        this.state = 4395;
	        this.match(MySQLParser.USER_SYMBOL);
	        this.state = 4398;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,517,this._ctx);
	        if(la_===1) {
	            this.state = 4396;
	            if (!( serverVersion >= 50706)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
	            }
	            this.state = 4397;
	            this.ifExists();

	        }
	        this.state = 4400;
	        this.userList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grant() {
	    let localctx = new GrantContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 524, MySQLParser.RULE_grant);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4402;
	        this.match(MySQLParser.GRANT_SYMBOL);
	        this.state = 4445;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,526,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4403;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 4404;
	            this.roleOrPrivilegesList();
	            this.state = 4405;
	            this.match(MySQLParser.TO_SYMBOL);
	            this.state = 4406;
	            this.userList();
	            this.state = 4410;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===645) {
	                this.state = 4407;
	                this.match(MySQLParser.WITH_SYMBOL);
	                this.state = 4408;
	                this.match(MySQLParser.ADMIN_SYMBOL);
	                this.state = 4409;
	                this.match(MySQLParser.OPTION_SYMBOL);
	            }

	            break;

	        case 2:
	            this.state = 4417;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,520,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4412;
	                this.roleOrPrivilegesList();
	                break;

	            case 2:
	                this.state = 4413;
	                this.match(MySQLParser.ALL_SYMBOL);
	                this.state = 4415;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===421) {
	                    this.state = 4414;
	                    this.match(MySQLParser.PRIVILEGES_SYMBOL);
	                }

	                break;

	            }
	            this.state = 4419;
	            this.match(MySQLParser.ON_SYMBOL);
	            this.state = 4421;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,521,this._ctx);
	            if(la_===1) {
	                this.state = 4420;
	                this.aclType();

	            }
	            this.state = 4423;
	            this.grantIdentifier();
	            this.state = 4424;
	            this.match(MySQLParser.TO_SYMBOL);
	            this.state = 4425;
	            this.grantTargetList();
	            this.state = 4427;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,522,this._ctx);
	            if(la_===1) {
	                this.state = 4426;
	                this.versionedRequireClause();

	            }
	            this.state = 4430;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,523,this._ctx);
	            if(la_===1) {
	                this.state = 4429;
	                this.grantOptions();

	            }
	            this.state = 4433;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===17) {
	                this.state = 4432;
	                this.grantAs();
	            }

	            break;

	        case 3:
	            this.state = 4435;
	            this.match(MySQLParser.PROXY_SYMBOL);
	            this.state = 4436;
	            this.match(MySQLParser.ON_SYMBOL);
	            this.state = 4437;
	            this.user();
	            this.state = 4438;
	            this.match(MySQLParser.TO_SYMBOL);
	            this.state = 4439;
	            this.grantTargetList();
	            this.state = 4443;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===645) {
	                this.state = 4440;
	                this.match(MySQLParser.WITH_SYMBOL);
	                this.state = 4441;
	                this.match(MySQLParser.GRANT_SYMBOL);
	                this.state = 4442;
	                this.match(MySQLParser.OPTION_SYMBOL);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantTargetList() {
	    let localctx = new GrantTargetListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 526, MySQLParser.RULE_grantTargetList);
	    try {
	        this.state = 4451;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,527,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4447;
	            if (!( serverVersion < 80011)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
	            }
	            this.state = 4448;
	            this.createUserList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4449;
	            if (!( serverVersion >= 80011)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
	            }
	            this.state = 4450;
	            this.userList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantOptions() {
	    let localctx = new GrantOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 528, MySQLParser.RULE_grantOptions);
	    var _la = 0;
	    try {
	        this.state = 4464;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,529,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4453;
	            if (!( serverVersion < 80011)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
	            }
	            this.state = 4454;
	            this.match(MySQLParser.WITH_SYMBOL);
	            this.state = 4456; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 4455;
	                this.grantOption();
	                this.state = 4458; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===215 || ((((_la - 321)) & ~0x1f) === 0 && ((1 << (_la - 321)) & 195) !== 0));
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4460;
	            if (!( serverVersion >= 80011)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
	            }
	            this.state = 4461;
	            this.match(MySQLParser.WITH_SYMBOL);
	            this.state = 4462;
	            this.match(MySQLParser.GRANT_SYMBOL);
	            this.state = 4463;
	            this.match(MySQLParser.OPTION_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exceptRoleList() {
	    let localctx = new ExceptRoleListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 530, MySQLParser.RULE_exceptRoleList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4466;
	        this.match(MySQLParser.EXCEPT_SYMBOL);
	        this.state = 4467;
	        this.roleList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withRoles() {
	    let localctx = new WithRolesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 532, MySQLParser.RULE_withRoles);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4469;
	        this.match(MySQLParser.WITH_SYMBOL);
	        this.state = 4470;
	        this.match(MySQLParser.ROLE_SYMBOL);
	        this.state = 4478;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,531,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4471;
	            this.roleList();
	            break;

	        case 2:
	            this.state = 4472;
	            this.match(MySQLParser.ALL_SYMBOL);
	            this.state = 4474;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===663) {
	                this.state = 4473;
	                this.exceptRoleList();
	            }

	            break;

	        case 3:
	            this.state = 4476;
	            this.match(MySQLParser.NONE_SYMBOL);
	            break;

	        case 4:
	            this.state = 4477;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantAs() {
	    let localctx = new GrantAsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 534, MySQLParser.RULE_grantAs);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4480;
	        this.match(MySQLParser.AS_SYMBOL);
	        this.state = 4481;
	        this.match(MySQLParser.USER_SYMBOL);
	        this.state = 4483;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===645) {
	            this.state = 4482;
	            this.withRoles();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	versionedRequireClause() {
	    let localctx = new VersionedRequireClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 536, MySQLParser.RULE_versionedRequireClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4485;
	        if (!( serverVersion < 80011)) {
	            throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
	        }
	        this.state = 4486;
	        this.requireClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameUser() {
	    let localctx = new RenameUserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 538, MySQLParser.RULE_renameUser);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4488;
	        this.match(MySQLParser.RENAME_SYMBOL);
	        this.state = 4489;
	        this.match(MySQLParser.USER_SYMBOL);
	        this.state = 4490;
	        this.user();
	        this.state = 4491;
	        this.match(MySQLParser.TO_SYMBOL);
	        this.state = 4492;
	        this.user();
	        this.state = 4500;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 4493;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 4494;
	            this.user();
	            this.state = 4495;
	            this.match(MySQLParser.TO_SYMBOL);
	            this.state = 4496;
	            this.user();
	            this.state = 4502;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	revoke() {
	    let localctx = new RevokeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 540, MySQLParser.RULE_revoke);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4503;
	        this.match(MySQLParser.REVOKE_SYMBOL);
	        this.state = 4537;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,537,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4504;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 4505;
	            this.roleOrPrivilegesList();
	            this.state = 4506;
	            this.match(MySQLParser.FROM_SYMBOL);
	            this.state = 4507;
	            this.userList();
	            break;

	        case 2:
	            this.state = 4509;
	            this.roleOrPrivilegesList();
	            this.state = 4510;
	            this.onTypeTo();
	            this.state = 4511;
	            this.match(MySQLParser.FROM_SYMBOL);
	            this.state = 4512;
	            this.userList();
	            break;

	        case 3:
	            this.state = 4514;
	            this.match(MySQLParser.ALL_SYMBOL);
	            this.state = 4516;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,534,this._ctx);
	            if(la_===1) {
	                this.state = 4515;
	                this.match(MySQLParser.PRIVILEGES_SYMBOL);

	            }
	            this.state = 4529;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,536,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4518;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 4519;
	                this.match(MySQLParser.ON_SYMBOL);
	                this.state = 4521;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,535,this._ctx);
	                if(la_===1) {
	                    this.state = 4520;
	                    this.aclType();

	                }
	                this.state = 4523;
	                this.grantIdentifier();
	                break;

	            case 2:
	                this.state = 4524;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 4525;
	                this.match(MySQLParser.GRANT_SYMBOL);
	                this.state = 4526;
	                this.match(MySQLParser.OPTION_SYMBOL);
	                this.state = 4527;
	                this.match(MySQLParser.FROM_SYMBOL);
	                this.state = 4528;
	                this.userList();
	                break;

	            }
	            break;

	        case 4:
	            this.state = 4531;
	            this.match(MySQLParser.PROXY_SYMBOL);
	            this.state = 4532;
	            this.match(MySQLParser.ON_SYMBOL);
	            this.state = 4533;
	            this.user();
	            this.state = 4534;
	            this.match(MySQLParser.FROM_SYMBOL);
	            this.state = 4535;
	            this.userList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onTypeTo() {
	    let localctx = new OnTypeToContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 542, MySQLParser.RULE_onTypeTo);
	    var _la = 0;
	    try {
	        this.state = 4553;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,541,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4539;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 4540;
	            this.match(MySQLParser.ON_SYMBOL);
	            this.state = 4542;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,538,this._ctx);
	            if(la_===1) {
	                this.state = 4541;
	                this.aclType();

	            }
	            this.state = 4544;
	            this.grantIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4545;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 4551;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===383) {
	                this.state = 4546;
	                this.match(MySQLParser.ON_SYMBOL);
	                this.state = 4548;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,539,this._ctx);
	                if(la_===1) {
	                    this.state = 4547;
	                    this.aclType();

	                }
	                this.state = 4550;
	                this.grantIdentifier();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	aclType() {
	    let localctx = new AclTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 544, MySQLParser.RULE_aclType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4555;
	        _la = this._input.LA(1);
	        if(!(_la===206 || _la===422 || _la===574)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleOrPrivilegesList() {
	    let localctx = new RoleOrPrivilegesListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 546, MySQLParser.RULE_roleOrPrivilegesList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4557;
	        this.roleOrPrivilege();
	        this.state = 4562;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,542,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4558;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 4559;
	                this.roleOrPrivilege(); 
	            }
	            this.state = 4564;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,542,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleOrPrivilege() {
	    let localctx = new RoleOrPrivilegeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 548, MySQLParser.RULE_roleOrPrivilege);
	    var _la = 0;
	    try {
	        this.state = 4606;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,549,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4565;
	            if (!( serverVersion > 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion > 80000");
	            }
	            this.state = 4576;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,545,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4566;
	                this.roleIdentifierOrText();
	                this.state = 4568;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,543,this._ctx);
	                if(la_===1) {
	                    this.state = 4567;
	                    this.columnInternalRefList();

	                }
	                break;

	            case 2:
	                this.state = 4570;
	                this.roleIdentifierOrText();
	                this.state = 4574;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 784:
	                    this.state = 4571;
	                    this.match(MySQLParser.AT_TEXT_SUFFIX);
	                    break;
	                case 783:
	                    this.state = 4572;
	                    this.match(MySQLParser.AT_SIGN_SYMBOL);
	                    this.state = 4573;
	                    this.textOrIdentifier();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4578;
	            _la = this._input.LA(1);
	            if(!(_la===242 || _la===443 || _la===497 || _la===614)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4580;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,546,this._ctx);
	            if(la_===1) {
	                this.state = 4579;
	                this.columnInternalRefList();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4582;
	            _la = this._input.LA(1);
	            if(!(_la===133 || _la===148 || ((((_la - 170)) & ~0x1f) === 0 && ((1 << (_la - 170)) & 262153) !== 0) || _la===236 || ((((_la - 423)) & ~0x1f) === 0 && ((1 << (_la - 423)) & 268435473) !== 0) || _la===510 || _la===565 || _la===594 || _la===616)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4583;
	            this.match(MySQLParser.GRANT_SYMBOL);
	            this.state = 4584;
	            this.match(MySQLParser.OPTION_SYMBOL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4585;
	            this.match(MySQLParser.SHOW_SYMBOL);
	            this.state = 4586;
	            this.match(MySQLParser.DATABASES_SYMBOL);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 4587;
	            this.match(MySQLParser.CREATE_SYMBOL);
	            this.state = 4591;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,547,this._ctx);
	            if(la_===1) {
	                this.state = 4588;
	                this.match(MySQLParser.TEMPORARY_SYMBOL);
	                this.state = 4589;
	                localctx.object = this.match(MySQLParser.TABLES_SYMBOL);

	            } else if(la_===2) {
	                this.state = 4590;
	                localctx.object = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===483 || _la===572 || _la===618 || _la===636)) {
	                    localctx.object = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 4593;
	            this.match(MySQLParser.LOCK_SYMBOL);
	            this.state = 4594;
	            this.match(MySQLParser.TABLES_SYMBOL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 4595;
	            this.match(MySQLParser.REPLICATION_SYMBOL);
	            this.state = 4596;
	            localctx.object = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===65 || _la===514)) {
	                localctx.object = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 4597;
	            this.match(MySQLParser.SHOW_SYMBOL);
	            this.state = 4598;
	            this.match(MySQLParser.VIEW_SYMBOL);
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 4599;
	            this.match(MySQLParser.ALTER_SYMBOL);
	            this.state = 4601;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,548,this._ctx);
	            if(la_===1) {
	                this.state = 4600;
	                this.match(MySQLParser.ROUTINE_SYMBOL);

	            }
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 4603;
	            if (!( serverVersion > 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion > 80000");
	            }
	            this.state = 4604;
	            _la = this._input.LA(1);
	            if(!(_la===97 || _la===148)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4605;
	            this.match(MySQLParser.ROLE_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantIdentifier() {
	    let localctx = new GrantIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 550, MySQLParser.RULE_grantIdentifier);
	    var _la = 0;
	    try {
	        this.state = 4624;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,552,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4608;
	            this.match(MySQLParser.MULT_OPERATOR);
	            this.state = 4611;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===772) {
	                this.state = 4609;
	                this.match(MySQLParser.DOT_SYMBOL);
	                this.state = 4610;
	                this.match(MySQLParser.MULT_OPERATOR);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4613;
	            this.schemaRef();
	            this.state = 4616;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===772) {
	                this.state = 4614;
	                this.match(MySQLParser.DOT_SYMBOL);
	                this.state = 4615;
	                this.match(MySQLParser.MULT_OPERATOR);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4618;
	            this.tableRef();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4619;
	            if (!( serverVersion >= 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	            }
	            this.state = 4620;
	            this.schemaRef();
	            this.state = 4621;
	            this.match(MySQLParser.DOT_SYMBOL);
	            this.state = 4622;
	            this.tableRef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requireList() {
	    let localctx = new RequireListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 552, MySQLParser.RULE_requireList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4626;
	        this.requireListElement();
	        this.state = 4633;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,554,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4628;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===15) {
	                    this.state = 4627;
	                    this.match(MySQLParser.AND_SYMBOL);
	                }

	                this.state = 4630;
	                this.requireListElement(); 
	            }
	            this.state = 4635;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,554,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	requireListElement() {
	    let localctx = new RequireListElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 554, MySQLParser.RULE_requireListElement);
	    try {
	        this.state = 4642;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 63:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4636;
	            localctx.element = this.match(MySQLParser.CIPHER_SYMBOL);
	            this.state = 4637;
	            this.textString();
	            break;
	        case 259:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4638;
	            localctx.element = this.match(MySQLParser.ISSUER_SYMBOL);
	            this.state = 4639;
	            this.textString();
	            break;
	        case 559:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4640;
	            localctx.element = this.match(MySQLParser.SUBJECT_SYMBOL);
	            this.state = 4641;
	            this.textString();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	grantOption() {
	    let localctx = new GrantOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 556, MySQLParser.RULE_grantOption);
	    try {
	        this.state = 4654;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 215:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4644;
	            localctx.option = this.match(MySQLParser.GRANT_SYMBOL);
	            this.state = 4645;
	            this.match(MySQLParser.OPTION_SYMBOL);
	            break;
	        case 322:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4646;
	            localctx.option = this.match(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
	            this.state = 4647;
	            this.ulong_number();
	            break;
	        case 327:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4648;
	            localctx.option = this.match(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
	            this.state = 4649;
	            this.ulong_number();
	            break;
	        case 321:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4650;
	            localctx.option = this.match(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
	            this.state = 4651;
	            this.ulong_number();
	            break;
	        case 328:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4652;
	            localctx.option = this.match(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
	            this.state = 4653;
	            this.ulong_number();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setRole() {
	    let localctx = new SetRoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 558, MySQLParser.RULE_setRole);
	    var _la = 0;
	    try {
	        this.state = 4679;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,559,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4656;
	            this.match(MySQLParser.SET_SYMBOL);
	            this.state = 4657;
	            this.match(MySQLParser.ROLE_SYMBOL);
	            this.state = 4658;
	            this.roleList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4659;
	            this.match(MySQLParser.SET_SYMBOL);
	            this.state = 4660;
	            this.match(MySQLParser.ROLE_SYMBOL);
	            this.state = 4661;
	            _la = this._input.LA(1);
	            if(!(_la===128 || _la===369)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4662;
	            this.match(MySQLParser.SET_SYMBOL);
	            this.state = 4663;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            this.state = 4664;
	            this.match(MySQLParser.ROLE_SYMBOL);
	            this.state = 4668;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,557,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4665;
	                this.roleList();
	                break;

	            case 2:
	                this.state = 4666;
	                this.match(MySQLParser.NONE_SYMBOL);
	                break;

	            case 3:
	                this.state = 4667;
	                this.match(MySQLParser.ALL_SYMBOL);
	                break;

	            }
	            this.state = 4670;
	            this.match(MySQLParser.TO_SYMBOL);
	            this.state = 4671;
	            this.roleList();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4672;
	            this.match(MySQLParser.SET_SYMBOL);
	            this.state = 4673;
	            this.match(MySQLParser.ROLE_SYMBOL);
	            this.state = 4674;
	            this.match(MySQLParser.ALL_SYMBOL);
	            this.state = 4677;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===663) {
	                this.state = 4675;
	                this.match(MySQLParser.EXCEPT_SYMBOL);
	                this.state = 4676;
	                this.roleList();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleList() {
	    let localctx = new RoleListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 560, MySQLParser.RULE_roleList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4681;
	        this.role();
	        this.state = 4686;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,560,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 4682;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 4683;
	                this.role(); 
	            }
	            this.state = 4688;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,560,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	role() {
	    let localctx = new RoleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 562, MySQLParser.RULE_role);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4689;
	        this.roleIdentifierOrText();
	        this.state = 4693;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,561,this._ctx);
	        if(la_===1) {
	            this.state = 4690;
	            this.match(MySQLParser.AT_SIGN_SYMBOL);
	            this.state = 4691;
	            this.textOrIdentifier();

	        } else if(la_===2) {
	            this.state = 4692;
	            this.match(MySQLParser.AT_TEXT_SUFFIX);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableAdministrationStatement() {
	    let localctx = new TableAdministrationStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 564, MySQLParser.RULE_tableAdministrationStatement);
	    var _la = 0;
	    try {
	        this.state = 4738;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 14:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4695;
	            localctx.type = this.match(MySQLParser.ANALYZE_SYMBOL);
	            this.state = 4697;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===284 || _la===375) {
	                this.state = 4696;
	                this.noWriteToBinLog();
	            }

	            this.state = 4699;
	            this.match(MySQLParser.TABLE_SYMBOL);
	            this.state = 4700;
	            this.tableRefList();
	            this.state = 4703;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,563,this._ctx);
	            if(la_===1) {
	                this.state = 4701;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 4702;
	                this.histogram();

	            }
	            break;
	        case 62:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4705;
	            localctx.type = this.match(MySQLParser.CHECK_SYMBOL);
	            this.state = 4706;
	            this.match(MySQLParser.TABLE_SYMBOL);
	            this.state = 4707;
	            this.tableRefList();
	            this.state = 4711;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===56 || ((((_la - 180)) & ~0x1f) === 0 && ((1 << (_la - 180)) & 1048593) !== 0) || _la===333 || _la===431) {
	                this.state = 4708;
	                this.checkOption();
	                this.state = 4713;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        case 61:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4714;
	            localctx.type = this.match(MySQLParser.CHECKSUM_SYMBOL);
	            this.state = 4715;
	            this.match(MySQLParser.TABLE_SYMBOL);
	            this.state = 4716;
	            this.tableRefList();
	            this.state = 4718;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===180 || _la===431) {
	                this.state = 4717;
	                _la = this._input.LA(1);
	                if(!(_la===180 || _la===431)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            break;
	        case 388:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4720;
	            localctx.type = this.match(MySQLParser.OPTIMIZE_SYMBOL);
	            this.state = 4722;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===284 || _la===375) {
	                this.state = 4721;
	                this.noWriteToBinLog();
	            }

	            this.state = 4724;
	            this.match(MySQLParser.TABLE_SYMBOL);
	            this.state = 4725;
	            this.tableRefList();
	            break;
	        case 455:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4726;
	            localctx.type = this.match(MySQLParser.REPAIR_SYMBOL);
	            this.state = 4728;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===284 || _la===375) {
	                this.state = 4727;
	                this.noWriteToBinLog();
	            }

	            this.state = 4730;
	            this.match(MySQLParser.TABLE_SYMBOL);
	            this.state = 4731;
	            this.tableRefList();
	            this.state = 4735;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===180 || _la===431 || _la===619) {
	                this.state = 4732;
	                this.repairType();
	                this.state = 4737;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	histogram() {
	    let localctx = new HistogramContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 566, MySQLParser.RULE_histogram);
	    var _la = 0;
	    try {
	        this.state = 4753;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 614:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4740;
	            this.match(MySQLParser.UPDATE_SYMBOL);
	            this.state = 4741;
	            this.match(MySQLParser.HISTOGRAM_SYMBOL);
	            this.state = 4742;
	            this.match(MySQLParser.ON_SYMBOL);
	            this.state = 4743;
	            this.identifierList();
	            this.state = 4747;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===645) {
	                this.state = 4744;
	                this.match(MySQLParser.WITH_SYMBOL);
	                this.state = 4745;
	                this.match(MySQLParser.INT_NUMBER);
	                this.state = 4746;
	                this.match(MySQLParser.BUCKETS_SYMBOL);
	            }

	            break;
	        case 148:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4749;
	            this.match(MySQLParser.DROP_SYMBOL);
	            this.state = 4750;
	            this.match(MySQLParser.HISTOGRAM_SYMBOL);
	            this.state = 4751;
	            this.match(MySQLParser.ON_SYMBOL);
	            this.state = 4752;
	            this.identifierList();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkOption() {
	    let localctx = new CheckOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 568, MySQLParser.RULE_checkOption);
	    var _la = 0;
	    try {
	        this.state = 4758;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 200:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4755;
	            this.match(MySQLParser.FOR_SYMBOL);
	            this.state = 4756;
	            this.match(MySQLParser.UPGRADE_SYMBOL);
	            break;
	        case 56:
	        case 180:
	        case 184:
	        case 333:
	        case 431:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4757;
	            _la = this._input.LA(1);
	            if(!(_la===56 || _la===180 || _la===184 || _la===333 || _la===431)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repairType() {
	    let localctx = new RepairTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 570, MySQLParser.RULE_repairType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4760;
	        _la = this._input.LA(1);
	        if(!(_la===180 || _la===431 || _la===619)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	installUninstallStatment() {
	    let localctx = new InstallUninstallStatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 572, MySQLParser.RULE_installUninstallStatment);
	    var _la = 0;
	    try {
	        this.state = 4784;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,574,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4762;
	            localctx.action = this.match(MySQLParser.INSTALL_SYMBOL);
	            this.state = 4763;
	            localctx.type = this.match(MySQLParser.PLUGIN_SYMBOL);
	            this.state = 4764;
	            this.identifier();
	            this.state = 4765;
	            this.match(MySQLParser.SONAME_SYMBOL);
	            this.state = 4766;
	            this.textStringLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4768;
	            localctx.action = this.match(MySQLParser.INSTALL_SYMBOL);
	            this.state = 4769;
	            localctx.type = this.match(MySQLParser.COMPONENT_SYMBOL);
	            this.state = 4770;
	            this.textStringLiteralList();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4771;
	            localctx.action = this.match(MySQLParser.UNINSTALL_SYMBOL);
	            this.state = 4772;
	            localctx.type = this.match(MySQLParser.PLUGIN_SYMBOL);
	            this.state = 4773;
	            this.pluginRef();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4774;
	            localctx.action = this.match(MySQLParser.UNINSTALL_SYMBOL);
	            this.state = 4775;
	            localctx.type = this.match(MySQLParser.COMPONENT_SYMBOL);
	            this.state = 4776;
	            this.componentRef();
	            this.state = 4781;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 4777;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 4778;
	                this.componentRef();
	                this.state = 4783;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStatement() {
	    let localctx = new SetStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 574, MySQLParser.RULE_setStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4786;
	        this.match(MySQLParser.SET_SYMBOL);
	        this.state = 4787;
	        this.startOptionValueList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startOptionValueList() {
	    let localctx = new StartOptionValueListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 576, MySQLParser.RULE_startOptionValueList);
	    var _la = 0;
	    try {
	        this.state = 4845;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,584,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4789;
	            this.optionValueNoOptionType();
	            this.state = 4790;
	            this.optionValueListContinued();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4792;
	            this.match(MySQLParser.TRANSACTION_SYMBOL);
	            this.state = 4793;
	            this.transactionCharacteristics();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4794;
	            this.optionType();
	            this.state = 4795;
	            this.startOptionValueListFollowingOptionType();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4797;
	            this.match(MySQLParser.PASSWORD_SYMBOL);
	            this.state = 4800;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200) {
	                this.state = 4798;
	                this.match(MySQLParser.FOR_SYMBOL);
	                this.state = 4799;
	                this.user();
	            }

	            this.state = 4802;
	            this.equal();
	            this.state = 4829;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,580,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4803;
	                this.textString();
	                this.state = 4805;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===458) {
	                    this.state = 4804;
	                    this.replacePassword();
	                }

	                this.state = 4808;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===727) {
	                    this.state = 4807;
	                    this.retainCurrentPassword();
	                }

	                break;

	            case 2:
	                this.state = 4810;
	                this.textString();
	                this.state = 4812;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===458) {
	                    this.state = 4811;
	                    this.replacePassword();
	                }

	                this.state = 4815;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===727) {
	                    this.state = 4814;
	                    this.retainCurrentPassword();
	                }

	                break;

	            case 3:
	                this.state = 4817;
	                if (!( serverVersion < 50706)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50706");
	                }
	                this.state = 4818;
	                this.match(MySQLParser.OLD_PASSWORD_SYMBOL);
	                this.state = 4819;
	                this.match(MySQLParser.OPEN_PAR_SYMBOL);
	                this.state = 4820;
	                this.textString();
	                this.state = 4821;
	                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	                break;

	            case 4:
	                this.state = 4823;
	                if (!( serverVersion < 80014)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80014");
	                }
	                this.state = 4824;
	                this.match(MySQLParser.PASSWORD_SYMBOL);
	                this.state = 4825;
	                this.match(MySQLParser.OPEN_PAR_SYMBOL);
	                this.state = 4826;
	                this.textString();
	                this.state = 4827;
	                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	                break;

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4831;
	            if (!( serverVersion >= 80018)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80018");
	            }
	            this.state = 4832;
	            this.match(MySQLParser.PASSWORD_SYMBOL);
	            this.state = 4835;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200) {
	                this.state = 4833;
	                this.match(MySQLParser.FOR_SYMBOL);
	                this.state = 4834;
	                this.user();
	            }

	            this.state = 4837;
	            this.match(MySQLParser.TO_SYMBOL);
	            this.state = 4838;
	            this.match(MySQLParser.RANDOM_SYMBOL);
	            this.state = 4840;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===458) {
	                this.state = 4839;
	                this.replacePassword();
	            }

	            this.state = 4843;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===727) {
	                this.state = 4842;
	                this.retainCurrentPassword();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionCharacteristics() {
	    let localctx = new TransactionCharacteristicsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 578, MySQLParser.RULE_transactionCharacteristics);
	    var _la = 0;
	    try {
	        this.state = 4856;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 435:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4847;
	            this.transactionAccessMode();
	            this.state = 4849;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===258) {
	                this.state = 4848;
	                this.isolationLevel();
	            }

	            break;
	        case 258:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4851;
	            this.isolationLevel();
	            this.state = 4854;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 4852;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 4853;
	                this.transactionAccessMode();
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	transactionAccessMode() {
	    let localctx = new TransactionAccessModeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 580, MySQLParser.RULE_transactionAccessMode);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4858;
	        this.match(MySQLParser.READ_SYMBOL);
	        this.state = 4859;
	        _la = this._input.LA(1);
	        if(!(_la===386 || _la===649)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	isolationLevel() {
	    let localctx = new IsolationLevelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 582, MySQLParser.RULE_isolationLevel);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4861;
	        this.match(MySQLParser.ISOLATION_SYMBOL);
	        this.state = 4862;
	        this.match(MySQLParser.LEVEL_SYMBOL);
	        this.state = 4868;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 456:
	            this.state = 4863;
	            this.match(MySQLParser.REPEATABLE_SYMBOL);
	            this.state = 4864;
	            this.match(MySQLParser.READ_SYMBOL);
	            break;
	        case 435:
	            this.state = 4865;
	            this.match(MySQLParser.READ_SYMBOL);
	            this.state = 4866;
	            _la = this._input.LA(1);
	            if(!(_la===76 || _la===601)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 500:
	            this.state = 4867;
	            this.match(MySQLParser.SERIALIZABLE_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionValueListContinued() {
	    let localctx = new OptionValueListContinuedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 584, MySQLParser.RULE_optionValueListContinued);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4874;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 4870;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 4871;
	            this.optionValue();
	            this.state = 4876;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionValueNoOptionType() {
	    let localctx = new OptionValueNoOptionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 586, MySQLParser.RULE_optionValueNoOptionType);
	    var _la = 0;
	    try {
	        this.state = 4902;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,592,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4877;
	            this.internalVariableName();
	            this.state = 4878;
	            this.equal();
	            this.state = 4879;
	            this.setExprOrDefault();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4881;
	            this.charsetClause();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4882;
	            this.userVariable();
	            this.state = 4883;
	            this.equal();
	            this.state = 4884;
	            this.expr(0);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 4886;
	            this.setSystemVariable();
	            this.state = 4887;
	            this.equal();
	            this.state = 4888;
	            this.setExprOrDefault();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 4890;
	            this.match(MySQLParser.NAMES_SYMBOL);
	            this.state = 4900;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,591,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4891;
	                this.equal();
	                this.state = 4892;
	                this.expr(0);
	                break;

	            case 2:
	                this.state = 4894;
	                this.charsetName();
	                this.state = 4896;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===69) {
	                    this.state = 4895;
	                    this.collate();
	                }

	                break;

	            case 3:
	                this.state = 4898;
	                if (!( serverVersion >= 80011)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
	                }
	                this.state = 4899;
	                this.match(MySQLParser.DEFAULT_SYMBOL);
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionValue() {
	    let localctx = new OptionValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 588, MySQLParser.RULE_optionValue);
	    try {
	        this.state = 4910;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,593,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4904;
	            this.optionType();
	            this.state = 4905;
	            this.internalVariableName();
	            this.state = 4906;
	            this.equal();
	            this.state = 4907;
	            this.setExprOrDefault();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4909;
	            this.optionValueNoOptionType();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setSystemVariable() {
	    let localctx = new SetSystemVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 590, MySQLParser.RULE_setSystemVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4912;
	        this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
	        this.state = 4914;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,594,this._ctx);
	        if(la_===1) {
	            this.state = 4913;
	            this.setVarIdentType();

	        }
	        this.state = 4916;
	        this.internalVariableName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	startOptionValueListFollowingOptionType() {
	    let localctx = new StartOptionValueListFollowingOptionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 592, MySQLParser.RULE_startOptionValueListFollowingOptionType);
	    try {
	        this.state = 4923;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,595,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4918;
	            this.optionValueFollowingOptionType();
	            this.state = 4919;
	            this.optionValueListContinued();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4921;
	            this.match(MySQLParser.TRANSACTION_SYMBOL);
	            this.state = 4922;
	            this.transactionCharacteristics();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionValueFollowingOptionType() {
	    let localctx = new OptionValueFollowingOptionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 594, MySQLParser.RULE_optionValueFollowingOptionType);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4925;
	        this.internalVariableName();
	        this.state = 4926;
	        this.equal();
	        this.state = 4927;
	        this.setExprOrDefault();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setExprOrDefault() {
	    let localctx = new SetExprOrDefaultContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 596, MySQLParser.RULE_setExprOrDefault);
	    var _la = 0;
	    try {
	        this.state = 4933;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,596,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 4929;
	            this.expr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 4930;
	            _la = this._input.LA(1);
	            if(!(_la===10 || _la===32 || _la===128 || _la===383)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 4931;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 4932;
	            _la = this._input.LA(1);
	            if(!(_la===487 || _la===710)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStatement() {
	    let localctx = new ShowStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 598, MySQLParser.RULE_showStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 4935;
	        this.match(MySQLParser.SHOW_SYMBOL);
	        this.state = 5155;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,640,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 4936;
	            if (!( serverVersion < 50700)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50700");
	            }
	            this.state = 4937;
	            localctx.value = this.match(MySQLParser.AUTHORS_SYMBOL);
	            break;

	        case 2:
	            this.state = 4938;
	            localctx.value = this.match(MySQLParser.DATABASES_SYMBOL);
	            this.state = 4940;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275 || _la===643) {
	                this.state = 4939;
	                this.likeOrWhere();
	            }

	            break;

	        case 3:
	            this.state = 4943;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,598,this._ctx);
	            if(la_===1) {
	                this.state = 4942;
	                this.showCommandType();

	            }
	            this.state = 4945;
	            localctx.value = this.match(MySQLParser.TABLES_SYMBOL);
	            this.state = 4947;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===203 || _la===251) {
	                this.state = 4946;
	                this.inDb();
	            }

	            this.state = 4950;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275 || _la===643) {
	                this.state = 4949;
	                this.likeOrWhere();
	            }

	            break;

	        case 4:
	            this.state = 4953;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===204) {
	                this.state = 4952;
	                this.match(MySQLParser.FULL_SYMBOL);
	            }

	            this.state = 4955;
	            localctx.value = this.match(MySQLParser.TRIGGERS_SYMBOL);
	            this.state = 4957;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===203 || _la===251) {
	                this.state = 4956;
	                this.inDb();
	            }

	            this.state = 4960;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275 || _la===643) {
	                this.state = 4959;
	                this.likeOrWhere();
	            }

	            break;

	        case 5:
	            this.state = 4962;
	            localctx.value = this.match(MySQLParser.EVENTS_SYMBOL);
	            this.state = 4964;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===203 || _la===251) {
	                this.state = 4963;
	                this.inDb();
	            }

	            this.state = 4967;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275 || _la===643) {
	                this.state = 4966;
	                this.likeOrWhere();
	            }

	            break;

	        case 6:
	            this.state = 4969;
	            localctx.value = this.match(MySQLParser.TABLE_SYMBOL);
	            this.state = 4970;
	            this.match(MySQLParser.STATUS_SYMBOL);
	            this.state = 4972;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===203 || _la===251) {
	                this.state = 4971;
	                this.inDb();
	            }

	            this.state = 4975;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275 || _la===643) {
	                this.state = 4974;
	                this.likeOrWhere();
	            }

	            break;

	        case 7:
	            this.state = 4977;
	            localctx.value = this.match(MySQLParser.OPEN_SYMBOL);
	            this.state = 4978;
	            this.match(MySQLParser.TABLES_SYMBOL);
	            this.state = 4980;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===203 || _la===251) {
	                this.state = 4979;
	                this.inDb();
	            }

	            this.state = 4983;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275 || _la===643) {
	                this.state = 4982;
	                this.likeOrWhere();
	            }

	            break;

	        case 8:
	            this.state = 4985;
	            localctx.value = this.match(MySQLParser.PLUGINS_SYMBOL);
	            break;

	        case 9:
	            this.state = 4986;
	            localctx.value = this.match(MySQLParser.ENGINE_SYMBOL);
	            this.state = 4989;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,610,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 4987;
	                this.engineRef();
	                break;

	            case 2:
	                this.state = 4988;
	                this.match(MySQLParser.ALL_SYMBOL);
	                break;

	            }
	            this.state = 4991;
	            _la = this._input.LA(1);
	            if(!(_la===289 || _la===354 || _la===547)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 10:
	            this.state = 4993;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,611,this._ctx);
	            if(la_===1) {
	                this.state = 4992;
	                this.showCommandType();

	            }
	            this.state = 4995;
	            localctx.value = this.match(MySQLParser.COLUMNS_SYMBOL);
	            this.state = 4996;
	            _la = this._input.LA(1);
	            if(!(_la===203 || _la===251)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 4997;
	            this.tableRef();
	            this.state = 4999;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===203 || _la===251) {
	                this.state = 4998;
	                this.inDb();
	            }

	            this.state = 5002;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275 || _la===643) {
	                this.state = 5001;
	                this.likeOrWhere();
	            }

	            break;

	        case 11:
	            this.state = 5004;
	            _la = this._input.LA(1);
	            if(!(_la===32 || _la===316)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5005;
	            localctx.value = this.match(MySQLParser.LOGS_SYMBOL);
	            break;

	        case 12:
	            this.state = 5006;
	            localctx.value = this.match(MySQLParser.SLAVE_SYMBOL);
	            this.state = 5013;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 225:
	                this.state = 5007;
	                this.match(MySQLParser.HOSTS_SYMBOL);
	                break;
	            case 547:
	                this.state = 5008;
	                this.match(MySQLParser.STATUS_SYMBOL);
	                this.state = 5009;
	                this.nonBlocking();
	                this.state = 5011;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,614,this._ctx);
	                if(la_===1) {
	                    this.state = 5010;
	                    this.channel();

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        case 13:
	            this.state = 5015;
	            localctx.value = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===33 || _la===446)) {
	                localctx.value = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5016;
	            this.match(MySQLParser.EVENTS_SYMBOL);
	            this.state = 5019;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,616,this._ctx);
	            if(la_===1) {
	                this.state = 5017;
	                this.match(MySQLParser.IN_SYMBOL);
	                this.state = 5018;
	                this.textString();

	            }
	            this.state = 5023;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,617,this._ctx);
	            if(la_===1) {
	                this.state = 5021;
	                this.match(MySQLParser.FROM_SYMBOL);
	                this.state = 5022;
	                this.ulonglong_number();

	            }
	            this.state = 5026;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,618,this._ctx);
	            if(la_===1) {
	                this.state = 5025;
	                this.limitClause();

	            }
	            this.state = 5029;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,619,this._ctx);
	            if(la_===1) {
	                this.state = 5028;
	                this.channel();

	            }
	            break;

	        case 14:
	            this.state = 5033;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,620,this._ctx);
	            if(la_===1) {
	                this.state = 5031;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5032;
	                this.match(MySQLParser.EXTENDED_SYMBOL);

	            }
	            this.state = 5035;
	            localctx.value = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 235)) & ~0x1f) === 0 && ((1 << (_la - 235)) & 268435459) !== 0))) {
	                localctx.value = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5036;
	            this.fromOrIn();
	            this.state = 5037;
	            this.tableRef();
	            this.state = 5039;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===203 || _la===251) {
	                this.state = 5038;
	                this.inDb();
	            }

	            this.state = 5042;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===643) {
	                this.state = 5041;
	                this.whereClause();
	            }

	            break;

	        case 15:
	            this.state = 5045;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===553) {
	                this.state = 5044;
	                this.match(MySQLParser.STORAGE_SYMBOL);
	            }

	            this.state = 5047;
	            localctx.value = this.match(MySQLParser.ENGINES_SYMBOL);
	            break;

	        case 16:
	            this.state = 5048;
	            this.match(MySQLParser.COUNT_SYMBOL);
	            this.state = 5049;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5050;
	            this.match(MySQLParser.MULT_OPERATOR);
	            this.state = 5051;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5052;
	            localctx.value = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===166 || _la===639)) {
	                localctx.value = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 17:
	            this.state = 5053;
	            localctx.value = this.match(MySQLParser.WARNINGS_SYMBOL);
	            this.state = 5055;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===276) {
	                this.state = 5054;
	                this.limitClause();
	            }

	            break;

	        case 18:
	            this.state = 5057;
	            localctx.value = this.match(MySQLParser.ERRORS_SYMBOL);
	            this.state = 5059;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===276) {
	                this.state = 5058;
	                this.limitClause();
	            }

	            break;

	        case 19:
	            this.state = 5061;
	            localctx.value = this.match(MySQLParser.PROFILES_SYMBOL);
	            break;

	        case 20:
	            this.state = 5062;
	            localctx.value = this.match(MySQLParser.PROFILE_SYMBOL);
	            this.state = 5071;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10 || _la===40 || _la===91 || _la===96 || _la===256 || _la===334 || _la===400 || _la===522 || _la===567) {
	                this.state = 5063;
	                this.profileType();
	                this.state = 5068;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===773) {
	                    this.state = 5064;
	                    this.match(MySQLParser.COMMA_SYMBOL);
	                    this.state = 5065;
	                    this.profileType();
	                    this.state = 5070;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	            }

	            this.state = 5076;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200) {
	                this.state = 5073;
	                this.match(MySQLParser.FOR_SYMBOL);
	                this.state = 5074;
	                this.match(MySQLParser.QUERY_SYMBOL);
	                this.state = 5075;
	                this.match(MySQLParser.INT_NUMBER);
	            }

	            this.state = 5079;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===276) {
	                this.state = 5078;
	                this.limitClause();
	            }

	            break;

	        case 21:
	            this.state = 5082;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===214 || _la===284 || _la===502 || _la===658 || _la===673) {
	                this.state = 5081;
	                this.optionType();
	            }

	            this.state = 5084;
	            localctx.value = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===547 || _la===631)) {
	                localctx.value = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5086;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275 || _la===643) {
	                this.state = 5085;
	                this.likeOrWhere();
	            }

	            break;

	        case 22:
	            this.state = 5089;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===204) {
	                this.state = 5088;
	                this.match(MySQLParser.FULL_SYMBOL);
	            }

	            this.state = 5091;
	            localctx.value = this.match(MySQLParser.PROCESSLIST_SYMBOL);
	            break;

	        case 23:
	            this.state = 5092;
	            this.charset();
	            this.state = 5094;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275 || _la===643) {
	                this.state = 5093;
	                this.likeOrWhere();
	            }

	            break;

	        case 24:
	            this.state = 5096;
	            localctx.value = this.match(MySQLParser.COLLATION_SYMBOL);
	            this.state = 5098;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275 || _la===643) {
	                this.state = 5097;
	                this.likeOrWhere();
	            }

	            break;

	        case 25:
	            this.state = 5100;
	            if (!( serverVersion < 50700)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50700");
	            }
	            this.state = 5101;
	            localctx.value = this.match(MySQLParser.CONTRIBUTORS_SYMBOL);
	            break;

	        case 26:
	            this.state = 5102;
	            localctx.value = this.match(MySQLParser.PRIVILEGES_SYMBOL);
	            break;

	        case 27:
	            this.state = 5103;
	            localctx.value = this.match(MySQLParser.GRANTS_SYMBOL);
	            this.state = 5106;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200) {
	                this.state = 5104;
	                this.match(MySQLParser.FOR_SYMBOL);
	                this.state = 5105;
	                this.user();
	            }

	            break;

	        case 28:
	            this.state = 5108;
	            localctx.value = this.match(MySQLParser.GRANTS_SYMBOL);
	            this.state = 5109;
	            this.match(MySQLParser.FOR_SYMBOL);
	            this.state = 5110;
	            this.user();
	            this.state = 5111;
	            this.match(MySQLParser.USING_SYMBOL);
	            this.state = 5112;
	            this.userList();
	            break;

	        case 29:
	            this.state = 5114;
	            localctx.value = this.match(MySQLParser.MASTER_SYMBOL);
	            this.state = 5115;
	            this.match(MySQLParser.STATUS_SYMBOL);
	            break;

	        case 30:
	            this.state = 5116;
	            localctx.value = this.match(MySQLParser.CREATE_SYMBOL);
	            this.state = 5137;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,637,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5117;
	                localctx.object = this.match(MySQLParser.DATABASE_SYMBOL);
	                this.state = 5119;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,636,this._ctx);
	                if(la_===1) {
	                    this.state = 5118;
	                    this.ifNotExists();

	                }
	                this.state = 5121;
	                this.schemaRef();
	                break;

	            case 2:
	                this.state = 5122;
	                localctx.object = this.match(MySQLParser.EVENT_SYMBOL);
	                this.state = 5123;
	                this.eventRef();
	                break;

	            case 3:
	                this.state = 5124;
	                localctx.object = this.match(MySQLParser.FUNCTION_SYMBOL);
	                this.state = 5125;
	                this.functionRef();
	                break;

	            case 4:
	                this.state = 5126;
	                localctx.object = this.match(MySQLParser.PROCEDURE_SYMBOL);
	                this.state = 5127;
	                this.procedureRef();
	                break;

	            case 5:
	                this.state = 5128;
	                localctx.object = this.match(MySQLParser.TABLE_SYMBOL);
	                this.state = 5129;
	                this.tableRef();
	                break;

	            case 6:
	                this.state = 5130;
	                localctx.object = this.match(MySQLParser.TRIGGER_SYMBOL);
	                this.state = 5131;
	                this.triggerRef();
	                break;

	            case 7:
	                this.state = 5132;
	                localctx.object = this.match(MySQLParser.VIEW_SYMBOL);
	                this.state = 5133;
	                this.viewRef();
	                break;

	            case 8:
	                this.state = 5134;
	                if (!( serverVersion >= 50704)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50704");
	                }
	                this.state = 5135;
	                localctx.object = this.match(MySQLParser.USER_SYMBOL);
	                this.state = 5136;
	                this.user();
	                break;

	            }
	            break;

	        case 31:
	            this.state = 5139;
	            localctx.value = this.match(MySQLParser.PROCEDURE_SYMBOL);
	            this.state = 5140;
	            this.match(MySQLParser.STATUS_SYMBOL);
	            this.state = 5142;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275 || _la===643) {
	                this.state = 5141;
	                this.likeOrWhere();
	            }

	            break;

	        case 32:
	            this.state = 5144;
	            localctx.value = this.match(MySQLParser.FUNCTION_SYMBOL);
	            this.state = 5145;
	            this.match(MySQLParser.STATUS_SYMBOL);
	            this.state = 5147;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===275 || _la===643) {
	                this.state = 5146;
	                this.likeOrWhere();
	            }

	            break;

	        case 33:
	            this.state = 5149;
	            localctx.value = this.match(MySQLParser.PROCEDURE_SYMBOL);
	            this.state = 5150;
	            this.match(MySQLParser.CODE_SYMBOL);
	            this.state = 5151;
	            this.procedureRef();
	            break;

	        case 34:
	            this.state = 5152;
	            localctx.value = this.match(MySQLParser.FUNCTION_SYMBOL);
	            this.state = 5153;
	            this.match(MySQLParser.CODE_SYMBOL);
	            this.state = 5154;
	            this.functionRef();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showCommandType() {
	    let localctx = new ShowCommandTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 600, MySQLParser.RULE_showCommandType);
	    var _la = 0;
	    try {
	        this.state = 5163;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,642,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5157;
	            this.match(MySQLParser.FULL_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5158;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 5159;
	            this.match(MySQLParser.EXTENDED_SYMBOL);
	            this.state = 5161;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===204) {
	                this.state = 5160;
	                this.match(MySQLParser.FULL_SYMBOL);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nonBlocking() {
	    let localctx = new NonBlockingContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 602, MySQLParser.RULE_nonBlocking);
	    try {
	        this.state = 5170;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,644,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5165;
	            if (!( serverVersion >= 50700 && serverVersion < 50706)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700 && serverVersion < 50706");
	            }
	            this.state = 5167;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,643,this._ctx);
	            if(la_===1) {
	                this.state = 5166;
	                this.match(MySQLParser.NONBLOCKING_SYMBOL);

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromOrIn() {
	    let localctx = new FromOrInContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 604, MySQLParser.RULE_fromOrIn);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5172;
	        _la = this._input.LA(1);
	        if(!(_la===203 || _la===251)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inDb() {
	    let localctx = new InDbContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 606, MySQLParser.RULE_inDb);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5174;
	        this.fromOrIn();
	        this.state = 5175;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	profileType() {
	    let localctx = new ProfileTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 608, MySQLParser.RULE_profileType);
	    var _la = 0;
	    try {
	        this.state = 5184;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 40:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5177;
	            this.match(MySQLParser.BLOCK_SYMBOL);
	            this.state = 5178;
	            this.match(MySQLParser.IO_SYMBOL);
	            break;
	        case 91:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5179;
	            this.match(MySQLParser.CONTEXT_SYMBOL);
	            this.state = 5180;
	            this.match(MySQLParser.SWITCHES_SYMBOL);
	            break;
	        case 400:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5181;
	            this.match(MySQLParser.PAGE_SYMBOL);
	            this.state = 5182;
	            this.match(MySQLParser.FAULTS_SYMBOL);
	            break;
	        case 10:
	        case 96:
	        case 256:
	        case 334:
	        case 522:
	        case 567:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5183;
	            _la = this._input.LA(1);
	            if(!(_la===10 || _la===96 || _la===256 || _la===334 || _la===522 || _la===567)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	otherAdministrativeStatement() {
	    let localctx = new OtherAdministrativeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 610, MySQLParser.RULE_otherAdministrativeStatement);
	    var _la = 0;
	    try {
	        this.state = 5223;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,651,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5186;
	            localctx.type = this.match(MySQLParser.BINLOG_SYMBOL);
	            this.state = 5187;
	            this.textLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5188;
	            localctx.type = this.match(MySQLParser.CACHE_SYMBOL);
	            this.state = 5189;
	            this.match(MySQLParser.INDEX_SYMBOL);
	            this.state = 5190;
	            this.keyCacheListOrParts();
	            this.state = 5191;
	            this.match(MySQLParser.IN_SYMBOL);
	            this.state = 5194;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,646,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5192;
	                this.identifier();
	                break;

	            case 2:
	                this.state = 5193;
	                this.match(MySQLParser.DEFAULT_SYMBOL);
	                break;

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5196;
	            localctx.type = this.match(MySQLParser.FLUSH_SYMBOL);
	            this.state = 5198;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,647,this._ctx);
	            if(la_===1) {
	                this.state = 5197;
	                this.noWriteToBinLog();

	            }
	            this.state = 5209;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,649,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5200;
	                this.flushTables();
	                break;

	            case 2:
	                this.state = 5201;
	                this.flushOption();
	                this.state = 5206;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                while(_la===773) {
	                    this.state = 5202;
	                    this.match(MySQLParser.COMMA_SYMBOL);
	                    this.state = 5203;
	                    this.flushOption();
	                    this.state = 5208;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                }
	                break;

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5211;
	            localctx.type = this.match(MySQLParser.KILL_SYMBOL);
	            this.state = 5213;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,650,this._ctx);
	            if(la_===1) {
	                this.state = 5212;
	                _la = this._input.LA(1);
	                if(!(_la===84 || _la===430)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 5215;
	            this.expr(0);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5216;
	            localctx.type = this.match(MySQLParser.LOAD_SYMBOL);
	            this.state = 5217;
	            this.match(MySQLParser.INDEX_SYMBOL);
	            this.state = 5218;
	            this.match(MySQLParser.INTO_SYMBOL);
	            this.state = 5219;
	            this.match(MySQLParser.CACHE_SYMBOL);
	            this.state = 5220;
	            this.preloadTail();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5221;
	            if (!( serverVersion >= 50709)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50709");
	            }
	            this.state = 5222;
	            localctx.type = this.match(MySQLParser.SHUTDOWN_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyCacheListOrParts() {
	    let localctx = new KeyCacheListOrPartsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 612, MySQLParser.RULE_keyCacheListOrParts);
	    try {
	        this.state = 5227;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,652,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5225;
	            this.keyCacheList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5226;
	            this.assignToKeycachePartition();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyCacheList() {
	    let localctx = new KeyCacheListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 614, MySQLParser.RULE_keyCacheList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5229;
	        this.assignToKeycache();
	        this.state = 5234;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 5230;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 5231;
	            this.assignToKeycache();
	            this.state = 5236;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignToKeycache() {
	    let localctx = new AssignToKeycacheContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 616, MySQLParser.RULE_assignToKeycache);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5237;
	        this.tableRef();
	        this.state = 5239;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===236 || _la===265) {
	            this.state = 5238;
	            this.cacheKeyList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignToKeycachePartition() {
	    let localctx = new AssignToKeycachePartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 618, MySQLParser.RULE_assignToKeycachePartition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5241;
	        this.tableRef();
	        this.state = 5242;
	        this.match(MySQLParser.PARTITION_SYMBOL);
	        this.state = 5243;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 5244;
	        this.allOrPartitionNameList();
	        this.state = 5245;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	        this.state = 5247;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===236 || _la===265) {
	            this.state = 5246;
	            this.cacheKeyList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cacheKeyList() {
	    let localctx = new CacheKeyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 620, MySQLParser.RULE_cacheKeyList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5249;
	        this.keyOrIndex();
	        this.state = 5250;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 5252;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,656,this._ctx);
	        if(la_===1) {
	            this.state = 5251;
	            this.keyUsageList();

	        }
	        this.state = 5254;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyUsageElement() {
	    let localctx = new KeyUsageElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 622, MySQLParser.RULE_keyUsageElement);
	    try {
	        this.state = 5258;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,657,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5256;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5257;
	            this.match(MySQLParser.PRIMARY_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyUsageList() {
	    let localctx = new KeyUsageListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 624, MySQLParser.RULE_keyUsageList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5260;
	        this.keyUsageElement();
	        this.state = 5265;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 5261;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 5262;
	            this.keyUsageElement();
	            this.state = 5267;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flushOption() {
	    let localctx = new FlushOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 626, MySQLParser.RULE_flushOption);
	    var _la = 0;
	    try {
	        this.state = 5283;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,661,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5268;
	            localctx.option = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===136 || _la===225 || _la===421 || _la===547 || _la===617)) {
	                localctx.option = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5270;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===32 || _la===163 || _la===165 || _la===208 || _la===515) {
	                this.state = 5269;
	                this.logType();
	            }

	            this.state = 5272;
	            localctx.option = this.match(MySQLParser.LOGS_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5273;
	            localctx.option = this.match(MySQLParser.RELAY_SYMBOL);
	            this.state = 5274;
	            this.match(MySQLParser.LOGS_SYMBOL);
	            this.state = 5276;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,660,this._ctx);
	            if(la_===1) {
	                this.state = 5275;
	                this.channel();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5278;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 5279;
	            localctx.option = this.match(MySQLParser.QUERY_SYMBOL);
	            this.state = 5280;
	            this.match(MySQLParser.CACHE_SYMBOL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5281;
	            if (!( serverVersion >= 50706)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
	            }
	            this.state = 5282;
	            localctx.option = this.match(MySQLParser.OPTIMIZER_COSTS_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logType() {
	    let localctx = new LogTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 628, MySQLParser.RULE_logType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5285;
	        _la = this._input.LA(1);
	        if(!(_la===32 || _la===163 || _la===165 || _la===208 || _la===515)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flushTables() {
	    let localctx = new FlushTablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 630, MySQLParser.RULE_flushTables);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5287;
	        _la = this._input.LA(1);
	        if(!(_la===571 || _la===574)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5295;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,663,this._ctx);
	        if(la_===1) {
	            this.state = 5288;
	            this.match(MySQLParser.WITH_SYMBOL);
	            this.state = 5289;
	            this.match(MySQLParser.READ_SYMBOL);
	            this.state = 5290;
	            this.match(MySQLParser.LOCK_SYMBOL);

	        } else if(la_===2) {
	            this.state = 5291;
	            this.identifierList();
	            this.state = 5293;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,662,this._ctx);
	            if(la_===1) {
	                this.state = 5292;
	                this.flushTablesOptions();

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	flushTablesOptions() {
	    let localctx = new FlushTablesOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 632, MySQLParser.RULE_flushTablesOptions);
	    try {
	        this.state = 5303;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,664,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5297;
	            if (!( serverVersion >= 50606)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50606");
	            }
	            this.state = 5298;
	            this.match(MySQLParser.FOR_SYMBOL);
	            this.state = 5299;
	            this.match(MySQLParser.EXPORT_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5300;
	            this.match(MySQLParser.WITH_SYMBOL);
	            this.state = 5301;
	            this.match(MySQLParser.READ_SYMBOL);
	            this.state = 5302;
	            this.match(MySQLParser.LOCK_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preloadTail() {
	    let localctx = new PreloadTailContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 634, MySQLParser.RULE_preloadTail);
	    var _la = 0;
	    try {
	        this.state = 5315;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,667,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5305;
	            this.tableRef();
	            this.state = 5306;
	            this.adminPartition();
	            this.state = 5308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===236 || _la===265) {
	                this.state = 5307;
	                this.cacheKeyList();
	            }

	            this.state = 5312;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===232) {
	                this.state = 5310;
	                this.match(MySQLParser.IGNORE_SYMBOL);
	                this.state = 5311;
	                this.match(MySQLParser.LEAVES_SYMBOL);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5314;
	            this.preloadList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preloadList() {
	    let localctx = new PreloadListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 636, MySQLParser.RULE_preloadList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5317;
	        this.preloadKeys();
	        this.state = 5322;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 5318;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 5319;
	            this.preloadKeys();
	            this.state = 5324;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	preloadKeys() {
	    let localctx = new PreloadKeysContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 638, MySQLParser.RULE_preloadKeys);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5325;
	        this.tableRef();
	        this.state = 5327;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===236 || _la===265) {
	            this.state = 5326;
	            this.cacheKeyList();
	        }

	        this.state = 5331;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===232) {
	            this.state = 5329;
	            this.match(MySQLParser.IGNORE_SYMBOL);
	            this.state = 5330;
	            this.match(MySQLParser.LEAVES_SYMBOL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	adminPartition() {
	    let localctx = new AdminPartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 640, MySQLParser.RULE_adminPartition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5333;
	        this.match(MySQLParser.PARTITION_SYMBOL);
	        this.state = 5334;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 5335;
	        this.allOrPartitionNameList();
	        this.state = 5336;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceGroupManagement() {
	    let localctx = new ResourceGroupManagementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 642, MySQLParser.RULE_resourceGroupManagement);
	    try {
	        this.state = 5342;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 97:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5338;
	            this.createResourceGroup();
	            break;
	        case 11:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5339;
	            this.alterResourceGroup();
	            break;
	        case 506:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5340;
	            this.setResourceGroup();
	            break;
	        case 148:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5341;
	            this.dropResourceGroup();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createResourceGroup() {
	    let localctx = new CreateResourceGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 644, MySQLParser.RULE_createResourceGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5344;
	        this.match(MySQLParser.CREATE_SYMBOL);
	        this.state = 5345;
	        this.match(MySQLParser.RESOURCE_SYMBOL);
	        this.state = 5346;
	        this.match(MySQLParser.GROUP_SYMBOL);
	        this.state = 5347;
	        this.identifier();
	        this.state = 5348;
	        this.match(MySQLParser.TYPE_SYMBOL);
	        this.state = 5350;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===750 || _la===751) {
	            this.state = 5349;
	            this.equal();
	        }

	        this.state = 5352;
	        _la = this._input.LA(1);
	        if(!(_la===618 || _la===710)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5354;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===711) {
	            this.state = 5353;
	            this.resourceGroupVcpuList();
	        }

	        this.state = 5357;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===708) {
	            this.state = 5356;
	            this.resourceGroupPriority();
	        }

	        this.state = 5360;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140 || _la===156) {
	            this.state = 5359;
	            this.resourceGroupEnableDisable();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceGroupVcpuList() {
	    let localctx = new ResourceGroupVcpuListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 646, MySQLParser.RULE_resourceGroupVcpuList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5362;
	        this.match(MySQLParser.VCPU_SYMBOL);
	        this.state = 5364;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===750 || _la===751) {
	            this.state = 5363;
	            this.equal();
	        }

	        this.state = 5366;
	        this.vcpuNumOrRange();
	        this.state = 5373;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===747 || _la===773) {
	            this.state = 5368;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 5367;
	                this.match(MySQLParser.COMMA_SYMBOL);
	            }

	            this.state = 5370;
	            this.vcpuNumOrRange();
	            this.state = 5375;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	vcpuNumOrRange() {
	    let localctx = new VcpuNumOrRangeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 648, MySQLParser.RULE_vcpuNumOrRange);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5376;
	        this.match(MySQLParser.INT_NUMBER);
	        this.state = 5379;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===759) {
	            this.state = 5377;
	            this.match(MySQLParser.MINUS_OPERATOR);
	            this.state = 5378;
	            this.match(MySQLParser.INT_NUMBER);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceGroupPriority() {
	    let localctx = new ResourceGroupPriorityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 650, MySQLParser.RULE_resourceGroupPriority);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5381;
	        this.match(MySQLParser.THREAD_PRIORITY_SYMBOL);
	        this.state = 5383;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===750 || _la===751) {
	            this.state = 5382;
	            this.equal();
	        }

	        this.state = 5385;
	        this.match(MySQLParser.INT_NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceGroupEnableDisable() {
	    let localctx = new ResourceGroupEnableDisableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 652, MySQLParser.RULE_resourceGroupEnableDisable);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5387;
	        _la = this._input.LA(1);
	        if(!(_la===140 || _la===156)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterResourceGroup() {
	    let localctx = new AlterResourceGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 654, MySQLParser.RULE_alterResourceGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5389;
	        this.match(MySQLParser.ALTER_SYMBOL);
	        this.state = 5390;
	        this.match(MySQLParser.RESOURCE_SYMBOL);
	        this.state = 5391;
	        this.match(MySQLParser.GROUP_SYMBOL);
	        this.state = 5392;
	        this.resourceGroupRef();
	        this.state = 5394;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===711) {
	            this.state = 5393;
	            this.resourceGroupVcpuList();
	        }

	        this.state = 5397;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===708) {
	            this.state = 5396;
	            this.resourceGroupPriority();
	        }

	        this.state = 5400;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===140 || _la===156) {
	            this.state = 5399;
	            this.resourceGroupEnableDisable();
	        }

	        this.state = 5403;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===198) {
	            this.state = 5402;
	            this.match(MySQLParser.FORCE_SYMBOL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setResourceGroup() {
	    let localctx = new SetResourceGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 656, MySQLParser.RULE_setResourceGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5405;
	        this.match(MySQLParser.SET_SYMBOL);
	        this.state = 5406;
	        this.match(MySQLParser.RESOURCE_SYMBOL);
	        this.state = 5407;
	        this.match(MySQLParser.GROUP_SYMBOL);
	        this.state = 5408;
	        this.identifier();
	        this.state = 5411;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===200) {
	            this.state = 5409;
	            this.match(MySQLParser.FOR_SYMBOL);
	            this.state = 5410;
	            this.threadIdList();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	threadIdList() {
	    let localctx = new ThreadIdListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 658, MySQLParser.RULE_threadIdList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5413;
	        this.real_ulong_number();
	        this.state = 5420;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 747)) & ~0x1f) === 0 && ((1 << (_la - 747)) & 67108871) !== 0) || _la===788) {
	            this.state = 5415;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 5414;
	                this.match(MySQLParser.COMMA_SYMBOL);
	            }

	            this.state = 5417;
	            this.real_ulong_number();
	            this.state = 5422;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropResourceGroup() {
	    let localctx = new DropResourceGroupContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 660, MySQLParser.RULE_dropResourceGroup);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5423;
	        this.match(MySQLParser.DROP_SYMBOL);
	        this.state = 5424;
	        this.match(MySQLParser.RESOURCE_SYMBOL);
	        this.state = 5425;
	        this.match(MySQLParser.GROUP_SYMBOL);
	        this.state = 5426;
	        this.resourceGroupRef();
	        this.state = 5428;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===198) {
	            this.state = 5427;
	            this.match(MySQLParser.FORCE_SYMBOL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	utilityStatement() {
	    let localctx = new UtilityStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 662, MySQLParser.RULE_utilityStatement);
	    try {
	        this.state = 5436;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,689,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5430;
	            this.describeStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5431;
	            this.explainStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5432;
	            this.helpCommand();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5433;
	            this.useCommand();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5434;
	            if (!( serverVersion >= 80011)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
	            }
	            this.state = 5435;
	            this.restartServer();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeStatement() {
	    let localctx = new DescribeStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 664, MySQLParser.RULE_describeStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5438;
	        _la = this._input.LA(1);
	        if(!(_la===134 || _la===135 || _la===178)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5439;
	        this.tableRef();
	        this.state = 5442;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,690,this._ctx);
	        if(la_===1) {
	            this.state = 5440;
	            this.textString();

	        } else if(la_===2) {
	            this.state = 5441;
	            this.columnRef();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainStatement() {
	    let localctx = new ExplainStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 666, MySQLParser.RULE_explainStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5444;
	        _la = this._input.LA(1);
	        if(!(_la===134 || _la===135 || _la===178)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5460;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,691,this._ctx);
	        if(la_===1) {
	            this.state = 5445;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 5446;
	            this.match(MySQLParser.EXTENDED_SYMBOL);

	        } else if(la_===2) {
	            this.state = 5447;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 5448;
	            this.match(MySQLParser.PARTITIONS_SYMBOL);

	        } else if(la_===3) {
	            this.state = 5449;
	            if (!( serverVersion >= 50605)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50605");
	            }
	            this.state = 5450;
	            this.match(MySQLParser.FORMAT_SYMBOL);
	            this.state = 5451;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 5452;
	            this.textOrIdentifier();

	        } else if(la_===4) {
	            this.state = 5453;
	            if (!( serverVersion >= 80018)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80018");
	            }
	            this.state = 5454;
	            this.match(MySQLParser.ANALYZE_SYMBOL);

	        } else if(la_===5) {
	            this.state = 5455;
	            if (!( serverVersion >= 80019)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80019");
	            }
	            this.state = 5456;
	            this.match(MySQLParser.ANALYZE_SYMBOL);
	            this.state = 5457;
	            this.match(MySQLParser.FORMAT_SYMBOL);
	            this.state = 5458;
	            this.match(MySQLParser.EQUAL_OPERATOR);
	            this.state = 5459;
	            this.textOrIdentifier();

	        }
	        this.state = 5462;
	        this.explainableStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainableStatement() {
	    let localctx = new ExplainableStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 668, MySQLParser.RULE_explainableStatement);
	    try {
	        this.state = 5476;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,693,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5464;
	            this.selectStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5465;
	            if (!( serverVersion >= 50603)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50603");
	            }
	            this.state = 5470;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,692,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5466;
	                this.deleteStatement();
	                break;

	            case 2:
	                this.state = 5467;
	                this.insertStatement();
	                break;

	            case 3:
	                this.state = 5468;
	                this.replaceStatement();
	                break;

	            case 4:
	                this.state = 5469;
	                this.updateStatement();
	                break;

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5472;
	            if (!( serverVersion >= 50700)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
	            }
	            this.state = 5473;
	            this.match(MySQLParser.FOR_SYMBOL);
	            this.state = 5474;
	            this.match(MySQLParser.CONNECTION_SYMBOL);
	            this.state = 5475;
	            this.real_ulong_number();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	helpCommand() {
	    let localctx = new HelpCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 670, MySQLParser.RULE_helpCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5478;
	        this.match(MySQLParser.HELP_SYMBOL);
	        this.state = 5479;
	        this.textOrIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useCommand() {
	    let localctx = new UseCommandContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 672, MySQLParser.RULE_useCommand);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5481;
	        this.match(MySQLParser.USE_SYMBOL);
	        this.state = 5482;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	restartServer() {
	    let localctx = new RestartServerContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 674, MySQLParser.RULE_restartServer);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5484;
	        this.match(MySQLParser.RESTART_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	expr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 676;
	    this.enterRecursionRule(localctx, 676, MySQLParser.RULE_expr, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5497;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,696,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExprIsContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 5487;
	            this.boolPri(0);
	            this.state = 5493;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,695,this._ctx);
	            if(la_===1) {
	                this.state = 5488;
	                this.match(MySQLParser.IS_SYMBOL);
	                this.state = 5490;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===371 || _la===745) {
	                    this.state = 5489;
	                    this.notRule();
	                }

	                this.state = 5492;
	                localctx.type = this._input.LT(1);
	                _la = this._input.LA(1);
	                if(!(_la===183 || _la===596 || _la===610)) {
	                    localctx.type = this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;

	        case 2:
	            localctx = new ExprNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5495;
	            this.match(MySQLParser.NOT_SYMBOL);
	            this.state = 5496;
	            this.expr(4);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 5510;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,698,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 5508;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,697,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ExprAndContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
	                    this.state = 5499;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 5500;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===15 || _la===767)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 5501;
	                    this.expr(4);
	                    break;

	                case 2:
	                    localctx = new ExprXorContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
	                    this.state = 5502;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 5503;
	                    this.match(MySQLParser.XOR_SYMBOL);
	                    this.state = 5504;
	                    this.expr(3);
	                    break;

	                case 3:
	                    localctx = new ExprOrContext(this, new ExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_expr);
	                    this.state = 5505;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 5506;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===394 || _la===770)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 5507;
	                    this.expr(2);
	                    break;

	                } 
	            }
	            this.state = 5512;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,698,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	boolPri(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BoolPriContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 678;
	    this.enterRecursionRule(localctx, 678, MySQLParser.RULE_boolPri, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        localctx = new PrimaryExprPredicateContext(this, localctx);
	        this._ctx = localctx;
	        _prevctx = localctx;

	        this.state = 5514;
	        this.predicate();
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 5533;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,701,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 5531;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,700,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new PrimaryExprIsNullContext(this, new BoolPriContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
	                    this.state = 5516;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 5517;
	                    this.match(MySQLParser.IS_SYMBOL);
	                    this.state = 5519;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===371 || _la===745) {
	                        this.state = 5518;
	                        this.notRule();
	                    }

	                    this.state = 5521;
	                    this.match(MySQLParser.NULL_SYMBOL);
	                    break;

	                case 2:
	                    localctx = new PrimaryExprCompareContext(this, new BoolPriContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
	                    this.state = 5522;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 5523;
	                    this.compOp();
	                    this.state = 5524;
	                    this.predicate();
	                    break;

	                case 3:
	                    localctx = new PrimaryExprAllAnyContext(this, new BoolPriContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_boolPri);
	                    this.state = 5526;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 5527;
	                    this.compOp();
	                    this.state = 5528;
	                    _la = this._input.LA(1);
	                    if(!(_la===10 || _la===16)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 5529;
	                    this.subquery();
	                    break;

	                } 
	            }
	            this.state = 5535;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,701,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	compOp() {
	    let localctx = new CompOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 680, MySQLParser.RULE_compOp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5536;
	        _la = this._input.LA(1);
	        if(!(((((_la - 750)) & ~0x1f) === 0 && ((1 << (_la - 750)) & 253) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicate() {
	    let localctx = new PredicateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 682, MySQLParser.RULE_predicate);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5538;
	        this.bitExpr(0);
	        this.state = 5552;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,704,this._ctx);
	        if(la_===1) {
	            this.state = 5540;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===371 || _la===745) {
	                this.state = 5539;
	                this.notRule();
	            }

	            this.state = 5542;
	            this.predicateOperations();

	        } else if(la_===2) {
	            this.state = 5543;
	            if (!( serverVersion >= 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	            }
	            this.state = 5544;
	            this.match(MySQLParser.MEMBER_SYMBOL);
	            this.state = 5546;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===668) {
	                this.state = 5545;
	                this.match(MySQLParser.OF_SYMBOL);
	            }

	            this.state = 5548;
	            this.simpleExprWithParentheses();

	        } else if(la_===3) {
	            this.state = 5549;
	            this.match(MySQLParser.SOUNDS_SYMBOL);
	            this.state = 5550;
	            this.match(MySQLParser.LIKE_SYMBOL);
	            this.state = 5551;
	            this.bitExpr(0);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	predicateOperations() {
	    let localctx = new PredicateOperationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 684, MySQLParser.RULE_predicateOperations);
	    try {
	        this.state = 5575;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 251:
	            localctx = new PredicateExprInContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5554;
	            this.match(MySQLParser.IN_SYMBOL);
	            this.state = 5560;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,705,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5555;
	                this.subquery();
	                break;

	            case 2:
	                this.state = 5556;
	                this.match(MySQLParser.OPEN_PAR_SYMBOL);
	                this.state = 5557;
	                this.exprList();
	                this.state = 5558;
	                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	                break;

	            }
	            break;
	        case 30:
	            localctx = new PredicateExprBetweenContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5562;
	            this.match(MySQLParser.BETWEEN_SYMBOL);
	            this.state = 5563;
	            this.bitExpr(0);
	            this.state = 5564;
	            this.match(MySQLParser.AND_SYMBOL);
	            this.state = 5565;
	            this.predicate();
	            break;
	        case 275:
	            localctx = new PredicateExprLikeContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5567;
	            this.match(MySQLParser.LIKE_SYMBOL);
	            this.state = 5568;
	            this.simpleExpr(0);
	            this.state = 5571;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,706,this._ctx);
	            if(la_===1) {
	                this.state = 5569;
	                this.match(MySQLParser.ESCAPE_SYMBOL);
	                this.state = 5570;
	                this.simpleExpr(0);

	            }
	            break;
	        case 444:
	            localctx = new PredicateExprRegexContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5573;
	            this.match(MySQLParser.REGEXP_SYMBOL);
	            this.state = 5574;
	            this.bitExpr(0);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	bitExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new BitExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 686;
	    this.enterRecursionRule(localctx, 686, MySQLParser.RULE_bitExpr, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5578;
	        this.simpleExpr(0);
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 5606;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,709,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 5604;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,708,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
	                    this.state = 5580;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 5581;
	                    localctx.op = this.match(MySQLParser.BITWISE_XOR_OPERATOR);
	                    this.state = 5582;
	                    this.bitExpr(8);
	                    break;

	                case 2:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
	                    this.state = 5583;
	                    if (!( this.precpred(this._ctx, 6))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 6)");
	                    }
	                    this.state = 5584;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===145 || _la===349 || ((((_la - 760)) & ~0x1f) === 0 && ((1 << (_la - 760)) & 7) !== 0))) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 5585;
	                    this.bitExpr(7);
	                    break;

	                case 3:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
	                    this.state = 5586;
	                    if (!( this.precpred(this._ctx, 5))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 5)");
	                    }
	                    this.state = 5587;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===758 || _la===759)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 5588;
	                    this.bitExpr(6);
	                    break;

	                case 4:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
	                    this.state = 5589;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 5590;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===765 || _la===766)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 5591;
	                    this.bitExpr(4);
	                    break;

	                case 5:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
	                    this.state = 5592;
	                    if (!( this.precpred(this._ctx, 2))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 2)");
	                    }
	                    this.state = 5593;
	                    localctx.op = this.match(MySQLParser.BITWISE_AND_OPERATOR);
	                    this.state = 5594;
	                    this.bitExpr(3);
	                    break;

	                case 6:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
	                    this.state = 5595;
	                    if (!( this.precpred(this._ctx, 1))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                    }
	                    this.state = 5596;
	                    localctx.op = this.match(MySQLParser.BITWISE_OR_OPERATOR);
	                    this.state = 5597;
	                    this.bitExpr(2);
	                    break;

	                case 7:
	                    localctx = new BitExprContext(this, _parentctx, _parentState);
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_bitExpr);
	                    this.state = 5598;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 5599;
	                    localctx.op = this._input.LT(1);
	                    _la = this._input.LA(1);
	                    if(!(_la===758 || _la===759)) {
	                        localctx.op = this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 5600;
	                    this.match(MySQLParser.INTERVAL_SYMBOL);
	                    this.state = 5601;
	                    this.expr(0);
	                    this.state = 5602;
	                    this.interval();
	                    break;

	                } 
	            }
	            this.state = 5608;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,709,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}


	simpleExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new SimpleExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 688;
	    this.enterRecursionRule(localctx, 688, MySQLParser.RULE_simpleExpr, _p);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5718;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,719,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SimpleExprVariableContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 5610;
	            this.variable();
	            this.state = 5614;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,710,this._ctx);
	            if(la_===1) {
	                this.state = 5611;
	                this.equal();
	                this.state = 5612;
	                this.expr(0);

	            }
	            break;

	        case 2:
	            localctx = new SimpleExprColumnRefContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5616;
	            this.columnRef();
	            this.state = 5618;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,711,this._ctx);
	            if(la_===1) {
	                this.state = 5617;
	                this.jsonOperator();

	            }
	            break;

	        case 3:
	            localctx = new SimpleExprRuntimeFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5620;
	            this.runtimeFunctionCall();
	            break;

	        case 4:
	            localctx = new SimpleExprFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5621;
	            this.functionCall();
	            break;

	        case 5:
	            localctx = new SimpleExprLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5622;
	            this.literal();
	            break;

	        case 6:
	            localctx = new SimpleExprParamMarkerContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5623;
	            this.match(MySQLParser.PARAM_MARKER);
	            break;

	        case 7:
	            localctx = new SimpleExprSumContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5624;
	            this.sumExpr();
	            break;

	        case 8:
	            localctx = new SimpleExprGroupingOperationContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5625;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 5626;
	            this.groupingOperation();
	            break;

	        case 9:
	            localctx = new SimpleExprWindowingFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5627;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 5628;
	            this.windowFunctionCall();
	            break;

	        case 10:
	            localctx = new SimpleExprUnaryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5629;
	            localctx.op = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 758)) & ~0x1f) === 0 && ((1 << (_la - 758)) & 67) !== 0))) {
	                localctx.op = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5630;
	            this.simpleExpr(14);
	            break;

	        case 11:
	            localctx = new SimpleExprNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5631;
	            this.not2Rule();
	            this.state = 5632;
	            this.simpleExpr(13);
	            break;

	        case 12:
	            localctx = new SimpleExprListContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5635;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===487) {
	                this.state = 5634;
	                this.match(MySQLParser.ROW_SYMBOL);
	            }

	            this.state = 5637;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5638;
	            this.exprList();
	            this.state = 5639;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 13:
	            localctx = new SimpleExprSubQueryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5642;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===174) {
	                this.state = 5641;
	                this.match(MySQLParser.EXISTS_SYMBOL);
	            }

	            this.state = 5644;
	            this.subquery();
	            break;

	        case 14:
	            localctx = new SimpleExprOdbcContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5645;
	            this.match(MySQLParser.OPEN_CURLY_SYMBOL);
	            this.state = 5646;
	            this.identifier();
	            this.state = 5647;
	            this.expr(0);
	            this.state = 5648;
	            this.match(MySQLParser.CLOSE_CURLY_SYMBOL);
	            break;

	        case 15:
	            localctx = new SimpleExprMatchContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5650;
	            this.match(MySQLParser.MATCH_SYMBOL);
	            this.state = 5651;
	            this.identListArg();
	            this.state = 5652;
	            this.match(MySQLParser.AGAINST_SYMBOL);
	            this.state = 5653;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5654;
	            this.bitExpr(0);
	            this.state = 5656;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===251 || _la===645) {
	                this.state = 5655;
	                this.fulltextOptions();
	            }

	            this.state = 5658;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 16:
	            localctx = new SimpleExprBinaryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5660;
	            this.match(MySQLParser.BINARY_SYMBOL);
	            this.state = 5661;
	            this.simpleExpr(8);
	            break;

	        case 17:
	            localctx = new SimpleExprCastContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5662;
	            this.match(MySQLParser.CAST_SYMBOL);
	            this.state = 5663;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5664;
	            this.expr(0);
	            this.state = 5665;
	            this.match(MySQLParser.AS_SYMBOL);
	            this.state = 5666;
	            this.castType();
	            this.state = 5668;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,715,this._ctx);
	            if(la_===1) {
	                this.state = 5667;
	                this.arrayCast();

	            }
	            this.state = 5670;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 18:
	            localctx = new SimpleExprCaseContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5672;
	            this.match(MySQLParser.CASE_SYMBOL);
	            this.state = 5674;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,716,this._ctx);
	            if(la_===1) {
	                this.state = 5673;
	                this.expr(0);

	            }
	            this.state = 5679; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 5676;
	                this.whenExpression();
	                this.state = 5677;
	                this.thenExpression();
	                this.state = 5681; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===642);
	            this.state = 5684;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===154) {
	                this.state = 5683;
	                this.elseExpression();
	            }

	            this.state = 5686;
	            this.match(MySQLParser.END_SYMBOL);
	            break;

	        case 19:
	            localctx = new SimpleExprConvertContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5688;
	            this.match(MySQLParser.CONVERT_SYMBOL);
	            this.state = 5689;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5690;
	            this.expr(0);
	            this.state = 5691;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 5692;
	            this.castType();
	            this.state = 5693;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 20:
	            localctx = new SimpleExprConvertUsingContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5695;
	            this.match(MySQLParser.CONVERT_SYMBOL);
	            this.state = 5696;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5697;
	            this.expr(0);
	            this.state = 5698;
	            this.match(MySQLParser.USING_SYMBOL);
	            this.state = 5699;
	            this.charsetName();
	            this.state = 5700;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 21:
	            localctx = new SimpleExprDefaultContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5702;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            this.state = 5703;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5704;
	            this.simpleIdentifier();
	            this.state = 5705;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 22:
	            localctx = new SimpleExprValuesContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5707;
	            this.match(MySQLParser.VALUES_SYMBOL);
	            this.state = 5708;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5709;
	            this.simpleIdentifier();
	            this.state = 5710;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 23:
	            localctx = new SimpleExprIntervalContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 5712;
	            this.match(MySQLParser.INTERVAL_SYMBOL);
	            this.state = 5713;
	            this.expr(0);
	            this.state = 5714;
	            this.interval();
	            this.state = 5715;
	            this.match(MySQLParser.PLUS_OPERATOR);
	            this.state = 5716;
	            this.expr(0);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 5728;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,721,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 5726;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,720,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new SimpleExprConcatContext(this, new SimpleExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_simpleExpr);
	                    this.state = 5720;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 5721;
	                    this.match(MySQLParser.CONCAT_PIPES_SYMBOL);
	                    this.state = 5722;
	                    this.simpleExpr(16);
	                    break;

	                case 2:
	                    localctx = new SimpleExprCollateContext(this, new SimpleExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, MySQLParser.RULE_simpleExpr);
	                    this.state = 5723;
	                    if (!( this.precpred(this._ctx, 21))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 21)");
	                    }
	                    this.state = 5724;
	                    this.match(MySQLParser.COLLATE_SYMBOL);
	                    this.state = 5725;
	                    this.textOrIdentifier();
	                    break;

	                } 
	            }
	            this.state = 5730;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,721,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	arrayCast() {
	    let localctx = new ArrayCastContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 690, MySQLParser.RULE_arrayCast);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5731;
	        if (!( serverVersion >= 80017)) {
	            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	        }
	        this.state = 5732;
	        this.match(MySQLParser.ARRAY_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsonOperator() {
	    let localctx = new JsonOperatorContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 692, MySQLParser.RULE_jsonOperator);
	    try {
	        this.state = 5740;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,722,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5734;
	            if (!( serverVersion >= 50708)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50708");
	            }
	            this.state = 5735;
	            this.match(MySQLParser.JSON_SEPARATOR_SYMBOL);
	            this.state = 5736;
	            this.textStringLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5737;
	            if (!( serverVersion >= 50713)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50713");
	            }
	            this.state = 5738;
	            this.match(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL);
	            this.state = 5739;
	            this.textStringLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sumExpr() {
	    let localctx = new SumExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 694, MySQLParser.RULE_sumExpr);
	    var _la = 0;
	    try {
	        this.state = 5873;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,745,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5742;
	            localctx.name = this.match(MySQLParser.AVG_SYMBOL);
	            this.state = 5743;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5745;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,723,this._ctx);
	            if(la_===1) {
	                this.state = 5744;
	                this.match(MySQLParser.DISTINCT_SYMBOL);

	            }
	            this.state = 5747;
	            this.inSumExpr();
	            this.state = 5748;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5751;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,724,this._ctx);
	            if(la_===1) {
	                this.state = 5749;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5750;
	                this.windowingClause();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5753;
	            localctx.name = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 35)) & ~0x1f) === 0 && ((1 << (_la - 35)) & 11) !== 0))) {
	                localctx.name = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5754;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5755;
	            this.inSumExpr();
	            this.state = 5756;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5759;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,725,this._ctx);
	            if(la_===1) {
	                this.state = 5757;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5758;
	                this.windowingClause();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5761;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 5762;
	            this.jsonFunction();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5763;
	            localctx.name = this.match(MySQLParser.COUNT_SYMBOL);
	            this.state = 5764;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5766;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===10) {
	                this.state = 5765;
	                this.match(MySQLParser.ALL_SYMBOL);
	            }

	            this.state = 5768;
	            this.match(MySQLParser.MULT_OPERATOR);
	            this.state = 5769;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5772;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,727,this._ctx);
	            if(la_===1) {
	                this.state = 5770;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5771;
	                this.windowingClause();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5774;
	            localctx.name = this.match(MySQLParser.COUNT_SYMBOL);
	            this.state = 5775;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5783;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,729,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 5777;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===10) {
	                    this.state = 5776;
	                    this.match(MySQLParser.ALL_SYMBOL);
	                }

	                this.state = 5779;
	                this.match(MySQLParser.MULT_OPERATOR);
	                break;

	            case 2:
	                this.state = 5780;
	                this.inSumExpr();
	                break;

	            case 3:
	                this.state = 5781;
	                this.match(MySQLParser.DISTINCT_SYMBOL);
	                this.state = 5782;
	                this.exprList();
	                break;

	            }
	            this.state = 5785;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5788;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,730,this._ctx);
	            if(la_===1) {
	                this.state = 5786;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5787;
	                this.windowingClause();

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 5790;
	            localctx.name = this.match(MySQLParser.MIN_SYMBOL);
	            this.state = 5791;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5793;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,731,this._ctx);
	            if(la_===1) {
	                this.state = 5792;
	                this.match(MySQLParser.DISTINCT_SYMBOL);

	            }
	            this.state = 5795;
	            this.inSumExpr();
	            this.state = 5796;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5799;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,732,this._ctx);
	            if(la_===1) {
	                this.state = 5797;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5798;
	                this.windowingClause();

	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 5801;
	            localctx.name = this.match(MySQLParser.MAX_SYMBOL);
	            this.state = 5802;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5804;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,733,this._ctx);
	            if(la_===1) {
	                this.state = 5803;
	                this.match(MySQLParser.DISTINCT_SYMBOL);

	            }
	            this.state = 5806;
	            this.inSumExpr();
	            this.state = 5807;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5810;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,734,this._ctx);
	            if(la_===1) {
	                this.state = 5808;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5809;
	                this.windowingClause();

	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 5812;
	            localctx.name = this.match(MySQLParser.STD_SYMBOL);
	            this.state = 5813;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5814;
	            this.inSumExpr();
	            this.state = 5815;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5818;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,735,this._ctx);
	            if(la_===1) {
	                this.state = 5816;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5817;
	                this.windowingClause();

	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 5820;
	            localctx.name = this.match(MySQLParser.VARIANCE_SYMBOL);
	            this.state = 5821;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5822;
	            this.inSumExpr();
	            this.state = 5823;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5826;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,736,this._ctx);
	            if(la_===1) {
	                this.state = 5824;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5825;
	                this.windowingClause();

	            }
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 5828;
	            localctx.name = this.match(MySQLParser.STDDEV_SAMP_SYMBOL);
	            this.state = 5829;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5830;
	            this.inSumExpr();
	            this.state = 5831;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5834;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,737,this._ctx);
	            if(la_===1) {
	                this.state = 5832;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5833;
	                this.windowingClause();

	            }
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 5836;
	            localctx.name = this.match(MySQLParser.VAR_SAMP_SYMBOL);
	            this.state = 5837;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5838;
	            this.inSumExpr();
	            this.state = 5839;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5842;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,738,this._ctx);
	            if(la_===1) {
	                this.state = 5840;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5841;
	                this.windowingClause();

	            }
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 5844;
	            localctx.name = this.match(MySQLParser.SUM_SYMBOL);
	            this.state = 5845;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5847;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,739,this._ctx);
	            if(la_===1) {
	                this.state = 5846;
	                this.match(MySQLParser.DISTINCT_SYMBOL);

	            }
	            this.state = 5849;
	            this.inSumExpr();
	            this.state = 5850;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5853;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,740,this._ctx);
	            if(la_===1) {
	                this.state = 5851;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5852;
	                this.windowingClause();

	            }
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 5855;
	            localctx.name = this.match(MySQLParser.GROUP_CONCAT_SYMBOL);
	            this.state = 5856;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5858;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,741,this._ctx);
	            if(la_===1) {
	                this.state = 5857;
	                this.match(MySQLParser.DISTINCT_SYMBOL);

	            }
	            this.state = 5860;
	            this.exprList();
	            this.state = 5862;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===393) {
	                this.state = 5861;
	                this.orderClause();
	            }

	            this.state = 5866;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===499) {
	                this.state = 5864;
	                this.match(MySQLParser.SEPARATOR_SYMBOL);
	                this.state = 5865;
	                this.textString();
	            }

	            this.state = 5868;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5871;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,744,this._ctx);
	            if(la_===1) {
	                this.state = 5869;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 5870;
	                this.windowingClause();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingOperation() {
	    let localctx = new GroupingOperationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 696, MySQLParser.RULE_groupingOperation);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5875;
	        this.match(MySQLParser.GROUPING_SYMBOL);
	        this.state = 5876;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 5877;
	        this.exprList();
	        this.state = 5878;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowFunctionCall() {
	    let localctx = new WindowFunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 698, MySQLParser.RULE_windowFunctionCall);
	    var _la = 0;
	    try {
	        this.state = 5922;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 678:
	        case 679:
	        case 692:
	        case 694:
	        case 696:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5880;
	            _la = this._input.LA(1);
	            if(!(((((_la - 678)) & ~0x1f) === 0 && ((1 << (_la - 678)) & 344067) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5881;
	            this.parentheses();
	            this.state = 5882;
	            this.windowingClause();
	            break;
	        case 688:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5884;
	            this.match(MySQLParser.NTILE_SYMBOL);
	            this.state = 5885;
	            this.simpleExprWithParentheses();
	            this.state = 5886;
	            this.windowingClause();
	            break;
	        case 684:
	        case 686:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5888;
	            _la = this._input.LA(1);
	            if(!(_la===684 || _la===686)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5889;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5890;
	            this.expr(0);
	            this.state = 5892;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 5891;
	                this.leadLagInfo();
	            }

	            this.state = 5894;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5896;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===232 || _la===695) {
	                this.state = 5895;
	                this.nullTreatment();
	            }

	            this.state = 5898;
	            this.windowingClause();
	            break;
	        case 681:
	        case 685:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 5900;
	            _la = this._input.LA(1);
	            if(!(_la===681 || _la===685)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 5901;
	            this.exprWithParentheses();
	            this.state = 5903;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===232 || _la===695) {
	                this.state = 5902;
	                this.nullTreatment();
	            }

	            this.state = 5905;
	            this.windowingClause();
	            break;
	        case 687:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 5907;
	            this.match(MySQLParser.NTH_VALUE_SYMBOL);
	            this.state = 5908;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5909;
	            this.expr(0);
	            this.state = 5910;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 5911;
	            this.simpleExpr(0);
	            this.state = 5912;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5915;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===203) {
	                this.state = 5913;
	                this.match(MySQLParser.FROM_SYMBOL);
	                this.state = 5914;
	                _la = this._input.LA(1);
	                if(!(_la===191 || _la===268)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 5918;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===232 || _la===695) {
	                this.state = 5917;
	                this.nullTreatment();
	            }

	            this.state = 5920;
	            this.windowingClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowingClause() {
	    let localctx = new WindowingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 700, MySQLParser.RULE_windowingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5924;
	        this.match(MySQLParser.OVER_SYMBOL);
	        this.state = 5927;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,752,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 5925;
	            this.windowName();
	            break;

	        case 2:
	            this.state = 5926;
	            this.windowSpec();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leadLagInfo() {
	    let localctx = new LeadLagInfoContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 702, MySQLParser.RULE_leadLagInfo);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5929;
	        this.match(MySQLParser.COMMA_SYMBOL);
	        this.state = 5932;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 747:
	        case 748:
	        case 749:
	        case 790:
	        case 791:
	            this.state = 5930;
	            this.ulonglong_number();
	            break;
	        case 787:
	            this.state = 5931;
	            this.match(MySQLParser.PARAM_MARKER);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 5936;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===773) {
	            this.state = 5934;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 5935;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullTreatment() {
	    let localctx = new NullTreatmentContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 704, MySQLParser.RULE_nullTreatment);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5938;
	        _la = this._input.LA(1);
	        if(!(_la===232 || _la===695)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 5939;
	        this.match(MySQLParser.NULLS_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	jsonFunction() {
	    let localctx = new JsonFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 706, MySQLParser.RULE_jsonFunction);
	    try {
	        this.state = 5957;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 667:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5941;
	            this.match(MySQLParser.JSON_ARRAYAGG_SYMBOL);
	            this.state = 5942;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5943;
	            this.inSumExpr();
	            this.state = 5944;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5946;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,755,this._ctx);
	            if(la_===1) {
	                this.state = 5945;
	                this.windowingClause();

	            }
	            break;
	        case 666:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5948;
	            this.match(MySQLParser.JSON_OBJECTAGG_SYMBOL);
	            this.state = 5949;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5950;
	            this.inSumExpr();
	            this.state = 5951;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 5952;
	            this.inSumExpr();
	            this.state = 5953;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            this.state = 5955;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,756,this._ctx);
	            if(la_===1) {
	                this.state = 5954;
	                this.windowingClause();

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	inSumExpr() {
	    let localctx = new InSumExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 708, MySQLParser.RULE_inSumExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5960;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,758,this._ctx);
	        if(la_===1) {
	            this.state = 5959;
	            this.match(MySQLParser.ALL_SYMBOL);

	        }
	        this.state = 5962;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identListArg() {
	    let localctx = new IdentListArgContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 710, MySQLParser.RULE_identListArg);
	    try {
	        this.state = 5969;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,759,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5964;
	            this.identList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5965;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5966;
	            this.identList();
	            this.state = 5967;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identList() {
	    let localctx = new IdentListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 712, MySQLParser.RULE_identList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 5971;
	        this.simpleIdentifier();
	        this.state = 5976;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 5972;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 5973;
	            this.simpleIdentifier();
	            this.state = 5978;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fulltextOptions() {
	    let localctx = new FulltextOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 714, MySQLParser.RULE_fulltextOptions);
	    var _la = 0;
	    try {
	        this.state = 5994;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,762,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5979;
	            this.match(MySQLParser.IN_SYMBOL);
	            this.state = 5980;
	            this.match(MySQLParser.BOOLEAN_SYMBOL);
	            this.state = 5981;
	            this.match(MySQLParser.MODE_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 5982;
	            this.match(MySQLParser.IN_SYMBOL);
	            this.state = 5983;
	            this.match(MySQLParser.NATURAL_SYMBOL);
	            this.state = 5984;
	            this.match(MySQLParser.LANGUAGE_SYMBOL);
	            this.state = 5985;
	            this.match(MySQLParser.MODE_SYMBOL);
	            this.state = 5989;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===645) {
	                this.state = 5986;
	                this.match(MySQLParser.WITH_SYMBOL);
	                this.state = 5987;
	                this.match(MySQLParser.QUERY_SYMBOL);
	                this.state = 5988;
	                this.match(MySQLParser.EXPANSION_SYMBOL);
	            }

	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 5991;
	            this.match(MySQLParser.WITH_SYMBOL);
	            this.state = 5992;
	            this.match(MySQLParser.QUERY_SYMBOL);
	            this.state = 5993;
	            this.match(MySQLParser.EXPANSION_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	runtimeFunctionCall() {
	    let localctx = new RuntimeFunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 716, MySQLParser.RULE_runtimeFunctionCall);
	    var _la = 0;
	    try {
	        this.state = 6269;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,780,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 5996;
	            localctx.name = this.match(MySQLParser.CHAR_SYMBOL);
	            this.state = 5997;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 5998;
	            this.exprList();
	            this.state = 6001;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===621) {
	                this.state = 5999;
	                this.match(MySQLParser.USING_SYMBOL);
	                this.state = 6000;
	                this.charsetName();
	            }

	            this.state = 6003;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6005;
	            localctx.name = this.match(MySQLParser.CURRENT_USER_SYMBOL);
	            this.state = 6007;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,764,this._ctx);
	            if(la_===1) {
	                this.state = 6006;
	                this.parentheses();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6009;
	            localctx.name = this.match(MySQLParser.DATE_SYMBOL);
	            this.state = 6010;
	            this.exprWithParentheses();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6011;
	            localctx.name = this.match(MySQLParser.DAY_SYMBOL);
	            this.state = 6012;
	            this.exprWithParentheses();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6013;
	            localctx.name = this.match(MySQLParser.HOUR_SYMBOL);
	            this.state = 6014;
	            this.exprWithParentheses();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6015;
	            localctx.name = this.match(MySQLParser.INSERT_SYMBOL);
	            this.state = 6016;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6017;
	            this.expr(0);
	            this.state = 6018;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6019;
	            this.expr(0);
	            this.state = 6020;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6021;
	            this.expr(0);
	            this.state = 6022;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6023;
	            this.expr(0);
	            this.state = 6024;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6026;
	            localctx.name = this.match(MySQLParser.INTERVAL_SYMBOL);
	            this.state = 6027;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6028;
	            this.expr(0);
	            this.state = 6031; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 6029;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6030;
	                this.expr(0);
	                this.state = 6033; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===773);
	            this.state = 6035;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6037;
	            localctx.name = this.match(MySQLParser.LEFT_SYMBOL);
	            this.state = 6038;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6039;
	            this.expr(0);
	            this.state = 6040;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6041;
	            this.expr(0);
	            this.state = 6042;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6044;
	            localctx.name = this.match(MySQLParser.MINUTE_SYMBOL);
	            this.state = 6045;
	            this.exprWithParentheses();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6046;
	            localctx.name = this.match(MySQLParser.MONTH_SYMBOL);
	            this.state = 6047;
	            this.exprWithParentheses();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 6048;
	            localctx.name = this.match(MySQLParser.RIGHT_SYMBOL);
	            this.state = 6049;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6050;
	            this.expr(0);
	            this.state = 6051;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6052;
	            this.expr(0);
	            this.state = 6053;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6055;
	            localctx.name = this.match(MySQLParser.SECOND_SYMBOL);
	            this.state = 6056;
	            this.exprWithParentheses();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6057;
	            localctx.name = this.match(MySQLParser.TIME_SYMBOL);
	            this.state = 6058;
	            this.exprWithParentheses();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 6059;
	            localctx.name = this.match(MySQLParser.TIMESTAMP_SYMBOL);
	            this.state = 6060;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6061;
	            this.expr(0);
	            this.state = 6064;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 6062;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6063;
	                this.expr(0);
	            }

	            this.state = 6066;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 6068;
	            this.trimFunction();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 6069;
	            localctx.name = this.match(MySQLParser.USER_SYMBOL);
	            this.state = 6070;
	            this.parentheses();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 6071;
	            localctx.name = this.match(MySQLParser.VALUES_SYMBOL);
	            this.state = 6072;
	            this.exprWithParentheses();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 6073;
	            localctx.name = this.match(MySQLParser.YEAR_SYMBOL);
	            this.state = 6074;
	            this.exprWithParentheses();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 6075;
	            localctx.name = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===5 || _la===558)) {
	                localctx.name = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6076;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6077;
	            this.expr(0);
	            this.state = 6078;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6084;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,767,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6079;
	                this.expr(0);
	                break;

	            case 2:
	                this.state = 6080;
	                this.match(MySQLParser.INTERVAL_SYMBOL);
	                this.state = 6081;
	                this.expr(0);
	                this.state = 6082;
	                this.interval();
	                break;

	            }
	            this.state = 6086;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 6088;
	            localctx.name = this.match(MySQLParser.CURDATE_SYMBOL);
	            this.state = 6090;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,768,this._ctx);
	            if(la_===1) {
	                this.state = 6089;
	                this.parentheses();

	            }
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 6092;
	            localctx.name = this.match(MySQLParser.CURTIME_SYMBOL);
	            this.state = 6094;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,769,this._ctx);
	            if(la_===1) {
	                this.state = 6093;
	                this.timeFunctionParameters();

	            }
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 6096;
	            localctx.name = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===114 || _la===115)) {
	                localctx.name = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6097;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6098;
	            this.expr(0);
	            this.state = 6099;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6100;
	            this.match(MySQLParser.INTERVAL_SYMBOL);
	            this.state = 6101;
	            this.expr(0);
	            this.state = 6102;
	            this.interval();
	            this.state = 6103;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 6105;
	            localctx.name = this.match(MySQLParser.EXTRACT_SYMBOL);
	            this.state = 6106;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6107;
	            this.interval();
	            this.state = 6108;
	            this.match(MySQLParser.FROM_SYMBOL);
	            this.state = 6109;
	            this.expr(0);
	            this.state = 6110;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 6112;
	            localctx.name = this.match(MySQLParser.GET_FORMAT_SYMBOL);
	            this.state = 6113;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6114;
	            this.dateTimeTtype();
	            this.state = 6115;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6116;
	            this.expr(0);
	            this.state = 6117;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 6119;
	            localctx.name = this.match(MySQLParser.NOW_SYMBOL);
	            this.state = 6121;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,770,this._ctx);
	            if(la_===1) {
	                this.state = 6120;
	                this.timeFunctionParameters();

	            }
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 6123;
	            localctx.name = this.match(MySQLParser.POSITION_SYMBOL);
	            this.state = 6124;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6125;
	            this.bitExpr(0);
	            this.state = 6126;
	            this.match(MySQLParser.IN_SYMBOL);
	            this.state = 6127;
	            this.expr(0);
	            this.state = 6128;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 6130;
	            this.substringFunction();
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 6131;
	            localctx.name = this.match(MySQLParser.SYSDATE_SYMBOL);
	            this.state = 6133;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,771,this._ctx);
	            if(la_===1) {
	                this.state = 6132;
	                this.timeFunctionParameters();

	            }
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 6135;
	            localctx.name = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===584 || _la===585)) {
	                localctx.name = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6136;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6137;
	            this.intervalTimeStamp();
	            this.state = 6138;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6139;
	            this.expr(0);
	            this.state = 6140;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6141;
	            this.expr(0);
	            this.state = 6142;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 6144;
	            localctx.name = this.match(MySQLParser.UTC_DATE_SYMBOL);
	            this.state = 6146;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,772,this._ctx);
	            if(la_===1) {
	                this.state = 6145;
	                this.parentheses();

	            }
	            break;

	        case 31:
	            this.enterOuterAlt(localctx, 31);
	            this.state = 6148;
	            localctx.name = this.match(MySQLParser.UTC_TIME_SYMBOL);
	            this.state = 6150;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,773,this._ctx);
	            if(la_===1) {
	                this.state = 6149;
	                this.timeFunctionParameters();

	            }
	            break;

	        case 32:
	            this.enterOuterAlt(localctx, 32);
	            this.state = 6152;
	            localctx.name = this.match(MySQLParser.UTC_TIMESTAMP_SYMBOL);
	            this.state = 6154;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,774,this._ctx);
	            if(la_===1) {
	                this.state = 6153;
	                this.timeFunctionParameters();

	            }
	            break;

	        case 33:
	            this.enterOuterAlt(localctx, 33);
	            this.state = 6156;
	            localctx.name = this.match(MySQLParser.ASCII_SYMBOL);
	            this.state = 6157;
	            this.exprWithParentheses();
	            break;

	        case 34:
	            this.enterOuterAlt(localctx, 34);
	            this.state = 6158;
	            localctx.name = this.match(MySQLParser.CHARSET_SYMBOL);
	            this.state = 6159;
	            this.exprWithParentheses();
	            break;

	        case 35:
	            this.enterOuterAlt(localctx, 35);
	            this.state = 6160;
	            localctx.name = this.match(MySQLParser.COALESCE_SYMBOL);
	            this.state = 6161;
	            this.exprListWithParentheses();
	            break;

	        case 36:
	            this.enterOuterAlt(localctx, 36);
	            this.state = 6162;
	            localctx.name = this.match(MySQLParser.COLLATION_SYMBOL);
	            this.state = 6163;
	            this.exprWithParentheses();
	            break;

	        case 37:
	            this.enterOuterAlt(localctx, 37);
	            this.state = 6164;
	            localctx.name = this.match(MySQLParser.DATABASE_SYMBOL);
	            this.state = 6165;
	            this.parentheses();
	            break;

	        case 38:
	            this.enterOuterAlt(localctx, 38);
	            this.state = 6166;
	            localctx.name = this.match(MySQLParser.IF_SYMBOL);
	            this.state = 6167;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6168;
	            this.expr(0);
	            this.state = 6169;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6170;
	            this.expr(0);
	            this.state = 6171;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6172;
	            this.expr(0);
	            this.state = 6173;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 39:
	            this.enterOuterAlt(localctx, 39);
	            this.state = 6175;
	            localctx.name = this.match(MySQLParser.FORMAT_SYMBOL);
	            this.state = 6176;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6177;
	            this.expr(0);
	            this.state = 6178;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6179;
	            this.expr(0);
	            this.state = 6182;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 6180;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6181;
	                this.expr(0);
	            }

	            this.state = 6184;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 40:
	            this.enterOuterAlt(localctx, 40);
	            this.state = 6186;
	            localctx.name = this.match(MySQLParser.MICROSECOND_SYMBOL);
	            this.state = 6187;
	            this.exprWithParentheses();
	            break;

	        case 41:
	            this.enterOuterAlt(localctx, 41);
	            this.state = 6188;
	            localctx.name = this.match(MySQLParser.MOD_SYMBOL);
	            this.state = 6189;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6190;
	            this.expr(0);
	            this.state = 6191;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6192;
	            this.expr(0);
	            this.state = 6193;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 42:
	            this.enterOuterAlt(localctx, 42);
	            this.state = 6195;
	            if (!( serverVersion < 50607)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50607");
	            }
	            this.state = 6196;
	            localctx.name = this.match(MySQLParser.OLD_PASSWORD_SYMBOL);
	            this.state = 6197;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6198;
	            this.textLiteral();
	            this.state = 6199;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 43:
	            this.enterOuterAlt(localctx, 43);
	            this.state = 6201;
	            if (!( serverVersion < 80011)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
	            }
	            this.state = 6202;
	            localctx.name = this.match(MySQLParser.PASSWORD_SYMBOL);
	            this.state = 6203;
	            this.exprWithParentheses();
	            break;

	        case 44:
	            this.enterOuterAlt(localctx, 44);
	            this.state = 6204;
	            localctx.name = this.match(MySQLParser.QUARTER_SYMBOL);
	            this.state = 6205;
	            this.exprWithParentheses();
	            break;

	        case 45:
	            this.enterOuterAlt(localctx, 45);
	            this.state = 6206;
	            localctx.name = this.match(MySQLParser.REPEAT_SYMBOL);
	            this.state = 6207;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6208;
	            this.expr(0);
	            this.state = 6209;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6210;
	            this.expr(0);
	            this.state = 6211;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 46:
	            this.enterOuterAlt(localctx, 46);
	            this.state = 6213;
	            localctx.name = this.match(MySQLParser.REPLACE_SYMBOL);
	            this.state = 6214;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6215;
	            this.expr(0);
	            this.state = 6216;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6217;
	            this.expr(0);
	            this.state = 6218;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6219;
	            this.expr(0);
	            this.state = 6220;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 47:
	            this.enterOuterAlt(localctx, 47);
	            this.state = 6222;
	            localctx.name = this.match(MySQLParser.REVERSE_SYMBOL);
	            this.state = 6223;
	            this.exprWithParentheses();
	            break;

	        case 48:
	            this.enterOuterAlt(localctx, 48);
	            this.state = 6224;
	            localctx.name = this.match(MySQLParser.ROW_COUNT_SYMBOL);
	            this.state = 6225;
	            this.parentheses();
	            break;

	        case 49:
	            this.enterOuterAlt(localctx, 49);
	            this.state = 6226;
	            localctx.name = this.match(MySQLParser.TRUNCATE_SYMBOL);
	            this.state = 6227;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6228;
	            this.expr(0);
	            this.state = 6229;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6230;
	            this.expr(0);
	            this.state = 6231;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 50:
	            this.enterOuterAlt(localctx, 50);
	            this.state = 6233;
	            localctx.name = this.match(MySQLParser.WEEK_SYMBOL);
	            this.state = 6234;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6235;
	            this.expr(0);
	            this.state = 6238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 6236;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6237;
	                this.expr(0);
	            }

	            this.state = 6240;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 51:
	            this.enterOuterAlt(localctx, 51);
	            this.state = 6242;
	            localctx.name = this.match(MySQLParser.WEIGHT_STRING_SYMBOL);
	            this.state = 6243;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6244;
	            this.expr(0);
	            this.state = 6264;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,779,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6248;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,777,this._ctx);
	                if(la_===1) {
	                    this.state = 6245;
	                    this.match(MySQLParser.AS_SYMBOL);
	                    this.state = 6246;
	                    this.match(MySQLParser.CHAR_SYMBOL);
	                    this.state = 6247;
	                    this.wsNumCodepoints();

	                }
	                this.state = 6252;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,778,this._ctx);
	                if(la_===1) {
	                    this.state = 6250;
	                    if (!( serverVersion < 80000)) {
	                        throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	                    }
	                    this.state = 6251;
	                    this.weightStringLevels();

	                }
	                break;

	            case 2:
	                this.state = 6254;
	                this.match(MySQLParser.AS_SYMBOL);
	                this.state = 6255;
	                this.match(MySQLParser.BINARY_SYMBOL);
	                this.state = 6256;
	                this.wsNumCodepoints();
	                break;

	            case 3:
	                this.state = 6257;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6258;
	                this.ulong_number();
	                this.state = 6259;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6260;
	                this.ulong_number();
	                this.state = 6261;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6262;
	                this.ulong_number();
	                break;

	            }
	            this.state = 6266;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 52:
	            this.enterOuterAlt(localctx, 52);
	            this.state = 6268;
	            this.geometryFunction();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	geometryFunction() {
	    let localctx = new GeometryFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 718, MySQLParser.RULE_geometryFunction);
	    try {
	        this.state = 6302;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,782,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6271;
	            if (!( serverVersion < 50706)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50706");
	            }
	            this.state = 6272;
	            localctx.name = this.match(MySQLParser.CONTAINS_SYMBOL);
	            this.state = 6273;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6274;
	            this.expr(0);
	            this.state = 6275;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6276;
	            this.expr(0);
	            this.state = 6277;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6279;
	            localctx.name = this.match(MySQLParser.GEOMETRYCOLLECTION_SYMBOL);
	            this.state = 6280;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6282;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,781,this._ctx);
	            if(la_===1) {
	                this.state = 6281;
	                this.exprList();

	            }
	            this.state = 6284;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6285;
	            localctx.name = this.match(MySQLParser.LINESTRING_SYMBOL);
	            this.state = 6286;
	            this.exprListWithParentheses();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6287;
	            localctx.name = this.match(MySQLParser.MULTILINESTRING_SYMBOL);
	            this.state = 6288;
	            this.exprListWithParentheses();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6289;
	            localctx.name = this.match(MySQLParser.MULTIPOINT_SYMBOL);
	            this.state = 6290;
	            this.exprListWithParentheses();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6291;
	            localctx.name = this.match(MySQLParser.MULTIPOLYGON_SYMBOL);
	            this.state = 6292;
	            this.exprListWithParentheses();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6293;
	            localctx.name = this.match(MySQLParser.POINT_SYMBOL);
	            this.state = 6294;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6295;
	            this.expr(0);
	            this.state = 6296;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6297;
	            this.expr(0);
	            this.state = 6298;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6300;
	            localctx.name = this.match(MySQLParser.POLYGON_SYMBOL);
	            this.state = 6301;
	            this.exprListWithParentheses();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	timeFunctionParameters() {
	    let localctx = new TimeFunctionParametersContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 720, MySQLParser.RULE_timeFunctionParameters);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6304;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 6306;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,783,this._ctx);
	        if(la_===1) {
	            this.state = 6305;
	            this.fractionalPrecision();

	        }
	        this.state = 6308;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fractionalPrecision() {
	    let localctx = new FractionalPrecisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 722, MySQLParser.RULE_fractionalPrecision);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6310;
	        if (!( serverVersion >= 50604)) {
	            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50604");
	        }
	        this.state = 6311;
	        this.match(MySQLParser.INT_NUMBER);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	weightStringLevels() {
	    let localctx = new WeightStringLevelsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 724, MySQLParser.RULE_weightStringLevels);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6313;
	        this.match(MySQLParser.LEVEL_SYMBOL);
	        this.state = 6326;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,785,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6314;
	            this.real_ulong_number();
	            this.state = 6315;
	            this.match(MySQLParser.MINUS_OPERATOR);
	            this.state = 6316;
	            this.real_ulong_number();
	            break;

	        case 2:
	            this.state = 6318;
	            this.weightStringLevelListItem();
	            this.state = 6323;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 6319;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6320;
	                this.weightStringLevelListItem();
	                this.state = 6325;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	weightStringLevelListItem() {
	    let localctx = new WeightStringLevelListItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 726, MySQLParser.RULE_weightStringLevelListItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6328;
	        this.real_ulong_number();
	        this.state = 6334;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 18:
	        case 134:
	        	this.state = 6329;
	        	_la = this._input.LA(1);
	        	if(!(_la===18 || _la===134)) {
	        	this._errHandler.recoverInline(this);
	        	}
	        	else {
	        		this._errHandler.reportMatch(this);
	        	    this.consume();
	        	}
	        	this.state = 6331;
	        	this._errHandler.sync(this);
	        	_la = this._input.LA(1);
	        	if(_la===476) {
	        	    this.state = 6330;
	        	    this.match(MySQLParser.REVERSE_SYMBOL);
	        	}

	        	break;
	        case 476:
	        	this.state = 6333;
	        	this.match(MySQLParser.REVERSE_SYMBOL);
	        	break;
	        case 773:
	        case 777:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dateTimeTtype() {
	    let localctx = new DateTimeTtypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 728, MySQLParser.RULE_dateTimeTtype);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6336;
	        _la = this._input.LA(1);
	        if(!(_la===113 || _la===116 || _la===583 || _la===586)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	trimFunction() {
	    let localctx = new TrimFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 730, MySQLParser.RULE_trimFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6338;
	        this.match(MySQLParser.TRIM_SYMBOL);
	        this.state = 6339;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 6363;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,792,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6340;
	            this.expr(0);
	            this.state = 6343;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===203) {
	                this.state = 6341;
	                this.match(MySQLParser.FROM_SYMBOL);
	                this.state = 6342;
	                this.expr(0);
	            }

	            break;

	        case 2:
	            this.state = 6345;
	            this.match(MySQLParser.LEADING_SYMBOL);
	            this.state = 6347;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,789,this._ctx);
	            if(la_===1) {
	                this.state = 6346;
	                this.expr(0);

	            }
	            this.state = 6349;
	            this.match(MySQLParser.FROM_SYMBOL);
	            this.state = 6350;
	            this.expr(0);
	            break;

	        case 3:
	            this.state = 6351;
	            this.match(MySQLParser.TRAILING_SYMBOL);
	            this.state = 6353;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,790,this._ctx);
	            if(la_===1) {
	                this.state = 6352;
	                this.expr(0);

	            }
	            this.state = 6355;
	            this.match(MySQLParser.FROM_SYMBOL);
	            this.state = 6356;
	            this.expr(0);
	            break;

	        case 4:
	            this.state = 6357;
	            this.match(MySQLParser.BOTH_SYMBOL);
	            this.state = 6359;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,791,this._ctx);
	            if(la_===1) {
	                this.state = 6358;
	                this.expr(0);

	            }
	            this.state = 6361;
	            this.match(MySQLParser.FROM_SYMBOL);
	            this.state = 6362;
	            this.expr(0);
	            break;

	        }
	        this.state = 6365;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	substringFunction() {
	    let localctx = new SubstringFunctionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 732, MySQLParser.RULE_substringFunction);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6367;
	        this.match(MySQLParser.SUBSTRING_SYMBOL);
	        this.state = 6368;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 6369;
	        this.expr(0);
	        this.state = 6382;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 773:
	            this.state = 6370;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6371;
	            this.expr(0);
	            this.state = 6374;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===773) {
	                this.state = 6372;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6373;
	                this.expr(0);
	            }

	            break;
	        case 203:
	            this.state = 6376;
	            this.match(MySQLParser.FROM_SYMBOL);
	            this.state = 6377;
	            this.expr(0);
	            this.state = 6380;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===200) {
	                this.state = 6378;
	                this.match(MySQLParser.FOR_SYMBOL);
	                this.state = 6379;
	                this.expr(0);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 6384;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionCall() {
	    let localctx = new FunctionCallContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 734, MySQLParser.RULE_functionCall);
	    try {
	        this.state = 6400;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,798,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6386;
	            this.pureIdentifier();
	            this.state = 6387;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6389;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,796,this._ctx);
	            if(la_===1) {
	                this.state = 6388;
	                this.udfExprList();

	            }
	            this.state = 6391;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6393;
	            this.qualifiedIdentifier();
	            this.state = 6394;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 6396;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,797,this._ctx);
	            if(la_===1) {
	                this.state = 6395;
	                this.exprList();

	            }
	            this.state = 6398;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	udfExprList() {
	    let localctx = new UdfExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 736, MySQLParser.RULE_udfExprList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6402;
	        this.udfExpr();
	        this.state = 6407;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 6403;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6404;
	            this.udfExpr();
	            this.state = 6409;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	udfExpr() {
	    let localctx = new UdfExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 738, MySQLParser.RULE_udfExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6410;
	        this.expr(0);
	        this.state = 6412;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,800,this._ctx);
	        if(la_===1) {
	            this.state = 6411;
	            this.selectAlias();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variable() {
	    let localctx = new VariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 740, MySQLParser.RULE_variable);
	    try {
	        this.state = 6416;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 783:
	        case 784:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6414;
	            this.userVariable();
	            break;
	        case 785:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6415;
	            this.systemVariable();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userVariable() {
	    let localctx = new UserVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 742, MySQLParser.RULE_userVariable);
	    try {
	        this.state = 6421;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 783:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6418;
	            this.match(MySQLParser.AT_SIGN_SYMBOL);
	            this.state = 6419;
	            this.textOrIdentifier();
	            break;
	        case 784:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6420;
	            this.match(MySQLParser.AT_TEXT_SUFFIX);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	systemVariable() {
	    let localctx = new SystemVariableContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 744, MySQLParser.RULE_systemVariable);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6423;
	        this.match(MySQLParser.AT_AT_SIGN_SYMBOL);
	        this.state = 6425;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,803,this._ctx);
	        if(la_===1) {
	            this.state = 6424;
	            this.varIdentType();

	        }
	        this.state = 6427;
	        this.textOrIdentifier();
	        this.state = 6429;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,804,this._ctx);
	        if(la_===1) {
	            this.state = 6428;
	            this.dotIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	internalVariableName() {
	    let localctx = new InternalVariableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 746, MySQLParser.RULE_internalVariableName);
	    var _la = 0;
	    try {
	        this.state = 6445;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,808,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6441;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,807,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6431;
	                if (!( serverVersion < 80017)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
	                }
	                this.state = 6432;
	                this.identifier();
	                this.state = 6434;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===772) {
	                    this.state = 6433;
	                    this.dotIdentifier();
	                }

	                break;

	            case 2:
	                this.state = 6436;
	                if (!( serverVersion >= 80017)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	                }
	                this.state = 6437;
	                this.lValueIdentifier();
	                this.state = 6439;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===772) {
	                    this.state = 6438;
	                    this.dotIdentifier();
	                }

	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6443;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            this.state = 6444;
	            this.dotIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whenExpression() {
	    let localctx = new WhenExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 748, MySQLParser.RULE_whenExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6447;
	        this.match(MySQLParser.WHEN_SYMBOL);
	        this.state = 6448;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thenExpression() {
	    let localctx = new ThenExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 750, MySQLParser.RULE_thenExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6450;
	        this.match(MySQLParser.THEN_SYMBOL);
	        this.state = 6451;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseExpression() {
	    let localctx = new ElseExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 752, MySQLParser.RULE_elseExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6453;
	        this.match(MySQLParser.ELSE_SYMBOL);
	        this.state = 6454;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	castType() {
	    let localctx = new CastTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 754, MySQLParser.RULE_castType);
	    try {
	        this.state = 6501;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,819,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6456;
	            this.match(MySQLParser.BINARY_SYMBOL);
	            this.state = 6458;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,809,this._ctx);
	            if(la_===1) {
	                this.state = 6457;
	                this.fieldLength();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6460;
	            this.match(MySQLParser.CHAR_SYMBOL);
	            this.state = 6462;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,810,this._ctx);
	            if(la_===1) {
	                this.state = 6461;
	                this.fieldLength();

	            }
	            this.state = 6465;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,811,this._ctx);
	            if(la_===1) {
	                this.state = 6464;
	                this.charsetWithOptBinary();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6467;
	            this.nchar();
	            this.state = 6469;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,812,this._ctx);
	            if(la_===1) {
	                this.state = 6468;
	                this.fieldLength();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6471;
	            this.match(MySQLParser.SIGNED_SYMBOL);
	            this.state = 6473;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,813,this._ctx);
	            if(la_===1) {
	                this.state = 6472;
	                this.match(MySQLParser.INT_SYMBOL);

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6475;
	            this.match(MySQLParser.UNSIGNED_SYMBOL);
	            this.state = 6477;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,814,this._ctx);
	            if(la_===1) {
	                this.state = 6476;
	                this.match(MySQLParser.INT_SYMBOL);

	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6479;
	            this.match(MySQLParser.DATE_SYMBOL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6480;
	            this.match(MySQLParser.TIME_SYMBOL);
	            this.state = 6482;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,815,this._ctx);
	            if(la_===1) {
	                this.state = 6481;
	                this.typeDatetimePrecision();

	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6484;
	            this.match(MySQLParser.DATETIME_SYMBOL);
	            this.state = 6486;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,816,this._ctx);
	            if(la_===1) {
	                this.state = 6485;
	                this.typeDatetimePrecision();

	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6488;
	            this.match(MySQLParser.DECIMAL_SYMBOL);
	            this.state = 6490;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,817,this._ctx);
	            if(la_===1) {
	                this.state = 6489;
	                this.floatOptions();

	            }
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6492;
	            if (!( serverVersion >= 50708)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50708");
	            }
	            this.state = 6493;
	            this.match(MySQLParser.JSON_SYMBOL);
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 6494;
	            if (!( serverVersion >= 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	            }
	            this.state = 6495;
	            this.realType();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6496;
	            if (!( serverVersion >= 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	            }
	            this.state = 6497;
	            this.match(MySQLParser.FLOAT_SYMBOL);
	            this.state = 6499;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,818,this._ctx);
	            if(la_===1) {
	                this.state = 6498;
	                this.standardFloatOptions();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprList() {
	    let localctx = new ExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 756, MySQLParser.RULE_exprList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6503;
	        this.expr(0);
	        this.state = 6508;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 6504;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6505;
	            this.expr(0);
	            this.state = 6510;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charset() {
	    let localctx = new CharsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 758, MySQLParser.RULE_charset);
	    try {
	        this.state = 6514;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 60:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6511;
	            this.match(MySQLParser.CHAR_SYMBOL);
	            this.state = 6512;
	            this.match(MySQLParser.SET_SYMBOL);
	            break;
	        case 58:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6513;
	            this.match(MySQLParser.CHARSET_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	notRule() {
	    let localctx = new NotRuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 760, MySQLParser.RULE_notRule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6516;
	        _la = this._input.LA(1);
	        if(!(_la===371 || _la===745)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	not2Rule() {
	    let localctx = new Not2RuleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 762, MySQLParser.RULE_not2Rule);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6518;
	        _la = this._input.LA(1);
	        if(!(_la===745 || _la===763)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interval() {
	    let localctx = new IntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 764, MySQLParser.RULE_interval);
	    var _la = 0;
	    try {
	        this.state = 6522;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 122:
	        case 229:
	        case 337:
	        case 343:
	        case 350:
	        case 429:
	        case 495:
	        case 640:
	        case 656:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6520;
	            this.intervalTimeStamp();
	            break;
	        case 118:
	        case 119:
	        case 120:
	        case 121:
	        case 226:
	        case 227:
	        case 228:
	        case 341:
	        case 342:
	        case 494:
	        case 655:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6521;
	            _la = this._input.LA(1);
	            if(!(((((_la - 118)) & ~0x1f) === 0 && ((1 << (_la - 118)) & 15) !== 0) || ((((_la - 226)) & ~0x1f) === 0 && ((1 << (_la - 226)) & 7) !== 0) || _la===341 || _la===342 || _la===494 || _la===655)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	intervalTimeStamp() {
	    let localctx = new IntervalTimeStampContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 766, MySQLParser.RULE_intervalTimeStamp);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6524;
	        _la = this._input.LA(1);
	        if(!(_la===122 || _la===229 || ((((_la - 337)) & ~0x1f) === 0 && ((1 << (_la - 337)) & 8257) !== 0) || _la===429 || _la===495 || _la===640 || _la===656)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprListWithParentheses() {
	    let localctx = new ExprListWithParenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 768, MySQLParser.RULE_exprListWithParentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6526;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 6527;
	        this.exprList();
	        this.state = 6528;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	exprWithParentheses() {
	    let localctx = new ExprWithParenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 770, MySQLParser.RULE_exprWithParentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6530;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 6531;
	        this.expr(0);
	        this.state = 6532;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleExprWithParentheses() {
	    let localctx = new SimpleExprWithParenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 772, MySQLParser.RULE_simpleExprWithParentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6534;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 6535;
	        this.simpleExpr(0);
	        this.state = 6536;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderList() {
	    let localctx = new OrderListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 774, MySQLParser.RULE_orderList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6538;
	        this.orderExpression();
	        this.state = 6543;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,823,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6539;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6540;
	                this.orderExpression(); 
	            }
	            this.state = 6545;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,823,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderExpression() {
	    let localctx = new OrderExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 776, MySQLParser.RULE_orderExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6546;
	        this.expr(0);
	        this.state = 6548;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,824,this._ctx);
	        if(la_===1) {
	            this.state = 6547;
	            this.direction();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupList() {
	    let localctx = new GroupListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 778, MySQLParser.RULE_groupList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6550;
	        this.groupingExpression();
	        this.state = 6555;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 6551;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 6552;
	            this.groupingExpression();
	            this.state = 6557;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupingExpression() {
	    let localctx = new GroupingExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 780, MySQLParser.RULE_groupingExpression);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6558;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	channel() {
	    let localctx = new ChannelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 782, MySQLParser.RULE_channel);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6560;
	        if (!( serverVersion >= 50706)) {
	            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
	        }
	        this.state = 6561;
	        this.match(MySQLParser.FOR_SYMBOL);
	        this.state = 6562;
	        this.match(MySQLParser.CHANNEL_SYMBOL);
	        this.state = 6563;
	        this.textStringNoLinebreak();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundStatement() {
	    let localctx = new CompoundStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 784, MySQLParser.RULE_compoundStatement);
	    try {
	        this.state = 6578;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,826,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6565;
	            this.simpleStatement();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6566;
	            this.returnStatement();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6567;
	            this.ifStatement();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6568;
	            this.caseStatement();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6569;
	            this.labeledBlock();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 6570;
	            this.unlabeledBlock();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 6571;
	            this.labeledControl();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 6572;
	            this.unlabeledControl();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 6573;
	            this.leaveStatement();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 6574;
	            this.iterateStatement();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 6575;
	            this.cursorOpen();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 6576;
	            this.cursorFetch();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 6577;
	            this.cursorClose();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	returnStatement() {
	    let localctx = new ReturnStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 786, MySQLParser.RULE_returnStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6580;
	        this.match(MySQLParser.RETURN_SYMBOL);
	        this.state = 6581;
	        this.expr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifStatement() {
	    let localctx = new IfStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 788, MySQLParser.RULE_ifStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6583;
	        this.match(MySQLParser.IF_SYMBOL);
	        this.state = 6584;
	        this.ifBody();
	        this.state = 6585;
	        this.match(MySQLParser.END_SYMBOL);
	        this.state = 6586;
	        this.match(MySQLParser.IF_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifBody() {
	    let localctx = new IfBodyContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 790, MySQLParser.RULE_ifBody);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6588;
	        this.expr(0);
	        this.state = 6589;
	        this.thenStatement();
	        this.state = 6594;
	        this._errHandler.sync(this);
	        switch (this._input.LA(1)) {
	        case 155:
	        	this.state = 6590;
	        	this.match(MySQLParser.ELSEIF_SYMBOL);
	        	this.state = 6591;
	        	this.ifBody();
	        	break;
	        case 154:
	        	this.state = 6592;
	        	this.match(MySQLParser.ELSE_SYMBOL);
	        	this.state = 6593;
	        	this.compoundStatementList();
	        	break;
	        case 159:
	        	break;
	        default:
	        	break;
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	thenStatement() {
	    let localctx = new ThenStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 792, MySQLParser.RULE_thenStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6596;
	        this.match(MySQLParser.THEN_SYMBOL);
	        this.state = 6597;
	        this.compoundStatementList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	compoundStatementList() {
	    let localctx = new CompoundStatementListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 794, MySQLParser.RULE_compoundStatementList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6602; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 6599;
	        		this.compoundStatement();
	        		this.state = 6600;
	        		this.match(MySQLParser.SEMICOLON_SYMBOL);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 6604; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,828, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	caseStatement() {
	    let localctx = new CaseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 796, MySQLParser.RULE_caseStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6606;
	        this.match(MySQLParser.CASE_SYMBOL);
	        this.state = 6608;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,829,this._ctx);
	        if(la_===1) {
	            this.state = 6607;
	            this.expr(0);

	        }
	        this.state = 6613; 
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        do {
	            this.state = 6610;
	            this.whenExpression();
	            this.state = 6611;
	            this.thenStatement();
	            this.state = 6615; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        } while(_la===642);
	        this.state = 6618;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===154) {
	            this.state = 6617;
	            this.elseStatement();
	        }

	        this.state = 6620;
	        this.match(MySQLParser.END_SYMBOL);
	        this.state = 6621;
	        this.match(MySQLParser.CASE_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	elseStatement() {
	    let localctx = new ElseStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 798, MySQLParser.RULE_elseStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6623;
	        this.match(MySQLParser.ELSE_SYMBOL);
	        this.state = 6624;
	        this.compoundStatementList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledBlock() {
	    let localctx = new LabeledBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 800, MySQLParser.RULE_labeledBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6626;
	        this.label();
	        this.state = 6627;
	        this.beginEndBlock();
	        this.state = 6629;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,832,this._ctx);
	        if(la_===1) {
	            this.state = 6628;
	            this.labelRef();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlabeledBlock() {
	    let localctx = new UnlabeledBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 802, MySQLParser.RULE_unlabeledBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6631;
	        this.beginEndBlock();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	label() {
	    let localctx = new LabelContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 804, MySQLParser.RULE_label);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6633;
	        this.labelIdentifier();
	        this.state = 6634;
	        this.match(MySQLParser.COLON_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	beginEndBlock() {
	    let localctx = new BeginEndBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 806, MySQLParser.RULE_beginEndBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6636;
	        this.match(MySQLParser.BEGIN_SYMBOL);
	        this.state = 6638;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,833,this._ctx);
	        if(la_===1) {
	            this.state = 6637;
	            this.spDeclarations();

	        }
	        this.state = 6641;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,834,this._ctx);
	        if(la_===1) {
	            this.state = 6640;
	            this.compoundStatementList();

	        }
	        this.state = 6643;
	        this.match(MySQLParser.END_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labeledControl() {
	    let localctx = new LabeledControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 808, MySQLParser.RULE_labeledControl);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6645;
	        this.label();
	        this.state = 6646;
	        this.unlabeledControl();
	        this.state = 6648;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,835,this._ctx);
	        if(la_===1) {
	            this.state = 6647;
	            this.labelRef();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unlabeledControl() {
	    let localctx = new UnlabeledControlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 810, MySQLParser.RULE_unlabeledControl);
	    try {
	        this.state = 6653;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 294:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6650;
	            this.loopBlock();
	            break;
	        case 644:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6651;
	            this.whileDoBlock();
	            break;
	        case 457:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6652;
	            this.repeatUntilBlock();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	loopBlock() {
	    let localctx = new LoopBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 812, MySQLParser.RULE_loopBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6655;
	        this.match(MySQLParser.LOOP_SYMBOL);
	        this.state = 6656;
	        this.compoundStatementList();
	        this.state = 6657;
	        this.match(MySQLParser.END_SYMBOL);
	        this.state = 6658;
	        this.match(MySQLParser.LOOP_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whileDoBlock() {
	    let localctx = new WhileDoBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 814, MySQLParser.RULE_whileDoBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6660;
	        this.match(MySQLParser.WHILE_SYMBOL);
	        this.state = 6661;
	        this.expr(0);
	        this.state = 6662;
	        this.match(MySQLParser.DO_SYMBOL);
	        this.state = 6663;
	        this.compoundStatementList();
	        this.state = 6664;
	        this.match(MySQLParser.END_SYMBOL);
	        this.state = 6665;
	        this.match(MySQLParser.WHILE_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	repeatUntilBlock() {
	    let localctx = new RepeatUntilBlockContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 816, MySQLParser.RULE_repeatUntilBlock);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6667;
	        this.match(MySQLParser.REPEAT_SYMBOL);
	        this.state = 6668;
	        this.compoundStatementList();
	        this.state = 6669;
	        this.match(MySQLParser.UNTIL_SYMBOL);
	        this.state = 6670;
	        this.expr(0);
	        this.state = 6671;
	        this.match(MySQLParser.END_SYMBOL);
	        this.state = 6672;
	        this.match(MySQLParser.REPEAT_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	spDeclarations() {
	    let localctx = new SpDeclarationsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 818, MySQLParser.RULE_spDeclarations);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6677; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 6674;
	        		this.spDeclaration();
	        		this.state = 6675;
	        		this.match(MySQLParser.SEMICOLON_SYMBOL);
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 6679; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,837, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	spDeclaration() {
	    let localctx = new SpDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 820, MySQLParser.RULE_spDeclaration);
	    try {
	        this.state = 6685;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,838,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6681;
	            this.variableDeclaration();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6682;
	            this.conditionDeclaration();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6683;
	            this.handlerDeclaration();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6684;
	            this.cursorDeclaration();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	variableDeclaration() {
	    let localctx = new VariableDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 822, MySQLParser.RULE_variableDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6687;
	        this.match(MySQLParser.DECLARE_SYMBOL);
	        this.state = 6688;
	        this.identifierList();
	        this.state = 6689;
	        this.dataType();
	        this.state = 6691;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===69) {
	            this.state = 6690;
	            this.collate();
	        }

	        this.state = 6695;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===128) {
	            this.state = 6693;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            this.state = 6694;
	            this.expr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionDeclaration() {
	    let localctx = new ConditionDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 824, MySQLParser.RULE_conditionDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6697;
	        this.match(MySQLParser.DECLARE_SYMBOL);
	        this.state = 6698;
	        this.identifier();
	        this.state = 6699;
	        this.match(MySQLParser.CONDITION_SYMBOL);
	        this.state = 6700;
	        this.match(MySQLParser.FOR_SYMBOL);
	        this.state = 6701;
	        this.spCondition();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	spCondition() {
	    let localctx = new SpConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 826, MySQLParser.RULE_spCondition);
	    try {
	        this.state = 6705;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 747:
	        case 748:
	        case 749:
	        case 788:
	        case 790:
	        case 791:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6703;
	            this.ulong_number();
	            break;
	        case 526:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6704;
	            this.sqlstate();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sqlstate() {
	    let localctx = new SqlstateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 828, MySQLParser.RULE_sqlstate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6707;
	        this.match(MySQLParser.SQLSTATE_SYMBOL);
	        this.state = 6709;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,842,this._ctx);
	        if(la_===1) {
	            this.state = 6708;
	            this.match(MySQLParser.VALUE_SYMBOL);

	        }
	        this.state = 6711;
	        this.textLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerDeclaration() {
	    let localctx = new HandlerDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 830, MySQLParser.RULE_handlerDeclaration);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6713;
	        this.match(MySQLParser.DECLARE_SYMBOL);
	        this.state = 6714;
	        _la = this._input.LA(1);
	        if(!(_la===92 || _la===175 || _la===605)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 6715;
	        this.match(MySQLParser.HANDLER_SYMBOL);
	        this.state = 6716;
	        this.match(MySQLParser.FOR_SYMBOL);
	        this.state = 6717;
	        this.handlerCondition();
	        this.state = 6722;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,843,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 6718;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6719;
	                this.handlerCondition(); 
	            }
	            this.state = 6724;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,843,this._ctx);
	        }

	        this.state = 6725;
	        this.compoundStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	handlerCondition() {
	    let localctx = new HandlerConditionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 832, MySQLParser.RULE_handlerCondition);
	    try {
	        this.state = 6734;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,844,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6727;
	            this.spCondition();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6728;
	            this.identifier();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6729;
	            this.match(MySQLParser.SQLWARNING_SYMBOL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6730;
	            this.notRule();
	            this.state = 6731;
	            this.match(MySQLParser.FOUND_SYMBOL);
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 6733;
	            this.match(MySQLParser.SQLEXCEPTION_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorDeclaration() {
	    let localctx = new CursorDeclarationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 834, MySQLParser.RULE_cursorDeclaration);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6736;
	        this.match(MySQLParser.DECLARE_SYMBOL);
	        this.state = 6737;
	        this.identifier();
	        this.state = 6738;
	        this.match(MySQLParser.CURSOR_SYMBOL);
	        this.state = 6739;
	        this.match(MySQLParser.FOR_SYMBOL);
	        this.state = 6740;
	        this.selectStatement();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	iterateStatement() {
	    let localctx = new IterateStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 836, MySQLParser.RULE_iterateStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6742;
	        this.match(MySQLParser.ITERATE_SYMBOL);
	        this.state = 6743;
	        this.labelRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	leaveStatement() {
	    let localctx = new LeaveStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 838, MySQLParser.RULE_leaveStatement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6745;
	        this.match(MySQLParser.LEAVE_SYMBOL);
	        this.state = 6746;
	        this.labelRef();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	getDiagnostics() {
	    let localctx = new GetDiagnosticsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 840, MySQLParser.RULE_getDiagnostics);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6748;
	        this.match(MySQLParser.GET_SYMBOL);
	        this.state = 6752;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,845,this._ctx);
	        if(la_===1) {
	            this.state = 6749;
	            this.match(MySQLParser.CURRENT_SYMBOL);

	        } else if(la_===2) {
	            this.state = 6750;
	            if (!( serverVersion >= 50700)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
	            }
	            this.state = 6751;
	            this.match(MySQLParser.STACKED_SYMBOL);

	        }
	        this.state = 6754;
	        this.match(MySQLParser.DIAGNOSTICS_SYMBOL);
	        this.state = 6773;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,848,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6755;
	            this.statementInformationItem();
	            this.state = 6760;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 6756;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6757;
	                this.statementInformationItem();
	                this.state = 6762;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        case 2:
	            this.state = 6763;
	            this.match(MySQLParser.CONDITION_SYMBOL);
	            this.state = 6764;
	            this.signalAllowedExpr();
	            this.state = 6765;
	            this.conditionInformationItem();
	            this.state = 6770;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 6766;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6767;
	                this.conditionInformationItem();
	                this.state = 6772;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signalAllowedExpr() {
	    let localctx = new SignalAllowedExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 842, MySQLParser.RULE_signalAllowedExpr);
	    try {
	        this.state = 6778;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,849,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6775;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6776;
	            this.variable();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6777;
	            this.qualifiedIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	statementInformationItem() {
	    let localctx = new StatementInformationItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 844, MySQLParser.RULE_statementInformationItem);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6782;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,850,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6780;
	            this.variable();
	            break;

	        case 2:
	            this.state = 6781;
	            this.identifier();
	            break;

	        }
	        this.state = 6784;
	        this.match(MySQLParser.EQUAL_OPERATOR);
	        this.state = 6785;
	        _la = this._input.LA(1);
	        if(!(_la===377 || _la===485)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	conditionInformationItem() {
	    let localctx = new ConditionInformationItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 846, MySQLParser.RULE_conditionInformationItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6789;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,851,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6787;
	            this.variable();
	            break;

	        case 2:
	            this.state = 6788;
	            this.identifier();
	            break;

	        }
	        this.state = 6791;
	        this.match(MySQLParser.EQUAL_OPERATOR);
	        this.state = 6794;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 53:
	        case 64:
	        case 73:
	        case 87:
	        case 88:
	        case 89:
	        case 107:
	        case 336:
	        case 355:
	        case 492:
	        case 557:
	        case 576:
	            this.state = 6792;
	            this.signalInformationItemName();
	            break;
	        case 473:
	            this.state = 6793;
	            this.match(MySQLParser.RETURNED_SQLSTATE_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signalInformationItemName() {
	    let localctx = new SignalInformationItemNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 848, MySQLParser.RULE_signalInformationItemName);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6796;
	        _la = this._input.LA(1);
	        if(!(((((_la - 53)) & ~0x1f) === 0 && ((1 << (_la - 53)) & 1050625) !== 0) || ((((_la - 87)) & ~0x1f) === 0 && ((1 << (_la - 87)) & 1048583) !== 0) || _la===336 || _la===355 || _la===492 || _la===557 || _la===576)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signalStatement() {
	    let localctx = new SignalStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 850, MySQLParser.RULE_signalStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6798;
	        this.match(MySQLParser.SIGNAL_SYMBOL);
	        this.state = 6801;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,853,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6799;
	            this.identifier();
	            break;

	        case 2:
	            this.state = 6800;
	            this.sqlstate();
	            break;

	        }
	        this.state = 6812;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===506) {
	            this.state = 6803;
	            this.match(MySQLParser.SET_SYMBOL);
	            this.state = 6804;
	            this.signalInformationItem();
	            this.state = 6809;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 6805;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6806;
	                this.signalInformationItem();
	                this.state = 6811;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resignalStatement() {
	    let localctx = new ResignalStatementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 852, MySQLParser.RULE_resignalStatement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6814;
	        this.match(MySQLParser.RESIGNAL_SYMBOL);
	        this.state = 6817;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,856,this._ctx);
	        if(la_===1) {
	            this.state = 6815;
	            this.identifier();

	        } else if(la_===2) {
	            this.state = 6816;
	            this.sqlstate();

	        }
	        this.state = 6828;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===506) {
	            this.state = 6819;
	            this.match(MySQLParser.SET_SYMBOL);
	            this.state = 6820;
	            this.signalInformationItem();
	            this.state = 6825;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 6821;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 6822;
	                this.signalInformationItem();
	                this.state = 6827;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signalInformationItem() {
	    let localctx = new SignalInformationItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 854, MySQLParser.RULE_signalInformationItem);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6830;
	        this.signalInformationItemName();
	        this.state = 6831;
	        this.match(MySQLParser.EQUAL_OPERATOR);
	        this.state = 6832;
	        this.signalAllowedExpr();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorOpen() {
	    let localctx = new CursorOpenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 856, MySQLParser.RULE_cursorOpen);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6834;
	        this.match(MySQLParser.OPEN_SYMBOL);
	        this.state = 6835;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorClose() {
	    let localctx = new CursorCloseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 858, MySQLParser.RULE_cursorClose);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6837;
	        this.match(MySQLParser.CLOSE_SYMBOL);
	        this.state = 6838;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	cursorFetch() {
	    let localctx = new CursorFetchContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 860, MySQLParser.RULE_cursorFetch);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6840;
	        this.match(MySQLParser.FETCH_SYMBOL);
	        this.state = 6845;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,860,this._ctx);
	        if(la_===1) {
	            this.state = 6842;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===367) {
	                this.state = 6841;
	                this.match(MySQLParser.NEXT_SYMBOL);
	            }

	            this.state = 6844;
	            this.match(MySQLParser.FROM_SYMBOL);

	        }
	        this.state = 6847;
	        this.identifier();
	        this.state = 6848;
	        this.match(MySQLParser.INTO_SYMBOL);
	        this.state = 6849;
	        this.identifierList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schedule() {
	    let localctx = new ScheduleContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 862, MySQLParser.RULE_schedule);
	    var _la = 0;
	    try {
	        this.state = 6864;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 21:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6851;
	            this.match(MySQLParser.AT_SYMBOL);
	            this.state = 6852;
	            this.expr(0);
	            break;
	        case 171:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6853;
	            this.match(MySQLParser.EVERY_SYMBOL);
	            this.state = 6854;
	            this.expr(0);
	            this.state = 6855;
	            this.interval();
	            this.state = 6858;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===542) {
	                this.state = 6856;
	                this.match(MySQLParser.STARTS_SYMBOL);
	                this.state = 6857;
	                this.expr(0);
	            }

	            this.state = 6862;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===160) {
	                this.state = 6860;
	                this.match(MySQLParser.ENDS_SYMBOL);
	                this.state = 6861;
	                this.expr(0);
	            }

	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnDefinition() {
	    let localctx = new ColumnDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 864, MySQLParser.RULE_columnDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6866;
	        this.columnName();
	        this.state = 6867;
	        this.fieldDefinition();
	        this.state = 6869;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,864,this._ctx);
	        if(la_===1) {
	            this.state = 6868;
	            this.checkOrReferences();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkOrReferences() {
	    let localctx = new CheckOrReferencesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 866, MySQLParser.RULE_checkOrReferences);
	    try {
	        this.state = 6874;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,865,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6871;
	            if (!( serverVersion < 80016)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80016");
	            }
	            this.state = 6872;
	            this.checkConstraint();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6873;
	            this.references();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkConstraint() {
	    let localctx = new CheckConstraintContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 868, MySQLParser.RULE_checkConstraint);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6876;
	        this.match(MySQLParser.CHECK_SYMBOL);
	        this.state = 6877;
	        this.exprWithParentheses();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintEnforcement() {
	    let localctx = new ConstraintEnforcementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 870, MySQLParser.RULE_constraintEnforcement);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6880;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===371) {
	            this.state = 6879;
	            this.match(MySQLParser.NOT_SYMBOL);
	        }

	        this.state = 6882;
	        this.match(MySQLParser.ENFORCED_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableConstraintDef() {
	    let localctx = new TableConstraintDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 872, MySQLParser.RULE_tableConstraintDef);
	    var _la = 0;
	    try {
	        this.state = 6959;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 236:
	        case 265:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 6884;
	            localctx.type = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===236 || _la===265)) {
	                localctx.type = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 6886;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,867,this._ctx);
	            if(la_===1) {
	                this.state = 6885;
	                this.indexNameAndType();

	            }
	            this.state = 6888;
	            this.keyListVariants();
	            this.state = 6892;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,868,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6889;
	                    this.indexOption(); 
	                }
	                this.state = 6894;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,868,this._ctx);
	            }

	            break;
	        case 205:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 6895;
	            localctx.type = this.match(MySQLParser.FULLTEXT_SYMBOL);
	            this.state = 6897;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,869,this._ctx);
	            if(la_===1) {
	                this.state = 6896;
	                this.keyOrIndex();

	            }
	            this.state = 6900;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,870,this._ctx);
	            if(la_===1) {
	                this.state = 6899;
	                this.indexName();

	            }
	            this.state = 6902;
	            this.keyListVariants();
	            this.state = 6906;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,871,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6903;
	                    this.fulltextIndexOption(); 
	                }
	                this.state = 6908;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,871,this._ctx);
	            }

	            break;
	        case 523:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 6909;
	            localctx.type = this.match(MySQLParser.SPATIAL_SYMBOL);
	            this.state = 6911;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,872,this._ctx);
	            if(la_===1) {
	                this.state = 6910;
	                this.keyOrIndex();

	            }
	            this.state = 6914;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,873,this._ctx);
	            if(la_===1) {
	                this.state = 6913;
	                this.indexName();

	            }
	            this.state = 6916;
	            this.keyListVariants();
	            this.state = 6920;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,874,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6917;
	                    this.spatialIndexOption(); 
	                }
	                this.state = 6922;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,874,this._ctx);
	            }

	            break;
	        case 62:
	        case 86:
	        case 199:
	        case 420:
	        case 609:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 6924;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===86) {
	                this.state = 6923;
	                this.constraintName();
	            }

	            this.state = 6957;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 420:
	            case 609:
	                this.state = 6932;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case 420:
	                    this.state = 6926;
	                    localctx.type = this.match(MySQLParser.PRIMARY_SYMBOL);
	                    this.state = 6927;
	                    this.match(MySQLParser.KEY_SYMBOL);
	                    break;
	                case 609:
	                    this.state = 6928;
	                    localctx.type = this.match(MySQLParser.UNIQUE_SYMBOL);
	                    this.state = 6930;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,876,this._ctx);
	                    if(la_===1) {
	                        this.state = 6929;
	                        this.keyOrIndex();

	                    }
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                }
	                this.state = 6935;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,878,this._ctx);
	                if(la_===1) {
	                    this.state = 6934;
	                    this.indexNameAndType();

	                }
	                this.state = 6937;
	                this.keyListVariants();
	                this.state = 6941;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,879,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 6938;
	                        this.indexOption(); 
	                    }
	                    this.state = 6943;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,879,this._ctx);
	                }

	                break;
	            case 199:
	                this.state = 6944;
	                localctx.type = this.match(MySQLParser.FOREIGN_SYMBOL);
	                this.state = 6945;
	                this.match(MySQLParser.KEY_SYMBOL);
	                this.state = 6947;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,880,this._ctx);
	                if(la_===1) {
	                    this.state = 6946;
	                    this.indexName();

	                }
	                this.state = 6949;
	                this.keyList();
	                this.state = 6950;
	                this.references();
	                break;
	            case 62:
	                this.state = 6952;
	                this.checkConstraint();
	                this.state = 6955;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,881,this._ctx);
	                if(la_===1) {
	                    this.state = 6953;
	                    if (!( serverVersion >= 80017)) {
	                        throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	                    }
	                    this.state = 6954;
	                    this.constraintEnforcement();

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	constraintName() {
	    let localctx = new ConstraintNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 874, MySQLParser.RULE_constraintName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6961;
	        this.match(MySQLParser.CONSTRAINT_SYMBOL);
	        this.state = 6963;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,884,this._ctx);
	        if(la_===1) {
	            this.state = 6962;
	            this.identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldDefinition() {
	    let localctx = new FieldDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 876, MySQLParser.RULE_fieldDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 6965;
	        this.dataType();
	        this.state = 7001;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,892,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 6969;
	            this._errHandler.sync(this);
	            var _alt = this._interp.adaptivePredict(this._input,885,this._ctx)
	            while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                if(_alt===1) {
	                    this.state = 6966;
	                    this.columnAttribute(); 
	                }
	                this.state = 6971;
	                this._errHandler.sync(this);
	                _alt = this._interp.adaptivePredict(this._input,885,this._ctx);
	            }

	            break;

	        case 2:
	            this.state = 6972;
	            if (!( serverVersion >= 50707)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50707");
	            }
	            this.state = 6974;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===69) {
	                this.state = 6973;
	                this.collate();
	            }

	            this.state = 6978;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===209) {
	                this.state = 6976;
	                this.match(MySQLParser.GENERATED_SYMBOL);
	                this.state = 6977;
	                this.match(MySQLParser.ALWAYS_SYMBOL);
	            }

	            this.state = 6980;
	            this.match(MySQLParser.AS_SYMBOL);
	            this.state = 6981;
	            this.exprWithParentheses();
	            this.state = 6983;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,888,this._ctx);
	            if(la_===1) {
	                this.state = 6982;
	                _la = this._input.LA(1);
	                if(!(_la===554 || _la===637)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            this.state = 6999;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,891,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 6985;
	                if (!( serverVersion < 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	                }
	                this.state = 6989;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,889,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 6986;
	                        this.gcolAttribute(); 
	                    }
	                    this.state = 6991;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,889,this._ctx);
	                }

	                break;

	            case 2:
	                this.state = 6992;
	                if (!( serverVersion >= 80000)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	                }
	                this.state = 6996;
	                this._errHandler.sync(this);
	                var _alt = this._interp.adaptivePredict(this._input,890,this._ctx)
	                while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	                    if(_alt===1) {
	                        this.state = 6993;
	                        this.columnAttribute(); 
	                    }
	                    this.state = 6998;
	                    this._errHandler.sync(this);
	                    _alt = this._interp.adaptivePredict(this._input,890,this._ctx);
	                }

	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnAttribute() {
	    let localctx = new ColumnAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 878, MySQLParser.RULE_columnAttribute);
	    var _la = 0;
	    try {
	        this.state = 7055;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,900,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7004;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===371) {
	                this.state = 7003;
	                this.match(MySQLParser.NOT_SYMBOL);
	            }

	            this.state = 7006;
	            this.nullLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7007;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 7008;
	            this.match(MySQLParser.NOT_SYMBOL);
	            this.state = 7009;
	            this.match(MySQLParser.SECONDARY_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7010;
	            localctx.value = this.match(MySQLParser.DEFAULT_SYMBOL);
	            this.state = 7018;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,895,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7011;
	                this.signedLiteral();
	                break;

	            case 2:
	                this.state = 7012;
	                this.match(MySQLParser.NOW_SYMBOL);
	                this.state = 7014;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,894,this._ctx);
	                if(la_===1) {
	                    this.state = 7013;
	                    this.timeFunctionParameters();

	                }
	                break;

	            case 3:
	                this.state = 7016;
	                if (!( serverVersion >= 80013)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80013");
	                }
	                this.state = 7017;
	                this.exprWithParentheses();
	                break;

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7020;
	            localctx.value = this.match(MySQLParser.ON_SYMBOL);
	            this.state = 7021;
	            this.match(MySQLParser.UPDATE_SYMBOL);
	            this.state = 7022;
	            this.match(MySQLParser.NOW_SYMBOL);
	            this.state = 7024;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,896,this._ctx);
	            if(la_===1) {
	                this.state = 7023;
	                this.timeFunctionParameters();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7026;
	            localctx.value = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7027;
	            localctx.value = this.match(MySQLParser.SERIAL_SYMBOL);
	            this.state = 7028;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            this.state = 7029;
	            this.match(MySQLParser.VALUE_SYMBOL);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7031;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===420) {
	                this.state = 7030;
	                this.match(MySQLParser.PRIMARY_SYMBOL);
	            }

	            this.state = 7033;
	            localctx.value = this.match(MySQLParser.KEY_SYMBOL);
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7034;
	            localctx.value = this.match(MySQLParser.UNIQUE_SYMBOL);
	            this.state = 7036;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,898,this._ctx);
	            if(la_===1) {
	                this.state = 7035;
	                this.match(MySQLParser.KEY_SYMBOL);

	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7038;
	            localctx.value = this.match(MySQLParser.COMMENT_SYMBOL);
	            this.state = 7039;
	            this.textLiteral();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7040;
	            this.collate();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 7041;
	            localctx.value = this.match(MySQLParser.COLUMN_FORMAT_SYMBOL);
	            this.state = 7042;
	            this.columnFormat();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 7043;
	            localctx.value = this.match(MySQLParser.STORAGE_SYMBOL);
	            this.state = 7044;
	            this.storageMedia();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 7045;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 7046;
	            localctx.value = this.match(MySQLParser.SRID_SYMBOL);
	            this.state = 7047;
	            this.real_ulonglong_number();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 7048;
	            if (!( serverVersion >= 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	            }
	            this.state = 7050;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===86) {
	                this.state = 7049;
	                this.constraintName();
	            }

	            this.state = 7052;
	            this.checkConstraint();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 7053;
	            if (!( serverVersion >= 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	            }
	            this.state = 7054;
	            this.constraintEnforcement();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnFormat() {
	    let localctx = new ColumnFormatContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 880, MySQLParser.RULE_columnFormat);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7057;
	        _la = this._input.LA(1);
	        if(!(_la===128 || _la===152 || _la===192)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	storageMedia() {
	    let localctx = new StorageMediaContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 882, MySQLParser.RULE_storageMedia);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7059;
	        _la = this._input.LA(1);
	        if(!(_la===128 || _la===142 || _la===334)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	gcolAttribute() {
	    let localctx = new GcolAttributeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 884, MySQLParser.RULE_gcolAttribute);
	    var _la = 0;
	    try {
	        this.state = 7075;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 609:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7061;
	            this.match(MySQLParser.UNIQUE_SYMBOL);
	            this.state = 7063;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,901,this._ctx);
	            if(la_===1) {
	                this.state = 7062;
	                this.match(MySQLParser.KEY_SYMBOL);

	            }
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7065;
	            this.match(MySQLParser.COMMENT_SYMBOL);
	            this.state = 7066;
	            this.textString();
	            break;
	        case 371:
	        case 376:
	        case 745:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7068;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===371 || _la===745) {
	                this.state = 7067;
	                this.notRule();
	            }

	            this.state = 7070;
	            this.match(MySQLParser.NULL_SYMBOL);
	            break;
	        case 265:
	        case 420:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7072;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===420) {
	                this.state = 7071;
	                this.match(MySQLParser.PRIMARY_SYMBOL);
	            }

	            this.state = 7074;
	            this.match(MySQLParser.KEY_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	references() {
	    let localctx = new ReferencesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 886, MySQLParser.RULE_references);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7077;
	        this.match(MySQLParser.REFERENCES_SYMBOL);
	        this.state = 7078;
	        this.tableRef();
	        this.state = 7080;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===776) {
	            this.state = 7079;
	            this.identifierListWithParentheses();
	        }

	        this.state = 7084;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===320) {
	            this.state = 7082;
	            this.match(MySQLParser.MATCH_SYMBOL);
	            this.state = 7083;
	            localctx.match = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===204 || _la===402 || _la===513)) {
	                localctx.match = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 7102;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,909,this._ctx);
	        if(la_===1) {
	            this.state = 7086;
	            this.match(MySQLParser.ON_SYMBOL);
	            this.state = 7087;
	            localctx.option = this.match(MySQLParser.UPDATE_SYMBOL);
	            this.state = 7088;
	            this.deleteOption();
	            this.state = 7092;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===383) {
	                this.state = 7089;
	                this.match(MySQLParser.ON_SYMBOL);
	                this.state = 7090;
	                this.match(MySQLParser.DELETE_SYMBOL);
	                this.state = 7091;
	                this.deleteOption();
	            }


	        } else if(la_===2) {
	            this.state = 7094;
	            this.match(MySQLParser.ON_SYMBOL);
	            this.state = 7095;
	            localctx.option = this.match(MySQLParser.DELETE_SYMBOL);
	            this.state = 7096;
	            this.deleteOption();
	            this.state = 7100;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===383) {
	                this.state = 7097;
	                this.match(MySQLParser.ON_SYMBOL);
	                this.state = 7098;
	                this.match(MySQLParser.UPDATE_SYMBOL);
	                this.state = 7099;
	                this.deleteOption();
	            }


	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	deleteOption() {
	    let localctx = new DeleteOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 888, MySQLParser.RULE_deleteOption);
	    var _la = 0;
	    try {
	        this.state = 7109;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 49:
	        case 471:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7104;
	            _la = this._input.LA(1);
	            if(!(_la===49 || _la===471)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case 506:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7105;
	            this.match(MySQLParser.SET_SYMBOL);
	            this.state = 7106;
	            this.nullLiteral();
	            break;
	        case 373:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7107;
	            this.match(MySQLParser.NO_SYMBOL);
	            this.state = 7108;
	            this.match(MySQLParser.ACTION_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyList() {
	    let localctx = new KeyListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 890, MySQLParser.RULE_keyList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7111;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 7112;
	        this.keyPart();
	        this.state = 7117;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 7113;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 7114;
	            this.keyPart();
	            this.state = 7119;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7120;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyPart() {
	    let localctx = new KeyPartContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 892, MySQLParser.RULE_keyPart);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7122;
	        this.identifier();
	        this.state = 7124;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===776) {
	            this.state = 7123;
	            this.fieldLength();
	        }

	        this.state = 7127;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===18 || _la===134) {
	            this.state = 7126;
	            this.direction();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyListWithExpression() {
	    let localctx = new KeyListWithExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 894, MySQLParser.RULE_keyListWithExpression);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7129;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 7130;
	        this.keyPartOrExpression();
	        this.state = 7135;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 7131;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 7132;
	            this.keyPartOrExpression();
	            this.state = 7137;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7138;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyPartOrExpression() {
	    let localctx = new KeyPartOrExpressionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 896, MySQLParser.RULE_keyPartOrExpression);
	    var _la = 0;
	    try {
	        this.state = 7145;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,916,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7140;
	            this.keyPart();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7141;
	            this.exprWithParentheses();
	            this.state = 7143;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===18 || _la===134) {
	                this.state = 7142;
	                this.direction();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyListVariants() {
	    let localctx = new KeyListVariantsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 898, MySQLParser.RULE_keyListVariants);
	    try {
	        this.state = 7151;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,917,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7147;
	            if (!( serverVersion >= 80013)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80013");
	            }
	            this.state = 7148;
	            this.keyListWithExpression();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7149;
	            if (!( serverVersion < 80013)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80013");
	            }
	            this.state = 7150;
	            this.keyList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexType() {
	    let localctx = new IndexTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 900, MySQLParser.RULE_indexType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7153;
	        localctx.algorithm = this._input.LT(1);
	        _la = this._input.LA(1);
	        if(!(_la===44 || _la===220 || _la===488)) {
	            localctx.algorithm = this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexOption() {
	    let localctx = new IndexOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 902, MySQLParser.RULE_indexOption);
	    try {
	        this.state = 7157;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,918,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7155;
	            this.commonIndexOption();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7156;
	            this.indexTypeClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	commonIndexOption() {
	    let localctx = new CommonIndexOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 904, MySQLParser.RULE_commonIndexOption);
	    var _la = 0;
	    try {
	        this.state = 7168;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,920,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7159;
	            this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
	            this.state = 7161;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7160;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7163;
	            this.ulong_number();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7164;
	            this.match(MySQLParser.COMMENT_SYMBOL);
	            this.state = 7165;
	            this.textLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7166;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 7167;
	            this.visibility();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	visibility() {
	    let localctx = new VisibilityContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 906, MySQLParser.RULE_visibility);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7170;
	        _la = this._input.LA(1);
	        if(!(_la===661 || _la===662)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexTypeClause() {
	    let localctx = new IndexTypeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 908, MySQLParser.RULE_indexTypeClause);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7172;
	        _la = this._input.LA(1);
	        if(!(_la===599 || _la===621)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7173;
	        this.indexType();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fulltextIndexOption() {
	    let localctx = new FulltextIndexOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 910, MySQLParser.RULE_fulltextIndexOption);
	    try {
	        this.state = 7179;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,921,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7175;
	            this.commonIndexOption();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7176;
	            this.match(MySQLParser.WITH_SYMBOL);
	            this.state = 7177;
	            this.match(MySQLParser.PARSER_SYMBOL);
	            this.state = 7178;
	            this.identifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	spatialIndexOption() {
	    let localctx = new SpatialIndexOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 912, MySQLParser.RULE_spatialIndexOption);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7181;
	        this.commonIndexOption();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataTypeDefinition() {
	    let localctx = new DataTypeDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 914, MySQLParser.RULE_dataTypeDefinition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7183;
	        this.dataType();
	        this.state = 7184;
	        this.match(MySQLParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataType() {
	    let localctx = new DataTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 916, MySQLParser.RULE_dataType);
	    var _la = 0;
	    try {
	        this.state = 7333;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,955,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7186;
	            localctx.type = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===31 || _la===249 || _la===331 || _la===516 || _la===588)) {
	                localctx.type = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7188;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,922,this._ctx);
	            if(la_===1) {
	                this.state = 7187;
	                this.fieldLength();

	            }
	            this.state = 7191;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,923,this._ctx);
	            if(la_===1) {
	                this.state = 7190;
	                this.fieldOptions();

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7198;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 437:
	                this.state = 7193;
	                localctx.type = this.match(MySQLParser.REAL_SYMBOL);
	                break;
	            case 146:
	                this.state = 7194;
	                localctx.type = this.match(MySQLParser.DOUBLE_SYMBOL);
	                this.state = 7196;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,924,this._ctx);
	                if(la_===1) {
	                    this.state = 7195;
	                    this.match(MySQLParser.PRECISION_SYMBOL);

	                }
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 7201;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,926,this._ctx);
	            if(la_===1) {
	                this.state = 7200;
	                this.precision();

	            }
	            this.state = 7204;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,927,this._ctx);
	            if(la_===1) {
	                this.state = 7203;
	                this.fieldOptions();

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7206;
	            localctx.type = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===126 || _la===192 || _la===195 || _la===378)) {
	                localctx.type = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7208;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,928,this._ctx);
	            if(la_===1) {
	                this.state = 7207;
	                this.floatOptions();

	            }
	            this.state = 7211;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,929,this._ctx);
	            if(la_===1) {
	                this.state = 7210;
	                this.fieldOptions();

	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7213;
	            localctx.type = this.match(MySQLParser.BIT_SYMBOL);
	            this.state = 7215;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,930,this._ctx);
	            if(la_===1) {
	                this.state = 7214;
	                this.fieldLength();

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7217;
	            localctx.type = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===41 || _la===42)) {
	                localctx.type = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7218;
	            localctx.type = this.match(MySQLParser.CHAR_SYMBOL);
	            this.state = 7220;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,931,this._ctx);
	            if(la_===1) {
	                this.state = 7219;
	                this.fieldLength();

	            }
	            this.state = 7223;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,932,this._ctx);
	            if(la_===1) {
	                this.state = 7222;
	                this.charsetWithOptBinary();

	            }
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7225;
	            this.nchar();
	            this.state = 7227;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,933,this._ctx);
	            if(la_===1) {
	                this.state = 7226;
	                this.fieldLength();

	            }
	            this.state = 7230;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,934,this._ctx);
	            if(la_===1) {
	                this.state = 7229;
	                this.match(MySQLParser.BINARY_SYMBOL);

	            }
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7232;
	            localctx.type = this.match(MySQLParser.BINARY_SYMBOL);
	            this.state = 7234;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,935,this._ctx);
	            if(la_===1) {
	                this.state = 7233;
	                this.fieldLength();

	            }
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7239;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 60:
	                this.state = 7236;
	                localctx.type = this.match(MySQLParser.CHAR_SYMBOL);
	                this.state = 7237;
	                this.match(MySQLParser.VARYING_SYMBOL);
	                break;
	            case 629:
	                this.state = 7238;
	                localctx.type = this.match(MySQLParser.VARCHAR_SYMBOL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 7241;
	            this.fieldLength();
	            this.state = 7243;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,937,this._ctx);
	            if(la_===1) {
	                this.state = 7242;
	                this.charsetWithOptBinary();

	            }
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7255;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,938,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7245;
	                localctx.type = this.match(MySQLParser.NATIONAL_SYMBOL);
	                this.state = 7246;
	                this.match(MySQLParser.VARCHAR_SYMBOL);
	                break;

	            case 2:
	                this.state = 7247;
	                localctx.type = this.match(MySQLParser.NVARCHAR_SYMBOL);
	                break;

	            case 3:
	                this.state = 7248;
	                localctx.type = this.match(MySQLParser.NCHAR_SYMBOL);
	                this.state = 7249;
	                this.match(MySQLParser.VARCHAR_SYMBOL);
	                break;

	            case 4:
	                this.state = 7250;
	                localctx.type = this.match(MySQLParser.NATIONAL_SYMBOL);
	                this.state = 7251;
	                this.match(MySQLParser.CHAR_SYMBOL);
	                this.state = 7252;
	                this.match(MySQLParser.VARYING_SYMBOL);
	                break;

	            case 5:
	                this.state = 7253;
	                localctx.type = this.match(MySQLParser.NCHAR_SYMBOL);
	                this.state = 7254;
	                this.match(MySQLParser.VARYING_SYMBOL);
	                break;

	            }
	            this.state = 7257;
	            this.fieldLength();
	            this.state = 7259;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,939,this._ctx);
	            if(la_===1) {
	                this.state = 7258;
	                this.match(MySQLParser.BINARY_SYMBOL);

	            }
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 7261;
	            localctx.type = this.match(MySQLParser.VARBINARY_SYMBOL);
	            this.state = 7262;
	            this.fieldLength();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 7263;
	            localctx.type = this.match(MySQLParser.YEAR_SYMBOL);
	            this.state = 7265;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,940,this._ctx);
	            if(la_===1) {
	                this.state = 7264;
	                this.fieldLength();

	            }
	            this.state = 7268;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,941,this._ctx);
	            if(la_===1) {
	                this.state = 7267;
	                this.fieldOptions();

	            }
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 7270;
	            localctx.type = this.match(MySQLParser.DATE_SYMBOL);
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 7271;
	            localctx.type = this.match(MySQLParser.TIME_SYMBOL);
	            this.state = 7273;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,942,this._ctx);
	            if(la_===1) {
	                this.state = 7272;
	                this.typeDatetimePrecision();

	            }
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 7275;
	            localctx.type = this.match(MySQLParser.TIMESTAMP_SYMBOL);
	            this.state = 7277;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,943,this._ctx);
	            if(la_===1) {
	                this.state = 7276;
	                this.typeDatetimePrecision();

	            }
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 7279;
	            localctx.type = this.match(MySQLParser.DATETIME_SYMBOL);
	            this.state = 7281;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,944,this._ctx);
	            if(la_===1) {
	                this.state = 7280;
	                this.typeDatetimePrecision();

	            }
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 7283;
	            localctx.type = this.match(MySQLParser.TINYBLOB_SYMBOL);
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 7284;
	            localctx.type = this.match(MySQLParser.BLOB_SYMBOL);
	            this.state = 7286;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,945,this._ctx);
	            if(la_===1) {
	                this.state = 7285;
	                this.fieldLength();

	            }
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 7288;
	            localctx.type = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===290 || _la===330)) {
	                localctx.type = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 7289;
	            localctx.type = this.match(MySQLParser.LONG_SYMBOL);
	            this.state = 7290;
	            this.match(MySQLParser.VARBINARY_SYMBOL);
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 7291;
	            localctx.type = this.match(MySQLParser.LONG_SYMBOL);
	            this.state = 7295;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,946,this._ctx);
	            if(la_===1) {
	                this.state = 7292;
	                this.match(MySQLParser.CHAR_SYMBOL);
	                this.state = 7293;
	                this.match(MySQLParser.VARYING_SYMBOL);

	            } else if(la_===2) {
	                this.state = 7294;
	                this.match(MySQLParser.VARCHAR_SYMBOL);

	            }
	            this.state = 7298;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,947,this._ctx);
	            if(la_===1) {
	                this.state = 7297;
	                this.charsetWithOptBinary();

	            }
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 7300;
	            localctx.type = this.match(MySQLParser.TINYTEXT_SYMBOL);
	            this.state = 7302;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,948,this._ctx);
	            if(la_===1) {
	                this.state = 7301;
	                this.charsetWithOptBinary();

	            }
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 7304;
	            localctx.type = this.match(MySQLParser.TEXT_SYMBOL);
	            this.state = 7306;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,949,this._ctx);
	            if(la_===1) {
	                this.state = 7305;
	                this.fieldLength();

	            }
	            this.state = 7309;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,950,this._ctx);
	            if(la_===1) {
	                this.state = 7308;
	                this.charsetWithOptBinary();

	            }
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 7311;
	            localctx.type = this.match(MySQLParser.MEDIUMTEXT_SYMBOL);
	            this.state = 7313;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,951,this._ctx);
	            if(la_===1) {
	                this.state = 7312;
	                this.charsetWithOptBinary();

	            }
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 7315;
	            localctx.type = this.match(MySQLParser.LONGTEXT_SYMBOL);
	            this.state = 7317;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,952,this._ctx);
	            if(la_===1) {
	                this.state = 7316;
	                this.charsetWithOptBinary();

	            }
	            break;

	        case 26:
	            this.enterOuterAlt(localctx, 26);
	            this.state = 7319;
	            localctx.type = this.match(MySQLParser.ENUM_SYMBOL);
	            this.state = 7320;
	            this.stringList();
	            this.state = 7322;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,953,this._ctx);
	            if(la_===1) {
	                this.state = 7321;
	                this.charsetWithOptBinary();

	            }
	            break;

	        case 27:
	            this.enterOuterAlt(localctx, 27);
	            this.state = 7324;
	            localctx.type = this.match(MySQLParser.SET_SYMBOL);
	            this.state = 7325;
	            this.stringList();
	            this.state = 7327;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,954,this._ctx);
	            if(la_===1) {
	                this.state = 7326;
	                this.charsetWithOptBinary();

	            }
	            break;

	        case 28:
	            this.enterOuterAlt(localctx, 28);
	            this.state = 7329;
	            localctx.type = this.match(MySQLParser.SERIAL_SYMBOL);
	            break;

	        case 29:
	            this.enterOuterAlt(localctx, 29);
	            this.state = 7330;
	            if (!( serverVersion >= 50708)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50708");
	            }
	            this.state = 7331;
	            localctx.type = this.match(MySQLParser.JSON_SYMBOL);
	            break;

	        case 30:
	            this.enterOuterAlt(localctx, 30);
	            this.state = 7332;
	            localctx.type = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===211 || _la===212 || _la===279 || ((((_la - 351)) & ~0x1f) === 0 && ((1 << (_la - 351)) & 7) !== 0) || _la===411 || _la===412)) {
	                localctx.type = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nchar() {
	    let localctx = new NcharContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 918, MySQLParser.RULE_nchar);
	    try {
	        this.state = 7338;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 361:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7335;
	            localctx.type = this.match(MySQLParser.NCHAR_SYMBOL);
	            break;
	        case 358:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7336;
	            localctx.type = this.match(MySQLParser.NATIONAL_SYMBOL);
	            this.state = 7337;
	            this.match(MySQLParser.CHAR_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	realType() {
	    let localctx = new RealTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 920, MySQLParser.RULE_realType);
	    try {
	        this.state = 7345;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 437:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7340;
	            localctx.type = this.match(MySQLParser.REAL_SYMBOL);
	            break;
	        case 146:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7341;
	            localctx.type = this.match(MySQLParser.DOUBLE_SYMBOL);
	            this.state = 7343;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,957,this._ctx);
	            if(la_===1) {
	                this.state = 7342;
	                this.match(MySQLParser.PRECISION_SYMBOL);

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldLength() {
	    let localctx = new FieldLengthContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 922, MySQLParser.RULE_fieldLength);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7347;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 7350;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,959,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7348;
	            this.real_ulonglong_number();
	            break;

	        case 2:
	            this.state = 7349;
	            this.match(MySQLParser.DECIMAL_NUMBER);
	            break;

	        }
	        this.state = 7352;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldOptions() {
	    let localctx = new FieldOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 924, MySQLParser.RULE_fieldOptions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7355; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 7354;
	        		_la = this._input.LA(1);
	        		if(!(_la===512 || _la===612 || _la===657)) {
	        		this._errHandler.recoverInline(this);
	        		}
	        		else {
	        			this._errHandler.reportMatch(this);
	        		    this.consume();
	        		}
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 7357; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,960, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetWithOptBinary() {
	    let localctx = new CharsetWithOptBinaryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 926, MySQLParser.RULE_charsetWithOptBinary);
	    try {
	        this.state = 7373;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,963,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7359;
	            this.ascii();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7360;
	            this.unicode();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7361;
	            this.match(MySQLParser.BYTE_SYMBOL);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7362;
	            this.charset();
	            this.state = 7363;
	            this.charsetName();
	            this.state = 7365;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,961,this._ctx);
	            if(la_===1) {
	                this.state = 7364;
	                this.match(MySQLParser.BINARY_SYMBOL);

	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7367;
	            this.match(MySQLParser.BINARY_SYMBOL);
	            this.state = 7371;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,962,this._ctx);
	            if(la_===1) {
	                this.state = 7368;
	                this.charset();
	                this.state = 7369;
	                this.charsetName();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ascii() {
	    let localctx = new AsciiContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 928, MySQLParser.RULE_ascii);
	    try {
	        this.state = 7381;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 19:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7375;
	            this.match(MySQLParser.ASCII_SYMBOL);
	            this.state = 7377;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,964,this._ctx);
	            if(la_===1) {
	                this.state = 7376;
	                this.match(MySQLParser.BINARY_SYMBOL);

	            }
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7379;
	            this.match(MySQLParser.BINARY_SYMBOL);
	            this.state = 7380;
	            this.match(MySQLParser.ASCII_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	unicode() {
	    let localctx = new UnicodeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 930, MySQLParser.RULE_unicode);
	    try {
	        this.state = 7389;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 606:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7383;
	            this.match(MySQLParser.UNICODE_SYMBOL);
	            this.state = 7385;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,966,this._ctx);
	            if(la_===1) {
	                this.state = 7384;
	                this.match(MySQLParser.BINARY_SYMBOL);

	            }
	            break;
	        case 32:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7387;
	            this.match(MySQLParser.BINARY_SYMBOL);
	            this.state = 7388;
	            this.match(MySQLParser.UNICODE_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	wsNumCodepoints() {
	    let localctx = new WsNumCodepointsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 932, MySQLParser.RULE_wsNumCodepoints);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7391;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 7392;
	        this.real_ulong_number();
	        this.state = 7393;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeDatetimePrecision() {
	    let localctx = new TypeDatetimePrecisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 934, MySQLParser.RULE_typeDatetimePrecision);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7395;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 7396;
	        this.match(MySQLParser.INT_NUMBER);
	        this.state = 7397;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetName() {
	    let localctx = new CharsetNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 936, MySQLParser.RULE_charsetName);
	    try {
	        this.state = 7403;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,968,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7399;
	            this.textOrIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7400;
	            this.match(MySQLParser.BINARY_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7401;
	            if (!( serverVersion < 80011)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
	            }
	            this.state = 7402;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collationName() {
	    let localctx = new CollationNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 938, MySQLParser.RULE_collationName);
	    try {
	        this.state = 7410;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,969,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7405;
	            this.textOrIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7406;
	            if (!( serverVersion < 80011)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
	            }
	            this.state = 7407;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7408;
	            if (!( serverVersion >= 80018)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80018");
	            }
	            this.state = 7409;
	            this.match(MySQLParser.BINARY_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableOptions() {
	    let localctx = new CreateTableOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 940, MySQLParser.RULE_createTableOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7412;
	        this.createTableOption();
	        this.state = 7419;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,971,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7414;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,970,this._ctx);
	                if(la_===1) {
	                    this.state = 7413;
	                    this.match(MySQLParser.COMMA_SYMBOL);

	                }
	                this.state = 7416;
	                this.createTableOption(); 
	            }
	            this.state = 7421;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,971,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableOptionsSpaceSeparated() {
	    let localctx = new CreateTableOptionsSpaceSeparatedContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 942, MySQLParser.RULE_createTableOptionsSpaceSeparated);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7423; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 7422;
	        		this.createTableOption();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 7425; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,972, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createTableOption() {
	    let localctx = new CreateTableOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 944, MySQLParser.RULE_createTableOption);
	    var _la = 0;
	    try {
	        this.state = 7556;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,997,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7427;
	            localctx.option = this.match(MySQLParser.ENGINE_SYMBOL);
	            this.state = 7429;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,973,this._ctx);
	            if(la_===1) {
	                this.state = 7428;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 7431;
	            this.engineRef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7432;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 7433;
	            localctx.option = this.match(MySQLParser.SECONDARY_ENGINE_SYMBOL);
	            this.state = 7435;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,974,this._ctx);
	            if(la_===1) {
	                this.state = 7434;
	                this.equal();

	            }
	            this.state = 7439;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,975,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7437;
	                this.match(MySQLParser.NULL_SYMBOL);
	                break;

	            case 2:
	                this.state = 7438;
	                this.textOrIdentifier();
	                break;

	            }
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7441;
	            localctx.option = this.match(MySQLParser.MAX_ROWS_SYMBOL);
	            this.state = 7443;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7442;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7445;
	            this.ulonglong_number();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7446;
	            localctx.option = this.match(MySQLParser.MIN_ROWS_SYMBOL);
	            this.state = 7448;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7447;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7450;
	            this.ulonglong_number();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7451;
	            localctx.option = this.match(MySQLParser.AVG_ROW_LENGTH_SYMBOL);
	            this.state = 7453;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7452;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7455;
	            this.ulong_number();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7456;
	            localctx.option = this.match(MySQLParser.PASSWORD_SYMBOL);
	            this.state = 7458;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,979,this._ctx);
	            if(la_===1) {
	                this.state = 7457;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 7460;
	            this.textStringLiteral();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 7461;
	            localctx.option = this.match(MySQLParser.COMMENT_SYMBOL);
	            this.state = 7463;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,980,this._ctx);
	            if(la_===1) {
	                this.state = 7462;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 7465;
	            this.textStringLiteral();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 7466;
	            if (!( serverVersion >= 50708)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50708");
	            }
	            this.state = 7467;
	            localctx.option = this.match(MySQLParser.COMPRESSION_SYMBOL);
	            this.state = 7469;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,981,this._ctx);
	            if(la_===1) {
	                this.state = 7468;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 7471;
	            this.textString();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 7472;
	            if (!( serverVersion >= 50711)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50711");
	            }
	            this.state = 7473;
	            localctx.option = this.match(MySQLParser.ENCRYPTION_SYMBOL);
	            this.state = 7475;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,982,this._ctx);
	            if(la_===1) {
	                this.state = 7474;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 7477;
	            this.textString();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 7478;
	            localctx.option = this.match(MySQLParser.AUTO_INCREMENT_SYMBOL);
	            this.state = 7480;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7479;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7482;
	            this.ulonglong_number();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 7483;
	            localctx.option = this.match(MySQLParser.PACK_KEYS_SYMBOL);
	            this.state = 7485;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7484;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7487;
	            this.ternaryOption();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 7488;
	            localctx.option = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(((((_la - 544)) & ~0x1f) === 0 && ((1 << (_la - 544)) & 7) !== 0))) {
	                localctx.option = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7490;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7489;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7492;
	            this.ternaryOption();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 7493;
	            localctx.option = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===61 || _la===575)) {
	                localctx.option = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7495;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7494;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7497;
	            this.ulong_number();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 7498;
	            localctx.option = this.match(MySQLParser.DELAY_KEY_WRITE_SYMBOL);
	            this.state = 7500;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7499;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7502;
	            this.ulong_number();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 7503;
	            localctx.option = this.match(MySQLParser.ROW_FORMAT_SYMBOL);
	            this.state = 7505;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7504;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7507;
	            localctx.format = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===78 || _la===80 || _la===128 || _la===152 || _la===192 || _la===442)) {
	                localctx.format = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 7508;
	            localctx.option = this.match(MySQLParser.UNION_SYMBOL);
	            this.state = 7510;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7509;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7512;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 7513;
	            this.tableRefList();
	            this.state = 7514;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 7516;
	            this.defaultCharset();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 7517;
	            this.defaultCollation();
	            break;

	        case 19:
	            this.enterOuterAlt(localctx, 19);
	            this.state = 7518;
	            localctx.option = this.match(MySQLParser.INSERT_METHOD_SYMBOL);
	            this.state = 7520;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7519;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7522;
	            localctx.method = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===191 || _la===268 || _la===373)) {
	                localctx.method = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 20:
	            this.enterOuterAlt(localctx, 20);
	            this.state = 7523;
	            localctx.option = this.match(MySQLParser.DATA_SYMBOL);
	            this.state = 7524;
	            this.match(MySQLParser.DIRECTORY_SYMBOL);
	            this.state = 7526;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,991,this._ctx);
	            if(la_===1) {
	                this.state = 7525;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 7528;
	            this.textString();
	            break;

	        case 21:
	            this.enterOuterAlt(localctx, 21);
	            this.state = 7529;
	            localctx.option = this.match(MySQLParser.INDEX_SYMBOL);
	            this.state = 7530;
	            this.match(MySQLParser.DIRECTORY_SYMBOL);
	            this.state = 7532;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,992,this._ctx);
	            if(la_===1) {
	                this.state = 7531;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 7534;
	            this.textString();
	            break;

	        case 22:
	            this.enterOuterAlt(localctx, 22);
	            this.state = 7535;
	            localctx.option = this.match(MySQLParser.TABLESPACE_SYMBOL);
	            this.state = 7541;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,994,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7536;
	                if (!( serverVersion >= 50707)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50707");
	                }
	                this.state = 7538;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,993,this._ctx);
	                if(la_===1) {
	                    this.state = 7537;
	                    this.match(MySQLParser.EQUAL_OPERATOR);

	                }
	                break;

	            case 2:
	                break;

	            }
	            this.state = 7543;
	            this.identifier();
	            break;

	        case 23:
	            this.enterOuterAlt(localctx, 23);
	            this.state = 7544;
	            localctx.option = this.match(MySQLParser.STORAGE_SYMBOL);
	            this.state = 7545;
	            _la = this._input.LA(1);
	            if(!(_la===142 || _la===334)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 24:
	            this.enterOuterAlt(localctx, 24);
	            this.state = 7546;
	            localctx.option = this.match(MySQLParser.CONNECTION_SYMBOL);
	            this.state = 7548;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,995,this._ctx);
	            if(la_===1) {
	                this.state = 7547;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 7550;
	            this.textString();
	            break;

	        case 25:
	            this.enterOuterAlt(localctx, 25);
	            this.state = 7551;
	            localctx.option = this.match(MySQLParser.KEY_BLOCK_SIZE_SYMBOL);
	            this.state = 7553;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7552;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7555;
	            this.ulong_number();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ternaryOption() {
	    let localctx = new TernaryOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 946, MySQLParser.RULE_ternaryOption);
	    try {
	        this.state = 7560;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 747:
	        case 748:
	        case 749:
	        case 788:
	        case 790:
	        case 791:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7558;
	            this.ulong_number();
	            break;
	        case 128:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7559;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultCollation() {
	    let localctx = new DefaultCollationContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 948, MySQLParser.RULE_defaultCollation);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7563;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===128) {
	            this.state = 7562;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	        }

	        this.state = 7565;
	        this.match(MySQLParser.COLLATE_SYMBOL);
	        this.state = 7567;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1000,this._ctx);
	        if(la_===1) {
	            this.state = 7566;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 7569;
	        this.collationName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultEncryption() {
	    let localctx = new DefaultEncryptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 950, MySQLParser.RULE_defaultEncryption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7572;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===128) {
	            this.state = 7571;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	        }

	        this.state = 7574;
	        this.match(MySQLParser.ENCRYPTION_SYMBOL);
	        this.state = 7576;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1002,this._ctx);
	        if(la_===1) {
	            this.state = 7575;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 7578;
	        this.textStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	defaultCharset() {
	    let localctx = new DefaultCharsetContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 952, MySQLParser.RULE_defaultCharset);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7581;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===128) {
	            this.state = 7580;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	        }

	        this.state = 7583;
	        this.charset();
	        this.state = 7585;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1004,this._ctx);
	        if(la_===1) {
	            this.state = 7584;
	            this.match(MySQLParser.EQUAL_OPERATOR);

	        }
	        this.state = 7587;
	        this.charsetName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionClause() {
	    let localctx = new PartitionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 954, MySQLParser.RULE_partitionClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7589;
	        this.match(MySQLParser.PARTITION_SYMBOL);
	        this.state = 7590;
	        this.match(MySQLParser.BY_SYMBOL);
	        this.state = 7591;
	        this.partitionTypeDef();
	        this.state = 7594;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1005,this._ctx);
	        if(la_===1) {
	            this.state = 7592;
	            this.match(MySQLParser.PARTITIONS_SYMBOL);
	            this.state = 7593;
	            this.real_ulong_number();

	        }
	        this.state = 7597;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1006,this._ctx);
	        if(la_===1) {
	            this.state = 7596;
	            this.subPartitions();

	        }
	        this.state = 7600;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1007,this._ctx);
	        if(la_===1) {
	            this.state = 7599;
	            this.partitionDefinitions();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionTypeDef() {
	    let localctx = new PartitionTypeDefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 956, MySQLParser.RULE_partitionTypeDef);
	    var _la = 0;
	    try {
	        this.state = 7635;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1014,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new PartitionDefKeyContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7603;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===277) {
	                this.state = 7602;
	                this.match(MySQLParser.LINEAR_SYMBOL);
	            }

	            this.state = 7605;
	            this.match(MySQLParser.KEY_SYMBOL);
	            this.state = 7607;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1009,this._ctx);
	            if(la_===1) {
	                this.state = 7606;
	                this.partitionKeyAlgorithm();

	            }
	            this.state = 7609;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 7611;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1010,this._ctx);
	            if(la_===1) {
	                this.state = 7610;
	                this.identifierList();

	            }
	            this.state = 7613;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 2:
	            localctx = new PartitionDefHashContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7615;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===277) {
	                this.state = 7614;
	                this.match(MySQLParser.LINEAR_SYMBOL);
	            }

	            this.state = 7617;
	            this.match(MySQLParser.HASH_SYMBOL);
	            this.state = 7618;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 7619;
	            this.bitExpr(0);
	            this.state = 7620;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        case 3:
	            localctx = new PartitionDefRangeListContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7622;
	            _la = this._input.LA(1);
	            if(!(_la===280 || _la===432)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7633;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 776:
	                this.state = 7623;
	                this.match(MySQLParser.OPEN_PAR_SYMBOL);
	                this.state = 7624;
	                this.bitExpr(0);
	                this.state = 7625;
	                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	                break;
	            case 71:
	                this.state = 7627;
	                this.match(MySQLParser.COLUMNS_SYMBOL);
	                this.state = 7628;
	                this.match(MySQLParser.OPEN_PAR_SYMBOL);
	                this.state = 7630;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1012,this._ctx);
	                if(la_===1) {
	                    this.state = 7629;
	                    this.identifierList();

	                }
	                this.state = 7632;
	                this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subPartitions() {
	    let localctx = new SubPartitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 958, MySQLParser.RULE_subPartitions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7637;
	        this.match(MySQLParser.SUBPARTITION_SYMBOL);
	        this.state = 7638;
	        this.match(MySQLParser.BY_SYMBOL);
	        this.state = 7640;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===277) {
	            this.state = 7639;
	            this.match(MySQLParser.LINEAR_SYMBOL);
	        }

	        this.state = 7652;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 220:
	            this.state = 7642;
	            this.match(MySQLParser.HASH_SYMBOL);
	            this.state = 7643;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 7644;
	            this.bitExpr(0);
	            this.state = 7645;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;
	        case 265:
	            this.state = 7647;
	            this.match(MySQLParser.KEY_SYMBOL);
	            this.state = 7649;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1016,this._ctx);
	            if(la_===1) {
	                this.state = 7648;
	                this.partitionKeyAlgorithm();

	            }
	            this.state = 7651;
	            this.identifierListWithParentheses();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 7656;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1018,this._ctx);
	        if(la_===1) {
	            this.state = 7654;
	            this.match(MySQLParser.SUBPARTITIONS_SYMBOL);
	            this.state = 7655;
	            this.real_ulong_number();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionKeyAlgorithm() {
	    let localctx = new PartitionKeyAlgorithmContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 960, MySQLParser.RULE_partitionKeyAlgorithm);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7658;
	        if (!( serverVersion >= 50700)) {
	            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50700");
	        }
	        this.state = 7659;
	        this.match(MySQLParser.ALGORITHM_SYMBOL);
	        this.state = 7660;
	        this.match(MySQLParser.EQUAL_OPERATOR);
	        this.state = 7661;
	        this.real_ulong_number();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinitions() {
	    let localctx = new PartitionDefinitionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 962, MySQLParser.RULE_partitionDefinitions);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7663;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 7664;
	        this.partitionDefinition();
	        this.state = 7669;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 7665;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 7666;
	            this.partitionDefinition();
	            this.state = 7671;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7672;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionDefinition() {
	    let localctx = new PartitionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 964, MySQLParser.RULE_partitionDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7674;
	        this.match(MySQLParser.PARTITION_SYMBOL);
	        this.state = 7675;
	        this.identifier();
	        this.state = 7686;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1021,this._ctx);
	        if(la_===1) {
	            this.state = 7676;
	            this.match(MySQLParser.VALUES_SYMBOL);
	            this.state = 7677;
	            this.match(MySQLParser.LESS_SYMBOL);
	            this.state = 7678;
	            this.match(MySQLParser.THAN_SYMBOL);
	            this.state = 7681;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case 776:
	                this.state = 7679;
	                this.partitionValueItemListParen();
	                break;
	            case 329:
	                this.state = 7680;
	                this.match(MySQLParser.MAXVALUE_SYMBOL);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }

	        } else if(la_===2) {
	            this.state = 7683;
	            this.match(MySQLParser.VALUES_SYMBOL);
	            this.state = 7684;
	            this.match(MySQLParser.IN_SYMBOL);
	            this.state = 7685;
	            this.partitionValuesIn();

	        }
	        this.state = 7691;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===75 || _la===112 || _la===163 || _la===236 || _la===323 || _la===344 || _la===368 || _la===553 || _la===572) {
	            this.state = 7688;
	            this.partitionOption();
	            this.state = 7693;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7705;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===776) {
	            this.state = 7694;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 7695;
	            this.subpartitionDefinition();
	            this.state = 7700;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 7696;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 7697;
	                this.subpartitionDefinition();
	                this.state = 7702;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 7703;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionValuesIn() {
	    let localctx = new PartitionValuesInContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 966, MySQLParser.RULE_partitionValuesIn);
	    var _la = 0;
	    try {
	        this.state = 7719;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1026,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7707;
	            this.partitionValueItemListParen();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7708;
	            this.match(MySQLParser.OPEN_PAR_SYMBOL);
	            this.state = 7709;
	            this.partitionValueItemListParen();
	            this.state = 7714;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===773) {
	                this.state = 7710;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 7711;
	                this.partitionValueItemListParen();
	                this.state = 7716;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 7717;
	            this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionOption() {
	    let localctx = new PartitionOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 968, MySQLParser.RULE_partitionOption);
	    var _la = 0;
	    try {
	        this.state = 7755;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 572:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7721;
	            localctx.option = this.match(MySQLParser.TABLESPACE_SYMBOL);
	            this.state = 7723;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1027,this._ctx);
	            if(la_===1) {
	                this.state = 7722;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 7725;
	            this.identifier();
	            break;
	        case 163:
	        case 553:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7727;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===553) {
	                this.state = 7726;
	                this.match(MySQLParser.STORAGE_SYMBOL);
	            }

	            this.state = 7729;
	            localctx.option = this.match(MySQLParser.ENGINE_SYMBOL);
	            this.state = 7731;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1029,this._ctx);
	            if(la_===1) {
	                this.state = 7730;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 7733;
	            this.engineRef();
	            break;
	        case 368:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7734;
	            localctx.option = this.match(MySQLParser.NODEGROUP_SYMBOL);
	            this.state = 7736;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7735;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7738;
	            this.real_ulong_number();
	            break;
	        case 323:
	        case 344:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 7739;
	            localctx.option = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===323 || _la===344)) {
	                localctx.option = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7741;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===750) {
	                this.state = 7740;
	                this.match(MySQLParser.EQUAL_OPERATOR);
	            }

	            this.state = 7743;
	            this.real_ulong_number();
	            break;
	        case 112:
	        case 236:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 7744;
	            localctx.option = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===112 || _la===236)) {
	                localctx.option = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 7745;
	            this.match(MySQLParser.DIRECTORY_SYMBOL);
	            this.state = 7747;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1032,this._ctx);
	            if(la_===1) {
	                this.state = 7746;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 7749;
	            this.textLiteral();
	            break;
	        case 75:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 7750;
	            localctx.option = this.match(MySQLParser.COMMENT_SYMBOL);
	            this.state = 7752;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1033,this._ctx);
	            if(la_===1) {
	                this.state = 7751;
	                this.match(MySQLParser.EQUAL_OPERATOR);

	            }
	            this.state = 7754;
	            this.textLiteral();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subpartitionDefinition() {
	    let localctx = new SubpartitionDefinitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 970, MySQLParser.RULE_subpartitionDefinition);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7757;
	        this.match(MySQLParser.SUBPARTITION_SYMBOL);
	        this.state = 7758;
	        this.textOrIdentifier();
	        this.state = 7762;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===75 || _la===112 || _la===163 || _la===236 || _la===323 || _la===344 || _la===368 || _la===553 || _la===572) {
	            this.state = 7759;
	            this.partitionOption();
	            this.state = 7764;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionValueItemListParen() {
	    let localctx = new PartitionValueItemListParenContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 972, MySQLParser.RULE_partitionValueItemListParen);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7765;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 7766;
	        this.partitionValueItem();
	        this.state = 7771;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 7767;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 7768;
	            this.partitionValueItem();
	            this.state = 7773;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 7774;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionValueItem() {
	    let localctx = new PartitionValueItemContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 974, MySQLParser.RULE_partitionValueItem);
	    try {
	        this.state = 7778;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1037,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7776;
	            this.bitExpr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7777;
	            this.match(MySQLParser.MAXVALUE_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	definerClause() {
	    let localctx = new DefinerClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 976, MySQLParser.RULE_definerClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7780;
	        this.match(MySQLParser.DEFINER_SYMBOL);
	        this.state = 7781;
	        this.match(MySQLParser.EQUAL_OPERATOR);
	        this.state = 7782;
	        this.user();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifExists() {
	    let localctx = new IfExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 978, MySQLParser.RULE_ifExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7784;
	        this.match(MySQLParser.IF_SYMBOL);
	        this.state = 7785;
	        this.match(MySQLParser.EXISTS_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ifNotExists() {
	    let localctx = new IfNotExistsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 980, MySQLParser.RULE_ifNotExists);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7787;
	        this.match(MySQLParser.IF_SYMBOL);
	        this.state = 7788;
	        this.notRule();
	        this.state = 7789;
	        this.match(MySQLParser.EXISTS_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureParameter() {
	    let localctx = new ProcedureParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 982, MySQLParser.RULE_procedureParameter);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7792;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1038,this._ctx);
	        if(la_===1) {
	            this.state = 7791;
	            localctx.type = this._input.LT(1);
	            _la = this._input.LA(1);
	            if(!(_la===240 || _la===251 || _la===397)) {
	                localctx.type = this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 7794;
	        this.functionParameter();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionParameter() {
	    let localctx = new FunctionParameterContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 984, MySQLParser.RULE_functionParameter);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7796;
	        this.parameterName();
	        this.state = 7797;
	        this.typeWithOptCollate();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	collate() {
	    let localctx = new CollateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 986, MySQLParser.RULE_collate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7799;
	        this.match(MySQLParser.COLLATE_SYMBOL);
	        this.state = 7800;
	        this.collationName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	typeWithOptCollate() {
	    let localctx = new TypeWithOptCollateContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 988, MySQLParser.RULE_typeWithOptCollate);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7802;
	        this.dataType();
	        this.state = 7804;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1039,this._ctx);
	        if(la_===1) {
	            this.state = 7803;
	            this.collate();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaIdentifierPair() {
	    let localctx = new SchemaIdentifierPairContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 990, MySQLParser.RULE_schemaIdentifierPair);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7806;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 7807;
	        this.schemaRef();
	        this.state = 7808;
	        this.match(MySQLParser.COMMA_SYMBOL);
	        this.state = 7809;
	        this.schemaRef();
	        this.state = 7810;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewRefList() {
	    let localctx = new ViewRefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 992, MySQLParser.RULE_viewRefList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7812;
	        this.viewRef();
	        this.state = 7817;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 7813;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 7814;
	            this.viewRef();
	            this.state = 7819;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateList() {
	    let localctx = new UpdateListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 994, MySQLParser.RULE_updateList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7820;
	        this.updateElement();
	        this.state = 7825;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1041,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7821;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 7822;
	                this.updateElement(); 
	            }
	            this.state = 7827;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1041,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	updateElement() {
	    let localctx = new UpdateElementContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 996, MySQLParser.RULE_updateElement);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7828;
	        this.columnRef();
	        this.state = 7829;
	        this.match(MySQLParser.EQUAL_OPERATOR);
	        this.state = 7832;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1042,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7830;
	            this.expr(0);
	            break;

	        case 2:
	            this.state = 7831;
	            this.match(MySQLParser.DEFAULT_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	charsetClause() {
	    let localctx = new CharsetClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 998, MySQLParser.RULE_charsetClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7834;
	        this.charset();
	        this.state = 7835;
	        this.charsetName();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldsClause() {
	    let localctx = new FieldsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1000, MySQLParser.RULE_fieldsClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7837;
	        this.match(MySQLParser.COLUMNS_SYMBOL);
	        this.state = 7839; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 7838;
	        		this.fieldTerm();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 7841; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1043, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldTerm() {
	    let localctx = new FieldTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1002, MySQLParser.RULE_fieldTerm);
	    var _la = 0;
	    try {
	        this.state = 7855;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 579:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7843;
	            this.match(MySQLParser.TERMINATED_SYMBOL);
	            this.state = 7844;
	            this.match(MySQLParser.BY_SYMBOL);
	            this.state = 7845;
	            this.textString();
	            break;
	        case 157:
	        case 392:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7847;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===392) {
	                this.state = 7846;
	                this.match(MySQLParser.OPTIONALLY_SYMBOL);
	            }

	            this.state = 7849;
	            this.match(MySQLParser.ENCLOSED_SYMBOL);
	            this.state = 7850;
	            this.match(MySQLParser.BY_SYMBOL);
	            this.state = 7851;
	            this.textString();
	            break;
	        case 167:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 7852;
	            this.match(MySQLParser.ESCAPED_SYMBOL);
	            this.state = 7853;
	            this.match(MySQLParser.BY_SYMBOL);
	            this.state = 7854;
	            this.textString();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	linesClause() {
	    let localctx = new LinesClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1004, MySQLParser.RULE_linesClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7857;
	        this.match(MySQLParser.LINES_SYMBOL);
	        this.state = 7859; 
	        this._errHandler.sync(this);
	        var _alt = 1;
	        do {
	        	switch (_alt) {
	        	case 1:
	        		this.state = 7858;
	        		this.lineTerm();
	        		break;
	        	default:
	        		throw new antlr4.error.NoViableAltException(this);
	        	}
	        	this.state = 7861; 
	        	this._errHandler.sync(this);
	        	_alt = this._interp.adaptivePredict(this._input,1046, this._ctx);
	        } while ( _alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER );
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lineTerm() {
	    let localctx = new LineTermContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1006, MySQLParser.RULE_lineTerm);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7863;
	        _la = this._input.LA(1);
	        if(!(_la===541 || _la===579)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 7864;
	        this.match(MySQLParser.BY_SYMBOL);
	        this.state = 7865;
	        this.textString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userList() {
	    let localctx = new UserListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1008, MySQLParser.RULE_userList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7867;
	        this.user();
	        this.state = 7872;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1047,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7868;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 7869;
	                this.user(); 
	            }
	            this.state = 7874;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1047,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUserList() {
	    let localctx = new CreateUserListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1010, MySQLParser.RULE_createUserList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7875;
	        this.createUserEntry();
	        this.state = 7880;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1048,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7876;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 7877;
	                this.createUserEntry(); 
	            }
	            this.state = 7882;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1048,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterUserList() {
	    let localctx = new AlterUserListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1012, MySQLParser.RULE_alterUserList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7883;
	        this.alterUserEntry();
	        this.state = 7888;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1049,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 7884;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 7885;
	                this.alterUserEntry(); 
	            }
	            this.state = 7890;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1049,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createUserEntry() {
	    let localctx = new CreateUserEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1014, MySQLParser.RULE_createUserEntry);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7891;
	        this.user();
	        this.state = 7918;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1054,this._ctx);
	        if(la_===1) {
	            this.state = 7892;
	            this.match(MySQLParser.IDENTIFIED_SYMBOL);
	            this.state = 7916;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1053,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 7893;
	                this.match(MySQLParser.BY_SYMBOL);
	                this.state = 7896;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1050,this._ctx);
	                if(la_===1) {
	                    this.state = 7894;
	                    if (!( serverVersion < 80011)) {
	                        throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80011");
	                    }
	                    this.state = 7895;
	                    this.match(MySQLParser.PASSWORD_SYMBOL);

	                }
	                this.state = 7898;
	                this.textString();
	                break;

	            case 2:
	                this.state = 7899;
	                this.match(MySQLParser.WITH_SYMBOL);
	                this.state = 7900;
	                this.textOrIdentifier();
	                this.state = 7906;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1051,this._ctx);
	                if(la_===1) {
	                    this.state = 7901;
	                    this.match(MySQLParser.AS_SYMBOL);
	                    this.state = 7902;
	                    this.textStringHash();

	                } else if(la_===2) {
	                    this.state = 7903;
	                    if (!( serverVersion >= 50706)) {
	                        throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50706");
	                    }
	                    this.state = 7904;
	                    this.match(MySQLParser.BY_SYMBOL);
	                    this.state = 7905;
	                    this.textString();

	                }
	                break;

	            case 3:
	                this.state = 7908;
	                if (!( serverVersion >= 80018)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80018");
	                }
	                this.state = 7911;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===645) {
	                    this.state = 7909;
	                    this.match(MySQLParser.WITH_SYMBOL);
	                    this.state = 7910;
	                    this.textOrIdentifier();
	                }

	                this.state = 7913;
	                this.match(MySQLParser.BY_SYMBOL);
	                this.state = 7914;
	                this.match(MySQLParser.RANDOM_SYMBOL);
	                this.state = 7915;
	                this.match(MySQLParser.PASSWORD_SYMBOL);
	                break;

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterUserEntry() {
	    let localctx = new AlterUserEntryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1016, MySQLParser.RULE_alterUserEntry);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7920;
	        this.user();
	        this.state = 7949;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1062,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 7921;
	            this.match(MySQLParser.IDENTIFIED_SYMBOL);
	            this.state = 7944;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1060,this._ctx);
	            if(la_===1) {
	                this.state = 7924;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===645) {
	                    this.state = 7922;
	                    this.match(MySQLParser.WITH_SYMBOL);
	                    this.state = 7923;
	                    this.textOrIdentifier();
	                }

	                this.state = 7926;
	                this.match(MySQLParser.BY_SYMBOL);
	                this.state = 7927;
	                this.textString();
	                this.state = 7930;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1056,this._ctx);
	                if(la_===1) {
	                    this.state = 7928;
	                    this.match(MySQLParser.REPLACE_SYMBOL);
	                    this.state = 7929;
	                    this.textString();

	                }
	                this.state = 7933;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1057,this._ctx);
	                if(la_===1) {
	                    this.state = 7932;
	                    this.retainCurrentPassword();

	                }

	            } else if(la_===2) {
	                this.state = 7935;
	                this.match(MySQLParser.WITH_SYMBOL);
	                this.state = 7936;
	                this.textOrIdentifier();
	                this.state = 7942;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,1059,this._ctx);
	                if(la_===1) {
	                    this.state = 7937;
	                    this.match(MySQLParser.AS_SYMBOL);
	                    this.state = 7938;
	                    this.textStringHash();
	                    this.state = 7940;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,1058,this._ctx);
	                    if(la_===1) {
	                        this.state = 7939;
	                        this.retainCurrentPassword();

	                    }

	                }

	            }
	            break;

	        case 2:
	            this.state = 7947;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1061,this._ctx);
	            if(la_===1) {
	                this.state = 7946;
	                this.discardOldPassword();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	retainCurrentPassword() {
	    let localctx = new RetainCurrentPasswordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1018, MySQLParser.RULE_retainCurrentPassword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7951;
	        this.match(MySQLParser.RETAIN_SYMBOL);
	        this.state = 7952;
	        this.match(MySQLParser.CURRENT_SYMBOL);
	        this.state = 7953;
	        this.match(MySQLParser.PASSWORD_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	discardOldPassword() {
	    let localctx = new DiscardOldPasswordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1020, MySQLParser.RULE_discardOldPassword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7955;
	        this.match(MySQLParser.DISCARD_SYMBOL);
	        this.state = 7956;
	        this.match(MySQLParser.OLD_SYMBOL);
	        this.state = 7957;
	        this.match(MySQLParser.PASSWORD_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	replacePassword() {
	    let localctx = new ReplacePasswordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1022, MySQLParser.RULE_replacePassword);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7959;
	        this.match(MySQLParser.REPLACE_SYMBOL);
	        this.state = 7960;
	        this.textString();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	userIdentifierOrText() {
	    let localctx = new UserIdentifierOrTextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1024, MySQLParser.RULE_userIdentifierOrText);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7962;
	        this.textOrIdentifier();
	        this.state = 7966;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1063,this._ctx);
	        if(la_===1) {
	            this.state = 7963;
	            this.match(MySQLParser.AT_SIGN_SYMBOL);
	            this.state = 7964;
	            this.textOrIdentifier();

	        } else if(la_===2) {
	            this.state = 7965;
	            this.match(MySQLParser.AT_TEXT_SUFFIX);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	user() {
	    let localctx = new UserContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1026, MySQLParser.RULE_user);
	    try {
	        this.state = 7973;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1065,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7968;
	            this.userIdentifierOrText();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7969;
	            this.match(MySQLParser.CURRENT_USER_SYMBOL);
	            this.state = 7971;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1064,this._ctx);
	            if(la_===1) {
	                this.state = 7970;
	                this.parentheses();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	likeClause() {
	    let localctx = new LikeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1028, MySQLParser.RULE_likeClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7975;
	        this.match(MySQLParser.LIKE_SYMBOL);
	        this.state = 7976;
	        this.textStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	likeOrWhere() {
	    let localctx = new LikeOrWhereContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1030, MySQLParser.RULE_likeOrWhere);
	    try {
	        this.state = 7980;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 275:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7978;
	            this.likeClause();
	            break;
	        case 643:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7979;
	            this.whereClause();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	onlineOption() {
	    let localctx = new OnlineOptionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1032, MySQLParser.RULE_onlineOption);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7982;
	        _la = this._input.LA(1);
	        if(!(_la===380 || _la===385)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	noWriteToBinLog() {
	    let localctx = new NoWriteToBinLogContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1034, MySQLParser.RULE_noWriteToBinLog);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7984;
	        _la = this._input.LA(1);
	        if(!(_la===284 || _la===375)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	usePartition() {
	    let localctx = new UsePartitionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1036, MySQLParser.RULE_usePartition);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 7986;
	        if (!( serverVersion >= 50602)) {
	            throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50602");
	        }
	        this.state = 7987;
	        this.match(MySQLParser.PARTITION_SYMBOL);
	        this.state = 7988;
	        this.identifierListWithParentheses();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fieldIdentifier() {
	    let localctx = new FieldIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1038, MySQLParser.RULE_fieldIdentifier);
	    try {
	        this.state = 7995;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1068,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7990;
	            this.dotIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7991;
	            this.qualifiedIdentifier();
	            this.state = 7993;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1067,this._ctx);
	            if(la_===1) {
	                this.state = 7992;
	                this.dotIdentifier();

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnName() {
	    let localctx = new ColumnNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1040, MySQLParser.RULE_columnName);
	    try {
	        this.state = 8001;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1069,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 7997;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 7998;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 7999;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 8000;
	            this.fieldIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnInternalRef() {
	    let localctx = new ColumnInternalRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1042, MySQLParser.RULE_columnInternalRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8003;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnInternalRefList() {
	    let localctx = new ColumnInternalRefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1044, MySQLParser.RULE_columnInternalRefList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8005;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 8006;
	        this.columnInternalRef();
	        this.state = 8011;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 8007;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 8008;
	            this.columnInternalRef();
	            this.state = 8013;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 8014;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnRef() {
	    let localctx = new ColumnRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1046, MySQLParser.RULE_columnRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8016;
	        this.fieldIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertIdentifier() {
	    let localctx = new InsertIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1048, MySQLParser.RULE_insertIdentifier);
	    try {
	        this.state = 8020;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1071,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8018;
	            this.columnRef();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8019;
	            this.tableWild();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexName() {
	    let localctx = new IndexNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1050, MySQLParser.RULE_indexName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8022;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	indexRef() {
	    let localctx = new IndexRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1052, MySQLParser.RULE_indexRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8024;
	        this.fieldIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableWild() {
	    let localctx = new TableWildContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1054, MySQLParser.RULE_tableWild);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8026;
	        this.identifier();
	        this.state = 8027;
	        this.match(MySQLParser.DOT_SYMBOL);
	        this.state = 8031;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1072,this._ctx);
	        if(la_===1) {
	            this.state = 8028;
	            this.identifier();
	            this.state = 8029;
	            this.match(MySQLParser.DOT_SYMBOL);

	        }
	        this.state = 8033;
	        this.match(MySQLParser.MULT_OPERATOR);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaName() {
	    let localctx = new SchemaNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1056, MySQLParser.RULE_schemaName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8035;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	schemaRef() {
	    let localctx = new SchemaRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1058, MySQLParser.RULE_schemaRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8037;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureName() {
	    let localctx = new ProcedureNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1060, MySQLParser.RULE_procedureName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8039;
	        this.qualifiedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	procedureRef() {
	    let localctx = new ProcedureRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1062, MySQLParser.RULE_procedureRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8041;
	        this.qualifiedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionName() {
	    let localctx = new FunctionNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1064, MySQLParser.RULE_functionName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8043;
	        this.qualifiedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	functionRef() {
	    let localctx = new FunctionRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1066, MySQLParser.RULE_functionRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8045;
	        this.qualifiedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerName() {
	    let localctx = new TriggerNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1068, MySQLParser.RULE_triggerName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8047;
	        this.qualifiedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	triggerRef() {
	    let localctx = new TriggerRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1070, MySQLParser.RULE_triggerRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8049;
	        this.qualifiedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewName() {
	    let localctx = new ViewNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1072, MySQLParser.RULE_viewName);
	    try {
	        this.state = 8053;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1073,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8051;
	            this.qualifiedIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8052;
	            this.dotIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	viewRef() {
	    let localctx = new ViewRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1074, MySQLParser.RULE_viewRef);
	    try {
	        this.state = 8057;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1074,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8055;
	            this.qualifiedIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8056;
	            this.dotIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablespaceName() {
	    let localctx = new TablespaceNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1076, MySQLParser.RULE_tablespaceName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8059;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tablespaceRef() {
	    let localctx = new TablespaceRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1078, MySQLParser.RULE_tablespaceRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8061;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logfileGroupName() {
	    let localctx = new LogfileGroupNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1080, MySQLParser.RULE_logfileGroupName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8063;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	logfileGroupRef() {
	    let localctx = new LogfileGroupRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1082, MySQLParser.RULE_logfileGroupRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8065;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventName() {
	    let localctx = new EventNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1084, MySQLParser.RULE_eventName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8067;
	        this.qualifiedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	eventRef() {
	    let localctx = new EventRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1086, MySQLParser.RULE_eventRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8069;
	        this.qualifiedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	udfName() {
	    let localctx = new UdfNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1088, MySQLParser.RULE_udfName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8071;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serverName() {
	    let localctx = new ServerNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1090, MySQLParser.RULE_serverName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8073;
	        this.textOrIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	serverRef() {
	    let localctx = new ServerRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1092, MySQLParser.RULE_serverRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8075;
	        this.textOrIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	engineRef() {
	    let localctx = new EngineRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1094, MySQLParser.RULE_engineRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8077;
	        this.textOrIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableName() {
	    let localctx = new TableNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1096, MySQLParser.RULE_tableName);
	    try {
	        this.state = 8081;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1075,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8079;
	            this.qualifiedIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8080;
	            this.dotIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	filterTableRef() {
	    let localctx = new FilterTableRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1098, MySQLParser.RULE_filterTableRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8083;
	        this.schemaRef();
	        this.state = 8084;
	        this.dotIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRefWithWildcard() {
	    let localctx = new TableRefWithWildcardContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1100, MySQLParser.RULE_tableRefWithWildcard);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8086;
	        this.identifier();
	        this.state = 8094;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1077,this._ctx);
	        if(la_===1) {
	            this.state = 8087;
	            this.match(MySQLParser.DOT_SYMBOL);
	            this.state = 8088;
	            this.match(MySQLParser.MULT_OPERATOR);

	        } else if(la_===2) {
	            this.state = 8089;
	            this.dotIdentifier();
	            this.state = 8092;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1076,this._ctx);
	            if(la_===1) {
	                this.state = 8090;
	                this.match(MySQLParser.DOT_SYMBOL);
	                this.state = 8091;
	                this.match(MySQLParser.MULT_OPERATOR);

	            }

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRef() {
	    let localctx = new TableRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1102, MySQLParser.RULE_tableRef);
	    try {
	        this.state = 8098;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1078,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8096;
	            this.qualifiedIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8097;
	            this.dotIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableRefList() {
	    let localctx = new TableRefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1104, MySQLParser.RULE_tableRefList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8100;
	        this.tableRef();
	        this.state = 8105;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1079,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8101;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 8102;
	                this.tableRef(); 
	            }
	            this.state = 8107;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1079,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableAliasRefList() {
	    let localctx = new TableAliasRefListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1106, MySQLParser.RULE_tableAliasRefList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8108;
	        this.tableRefWithWildcard();
	        this.state = 8113;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1080,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8109;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 8110;
	                this.tableRefWithWildcard(); 
	            }
	            this.state = 8115;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1080,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parameterName() {
	    let localctx = new ParameterNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1108, MySQLParser.RULE_parameterName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8116;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelIdentifier() {
	    let localctx = new LabelIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1110, MySQLParser.RULE_labelIdentifier);
	    try {
	        this.state = 8120;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1081,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8118;
	            this.pureIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8119;
	            this.labelKeyword();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelRef() {
	    let localctx = new LabelRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1112, MySQLParser.RULE_labelRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8122;
	        this.labelIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleIdentifier() {
	    let localctx = new RoleIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1114, MySQLParser.RULE_roleIdentifier);
	    try {
	        this.state = 8126;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1082,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8124;
	            this.pureIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8125;
	            this.roleKeyword();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleRef() {
	    let localctx = new RoleRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1116, MySQLParser.RULE_roleRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8128;
	        this.roleIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pluginRef() {
	    let localctx = new PluginRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1118, MySQLParser.RULE_pluginRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8130;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	componentRef() {
	    let localctx = new ComponentRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1120, MySQLParser.RULE_componentRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8132;
	        this.textStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	resourceGroupRef() {
	    let localctx = new ResourceGroupRefContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1122, MySQLParser.RULE_resourceGroupRef);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8134;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowName() {
	    let localctx = new WindowNameContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1124, MySQLParser.RULE_windowName);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8136;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	pureIdentifier() {
	    let localctx = new PureIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1126, MySQLParser.RULE_pureIdentifier);
	    var _la = 0;
	    try {
	        this.state = 8141;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1083,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8138;
	            _la = this._input.LA(1);
	            if(!(_la===795 || _la===797)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8139;
	            if (!( isSqlModeActive(AnsiQuotes))) {
	                throw new antlr4.error.FailedPredicateException(this, "isSqlModeActive(AnsiQuotes)");
	            }
	            this.state = 8140;
	            this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1128, MySQLParser.RULE_identifier);
	    try {
	        this.state = 8145;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1084,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8143;
	            this.pureIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8144;
	            this.identifierKeyword();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierList() {
	    let localctx = new IdentifierListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1130, MySQLParser.RULE_identifierList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8147;
	        this.identifier();
	        this.state = 8152;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1085,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8148;
	                this.match(MySQLParser.COMMA_SYMBOL);
	                this.state = 8149;
	                this.identifier(); 
	            }
	            this.state = 8154;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1085,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierListWithParentheses() {
	    let localctx = new IdentifierListWithParenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1132, MySQLParser.RULE_identifierListWithParentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8155;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 8156;
	        this.identifierList();
	        this.state = 8157;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	qualifiedIdentifier() {
	    let localctx = new QualifiedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1134, MySQLParser.RULE_qualifiedIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8159;
	        this.identifier();
	        this.state = 8161;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1086,this._ctx);
	        if(la_===1) {
	            this.state = 8160;
	            this.dotIdentifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	simpleIdentifier() {
	    let localctx = new SimpleIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1136, MySQLParser.RULE_simpleIdentifier);
	    var _la = 0;
	    try {
	        this.state = 8174;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1089,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8163;
	            this.identifier();
	            this.state = 8168;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===772) {
	                this.state = 8164;
	                this.dotIdentifier();
	                this.state = 8166;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===772) {
	                    this.state = 8165;
	                    this.dotIdentifier();
	                }

	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8170;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 8171;
	            this.dotIdentifier();
	            this.state = 8172;
	            this.dotIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dotIdentifier() {
	    let localctx = new DotIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1138, MySQLParser.RULE_dotIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8176;
	        this.match(MySQLParser.DOT_SYMBOL);
	        this.state = 8177;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ulong_number() {
	    let localctx = new Ulong_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1140, MySQLParser.RULE_ulong_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8179;
	        _la = this._input.LA(1);
	        if(!(((((_la - 747)) & ~0x1f) === 0 && ((1 << (_la - 747)) & 7) !== 0) || ((((_la - 788)) & ~0x1f) === 0 && ((1 << (_la - 788)) & 13) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	real_ulong_number() {
	    let localctx = new Real_ulong_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1142, MySQLParser.RULE_real_ulong_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8181;
	        _la = this._input.LA(1);
	        if(!(((((_la - 747)) & ~0x1f) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la===788)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ulonglong_number() {
	    let localctx = new Ulonglong_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1144, MySQLParser.RULE_ulonglong_number);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8183;
	        _la = this._input.LA(1);
	        if(!(((((_la - 747)) & ~0x1f) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la===790 || _la===791)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	real_ulonglong_number() {
	    let localctx = new Real_ulonglong_numberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1146, MySQLParser.RULE_real_ulonglong_number);
	    try {
	        this.state = 8190;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1090,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8185;
	            this.match(MySQLParser.INT_NUMBER);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8186;
	            if (!( serverVersion >= 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	            }
	            this.state = 8187;
	            this.match(MySQLParser.HEX_NUMBER);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8188;
	            this.match(MySQLParser.ULONGLONG_NUMBER);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8189;
	            this.match(MySQLParser.LONG_NUMBER);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1148, MySQLParser.RULE_literal);
	    var _la = 0;
	    try {
	        this.state = 8201;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1092,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8192;
	            this.textLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8193;
	            this.numLiteral();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8194;
	            this.temporalLiteral();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8195;
	            this.nullLiteral();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8196;
	            this.boolLiteral();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 8198;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===794) {
	                this.state = 8197;
	                this.match(MySQLParser.UNDERSCORE_CHARSET);
	            }

	            this.state = 8200;
	            _la = this._input.LA(1);
	            if(!(_la===788 || _la===789)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	signedLiteral() {
	    let localctx = new SignedLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1150, MySQLParser.RULE_signedLiteral);
	    try {
	        this.state = 8208;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1093,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8203;
	            this.literal();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8204;
	            this.match(MySQLParser.PLUS_OPERATOR);
	            this.state = 8205;
	            this.ulong_number();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8206;
	            this.match(MySQLParser.MINUS_OPERATOR);
	            this.state = 8207;
	            this.ulong_number();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	stringList() {
	    let localctx = new StringListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1152, MySQLParser.RULE_stringList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8210;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 8211;
	        this.textString();
	        this.state = 8216;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 8212;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 8213;
	            this.textString();
	            this.state = 8218;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 8219;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textStringLiteral() {
	    let localctx = new TextStringLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1154, MySQLParser.RULE_textStringLiteral);
	    try {
	        this.state = 8224;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1095,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8221;
	            localctx.value = this.match(MySQLParser.SINGLE_QUOTED_TEXT);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8222;
	            if (!( !isSqlModeActive(AnsiQuotes))) {
	                throw new antlr4.error.FailedPredicateException(this, "!isSqlModeActive(AnsiQuotes)");
	            }
	            this.state = 8223;
	            localctx.value = this.match(MySQLParser.DOUBLE_QUOTED_TEXT);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textString() {
	    let localctx = new TextStringContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1156, MySQLParser.RULE_textString);
	    try {
	        this.state = 8229;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1096,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8226;
	            this.textStringLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8227;
	            this.match(MySQLParser.HEX_NUMBER);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8228;
	            this.match(MySQLParser.BIN_NUMBER);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textStringHash() {
	    let localctx = new TextStringHashContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1158, MySQLParser.RULE_textStringHash);
	    try {
	        this.state = 8234;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1097,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8231;
	            this.textStringLiteral();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8232;
	            if (!( serverVersion >= 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80017");
	            }
	            this.state = 8233;
	            this.match(MySQLParser.HEX_NUMBER);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textLiteral() {
	    let localctx = new TextLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1160, MySQLParser.RULE_textLiteral);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8241;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1099,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 8237;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1098,this._ctx);
	            if(la_===1) {
	                this.state = 8236;
	                this.match(MySQLParser.UNDERSCORE_CHARSET);

	            }
	            this.state = 8239;
	            this.textStringLiteral();
	            break;

	        case 2:
	            this.state = 8240;
	            this.match(MySQLParser.NCHAR_TEXT);
	            break;

	        }
	        this.state = 8246;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,1100,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 8243;
	                this.textStringLiteral(); 
	            }
	            this.state = 8248;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,1100,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textStringNoLinebreak() {
	    let localctx = new TextStringNoLinebreakContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1162, MySQLParser.RULE_textStringNoLinebreak);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8249;
	        this.textStringLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textStringLiteralList() {
	    let localctx = new TextStringLiteralListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1164, MySQLParser.RULE_textStringLiteralList);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8251;
	        this.textStringLiteral();
	        this.state = 8256;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===773) {
	            this.state = 8252;
	            this.match(MySQLParser.COMMA_SYMBOL);
	            this.state = 8253;
	            this.textStringLiteral();
	            this.state = 8258;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numLiteral() {
	    let localctx = new NumLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1166, MySQLParser.RULE_numLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8259;
	        _la = this._input.LA(1);
	        if(!(((((_la - 747)) & ~0x1f) === 0 && ((1 << (_la - 747)) & 7) !== 0) || _la===790 || _la===791)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	boolLiteral() {
	    let localctx = new BoolLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1168, MySQLParser.RULE_boolLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8261;
	        _la = this._input.LA(1);
	        if(!(_la===183 || _la===596)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nullLiteral() {
	    let localctx = new NullLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1170, MySQLParser.RULE_nullLiteral);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8263;
	        _la = this._input.LA(1);
	        if(!(_la===376 || _la===786)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	temporalLiteral() {
	    let localctx = new TemporalLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1172, MySQLParser.RULE_temporalLiteral);
	    try {
	        this.state = 8271;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 116:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8265;
	            this.match(MySQLParser.DATE_SYMBOL);
	            this.state = 8266;
	            this.match(MySQLParser.SINGLE_QUOTED_TEXT);
	            break;
	        case 586:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8267;
	            this.match(MySQLParser.TIME_SYMBOL);
	            this.state = 8268;
	            this.match(MySQLParser.SINGLE_QUOTED_TEXT);
	            break;
	        case 583:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8269;
	            this.match(MySQLParser.TIMESTAMP_SYMBOL);
	            this.state = 8270;
	            this.match(MySQLParser.SINGLE_QUOTED_TEXT);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatOptions() {
	    let localctx = new FloatOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1174, MySQLParser.RULE_floatOptions);
	    try {
	        this.state = 8275;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1103,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8273;
	            this.fieldLength();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8274;
	            this.precision();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	standardFloatOptions() {
	    let localctx = new StandardFloatOptionsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1176, MySQLParser.RULE_standardFloatOptions);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8277;
	        this.precision();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	precision() {
	    let localctx = new PrecisionContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1178, MySQLParser.RULE_precision);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8279;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 8280;
	        this.match(MySQLParser.INT_NUMBER);
	        this.state = 8281;
	        this.match(MySQLParser.COMMA_SYMBOL);
	        this.state = 8282;
	        this.match(MySQLParser.INT_NUMBER);
	        this.state = 8283;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	textOrIdentifier() {
	    let localctx = new TextOrIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1180, MySQLParser.RULE_textOrIdentifier);
	    try {
	        this.state = 8287;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1104,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8285;
	            this.identifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8286;
	            this.textStringLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lValueIdentifier() {
	    let localctx = new LValueIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1182, MySQLParser.RULE_lValueIdentifier);
	    try {
	        this.state = 8291;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1105,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8289;
	            this.pureIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8290;
	            this.lValueKeyword();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleIdentifierOrText() {
	    let localctx = new RoleIdentifierOrTextContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1184, MySQLParser.RULE_roleIdentifierOrText);
	    try {
	        this.state = 8295;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1106,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8293;
	            this.roleIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8294;
	            this.textStringLiteral();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sizeNumber() {
	    let localctx = new SizeNumberContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1186, MySQLParser.RULE_sizeNumber);
	    try {
	        this.state = 8299;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1107,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8297;
	            this.real_ulonglong_number();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8298;
	            this.pureIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	parentheses() {
	    let localctx = new ParenthesesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1188, MySQLParser.RULE_parentheses);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8301;
	        this.match(MySQLParser.OPEN_PAR_SYMBOL);
	        this.state = 8302;
	        this.match(MySQLParser.CLOSE_PAR_SYMBOL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	equal() {
	    let localctx = new EqualContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1190, MySQLParser.RULE_equal);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8304;
	        _la = this._input.LA(1);
	        if(!(_la===750 || _la===751)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optionType() {
	    let localctx = new OptionTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1192, MySQLParser.RULE_optionType);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8306;
	        _la = this._input.LA(1);
	        if(!(_la===214 || _la===284 || _la===502 || _la===658 || _la===673)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	varIdentType() {
	    let localctx = new VarIdentTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1194, MySQLParser.RULE_varIdentType);
	    try {
	        this.state = 8314;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 214:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8308;
	            this.match(MySQLParser.GLOBAL_SYMBOL);
	            this.state = 8309;
	            this.match(MySQLParser.DOT_SYMBOL);
	            break;
	        case 284:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8310;
	            this.match(MySQLParser.LOCAL_SYMBOL);
	            this.state = 8311;
	            this.match(MySQLParser.DOT_SYMBOL);
	            break;
	        case 502:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8312;
	            this.match(MySQLParser.SESSION_SYMBOL);
	            this.state = 8313;
	            this.match(MySQLParser.DOT_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setVarIdentType() {
	    let localctx = new SetVarIdentTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1196, MySQLParser.RULE_setVarIdentType);
	    try {
	        this.state = 8326;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case 658:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8316;
	            this.match(MySQLParser.PERSIST_SYMBOL);
	            this.state = 8317;
	            this.match(MySQLParser.DOT_SYMBOL);
	            break;
	        case 673:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8318;
	            this.match(MySQLParser.PERSIST_ONLY_SYMBOL);
	            this.state = 8319;
	            this.match(MySQLParser.DOT_SYMBOL);
	            break;
	        case 214:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8320;
	            this.match(MySQLParser.GLOBAL_SYMBOL);
	            this.state = 8321;
	            this.match(MySQLParser.DOT_SYMBOL);
	            break;
	        case 284:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8322;
	            this.match(MySQLParser.LOCAL_SYMBOL);
	            this.state = 8323;
	            this.match(MySQLParser.DOT_SYMBOL);
	            break;
	        case 502:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8324;
	            this.match(MySQLParser.SESSION_SYMBOL);
	            this.state = 8325;
	            this.match(MySQLParser.DOT_SYMBOL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierKeyword() {
	    let localctx = new IdentifierKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1198, MySQLParser.RULE_identifierKeyword);
	    try {
	        this.state = 8345;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1112,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8328;
	            if (!( serverVersion < 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
	            }
	            this.state = 8336;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1110,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8329;
	                this.labelKeyword();
	                break;

	            case 2:
	                this.state = 8330;
	                this.roleOrIdentifierKeyword();
	                break;

	            case 3:
	                this.state = 8331;
	                this.match(MySQLParser.EXECUTE_SYMBOL);
	                break;

	            case 4:
	                this.state = 8332;
	                if (!( serverVersion >= 50709)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50709");
	                }
	                this.state = 8333;
	                this.match(MySQLParser.SHUTDOWN_SYMBOL);
	                break;

	            case 5:
	                this.state = 8334;
	                if (!( serverVersion >= 80011)) {
	                    throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80011");
	                }
	                this.state = 8335;
	                this.match(MySQLParser.RESTART_SYMBOL);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8343;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1111,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8338;
	                this.identifierKeywordsUnambiguous();
	                break;

	            case 2:
	                this.state = 8339;
	                this.identifierKeywordsAmbiguous1RolesAndLabels();
	                break;

	            case 3:
	                this.state = 8340;
	                this.identifierKeywordsAmbiguous2Labels();
	                break;

	            case 4:
	                this.state = 8341;
	                this.identifierKeywordsAmbiguous3Roles();
	                break;

	            case 5:
	                this.state = 8342;
	                this.identifierKeywordsAmbiguous4SystemVariables();
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierKeywordsAmbiguous1RolesAndLabels() {
	    let localctx = new IdentifierKeywordsAmbiguous1RolesAndLabelsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1200, MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8347;
	        _la = this._input.LA(1);
	        if(!(_la===173 || _la===510 || _la===714)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierKeywordsAmbiguous2Labels() {
	    let localctx = new IdentifierKeywordsAmbiguous2LabelsContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1202, MySQLParser.RULE_identifierKeywordsAmbiguous2Labels);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8349;
	        _la = this._input.LA(1);
	        if(!(_la===19 || _la===29 || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 2684391427) !== 0) || _la===90 || _la===123 || _la===147 || _la===159 || ((((_la - 196)) & ~0x1f) === 0 && ((1 << (_la - 196)) & 75497475) !== 0) || _la===234 || _la===245 || _la===267 || _la===373 || _la===415 || _la===417 || ((((_la - 455)) & ~0x1f) === 0 && ((1 << (_la - 455)) & 33562625) !== 0) || ((((_la - 489)) & ~0x1f) === 0 && ((1 << (_la - 489)) & 41943041) !== 0) || _la===543 || _la===552 || ((((_la - 597)) & ~0x1f) === 0 && ((1 << (_la - 597)) & 1537) !== 0) || _la===651 || _la===677)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	labelKeyword() {
	    let localctx = new LabelKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1204, MySQLParser.RULE_labelKeyword);
	    try {
	        this.state = 8369;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1115,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8351;
	            if (!( serverVersion < 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
	            }
	            this.state = 8362;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1113,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8352;
	                this.roleOrLabelKeyword();
	                break;

	            case 2:
	                this.state = 8353;
	                this.match(MySQLParser.EVENT_SYMBOL);
	                break;

	            case 3:
	                this.state = 8354;
	                this.match(MySQLParser.FILE_SYMBOL);
	                break;

	            case 4:
	                this.state = 8355;
	                this.match(MySQLParser.NONE_SYMBOL);
	                break;

	            case 5:
	                this.state = 8356;
	                this.match(MySQLParser.PROCESS_SYMBOL);
	                break;

	            case 6:
	                this.state = 8357;
	                this.match(MySQLParser.PROXY_SYMBOL);
	                break;

	            case 7:
	                this.state = 8358;
	                this.match(MySQLParser.RELOAD_SYMBOL);
	                break;

	            case 8:
	                this.state = 8359;
	                this.match(MySQLParser.REPLICATION_SYMBOL);
	                break;

	            case 9:
	                this.state = 8360;
	                this.match(MySQLParser.RESOURCE_SYMBOL);
	                break;

	            case 10:
	                this.state = 8361;
	                this.match(MySQLParser.SUPER_SYMBOL);
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8367;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1114,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8364;
	                this.identifierKeywordsUnambiguous();
	                break;

	            case 2:
	                this.state = 8365;
	                this.identifierKeywordsAmbiguous3Roles();
	                break;

	            case 3:
	                this.state = 8366;
	                this.identifierKeywordsAmbiguous4SystemVariables();
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierKeywordsAmbiguous3Roles() {
	    let localctx = new IdentifierKeywordsAmbiguous3RolesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1206, MySQLParser.RULE_identifierKeywordsAmbiguous3Roles);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8371;
	        _la = this._input.LA(1);
	        if(!(_la===170 || _la===188 || _la===369 || ((((_la - 423)) & ~0x1f) === 0 && ((1 << (_la - 423)) & 268435473) !== 0) || _la===459 || _la===565 || _la===709)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierKeywordsUnambiguous() {
	    let localctx = new IdentifierKeywordsUnambiguousContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1208, MySQLParser.RULE_identifierKeywordsUnambiguous);
	    var _la = 0;
	    try {
	        this.state = 8376;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1116,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8373;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 262214636) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3249671057) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 2245782383) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 2954927169) !== 0) || ((((_la - 138)) & ~0x1f) === 0 && ((1 << (_la - 138)) & 3746852895) !== 0) || ((((_la - 171)) & ~0x1f) === 0 && ((1 << (_la - 171)) & 3225184099) !== 0) || ((((_la - 204)) & ~0x1f) === 0 && ((1 << (_la - 204)) & 2788234193) !== 0) || ((((_la - 238)) & ~0x1f) === 0 && ((1 << (_la - 238)) & 1161171041) !== 0) || ((((_la - 270)) & ~0x1f) === 0 && ((1 << (_la - 270)) & 4094494233) !== 0) || ((((_la - 302)) & ~0x1f) === 0 && ((1 << (_la - 302)) & 2256265215) !== 0) || ((((_la - 334)) & ~0x1f) === 0 && ((1 << (_la - 334)) & 2852083279) !== 0) || ((((_la - 366)) & ~0x1f) === 0 && ((1 << (_la - 366)) & 20228359) !== 0) || ((((_la - 398)) & ~0x1f) === 0 && ((1 << (_la - 398)) & 2628845439) !== 0) || ((((_la - 430)) & ~0x1f) === 0 && ((1 << (_la - 430)) & 3310328595) !== 0) || ((((_la - 462)) & ~0x1f) === 0 && ((1 << (_la - 462)) & 1438145823) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 257171811) !== 0) || ((((_la - 528)) & ~0x1f) === 0 && ((1 << (_la - 528)) & 4061090967) !== 0) || ((((_la - 560)) & ~0x1f) === 0 && ((1 << (_la - 560)) & 129472963) !== 0) || ((((_la - 592)) & ~0x1f) === 0 && ((1 << (_la - 592)) & 245636803) !== 0) || ((((_la - 625)) & ~0x1f) === 0 && ((1 << (_la - 625)) & 2598496325) !== 0) || ((((_la - 659)) & ~0x1f) === 0 && ((1 << (_la - 659)) & 3231816751) !== 0) || ((((_la - 693)) & ~0x1f) === 0 && ((1 << (_la - 693)) & 4292673077) !== 0) || ((((_la - 725)) & ~0x1f) === 0 && ((1 << (_la - 725)) & 15549) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8374;
	            if (!( serverVersion >= 80019)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80019");
	            }
	            this.state = 8375;
	            _la = this._input.LA(1);
	            if(!(_la===583 || _la===586 || ((((_la - 731)) & ~0x1f) === 0 && ((1 << (_la - 731)) & 16381) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleKeyword() {
	    let localctx = new RoleKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1210, MySQLParser.RULE_roleKeyword);
	    try {
	        this.state = 8388;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1119,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8378;
	            if (!( serverVersion < 80017)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80017");
	            }
	            this.state = 8381;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1117,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8379;
	                this.roleOrLabelKeyword();
	                break;

	            case 2:
	                this.state = 8380;
	                this.roleOrIdentifierKeyword();
	                break;

	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8386;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,1118,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 8383;
	                this.identifierKeywordsUnambiguous();
	                break;

	            case 2:
	                this.state = 8384;
	                this.identifierKeywordsAmbiguous2Labels();
	                break;

	            case 3:
	                this.state = 8385;
	                this.identifierKeywordsAmbiguous4SystemVariables();
	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lValueKeyword() {
	    let localctx = new LValueKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1212, MySQLParser.RULE_lValueKeyword);
	    try {
	        this.state = 8394;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1120,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8390;
	            this.identifierKeywordsUnambiguous();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8391;
	            this.identifierKeywordsAmbiguous1RolesAndLabels();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8392;
	            this.identifierKeywordsAmbiguous2Labels();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8393;
	            this.identifierKeywordsAmbiguous3Roles();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierKeywordsAmbiguous4SystemVariables() {
	    let localctx = new IdentifierKeywordsAmbiguous4SystemVariablesContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1214, MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables);
	    var _la = 0;
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 8396;
	        _la = this._input.LA(1);
	        if(!(_la===214 || _la===284 || _la===502 || _la===658 || _la===673)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleOrIdentifierKeyword() {
	    let localctx = new RoleOrIdentifierKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1216, MySQLParser.RULE_roleOrIdentifierKeyword);
	    var _la = 0;
	    try {
	        this.state = 8403;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1121,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8398;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 671617028) !== 0) || ((((_la - 46)) & ~0x1f) === 0 && ((1 << (_la - 46)) & 2685440003) !== 0) || _la===90 || _la===123 || _la===147 || _la===159 || ((((_la - 196)) & ~0x1f) === 0 && ((1 << (_la - 196)) & 343949347) !== 0) || _la===245 || _la===267 || ((((_la - 373)) & ~0x1f) === 0 && ((1 << (_la - 373)) & 302137345) !== 0) || ((((_la - 405)) & ~0x1f) === 0 && ((1 << (_la - 405)) & 5377) !== 0) || ((((_la - 452)) & ~0x1f) === 0 && ((1 << (_la - 452)) & 268763145) !== 0) || ((((_la - 489)) & ~0x1f) === 0 && ((1 << (_la - 489)) & 3263185025) !== 0) || _la===543 || _la===552 || ((((_la - 597)) & ~0x1f) === 0 && ((1 << (_la - 597)) & 263681) !== 0) || ((((_la - 648)) & ~0x1f) === 0 && ((1 << (_la - 648)) & 536897545) !== 0) || ((((_la - 720)) & ~0x1f) === 0 && ((1 << (_la - 720)) & 15) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8399;
	            if (!( serverVersion >= 50709)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 50709");
	            }
	            this.state = 8400;
	            this.match(MySQLParser.SHUTDOWN_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8401;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 8402;
	            this.match(MySQLParser.IMPORT_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	roleOrLabelKeyword() {
	    let localctx = new RoleOrLabelKeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 1218, MySQLParser.RULE_roleOrLabelKeyword);
	    var _la = 0;
	    try {
	        this.state = 8414;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,1122,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 8405;
	            _la = this._input.LA(1);
	            if(!((((_la) & ~0x1f) === 0 && ((1 << _la) & 132195304) !== 0) || ((((_la - 33)) & ~0x1f) === 0 && ((1 << (_la - 33)) & 3249671057) !== 0) || ((((_la - 65)) & ~0x1f) === 0 && ((1 << (_la - 65)) & 2514217837) !== 0) || ((((_la - 101)) & ~0x1f) === 0 && ((1 << (_la - 101)) & 2954927169) !== 0) || ((((_la - 136)) & ~0x1f) === 0 && ((1 << (_la - 136)) & 2102509693) !== 0) || ((((_la - 168)) & ~0x1f) === 0 && ((1 << (_la - 168)) & 31668491) !== 0) || ((((_la - 202)) & ~0x1f) === 0 && ((1 << (_la - 202)) & 2558811717) !== 0) || ((((_la - 235)) & ~0x1f) === 0 && ((1 << (_la - 235)) & 699433737) !== 0) || ((((_la - 268)) & ~0x1f) === 0 && ((1 << (_la - 268)) & 3493140581) !== 0) || ((((_la - 300)) & ~0x1f) === 0 && ((1 << (_la - 300)) & 468680703) !== 0) || ((((_la - 333)) & ~0x1f) === 0 && ((1 << (_la - 333)) & 1409199263) !== 0) || ((((_la - 365)) & ~0x1f) === 0 && ((1 << (_la - 365)) & 741903) !== 0) || ((((_la - 399)) & ~0x1f) === 0 && ((1 << (_la - 399)) & 3461889979) !== 0) || ((((_la - 431)) & ~0x1f) === 0 && ((1 << (_la - 431)) & 3800551305) !== 0) || ((((_la - 463)) & ~0x1f) === 0 && ((1 << (_la - 463)) & 719072783) !== 0) || ((((_la - 495)) & ~0x1f) === 0 && ((1 << (_la - 495)) & 206840033) !== 0) || ((((_la - 528)) & ~0x1f) === 0 && ((1 << (_la - 528)) & 4061090999) !== 0) || ((((_la - 560)) & ~0x1f) === 0 && ((1 << (_la - 560)) & 129472995) !== 0) || ((((_la - 592)) & ~0x1f) === 0 && ((1 << (_la - 592)) & 237248451) !== 0) || ((((_la - 627)) & ~0x1f) === 0 && ((1 << (_la - 627)) & 647002641) !== 0) || ((((_la - 664)) & ~0x1f) === 0 && ((1 << (_la - 664)) & 2785352929) !== 0) || ((((_la - 697)) & ~0x1f) === 0 && ((1 << (_la - 697)) & 3629699043) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 8406;
	            if (!( serverVersion < 50709)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 50709");
	            }
	            this.state = 8407;
	            this.match(MySQLParser.SHUTDOWN_SYMBOL);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 8408;
	            if (!( serverVersion < 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion < 80000");
	            }
	            this.state = 8409;
	            _la = this._input.LA(1);
	            if(!(_la===99 || _la===206 || _la===234 || _la===484 || _la===487)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 8410;
	            if (!( serverVersion >= 80000)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80000");
	            }
	            this.state = 8411;
	            _la = this._input.LA(1);
	            if(!(_la===172 || _la===177 || _la===386 || _la===565 || _la===625 || _la===646)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 8412;
	            if (!( serverVersion >= 80014)) {
	                throw new antlr4.error.FailedPredicateException(this, "serverVersion >= 80014");
	            }
	            this.state = 8413;
	            this.match(MySQLParser.ADMIN_SYMBOL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

MySQLParser.EOF = antlr4.Token.EOF;
MySQLParser.ACCESSIBLE_SYMBOL = 1;
MySQLParser.ACCOUNT_SYMBOL = 2;
MySQLParser.ACTION_SYMBOL = 3;
MySQLParser.ADD_SYMBOL = 4;
MySQLParser.ADDDATE_SYMBOL = 5;
MySQLParser.AFTER_SYMBOL = 6;
MySQLParser.AGAINST_SYMBOL = 7;
MySQLParser.AGGREGATE_SYMBOL = 8;
MySQLParser.ALGORITHM_SYMBOL = 9;
MySQLParser.ALL_SYMBOL = 10;
MySQLParser.ALTER_SYMBOL = 11;
MySQLParser.ALWAYS_SYMBOL = 12;
MySQLParser.ANALYSE_SYMBOL = 13;
MySQLParser.ANALYZE_SYMBOL = 14;
MySQLParser.AND_SYMBOL = 15;
MySQLParser.ANY_SYMBOL = 16;
MySQLParser.AS_SYMBOL = 17;
MySQLParser.ASC_SYMBOL = 18;
MySQLParser.ASCII_SYMBOL = 19;
MySQLParser.ASENSITIVE_SYMBOL = 20;
MySQLParser.AT_SYMBOL = 21;
MySQLParser.AUTHORS_SYMBOL = 22;
MySQLParser.AUTOEXTEND_SIZE_SYMBOL = 23;
MySQLParser.AUTO_INCREMENT_SYMBOL = 24;
MySQLParser.AVG_ROW_LENGTH_SYMBOL = 25;
MySQLParser.AVG_SYMBOL = 26;
MySQLParser.BACKUP_SYMBOL = 27;
MySQLParser.BEFORE_SYMBOL = 28;
MySQLParser.BEGIN_SYMBOL = 29;
MySQLParser.BETWEEN_SYMBOL = 30;
MySQLParser.BIGINT_SYMBOL = 31;
MySQLParser.BINARY_SYMBOL = 32;
MySQLParser.BINLOG_SYMBOL = 33;
MySQLParser.BIN_NUM_SYMBOL = 34;
MySQLParser.BIT_AND_SYMBOL = 35;
MySQLParser.BIT_OR_SYMBOL = 36;
MySQLParser.BIT_SYMBOL = 37;
MySQLParser.BIT_XOR_SYMBOL = 38;
MySQLParser.BLOB_SYMBOL = 39;
MySQLParser.BLOCK_SYMBOL = 40;
MySQLParser.BOOLEAN_SYMBOL = 41;
MySQLParser.BOOL_SYMBOL = 42;
MySQLParser.BOTH_SYMBOL = 43;
MySQLParser.BTREE_SYMBOL = 44;
MySQLParser.BY_SYMBOL = 45;
MySQLParser.BYTE_SYMBOL = 46;
MySQLParser.CACHE_SYMBOL = 47;
MySQLParser.CALL_SYMBOL = 48;
MySQLParser.CASCADE_SYMBOL = 49;
MySQLParser.CASCADED_SYMBOL = 50;
MySQLParser.CASE_SYMBOL = 51;
MySQLParser.CAST_SYMBOL = 52;
MySQLParser.CATALOG_NAME_SYMBOL = 53;
MySQLParser.CHAIN_SYMBOL = 54;
MySQLParser.CHANGE_SYMBOL = 55;
MySQLParser.CHANGED_SYMBOL = 56;
MySQLParser.CHANNEL_SYMBOL = 57;
MySQLParser.CHARSET_SYMBOL = 58;
MySQLParser.CHARACTER_SYMBOL = 59;
MySQLParser.CHAR_SYMBOL = 60;
MySQLParser.CHECKSUM_SYMBOL = 61;
MySQLParser.CHECK_SYMBOL = 62;
MySQLParser.CIPHER_SYMBOL = 63;
MySQLParser.CLASS_ORIGIN_SYMBOL = 64;
MySQLParser.CLIENT_SYMBOL = 65;
MySQLParser.CLOSE_SYMBOL = 66;
MySQLParser.COALESCE_SYMBOL = 67;
MySQLParser.CODE_SYMBOL = 68;
MySQLParser.COLLATE_SYMBOL = 69;
MySQLParser.COLLATION_SYMBOL = 70;
MySQLParser.COLUMNS_SYMBOL = 71;
MySQLParser.COLUMN_SYMBOL = 72;
MySQLParser.COLUMN_NAME_SYMBOL = 73;
MySQLParser.COLUMN_FORMAT_SYMBOL = 74;
MySQLParser.COMMENT_SYMBOL = 75;
MySQLParser.COMMITTED_SYMBOL = 76;
MySQLParser.COMMIT_SYMBOL = 77;
MySQLParser.COMPACT_SYMBOL = 78;
MySQLParser.COMPLETION_SYMBOL = 79;
MySQLParser.COMPRESSED_SYMBOL = 80;
MySQLParser.COMPRESSION_SYMBOL = 81;
MySQLParser.CONCURRENT_SYMBOL = 82;
MySQLParser.CONDITION_SYMBOL = 83;
MySQLParser.CONNECTION_SYMBOL = 84;
MySQLParser.CONSISTENT_SYMBOL = 85;
MySQLParser.CONSTRAINT_SYMBOL = 86;
MySQLParser.CONSTRAINT_CATALOG_SYMBOL = 87;
MySQLParser.CONSTRAINT_NAME_SYMBOL = 88;
MySQLParser.CONSTRAINT_SCHEMA_SYMBOL = 89;
MySQLParser.CONTAINS_SYMBOL = 90;
MySQLParser.CONTEXT_SYMBOL = 91;
MySQLParser.CONTINUE_SYMBOL = 92;
MySQLParser.CONTRIBUTORS_SYMBOL = 93;
MySQLParser.CONVERT_SYMBOL = 94;
MySQLParser.COUNT_SYMBOL = 95;
MySQLParser.CPU_SYMBOL = 96;
MySQLParser.CREATE_SYMBOL = 97;
MySQLParser.CROSS_SYMBOL = 98;
MySQLParser.CUBE_SYMBOL = 99;
MySQLParser.CURDATE_SYMBOL = 100;
MySQLParser.CURRENT_SYMBOL = 101;
MySQLParser.CURRENT_DATE_SYMBOL = 102;
MySQLParser.CURRENT_TIME_SYMBOL = 103;
MySQLParser.CURRENT_TIMESTAMP_SYMBOL = 104;
MySQLParser.CURRENT_USER_SYMBOL = 105;
MySQLParser.CURSOR_SYMBOL = 106;
MySQLParser.CURSOR_NAME_SYMBOL = 107;
MySQLParser.CURTIME_SYMBOL = 108;
MySQLParser.DATABASE_SYMBOL = 109;
MySQLParser.DATABASES_SYMBOL = 110;
MySQLParser.DATAFILE_SYMBOL = 111;
MySQLParser.DATA_SYMBOL = 112;
MySQLParser.DATETIME_SYMBOL = 113;
MySQLParser.DATE_ADD_SYMBOL = 114;
MySQLParser.DATE_SUB_SYMBOL = 115;
MySQLParser.DATE_SYMBOL = 116;
MySQLParser.DAYOFMONTH_SYMBOL = 117;
MySQLParser.DAY_HOUR_SYMBOL = 118;
MySQLParser.DAY_MICROSECOND_SYMBOL = 119;
MySQLParser.DAY_MINUTE_SYMBOL = 120;
MySQLParser.DAY_SECOND_SYMBOL = 121;
MySQLParser.DAY_SYMBOL = 122;
MySQLParser.DEALLOCATE_SYMBOL = 123;
MySQLParser.DEC_SYMBOL = 124;
MySQLParser.DECIMAL_NUM_SYMBOL = 125;
MySQLParser.DECIMAL_SYMBOL = 126;
MySQLParser.DECLARE_SYMBOL = 127;
MySQLParser.DEFAULT_SYMBOL = 128;
MySQLParser.DEFAULT_AUTH_SYMBOL = 129;
MySQLParser.DEFINER_SYMBOL = 130;
MySQLParser.DELAYED_SYMBOL = 131;
MySQLParser.DELAY_KEY_WRITE_SYMBOL = 132;
MySQLParser.DELETE_SYMBOL = 133;
MySQLParser.DESC_SYMBOL = 134;
MySQLParser.DESCRIBE_SYMBOL = 135;
MySQLParser.DES_KEY_FILE_SYMBOL = 136;
MySQLParser.DETERMINISTIC_SYMBOL = 137;
MySQLParser.DIAGNOSTICS_SYMBOL = 138;
MySQLParser.DIRECTORY_SYMBOL = 139;
MySQLParser.DISABLE_SYMBOL = 140;
MySQLParser.DISCARD_SYMBOL = 141;
MySQLParser.DISK_SYMBOL = 142;
MySQLParser.DISTINCT_SYMBOL = 143;
MySQLParser.DISTINCTROW_SYMBOL = 144;
MySQLParser.DIV_SYMBOL = 145;
MySQLParser.DOUBLE_SYMBOL = 146;
MySQLParser.DO_SYMBOL = 147;
MySQLParser.DROP_SYMBOL = 148;
MySQLParser.DUAL_SYMBOL = 149;
MySQLParser.DUMPFILE_SYMBOL = 150;
MySQLParser.DUPLICATE_SYMBOL = 151;
MySQLParser.DYNAMIC_SYMBOL = 152;
MySQLParser.EACH_SYMBOL = 153;
MySQLParser.ELSE_SYMBOL = 154;
MySQLParser.ELSEIF_SYMBOL = 155;
MySQLParser.ENABLE_SYMBOL = 156;
MySQLParser.ENCLOSED_SYMBOL = 157;
MySQLParser.ENCRYPTION_SYMBOL = 158;
MySQLParser.END_SYMBOL = 159;
MySQLParser.ENDS_SYMBOL = 160;
MySQLParser.END_OF_INPUT_SYMBOL = 161;
MySQLParser.ENGINES_SYMBOL = 162;
MySQLParser.ENGINE_SYMBOL = 163;
MySQLParser.ENUM_SYMBOL = 164;
MySQLParser.ERROR_SYMBOL = 165;
MySQLParser.ERRORS_SYMBOL = 166;
MySQLParser.ESCAPED_SYMBOL = 167;
MySQLParser.ESCAPE_SYMBOL = 168;
MySQLParser.EVENTS_SYMBOL = 169;
MySQLParser.EVENT_SYMBOL = 170;
MySQLParser.EVERY_SYMBOL = 171;
MySQLParser.EXCHANGE_SYMBOL = 172;
MySQLParser.EXECUTE_SYMBOL = 173;
MySQLParser.EXISTS_SYMBOL = 174;
MySQLParser.EXIT_SYMBOL = 175;
MySQLParser.EXPANSION_SYMBOL = 176;
MySQLParser.EXPIRE_SYMBOL = 177;
MySQLParser.EXPLAIN_SYMBOL = 178;
MySQLParser.EXPORT_SYMBOL = 179;
MySQLParser.EXTENDED_SYMBOL = 180;
MySQLParser.EXTENT_SIZE_SYMBOL = 181;
MySQLParser.EXTRACT_SYMBOL = 182;
MySQLParser.FALSE_SYMBOL = 183;
MySQLParser.FAST_SYMBOL = 184;
MySQLParser.FAULTS_SYMBOL = 185;
MySQLParser.FETCH_SYMBOL = 186;
MySQLParser.FIELDS_SYMBOL = 187;
MySQLParser.FILE_SYMBOL = 188;
MySQLParser.FILE_BLOCK_SIZE_SYMBOL = 189;
MySQLParser.FILTER_SYMBOL = 190;
MySQLParser.FIRST_SYMBOL = 191;
MySQLParser.FIXED_SYMBOL = 192;
MySQLParser.FLOAT4_SYMBOL = 193;
MySQLParser.FLOAT8_SYMBOL = 194;
MySQLParser.FLOAT_SYMBOL = 195;
MySQLParser.FLUSH_SYMBOL = 196;
MySQLParser.FOLLOWS_SYMBOL = 197;
MySQLParser.FORCE_SYMBOL = 198;
MySQLParser.FOREIGN_SYMBOL = 199;
MySQLParser.FOR_SYMBOL = 200;
MySQLParser.FORMAT_SYMBOL = 201;
MySQLParser.FOUND_SYMBOL = 202;
MySQLParser.FROM_SYMBOL = 203;
MySQLParser.FULL_SYMBOL = 204;
MySQLParser.FULLTEXT_SYMBOL = 205;
MySQLParser.FUNCTION_SYMBOL = 206;
MySQLParser.GET_SYMBOL = 207;
MySQLParser.GENERAL_SYMBOL = 208;
MySQLParser.GENERATED_SYMBOL = 209;
MySQLParser.GROUP_REPLICATION_SYMBOL = 210;
MySQLParser.GEOMETRYCOLLECTION_SYMBOL = 211;
MySQLParser.GEOMETRY_SYMBOL = 212;
MySQLParser.GET_FORMAT_SYMBOL = 213;
MySQLParser.GLOBAL_SYMBOL = 214;
MySQLParser.GRANT_SYMBOL = 215;
MySQLParser.GRANTS_SYMBOL = 216;
MySQLParser.GROUP_SYMBOL = 217;
MySQLParser.GROUP_CONCAT_SYMBOL = 218;
MySQLParser.HANDLER_SYMBOL = 219;
MySQLParser.HASH_SYMBOL = 220;
MySQLParser.HAVING_SYMBOL = 221;
MySQLParser.HELP_SYMBOL = 222;
MySQLParser.HIGH_PRIORITY_SYMBOL = 223;
MySQLParser.HOST_SYMBOL = 224;
MySQLParser.HOSTS_SYMBOL = 225;
MySQLParser.HOUR_MICROSECOND_SYMBOL = 226;
MySQLParser.HOUR_MINUTE_SYMBOL = 227;
MySQLParser.HOUR_SECOND_SYMBOL = 228;
MySQLParser.HOUR_SYMBOL = 229;
MySQLParser.IDENTIFIED_SYMBOL = 230;
MySQLParser.IF_SYMBOL = 231;
MySQLParser.IGNORE_SYMBOL = 232;
MySQLParser.IGNORE_SERVER_IDS_SYMBOL = 233;
MySQLParser.IMPORT_SYMBOL = 234;
MySQLParser.INDEXES_SYMBOL = 235;
MySQLParser.INDEX_SYMBOL = 236;
MySQLParser.INFILE_SYMBOL = 237;
MySQLParser.INITIAL_SIZE_SYMBOL = 238;
MySQLParser.INNER_SYMBOL = 239;
MySQLParser.INOUT_SYMBOL = 240;
MySQLParser.INSENSITIVE_SYMBOL = 241;
MySQLParser.INSERT_SYMBOL = 242;
MySQLParser.INSERT_METHOD_SYMBOL = 243;
MySQLParser.INSTANCE_SYMBOL = 244;
MySQLParser.INSTALL_SYMBOL = 245;
MySQLParser.INTEGER_SYMBOL = 246;
MySQLParser.INTERVAL_SYMBOL = 247;
MySQLParser.INTO_SYMBOL = 248;
MySQLParser.INT_SYMBOL = 249;
MySQLParser.INVOKER_SYMBOL = 250;
MySQLParser.IN_SYMBOL = 251;
MySQLParser.IO_AFTER_GTIDS_SYMBOL = 252;
MySQLParser.IO_BEFORE_GTIDS_SYMBOL = 253;
MySQLParser.IO_THREAD_SYMBOL = 254;
MySQLParser.IO_SYMBOL = 255;
MySQLParser.IPC_SYMBOL = 256;
MySQLParser.IS_SYMBOL = 257;
MySQLParser.ISOLATION_SYMBOL = 258;
MySQLParser.ISSUER_SYMBOL = 259;
MySQLParser.ITERATE_SYMBOL = 260;
MySQLParser.JOIN_SYMBOL = 261;
MySQLParser.JSON_SYMBOL = 262;
MySQLParser.KEYS_SYMBOL = 263;
MySQLParser.KEY_BLOCK_SIZE_SYMBOL = 264;
MySQLParser.KEY_SYMBOL = 265;
MySQLParser.KILL_SYMBOL = 266;
MySQLParser.LANGUAGE_SYMBOL = 267;
MySQLParser.LAST_SYMBOL = 268;
MySQLParser.LEADING_SYMBOL = 269;
MySQLParser.LEAVES_SYMBOL = 270;
MySQLParser.LEAVE_SYMBOL = 271;
MySQLParser.LEFT_SYMBOL = 272;
MySQLParser.LESS_SYMBOL = 273;
MySQLParser.LEVEL_SYMBOL = 274;
MySQLParser.LIKE_SYMBOL = 275;
MySQLParser.LIMIT_SYMBOL = 276;
MySQLParser.LINEAR_SYMBOL = 277;
MySQLParser.LINES_SYMBOL = 278;
MySQLParser.LINESTRING_SYMBOL = 279;
MySQLParser.LIST_SYMBOL = 280;
MySQLParser.LOAD_SYMBOL = 281;
MySQLParser.LOCALTIME_SYMBOL = 282;
MySQLParser.LOCALTIMESTAMP_SYMBOL = 283;
MySQLParser.LOCAL_SYMBOL = 284;
MySQLParser.LOCATOR_SYMBOL = 285;
MySQLParser.LOCKS_SYMBOL = 286;
MySQLParser.LOCK_SYMBOL = 287;
MySQLParser.LOGFILE_SYMBOL = 288;
MySQLParser.LOGS_SYMBOL = 289;
MySQLParser.LONGBLOB_SYMBOL = 290;
MySQLParser.LONGTEXT_SYMBOL = 291;
MySQLParser.LONG_NUM_SYMBOL = 292;
MySQLParser.LONG_SYMBOL = 293;
MySQLParser.LOOP_SYMBOL = 294;
MySQLParser.LOW_PRIORITY_SYMBOL = 295;
MySQLParser.MASTER_AUTO_POSITION_SYMBOL = 296;
MySQLParser.MASTER_BIND_SYMBOL = 297;
MySQLParser.MASTER_CONNECT_RETRY_SYMBOL = 298;
MySQLParser.MASTER_DELAY_SYMBOL = 299;
MySQLParser.MASTER_HOST_SYMBOL = 300;
MySQLParser.MASTER_LOG_FILE_SYMBOL = 301;
MySQLParser.MASTER_LOG_POS_SYMBOL = 302;
MySQLParser.MASTER_PASSWORD_SYMBOL = 303;
MySQLParser.MASTER_PORT_SYMBOL = 304;
MySQLParser.MASTER_RETRY_COUNT_SYMBOL = 305;
MySQLParser.MASTER_SERVER_ID_SYMBOL = 306;
MySQLParser.MASTER_SSL_CAPATH_SYMBOL = 307;
MySQLParser.MASTER_SSL_CA_SYMBOL = 308;
MySQLParser.MASTER_SSL_CERT_SYMBOL = 309;
MySQLParser.MASTER_SSL_CIPHER_SYMBOL = 310;
MySQLParser.MASTER_SSL_CRL_SYMBOL = 311;
MySQLParser.MASTER_SSL_CRLPATH_SYMBOL = 312;
MySQLParser.MASTER_SSL_KEY_SYMBOL = 313;
MySQLParser.MASTER_SSL_SYMBOL = 314;
MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL = 315;
MySQLParser.MASTER_SYMBOL = 316;
MySQLParser.MASTER_TLS_VERSION_SYMBOL = 317;
MySQLParser.MASTER_USER_SYMBOL = 318;
MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL = 319;
MySQLParser.MATCH_SYMBOL = 320;
MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL = 321;
MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL = 322;
MySQLParser.MAX_ROWS_SYMBOL = 323;
MySQLParser.MAX_SIZE_SYMBOL = 324;
MySQLParser.MAX_STATEMENT_TIME_SYMBOL = 325;
MySQLParser.MAX_SYMBOL = 326;
MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL = 327;
MySQLParser.MAX_USER_CONNECTIONS_SYMBOL = 328;
MySQLParser.MAXVALUE_SYMBOL = 329;
MySQLParser.MEDIUMBLOB_SYMBOL = 330;
MySQLParser.MEDIUMINT_SYMBOL = 331;
MySQLParser.MEDIUMTEXT_SYMBOL = 332;
MySQLParser.MEDIUM_SYMBOL = 333;
MySQLParser.MEMORY_SYMBOL = 334;
MySQLParser.MERGE_SYMBOL = 335;
MySQLParser.MESSAGE_TEXT_SYMBOL = 336;
MySQLParser.MICROSECOND_SYMBOL = 337;
MySQLParser.MID_SYMBOL = 338;
MySQLParser.MIDDLEINT_SYMBOL = 339;
MySQLParser.MIGRATE_SYMBOL = 340;
MySQLParser.MINUTE_MICROSECOND_SYMBOL = 341;
MySQLParser.MINUTE_SECOND_SYMBOL = 342;
MySQLParser.MINUTE_SYMBOL = 343;
MySQLParser.MIN_ROWS_SYMBOL = 344;
MySQLParser.MIN_SYMBOL = 345;
MySQLParser.MODE_SYMBOL = 346;
MySQLParser.MODIFIES_SYMBOL = 347;
MySQLParser.MODIFY_SYMBOL = 348;
MySQLParser.MOD_SYMBOL = 349;
MySQLParser.MONTH_SYMBOL = 350;
MySQLParser.MULTILINESTRING_SYMBOL = 351;
MySQLParser.MULTIPOINT_SYMBOL = 352;
MySQLParser.MULTIPOLYGON_SYMBOL = 353;
MySQLParser.MUTEX_SYMBOL = 354;
MySQLParser.MYSQL_ERRNO_SYMBOL = 355;
MySQLParser.NAMES_SYMBOL = 356;
MySQLParser.NAME_SYMBOL = 357;
MySQLParser.NATIONAL_SYMBOL = 358;
MySQLParser.NATURAL_SYMBOL = 359;
MySQLParser.NCHAR_STRING_SYMBOL = 360;
MySQLParser.NCHAR_SYMBOL = 361;
MySQLParser.NDB_SYMBOL = 362;
MySQLParser.NDBCLUSTER_SYMBOL = 363;
MySQLParser.NEG_SYMBOL = 364;
MySQLParser.NEVER_SYMBOL = 365;
MySQLParser.NEW_SYMBOL = 366;
MySQLParser.NEXT_SYMBOL = 367;
MySQLParser.NODEGROUP_SYMBOL = 368;
MySQLParser.NONE_SYMBOL = 369;
MySQLParser.NONBLOCKING_SYMBOL = 370;
MySQLParser.NOT_SYMBOL = 371;
MySQLParser.NOW_SYMBOL = 372;
MySQLParser.NO_SYMBOL = 373;
MySQLParser.NO_WAIT_SYMBOL = 374;
MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL = 375;
MySQLParser.NULL_SYMBOL = 376;
MySQLParser.NUMBER_SYMBOL = 377;
MySQLParser.NUMERIC_SYMBOL = 378;
MySQLParser.NVARCHAR_SYMBOL = 379;
MySQLParser.OFFLINE_SYMBOL = 380;
MySQLParser.OFFSET_SYMBOL = 381;
MySQLParser.OLD_PASSWORD_SYMBOL = 382;
MySQLParser.ON_SYMBOL = 383;
MySQLParser.ONE_SYMBOL = 384;
MySQLParser.ONLINE_SYMBOL = 385;
MySQLParser.ONLY_SYMBOL = 386;
MySQLParser.OPEN_SYMBOL = 387;
MySQLParser.OPTIMIZE_SYMBOL = 388;
MySQLParser.OPTIMIZER_COSTS_SYMBOL = 389;
MySQLParser.OPTIONS_SYMBOL = 390;
MySQLParser.OPTION_SYMBOL = 391;
MySQLParser.OPTIONALLY_SYMBOL = 392;
MySQLParser.ORDER_SYMBOL = 393;
MySQLParser.OR_SYMBOL = 394;
MySQLParser.OUTER_SYMBOL = 395;
MySQLParser.OUTFILE_SYMBOL = 396;
MySQLParser.OUT_SYMBOL = 397;
MySQLParser.OWNER_SYMBOL = 398;
MySQLParser.PACK_KEYS_SYMBOL = 399;
MySQLParser.PAGE_SYMBOL = 400;
MySQLParser.PARSER_SYMBOL = 401;
MySQLParser.PARTIAL_SYMBOL = 402;
MySQLParser.PARTITIONING_SYMBOL = 403;
MySQLParser.PARTITIONS_SYMBOL = 404;
MySQLParser.PARTITION_SYMBOL = 405;
MySQLParser.PASSWORD_SYMBOL = 406;
MySQLParser.PHASE_SYMBOL = 407;
MySQLParser.PLUGINS_SYMBOL = 408;
MySQLParser.PLUGIN_DIR_SYMBOL = 409;
MySQLParser.PLUGIN_SYMBOL = 410;
MySQLParser.POINT_SYMBOL = 411;
MySQLParser.POLYGON_SYMBOL = 412;
MySQLParser.PORT_SYMBOL = 413;
MySQLParser.POSITION_SYMBOL = 414;
MySQLParser.PRECEDES_SYMBOL = 415;
MySQLParser.PRECISION_SYMBOL = 416;
MySQLParser.PREPARE_SYMBOL = 417;
MySQLParser.PRESERVE_SYMBOL = 418;
MySQLParser.PREV_SYMBOL = 419;
MySQLParser.PRIMARY_SYMBOL = 420;
MySQLParser.PRIVILEGES_SYMBOL = 421;
MySQLParser.PROCEDURE_SYMBOL = 422;
MySQLParser.PROCESS_SYMBOL = 423;
MySQLParser.PROCESSLIST_SYMBOL = 424;
MySQLParser.PROFILE_SYMBOL = 425;
MySQLParser.PROFILES_SYMBOL = 426;
MySQLParser.PROXY_SYMBOL = 427;
MySQLParser.PURGE_SYMBOL = 428;
MySQLParser.QUARTER_SYMBOL = 429;
MySQLParser.QUERY_SYMBOL = 430;
MySQLParser.QUICK_SYMBOL = 431;
MySQLParser.RANGE_SYMBOL = 432;
MySQLParser.READS_SYMBOL = 433;
MySQLParser.READ_ONLY_SYMBOL = 434;
MySQLParser.READ_SYMBOL = 435;
MySQLParser.READ_WRITE_SYMBOL = 436;
MySQLParser.REAL_SYMBOL = 437;
MySQLParser.REBUILD_SYMBOL = 438;
MySQLParser.RECOVER_SYMBOL = 439;
MySQLParser.REDOFILE_SYMBOL = 440;
MySQLParser.REDO_BUFFER_SIZE_SYMBOL = 441;
MySQLParser.REDUNDANT_SYMBOL = 442;
MySQLParser.REFERENCES_SYMBOL = 443;
MySQLParser.REGEXP_SYMBOL = 444;
MySQLParser.RELAY_SYMBOL = 445;
MySQLParser.RELAYLOG_SYMBOL = 446;
MySQLParser.RELAY_LOG_FILE_SYMBOL = 447;
MySQLParser.RELAY_LOG_POS_SYMBOL = 448;
MySQLParser.RELAY_THREAD_SYMBOL = 449;
MySQLParser.RELEASE_SYMBOL = 450;
MySQLParser.RELOAD_SYMBOL = 451;
MySQLParser.REMOVE_SYMBOL = 452;
MySQLParser.RENAME_SYMBOL = 453;
MySQLParser.REORGANIZE_SYMBOL = 454;
MySQLParser.REPAIR_SYMBOL = 455;
MySQLParser.REPEATABLE_SYMBOL = 456;
MySQLParser.REPEAT_SYMBOL = 457;
MySQLParser.REPLACE_SYMBOL = 458;
MySQLParser.REPLICATION_SYMBOL = 459;
MySQLParser.REPLICATE_DO_DB_SYMBOL = 460;
MySQLParser.REPLICATE_IGNORE_DB_SYMBOL = 461;
MySQLParser.REPLICATE_DO_TABLE_SYMBOL = 462;
MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL = 463;
MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL = 464;
MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL = 465;
MySQLParser.REPLICATE_REWRITE_DB_SYMBOL = 466;
MySQLParser.REQUIRE_SYMBOL = 467;
MySQLParser.RESET_SYMBOL = 468;
MySQLParser.RESIGNAL_SYMBOL = 469;
MySQLParser.RESTORE_SYMBOL = 470;
MySQLParser.RESTRICT_SYMBOL = 471;
MySQLParser.RESUME_SYMBOL = 472;
MySQLParser.RETURNED_SQLSTATE_SYMBOL = 473;
MySQLParser.RETURNS_SYMBOL = 474;
MySQLParser.RETURN_SYMBOL = 475;
MySQLParser.REVERSE_SYMBOL = 476;
MySQLParser.REVOKE_SYMBOL = 477;
MySQLParser.RIGHT_SYMBOL = 478;
MySQLParser.RLIKE_SYMBOL = 479;
MySQLParser.ROLLBACK_SYMBOL = 480;
MySQLParser.ROLLUP_SYMBOL = 481;
MySQLParser.ROTATE_SYMBOL = 482;
MySQLParser.ROUTINE_SYMBOL = 483;
MySQLParser.ROWS_SYMBOL = 484;
MySQLParser.ROW_COUNT_SYMBOL = 485;
MySQLParser.ROW_FORMAT_SYMBOL = 486;
MySQLParser.ROW_SYMBOL = 487;
MySQLParser.RTREE_SYMBOL = 488;
MySQLParser.SAVEPOINT_SYMBOL = 489;
MySQLParser.SCHEDULE_SYMBOL = 490;
MySQLParser.SCHEMA_SYMBOL = 491;
MySQLParser.SCHEMA_NAME_SYMBOL = 492;
MySQLParser.SCHEMAS_SYMBOL = 493;
MySQLParser.SECOND_MICROSECOND_SYMBOL = 494;
MySQLParser.SECOND_SYMBOL = 495;
MySQLParser.SECURITY_SYMBOL = 496;
MySQLParser.SELECT_SYMBOL = 497;
MySQLParser.SENSITIVE_SYMBOL = 498;
MySQLParser.SEPARATOR_SYMBOL = 499;
MySQLParser.SERIALIZABLE_SYMBOL = 500;
MySQLParser.SERIAL_SYMBOL = 501;
MySQLParser.SESSION_SYMBOL = 502;
MySQLParser.SERVER_SYMBOL = 503;
MySQLParser.SERVER_OPTIONS_SYMBOL = 504;
MySQLParser.SESSION_USER_SYMBOL = 505;
MySQLParser.SET_SYMBOL = 506;
MySQLParser.SET_VAR_SYMBOL = 507;
MySQLParser.SHARE_SYMBOL = 508;
MySQLParser.SHOW_SYMBOL = 509;
MySQLParser.SHUTDOWN_SYMBOL = 510;
MySQLParser.SIGNAL_SYMBOL = 511;
MySQLParser.SIGNED_SYMBOL = 512;
MySQLParser.SIMPLE_SYMBOL = 513;
MySQLParser.SLAVE_SYMBOL = 514;
MySQLParser.SLOW_SYMBOL = 515;
MySQLParser.SMALLINT_SYMBOL = 516;
MySQLParser.SNAPSHOT_SYMBOL = 517;
MySQLParser.SOME_SYMBOL = 518;
MySQLParser.SOCKET_SYMBOL = 519;
MySQLParser.SONAME_SYMBOL = 520;
MySQLParser.SOUNDS_SYMBOL = 521;
MySQLParser.SOURCE_SYMBOL = 522;
MySQLParser.SPATIAL_SYMBOL = 523;
MySQLParser.SPECIFIC_SYMBOL = 524;
MySQLParser.SQLEXCEPTION_SYMBOL = 525;
MySQLParser.SQLSTATE_SYMBOL = 526;
MySQLParser.SQLWARNING_SYMBOL = 527;
MySQLParser.SQL_AFTER_GTIDS_SYMBOL = 528;
MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL = 529;
MySQLParser.SQL_BEFORE_GTIDS_SYMBOL = 530;
MySQLParser.SQL_BIG_RESULT_SYMBOL = 531;
MySQLParser.SQL_BUFFER_RESULT_SYMBOL = 532;
MySQLParser.SQL_CACHE_SYMBOL = 533;
MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL = 534;
MySQLParser.SQL_NO_CACHE_SYMBOL = 535;
MySQLParser.SQL_SMALL_RESULT_SYMBOL = 536;
MySQLParser.SQL_SYMBOL = 537;
MySQLParser.SQL_THREAD_SYMBOL = 538;
MySQLParser.SSL_SYMBOL = 539;
MySQLParser.STACKED_SYMBOL = 540;
MySQLParser.STARTING_SYMBOL = 541;
MySQLParser.STARTS_SYMBOL = 542;
MySQLParser.START_SYMBOL = 543;
MySQLParser.STATS_AUTO_RECALC_SYMBOL = 544;
MySQLParser.STATS_PERSISTENT_SYMBOL = 545;
MySQLParser.STATS_SAMPLE_PAGES_SYMBOL = 546;
MySQLParser.STATUS_SYMBOL = 547;
MySQLParser.STDDEV_SAMP_SYMBOL = 548;
MySQLParser.STDDEV_SYMBOL = 549;
MySQLParser.STDDEV_POP_SYMBOL = 550;
MySQLParser.STD_SYMBOL = 551;
MySQLParser.STOP_SYMBOL = 552;
MySQLParser.STORAGE_SYMBOL = 553;
MySQLParser.STORED_SYMBOL = 554;
MySQLParser.STRAIGHT_JOIN_SYMBOL = 555;
MySQLParser.STRING_SYMBOL = 556;
MySQLParser.SUBCLASS_ORIGIN_SYMBOL = 557;
MySQLParser.SUBDATE_SYMBOL = 558;
MySQLParser.SUBJECT_SYMBOL = 559;
MySQLParser.SUBPARTITIONS_SYMBOL = 560;
MySQLParser.SUBPARTITION_SYMBOL = 561;
MySQLParser.SUBSTR_SYMBOL = 562;
MySQLParser.SUBSTRING_SYMBOL = 563;
MySQLParser.SUM_SYMBOL = 564;
MySQLParser.SUPER_SYMBOL = 565;
MySQLParser.SUSPEND_SYMBOL = 566;
MySQLParser.SWAPS_SYMBOL = 567;
MySQLParser.SWITCHES_SYMBOL = 568;
MySQLParser.SYSDATE_SYMBOL = 569;
MySQLParser.SYSTEM_USER_SYMBOL = 570;
MySQLParser.TABLES_SYMBOL = 571;
MySQLParser.TABLESPACE_SYMBOL = 572;
MySQLParser.TABLE_REF_PRIORITY_SYMBOL = 573;
MySQLParser.TABLE_SYMBOL = 574;
MySQLParser.TABLE_CHECKSUM_SYMBOL = 575;
MySQLParser.TABLE_NAME_SYMBOL = 576;
MySQLParser.TEMPORARY_SYMBOL = 577;
MySQLParser.TEMPTABLE_SYMBOL = 578;
MySQLParser.TERMINATED_SYMBOL = 579;
MySQLParser.TEXT_SYMBOL = 580;
MySQLParser.THAN_SYMBOL = 581;
MySQLParser.THEN_SYMBOL = 582;
MySQLParser.TIMESTAMP_SYMBOL = 583;
MySQLParser.TIMESTAMP_ADD_SYMBOL = 584;
MySQLParser.TIMESTAMP_DIFF_SYMBOL = 585;
MySQLParser.TIME_SYMBOL = 586;
MySQLParser.TINYBLOB_SYMBOL = 587;
MySQLParser.TINYINT_SYMBOL = 588;
MySQLParser.TINYTEXT_SYMBOL = 589;
MySQLParser.TO_SYMBOL = 590;
MySQLParser.TRAILING_SYMBOL = 591;
MySQLParser.TRANSACTION_SYMBOL = 592;
MySQLParser.TRIGGERS_SYMBOL = 593;
MySQLParser.TRIGGER_SYMBOL = 594;
MySQLParser.TRIM_SYMBOL = 595;
MySQLParser.TRUE_SYMBOL = 596;
MySQLParser.TRUNCATE_SYMBOL = 597;
MySQLParser.TYPES_SYMBOL = 598;
MySQLParser.TYPE_SYMBOL = 599;
MySQLParser.UDF_RETURNS_SYMBOL = 600;
MySQLParser.UNCOMMITTED_SYMBOL = 601;
MySQLParser.UNDEFINED_SYMBOL = 602;
MySQLParser.UNDOFILE_SYMBOL = 603;
MySQLParser.UNDO_BUFFER_SIZE_SYMBOL = 604;
MySQLParser.UNDO_SYMBOL = 605;
MySQLParser.UNICODE_SYMBOL = 606;
MySQLParser.UNINSTALL_SYMBOL = 607;
MySQLParser.UNION_SYMBOL = 608;
MySQLParser.UNIQUE_SYMBOL = 609;
MySQLParser.UNKNOWN_SYMBOL = 610;
MySQLParser.UNLOCK_SYMBOL = 611;
MySQLParser.UNSIGNED_SYMBOL = 612;
MySQLParser.UNTIL_SYMBOL = 613;
MySQLParser.UPDATE_SYMBOL = 614;
MySQLParser.UPGRADE_SYMBOL = 615;
MySQLParser.USAGE_SYMBOL = 616;
MySQLParser.USER_RESOURCES_SYMBOL = 617;
MySQLParser.USER_SYMBOL = 618;
MySQLParser.USE_FRM_SYMBOL = 619;
MySQLParser.USE_SYMBOL = 620;
MySQLParser.USING_SYMBOL = 621;
MySQLParser.UTC_DATE_SYMBOL = 622;
MySQLParser.UTC_TIMESTAMP_SYMBOL = 623;
MySQLParser.UTC_TIME_SYMBOL = 624;
MySQLParser.VALIDATION_SYMBOL = 625;
MySQLParser.VALUES_SYMBOL = 626;
MySQLParser.VALUE_SYMBOL = 627;
MySQLParser.VARBINARY_SYMBOL = 628;
MySQLParser.VARCHAR_SYMBOL = 629;
MySQLParser.VARCHARACTER_SYMBOL = 630;
MySQLParser.VARIABLES_SYMBOL = 631;
MySQLParser.VARIANCE_SYMBOL = 632;
MySQLParser.VARYING_SYMBOL = 633;
MySQLParser.VAR_POP_SYMBOL = 634;
MySQLParser.VAR_SAMP_SYMBOL = 635;
MySQLParser.VIEW_SYMBOL = 636;
MySQLParser.VIRTUAL_SYMBOL = 637;
MySQLParser.WAIT_SYMBOL = 638;
MySQLParser.WARNINGS_SYMBOL = 639;
MySQLParser.WEEK_SYMBOL = 640;
MySQLParser.WEIGHT_STRING_SYMBOL = 641;
MySQLParser.WHEN_SYMBOL = 642;
MySQLParser.WHERE_SYMBOL = 643;
MySQLParser.WHILE_SYMBOL = 644;
MySQLParser.WITH_SYMBOL = 645;
MySQLParser.WITHOUT_SYMBOL = 646;
MySQLParser.WORK_SYMBOL = 647;
MySQLParser.WRAPPER_SYMBOL = 648;
MySQLParser.WRITE_SYMBOL = 649;
MySQLParser.X509_SYMBOL = 650;
MySQLParser.XA_SYMBOL = 651;
MySQLParser.XID_SYMBOL = 652;
MySQLParser.XML_SYMBOL = 653;
MySQLParser.XOR_SYMBOL = 654;
MySQLParser.YEAR_MONTH_SYMBOL = 655;
MySQLParser.YEAR_SYMBOL = 656;
MySQLParser.ZEROFILL_SYMBOL = 657;
MySQLParser.PERSIST_SYMBOL = 658;
MySQLParser.ROLE_SYMBOL = 659;
MySQLParser.ADMIN_SYMBOL = 660;
MySQLParser.INVISIBLE_SYMBOL = 661;
MySQLParser.VISIBLE_SYMBOL = 662;
MySQLParser.EXCEPT_SYMBOL = 663;
MySQLParser.COMPONENT_SYMBOL = 664;
MySQLParser.RECURSIVE_SYMBOL = 665;
MySQLParser.JSON_OBJECTAGG_SYMBOL = 666;
MySQLParser.JSON_ARRAYAGG_SYMBOL = 667;
MySQLParser.OF_SYMBOL = 668;
MySQLParser.SKIP_SYMBOL = 669;
MySQLParser.LOCKED_SYMBOL = 670;
MySQLParser.NOWAIT_SYMBOL = 671;
MySQLParser.GROUPING_SYMBOL = 672;
MySQLParser.PERSIST_ONLY_SYMBOL = 673;
MySQLParser.HISTOGRAM_SYMBOL = 674;
MySQLParser.BUCKETS_SYMBOL = 675;
MySQLParser.REMOTE_SYMBOL = 676;
MySQLParser.CLONE_SYMBOL = 677;
MySQLParser.CUME_DIST_SYMBOL = 678;
MySQLParser.DENSE_RANK_SYMBOL = 679;
MySQLParser.EXCLUDE_SYMBOL = 680;
MySQLParser.FIRST_VALUE_SYMBOL = 681;
MySQLParser.FOLLOWING_SYMBOL = 682;
MySQLParser.GROUPS_SYMBOL = 683;
MySQLParser.LAG_SYMBOL = 684;
MySQLParser.LAST_VALUE_SYMBOL = 685;
MySQLParser.LEAD_SYMBOL = 686;
MySQLParser.NTH_VALUE_SYMBOL = 687;
MySQLParser.NTILE_SYMBOL = 688;
MySQLParser.NULLS_SYMBOL = 689;
MySQLParser.OTHERS_SYMBOL = 690;
MySQLParser.OVER_SYMBOL = 691;
MySQLParser.PERCENT_RANK_SYMBOL = 692;
MySQLParser.PRECEDING_SYMBOL = 693;
MySQLParser.RANK_SYMBOL = 694;
MySQLParser.RESPECT_SYMBOL = 695;
MySQLParser.ROW_NUMBER_SYMBOL = 696;
MySQLParser.TIES_SYMBOL = 697;
MySQLParser.UNBOUNDED_SYMBOL = 698;
MySQLParser.WINDOW_SYMBOL = 699;
MySQLParser.EMPTY_SYMBOL = 700;
MySQLParser.JSON_TABLE_SYMBOL = 701;
MySQLParser.NESTED_SYMBOL = 702;
MySQLParser.ORDINALITY_SYMBOL = 703;
MySQLParser.PATH_SYMBOL = 704;
MySQLParser.HISTORY_SYMBOL = 705;
MySQLParser.REUSE_SYMBOL = 706;
MySQLParser.SRID_SYMBOL = 707;
MySQLParser.THREAD_PRIORITY_SYMBOL = 708;
MySQLParser.RESOURCE_SYMBOL = 709;
MySQLParser.SYSTEM_SYMBOL = 710;
MySQLParser.VCPU_SYMBOL = 711;
MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL = 712;
MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL = 713;
MySQLParser.RESTART_SYMBOL = 714;
MySQLParser.DEFINITION_SYMBOL = 715;
MySQLParser.DESCRIPTION_SYMBOL = 716;
MySQLParser.ORGANIZATION_SYMBOL = 717;
MySQLParser.REFERENCE_SYMBOL = 718;
MySQLParser.OPTIONAL_SYMBOL = 719;
MySQLParser.SECONDARY_SYMBOL = 720;
MySQLParser.SECONDARY_ENGINE_SYMBOL = 721;
MySQLParser.SECONDARY_LOAD_SYMBOL = 722;
MySQLParser.SECONDARY_UNLOAD_SYMBOL = 723;
MySQLParser.ACTIVE_SYMBOL = 724;
MySQLParser.INACTIVE_SYMBOL = 725;
MySQLParser.LATERAL_SYMBOL = 726;
MySQLParser.RETAIN_SYMBOL = 727;
MySQLParser.OLD_SYMBOL = 728;
MySQLParser.NETWORK_NAMESPACE_SYMBOL = 729;
MySQLParser.ENFORCED_SYMBOL = 730;
MySQLParser.ARRAY_SYMBOL = 731;
MySQLParser.OJ_SYMBOL = 732;
MySQLParser.MEMBER_SYMBOL = 733;
MySQLParser.RANDOM_SYMBOL = 734;
MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL = 735;
MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL = 736;
MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL = 737;
MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL = 738;
MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL = 739;
MySQLParser.PASSWORD_LOCK_TIME_SYMBOL = 740;
MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL = 741;
MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL = 742;
MySQLParser.STREAM_SYMBOL = 743;
MySQLParser.OFF_SYMBOL = 744;
MySQLParser.NOT2_SYMBOL = 745;
MySQLParser.CONCAT_PIPES_SYMBOL = 746;
MySQLParser.INT_NUMBER = 747;
MySQLParser.LONG_NUMBER = 748;
MySQLParser.ULONGLONG_NUMBER = 749;
MySQLParser.EQUAL_OPERATOR = 750;
MySQLParser.ASSIGN_OPERATOR = 751;
MySQLParser.NULL_SAFE_EQUAL_OPERATOR = 752;
MySQLParser.GREATER_OR_EQUAL_OPERATOR = 753;
MySQLParser.GREATER_THAN_OPERATOR = 754;
MySQLParser.LESS_OR_EQUAL_OPERATOR = 755;
MySQLParser.LESS_THAN_OPERATOR = 756;
MySQLParser.NOT_EQUAL_OPERATOR = 757;
MySQLParser.PLUS_OPERATOR = 758;
MySQLParser.MINUS_OPERATOR = 759;
MySQLParser.MULT_OPERATOR = 760;
MySQLParser.DIV_OPERATOR = 761;
MySQLParser.MOD_OPERATOR = 762;
MySQLParser.LOGICAL_NOT_OPERATOR = 763;
MySQLParser.BITWISE_NOT_OPERATOR = 764;
MySQLParser.SHIFT_LEFT_OPERATOR = 765;
MySQLParser.SHIFT_RIGHT_OPERATOR = 766;
MySQLParser.LOGICAL_AND_OPERATOR = 767;
MySQLParser.BITWISE_AND_OPERATOR = 768;
MySQLParser.BITWISE_XOR_OPERATOR = 769;
MySQLParser.LOGICAL_OR_OPERATOR = 770;
MySQLParser.BITWISE_OR_OPERATOR = 771;
MySQLParser.DOT_SYMBOL = 772;
MySQLParser.COMMA_SYMBOL = 773;
MySQLParser.SEMICOLON_SYMBOL = 774;
MySQLParser.COLON_SYMBOL = 775;
MySQLParser.OPEN_PAR_SYMBOL = 776;
MySQLParser.CLOSE_PAR_SYMBOL = 777;
MySQLParser.OPEN_CURLY_SYMBOL = 778;
MySQLParser.CLOSE_CURLY_SYMBOL = 779;
MySQLParser.UNDERLINE_SYMBOL = 780;
MySQLParser.JSON_SEPARATOR_SYMBOL = 781;
MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL = 782;
MySQLParser.AT_SIGN_SYMBOL = 783;
MySQLParser.AT_TEXT_SUFFIX = 784;
MySQLParser.AT_AT_SIGN_SYMBOL = 785;
MySQLParser.NULL2_SYMBOL = 786;
MySQLParser.PARAM_MARKER = 787;
MySQLParser.HEX_NUMBER = 788;
MySQLParser.BIN_NUMBER = 789;
MySQLParser.DECIMAL_NUMBER = 790;
MySQLParser.FLOAT_NUMBER = 791;
MySQLParser.WHITESPACE = 792;
MySQLParser.INVALID_INPUT = 793;
MySQLParser.UNDERSCORE_CHARSET = 794;
MySQLParser.IDENTIFIER = 795;
MySQLParser.NCHAR_TEXT = 796;
MySQLParser.BACK_TICK_QUOTED_ID = 797;
MySQLParser.DOUBLE_QUOTED_TEXT = 798;
MySQLParser.SINGLE_QUOTED_TEXT = 799;
MySQLParser.VERSION_COMMENT_START = 800;
MySQLParser.MYSQL_COMMENT_START = 801;
MySQLParser.VERSION_COMMENT_END = 802;
MySQLParser.BLOCK_COMMENT = 803;
MySQLParser.POUND_COMMENT = 804;
MySQLParser.DASHDASH_COMMENT = 805;
MySQLParser.NOT_EQUAL2_OPERATOR = 806;

MySQLParser.RULE_query = 0;
MySQLParser.RULE_simpleStatement = 1;
MySQLParser.RULE_alterStatement = 2;
MySQLParser.RULE_alterDatabase = 3;
MySQLParser.RULE_alterEvent = 4;
MySQLParser.RULE_alterLogfileGroup = 5;
MySQLParser.RULE_alterLogfileGroupOptions = 6;
MySQLParser.RULE_alterLogfileGroupOption = 7;
MySQLParser.RULE_alterServer = 8;
MySQLParser.RULE_alterTable = 9;
MySQLParser.RULE_alterTableActions = 10;
MySQLParser.RULE_alterCommandList = 11;
MySQLParser.RULE_alterCommandsModifierList = 12;
MySQLParser.RULE_standaloneAlterCommands = 13;
MySQLParser.RULE_alterPartition = 14;
MySQLParser.RULE_alterList = 15;
MySQLParser.RULE_alterCommandsModifier = 16;
MySQLParser.RULE_alterListItem = 17;
MySQLParser.RULE_place = 18;
MySQLParser.RULE_restrict = 19;
MySQLParser.RULE_alterOrderList = 20;
MySQLParser.RULE_alterAlgorithmOption = 21;
MySQLParser.RULE_alterLockOption = 22;
MySQLParser.RULE_indexLockAndAlgorithm = 23;
MySQLParser.RULE_withValidation = 24;
MySQLParser.RULE_removePartitioning = 25;
MySQLParser.RULE_allOrPartitionNameList = 26;
MySQLParser.RULE_alterTablespace = 27;
MySQLParser.RULE_alterUndoTablespace = 28;
MySQLParser.RULE_undoTableSpaceOptions = 29;
MySQLParser.RULE_undoTableSpaceOption = 30;
MySQLParser.RULE_alterTablespaceOptions = 31;
MySQLParser.RULE_alterTablespaceOption = 32;
MySQLParser.RULE_changeTablespaceOption = 33;
MySQLParser.RULE_alterView = 34;
MySQLParser.RULE_viewTail = 35;
MySQLParser.RULE_viewSelect = 36;
MySQLParser.RULE_viewCheckOption = 37;
MySQLParser.RULE_createStatement = 38;
MySQLParser.RULE_createDatabase = 39;
MySQLParser.RULE_createDatabaseOption = 40;
MySQLParser.RULE_createTable = 41;
MySQLParser.RULE_tableElementList = 42;
MySQLParser.RULE_tableElement = 43;
MySQLParser.RULE_duplicateAsQueryExpression = 44;
MySQLParser.RULE_queryExpressionOrParens = 45;
MySQLParser.RULE_createRoutine = 46;
MySQLParser.RULE_createProcedure = 47;
MySQLParser.RULE_createFunction = 48;
MySQLParser.RULE_createUdf = 49;
MySQLParser.RULE_routineCreateOption = 50;
MySQLParser.RULE_routineAlterOptions = 51;
MySQLParser.RULE_routineOption = 52;
MySQLParser.RULE_createIndex = 53;
MySQLParser.RULE_indexNameAndType = 54;
MySQLParser.RULE_createIndexTarget = 55;
MySQLParser.RULE_createLogfileGroup = 56;
MySQLParser.RULE_logfileGroupOptions = 57;
MySQLParser.RULE_logfileGroupOption = 58;
MySQLParser.RULE_createServer = 59;
MySQLParser.RULE_serverOptions = 60;
MySQLParser.RULE_serverOption = 61;
MySQLParser.RULE_createTablespace = 62;
MySQLParser.RULE_createUndoTablespace = 63;
MySQLParser.RULE_tsDataFileName = 64;
MySQLParser.RULE_tsDataFile = 65;
MySQLParser.RULE_tablespaceOptions = 66;
MySQLParser.RULE_tablespaceOption = 67;
MySQLParser.RULE_tsOptionInitialSize = 68;
MySQLParser.RULE_tsOptionUndoRedoBufferSize = 69;
MySQLParser.RULE_tsOptionAutoextendSize = 70;
MySQLParser.RULE_tsOptionMaxSize = 71;
MySQLParser.RULE_tsOptionExtentSize = 72;
MySQLParser.RULE_tsOptionNodegroup = 73;
MySQLParser.RULE_tsOptionEngine = 74;
MySQLParser.RULE_tsOptionWait = 75;
MySQLParser.RULE_tsOptionComment = 76;
MySQLParser.RULE_tsOptionFileblockSize = 77;
MySQLParser.RULE_tsOptionEncryption = 78;
MySQLParser.RULE_createView = 79;
MySQLParser.RULE_viewReplaceOrAlgorithm = 80;
MySQLParser.RULE_viewAlgorithm = 81;
MySQLParser.RULE_viewSuid = 82;
MySQLParser.RULE_createTrigger = 83;
MySQLParser.RULE_triggerFollowsPrecedesClause = 84;
MySQLParser.RULE_createEvent = 85;
MySQLParser.RULE_createRole = 86;
MySQLParser.RULE_createSpatialReference = 87;
MySQLParser.RULE_srsAttribute = 88;
MySQLParser.RULE_dropStatement = 89;
MySQLParser.RULE_dropDatabase = 90;
MySQLParser.RULE_dropEvent = 91;
MySQLParser.RULE_dropFunction = 92;
MySQLParser.RULE_dropProcedure = 93;
MySQLParser.RULE_dropIndex = 94;
MySQLParser.RULE_dropLogfileGroup = 95;
MySQLParser.RULE_dropLogfileGroupOption = 96;
MySQLParser.RULE_dropServer = 97;
MySQLParser.RULE_dropTable = 98;
MySQLParser.RULE_dropTableSpace = 99;
MySQLParser.RULE_dropTrigger = 100;
MySQLParser.RULE_dropView = 101;
MySQLParser.RULE_dropRole = 102;
MySQLParser.RULE_dropSpatialReference = 103;
MySQLParser.RULE_dropUndoTablespace = 104;
MySQLParser.RULE_renameTableStatement = 105;
MySQLParser.RULE_renamePair = 106;
MySQLParser.RULE_truncateTableStatement = 107;
MySQLParser.RULE_importStatement = 108;
MySQLParser.RULE_callStatement = 109;
MySQLParser.RULE_deleteStatement = 110;
MySQLParser.RULE_partitionDelete = 111;
MySQLParser.RULE_deleteStatementOption = 112;
MySQLParser.RULE_doStatement = 113;
MySQLParser.RULE_handlerStatement = 114;
MySQLParser.RULE_handlerReadOrScan = 115;
MySQLParser.RULE_insertStatement = 116;
MySQLParser.RULE_insertLockOption = 117;
MySQLParser.RULE_insertFromConstructor = 118;
MySQLParser.RULE_fields = 119;
MySQLParser.RULE_insertValues = 120;
MySQLParser.RULE_insertQueryExpression = 121;
MySQLParser.RULE_valueList = 122;
MySQLParser.RULE_values = 123;
MySQLParser.RULE_valuesReference = 124;
MySQLParser.RULE_insertUpdateList = 125;
MySQLParser.RULE_loadStatement = 126;
MySQLParser.RULE_dataOrXml = 127;
MySQLParser.RULE_xmlRowsIdentifiedBy = 128;
MySQLParser.RULE_loadDataFileTail = 129;
MySQLParser.RULE_loadDataFileTargetList = 130;
MySQLParser.RULE_fieldOrVariableList = 131;
MySQLParser.RULE_replaceStatement = 132;
MySQLParser.RULE_selectStatement = 133;
MySQLParser.RULE_selectStatementWithInto = 134;
MySQLParser.RULE_queryExpression = 135;
MySQLParser.RULE_queryExpressionBody = 136;
MySQLParser.RULE_queryExpressionParens = 137;
MySQLParser.RULE_queryPrimary = 138;
MySQLParser.RULE_querySpecification = 139;
MySQLParser.RULE_subquery = 140;
MySQLParser.RULE_querySpecOption = 141;
MySQLParser.RULE_limitClause = 142;
MySQLParser.RULE_simpleLimitClause = 143;
MySQLParser.RULE_limitOptions = 144;
MySQLParser.RULE_limitOption = 145;
MySQLParser.RULE_intoClause = 146;
MySQLParser.RULE_procedureAnalyseClause = 147;
MySQLParser.RULE_havingClause = 148;
MySQLParser.RULE_windowClause = 149;
MySQLParser.RULE_windowDefinition = 150;
MySQLParser.RULE_windowSpec = 151;
MySQLParser.RULE_windowSpecDetails = 152;
MySQLParser.RULE_windowFrameClause = 153;
MySQLParser.RULE_windowFrameUnits = 154;
MySQLParser.RULE_windowFrameExtent = 155;
MySQLParser.RULE_windowFrameStart = 156;
MySQLParser.RULE_windowFrameBetween = 157;
MySQLParser.RULE_windowFrameBound = 158;
MySQLParser.RULE_windowFrameExclusion = 159;
MySQLParser.RULE_withClause = 160;
MySQLParser.RULE_commonTableExpression = 161;
MySQLParser.RULE_groupByClause = 162;
MySQLParser.RULE_olapOption = 163;
MySQLParser.RULE_orderClause = 164;
MySQLParser.RULE_direction = 165;
MySQLParser.RULE_fromClause = 166;
MySQLParser.RULE_tableReferenceList = 167;
MySQLParser.RULE_tableValueConstructor = 168;
MySQLParser.RULE_explicitTable = 169;
MySQLParser.RULE_rowValueExplicit = 170;
MySQLParser.RULE_selectOption = 171;
MySQLParser.RULE_lockingClauseList = 172;
MySQLParser.RULE_lockingClause = 173;
MySQLParser.RULE_lockStrengh = 174;
MySQLParser.RULE_lockedRowAction = 175;
MySQLParser.RULE_selectItemList = 176;
MySQLParser.RULE_selectItem = 177;
MySQLParser.RULE_selectAlias = 178;
MySQLParser.RULE_whereClause = 179;
MySQLParser.RULE_tableReference = 180;
MySQLParser.RULE_escapedTableReference = 181;
MySQLParser.RULE_joinedTable = 182;
MySQLParser.RULE_naturalJoinType = 183;
MySQLParser.RULE_innerJoinType = 184;
MySQLParser.RULE_outerJoinType = 185;
MySQLParser.RULE_tableFactor = 186;
MySQLParser.RULE_singleTable = 187;
MySQLParser.RULE_singleTableParens = 188;
MySQLParser.RULE_derivedTable = 189;
MySQLParser.RULE_tableReferenceListParens = 190;
MySQLParser.RULE_tableFunction = 191;
MySQLParser.RULE_columnsClause = 192;
MySQLParser.RULE_jtColumn = 193;
MySQLParser.RULE_onEmptyOrError = 194;
MySQLParser.RULE_onEmpty = 195;
MySQLParser.RULE_onError = 196;
MySQLParser.RULE_jtOnResponse = 197;
MySQLParser.RULE_unionOption = 198;
MySQLParser.RULE_tableAlias = 199;
MySQLParser.RULE_indexHintList = 200;
MySQLParser.RULE_indexHint = 201;
MySQLParser.RULE_indexHintType = 202;
MySQLParser.RULE_keyOrIndex = 203;
MySQLParser.RULE_constraintKeyType = 204;
MySQLParser.RULE_indexHintClause = 205;
MySQLParser.RULE_indexList = 206;
MySQLParser.RULE_indexListElement = 207;
MySQLParser.RULE_updateStatement = 208;
MySQLParser.RULE_transactionOrLockingStatement = 209;
MySQLParser.RULE_transactionStatement = 210;
MySQLParser.RULE_beginWork = 211;
MySQLParser.RULE_transactionCharacteristic = 212;
MySQLParser.RULE_savepointStatement = 213;
MySQLParser.RULE_lockStatement = 214;
MySQLParser.RULE_lockItem = 215;
MySQLParser.RULE_lockOption = 216;
MySQLParser.RULE_xaStatement = 217;
MySQLParser.RULE_xaConvert = 218;
MySQLParser.RULE_xid = 219;
MySQLParser.RULE_replicationStatement = 220;
MySQLParser.RULE_resetOption = 221;
MySQLParser.RULE_masterResetOptions = 222;
MySQLParser.RULE_replicationLoad = 223;
MySQLParser.RULE_changeMaster = 224;
MySQLParser.RULE_changeMasterOptions = 225;
MySQLParser.RULE_masterOption = 226;
MySQLParser.RULE_privilegeCheckDef = 227;
MySQLParser.RULE_tablePrimaryKeyCheckDef = 228;
MySQLParser.RULE_masterTlsCiphersuitesDef = 229;
MySQLParser.RULE_masterFileDef = 230;
MySQLParser.RULE_serverIdList = 231;
MySQLParser.RULE_changeReplication = 232;
MySQLParser.RULE_filterDefinition = 233;
MySQLParser.RULE_filterDbList = 234;
MySQLParser.RULE_filterTableList = 235;
MySQLParser.RULE_filterStringList = 236;
MySQLParser.RULE_filterWildDbTableString = 237;
MySQLParser.RULE_filterDbPairList = 238;
MySQLParser.RULE_slave = 239;
MySQLParser.RULE_slaveUntilOptions = 240;
MySQLParser.RULE_slaveConnectionOptions = 241;
MySQLParser.RULE_slaveThreadOptions = 242;
MySQLParser.RULE_slaveThreadOption = 243;
MySQLParser.RULE_groupReplication = 244;
MySQLParser.RULE_preparedStatement = 245;
MySQLParser.RULE_executeStatement = 246;
MySQLParser.RULE_executeVarList = 247;
MySQLParser.RULE_cloneStatement = 248;
MySQLParser.RULE_dataDirSSL = 249;
MySQLParser.RULE_ssl = 250;
MySQLParser.RULE_accountManagementStatement = 251;
MySQLParser.RULE_alterUser = 252;
MySQLParser.RULE_alterUserTail = 253;
MySQLParser.RULE_userFunction = 254;
MySQLParser.RULE_createUser = 255;
MySQLParser.RULE_createUserTail = 256;
MySQLParser.RULE_defaultRoleClause = 257;
MySQLParser.RULE_requireClause = 258;
MySQLParser.RULE_connectOptions = 259;
MySQLParser.RULE_accountLockPasswordExpireOptions = 260;
MySQLParser.RULE_dropUser = 261;
MySQLParser.RULE_grant = 262;
MySQLParser.RULE_grantTargetList = 263;
MySQLParser.RULE_grantOptions = 264;
MySQLParser.RULE_exceptRoleList = 265;
MySQLParser.RULE_withRoles = 266;
MySQLParser.RULE_grantAs = 267;
MySQLParser.RULE_versionedRequireClause = 268;
MySQLParser.RULE_renameUser = 269;
MySQLParser.RULE_revoke = 270;
MySQLParser.RULE_onTypeTo = 271;
MySQLParser.RULE_aclType = 272;
MySQLParser.RULE_roleOrPrivilegesList = 273;
MySQLParser.RULE_roleOrPrivilege = 274;
MySQLParser.RULE_grantIdentifier = 275;
MySQLParser.RULE_requireList = 276;
MySQLParser.RULE_requireListElement = 277;
MySQLParser.RULE_grantOption = 278;
MySQLParser.RULE_setRole = 279;
MySQLParser.RULE_roleList = 280;
MySQLParser.RULE_role = 281;
MySQLParser.RULE_tableAdministrationStatement = 282;
MySQLParser.RULE_histogram = 283;
MySQLParser.RULE_checkOption = 284;
MySQLParser.RULE_repairType = 285;
MySQLParser.RULE_installUninstallStatment = 286;
MySQLParser.RULE_setStatement = 287;
MySQLParser.RULE_startOptionValueList = 288;
MySQLParser.RULE_transactionCharacteristics = 289;
MySQLParser.RULE_transactionAccessMode = 290;
MySQLParser.RULE_isolationLevel = 291;
MySQLParser.RULE_optionValueListContinued = 292;
MySQLParser.RULE_optionValueNoOptionType = 293;
MySQLParser.RULE_optionValue = 294;
MySQLParser.RULE_setSystemVariable = 295;
MySQLParser.RULE_startOptionValueListFollowingOptionType = 296;
MySQLParser.RULE_optionValueFollowingOptionType = 297;
MySQLParser.RULE_setExprOrDefault = 298;
MySQLParser.RULE_showStatement = 299;
MySQLParser.RULE_showCommandType = 300;
MySQLParser.RULE_nonBlocking = 301;
MySQLParser.RULE_fromOrIn = 302;
MySQLParser.RULE_inDb = 303;
MySQLParser.RULE_profileType = 304;
MySQLParser.RULE_otherAdministrativeStatement = 305;
MySQLParser.RULE_keyCacheListOrParts = 306;
MySQLParser.RULE_keyCacheList = 307;
MySQLParser.RULE_assignToKeycache = 308;
MySQLParser.RULE_assignToKeycachePartition = 309;
MySQLParser.RULE_cacheKeyList = 310;
MySQLParser.RULE_keyUsageElement = 311;
MySQLParser.RULE_keyUsageList = 312;
MySQLParser.RULE_flushOption = 313;
MySQLParser.RULE_logType = 314;
MySQLParser.RULE_flushTables = 315;
MySQLParser.RULE_flushTablesOptions = 316;
MySQLParser.RULE_preloadTail = 317;
MySQLParser.RULE_preloadList = 318;
MySQLParser.RULE_preloadKeys = 319;
MySQLParser.RULE_adminPartition = 320;
MySQLParser.RULE_resourceGroupManagement = 321;
MySQLParser.RULE_createResourceGroup = 322;
MySQLParser.RULE_resourceGroupVcpuList = 323;
MySQLParser.RULE_vcpuNumOrRange = 324;
MySQLParser.RULE_resourceGroupPriority = 325;
MySQLParser.RULE_resourceGroupEnableDisable = 326;
MySQLParser.RULE_alterResourceGroup = 327;
MySQLParser.RULE_setResourceGroup = 328;
MySQLParser.RULE_threadIdList = 329;
MySQLParser.RULE_dropResourceGroup = 330;
MySQLParser.RULE_utilityStatement = 331;
MySQLParser.RULE_describeStatement = 332;
MySQLParser.RULE_explainStatement = 333;
MySQLParser.RULE_explainableStatement = 334;
MySQLParser.RULE_helpCommand = 335;
MySQLParser.RULE_useCommand = 336;
MySQLParser.RULE_restartServer = 337;
MySQLParser.RULE_expr = 338;
MySQLParser.RULE_boolPri = 339;
MySQLParser.RULE_compOp = 340;
MySQLParser.RULE_predicate = 341;
MySQLParser.RULE_predicateOperations = 342;
MySQLParser.RULE_bitExpr = 343;
MySQLParser.RULE_simpleExpr = 344;
MySQLParser.RULE_arrayCast = 345;
MySQLParser.RULE_jsonOperator = 346;
MySQLParser.RULE_sumExpr = 347;
MySQLParser.RULE_groupingOperation = 348;
MySQLParser.RULE_windowFunctionCall = 349;
MySQLParser.RULE_windowingClause = 350;
MySQLParser.RULE_leadLagInfo = 351;
MySQLParser.RULE_nullTreatment = 352;
MySQLParser.RULE_jsonFunction = 353;
MySQLParser.RULE_inSumExpr = 354;
MySQLParser.RULE_identListArg = 355;
MySQLParser.RULE_identList = 356;
MySQLParser.RULE_fulltextOptions = 357;
MySQLParser.RULE_runtimeFunctionCall = 358;
MySQLParser.RULE_geometryFunction = 359;
MySQLParser.RULE_timeFunctionParameters = 360;
MySQLParser.RULE_fractionalPrecision = 361;
MySQLParser.RULE_weightStringLevels = 362;
MySQLParser.RULE_weightStringLevelListItem = 363;
MySQLParser.RULE_dateTimeTtype = 364;
MySQLParser.RULE_trimFunction = 365;
MySQLParser.RULE_substringFunction = 366;
MySQLParser.RULE_functionCall = 367;
MySQLParser.RULE_udfExprList = 368;
MySQLParser.RULE_udfExpr = 369;
MySQLParser.RULE_variable = 370;
MySQLParser.RULE_userVariable = 371;
MySQLParser.RULE_systemVariable = 372;
MySQLParser.RULE_internalVariableName = 373;
MySQLParser.RULE_whenExpression = 374;
MySQLParser.RULE_thenExpression = 375;
MySQLParser.RULE_elseExpression = 376;
MySQLParser.RULE_castType = 377;
MySQLParser.RULE_exprList = 378;
MySQLParser.RULE_charset = 379;
MySQLParser.RULE_notRule = 380;
MySQLParser.RULE_not2Rule = 381;
MySQLParser.RULE_interval = 382;
MySQLParser.RULE_intervalTimeStamp = 383;
MySQLParser.RULE_exprListWithParentheses = 384;
MySQLParser.RULE_exprWithParentheses = 385;
MySQLParser.RULE_simpleExprWithParentheses = 386;
MySQLParser.RULE_orderList = 387;
MySQLParser.RULE_orderExpression = 388;
MySQLParser.RULE_groupList = 389;
MySQLParser.RULE_groupingExpression = 390;
MySQLParser.RULE_channel = 391;
MySQLParser.RULE_compoundStatement = 392;
MySQLParser.RULE_returnStatement = 393;
MySQLParser.RULE_ifStatement = 394;
MySQLParser.RULE_ifBody = 395;
MySQLParser.RULE_thenStatement = 396;
MySQLParser.RULE_compoundStatementList = 397;
MySQLParser.RULE_caseStatement = 398;
MySQLParser.RULE_elseStatement = 399;
MySQLParser.RULE_labeledBlock = 400;
MySQLParser.RULE_unlabeledBlock = 401;
MySQLParser.RULE_label = 402;
MySQLParser.RULE_beginEndBlock = 403;
MySQLParser.RULE_labeledControl = 404;
MySQLParser.RULE_unlabeledControl = 405;
MySQLParser.RULE_loopBlock = 406;
MySQLParser.RULE_whileDoBlock = 407;
MySQLParser.RULE_repeatUntilBlock = 408;
MySQLParser.RULE_spDeclarations = 409;
MySQLParser.RULE_spDeclaration = 410;
MySQLParser.RULE_variableDeclaration = 411;
MySQLParser.RULE_conditionDeclaration = 412;
MySQLParser.RULE_spCondition = 413;
MySQLParser.RULE_sqlstate = 414;
MySQLParser.RULE_handlerDeclaration = 415;
MySQLParser.RULE_handlerCondition = 416;
MySQLParser.RULE_cursorDeclaration = 417;
MySQLParser.RULE_iterateStatement = 418;
MySQLParser.RULE_leaveStatement = 419;
MySQLParser.RULE_getDiagnostics = 420;
MySQLParser.RULE_signalAllowedExpr = 421;
MySQLParser.RULE_statementInformationItem = 422;
MySQLParser.RULE_conditionInformationItem = 423;
MySQLParser.RULE_signalInformationItemName = 424;
MySQLParser.RULE_signalStatement = 425;
MySQLParser.RULE_resignalStatement = 426;
MySQLParser.RULE_signalInformationItem = 427;
MySQLParser.RULE_cursorOpen = 428;
MySQLParser.RULE_cursorClose = 429;
MySQLParser.RULE_cursorFetch = 430;
MySQLParser.RULE_schedule = 431;
MySQLParser.RULE_columnDefinition = 432;
MySQLParser.RULE_checkOrReferences = 433;
MySQLParser.RULE_checkConstraint = 434;
MySQLParser.RULE_constraintEnforcement = 435;
MySQLParser.RULE_tableConstraintDef = 436;
MySQLParser.RULE_constraintName = 437;
MySQLParser.RULE_fieldDefinition = 438;
MySQLParser.RULE_columnAttribute = 439;
MySQLParser.RULE_columnFormat = 440;
MySQLParser.RULE_storageMedia = 441;
MySQLParser.RULE_gcolAttribute = 442;
MySQLParser.RULE_references = 443;
MySQLParser.RULE_deleteOption = 444;
MySQLParser.RULE_keyList = 445;
MySQLParser.RULE_keyPart = 446;
MySQLParser.RULE_keyListWithExpression = 447;
MySQLParser.RULE_keyPartOrExpression = 448;
MySQLParser.RULE_keyListVariants = 449;
MySQLParser.RULE_indexType = 450;
MySQLParser.RULE_indexOption = 451;
MySQLParser.RULE_commonIndexOption = 452;
MySQLParser.RULE_visibility = 453;
MySQLParser.RULE_indexTypeClause = 454;
MySQLParser.RULE_fulltextIndexOption = 455;
MySQLParser.RULE_spatialIndexOption = 456;
MySQLParser.RULE_dataTypeDefinition = 457;
MySQLParser.RULE_dataType = 458;
MySQLParser.RULE_nchar = 459;
MySQLParser.RULE_realType = 460;
MySQLParser.RULE_fieldLength = 461;
MySQLParser.RULE_fieldOptions = 462;
MySQLParser.RULE_charsetWithOptBinary = 463;
MySQLParser.RULE_ascii = 464;
MySQLParser.RULE_unicode = 465;
MySQLParser.RULE_wsNumCodepoints = 466;
MySQLParser.RULE_typeDatetimePrecision = 467;
MySQLParser.RULE_charsetName = 468;
MySQLParser.RULE_collationName = 469;
MySQLParser.RULE_createTableOptions = 470;
MySQLParser.RULE_createTableOptionsSpaceSeparated = 471;
MySQLParser.RULE_createTableOption = 472;
MySQLParser.RULE_ternaryOption = 473;
MySQLParser.RULE_defaultCollation = 474;
MySQLParser.RULE_defaultEncryption = 475;
MySQLParser.RULE_defaultCharset = 476;
MySQLParser.RULE_partitionClause = 477;
MySQLParser.RULE_partitionTypeDef = 478;
MySQLParser.RULE_subPartitions = 479;
MySQLParser.RULE_partitionKeyAlgorithm = 480;
MySQLParser.RULE_partitionDefinitions = 481;
MySQLParser.RULE_partitionDefinition = 482;
MySQLParser.RULE_partitionValuesIn = 483;
MySQLParser.RULE_partitionOption = 484;
MySQLParser.RULE_subpartitionDefinition = 485;
MySQLParser.RULE_partitionValueItemListParen = 486;
MySQLParser.RULE_partitionValueItem = 487;
MySQLParser.RULE_definerClause = 488;
MySQLParser.RULE_ifExists = 489;
MySQLParser.RULE_ifNotExists = 490;
MySQLParser.RULE_procedureParameter = 491;
MySQLParser.RULE_functionParameter = 492;
MySQLParser.RULE_collate = 493;
MySQLParser.RULE_typeWithOptCollate = 494;
MySQLParser.RULE_schemaIdentifierPair = 495;
MySQLParser.RULE_viewRefList = 496;
MySQLParser.RULE_updateList = 497;
MySQLParser.RULE_updateElement = 498;
MySQLParser.RULE_charsetClause = 499;
MySQLParser.RULE_fieldsClause = 500;
MySQLParser.RULE_fieldTerm = 501;
MySQLParser.RULE_linesClause = 502;
MySQLParser.RULE_lineTerm = 503;
MySQLParser.RULE_userList = 504;
MySQLParser.RULE_createUserList = 505;
MySQLParser.RULE_alterUserList = 506;
MySQLParser.RULE_createUserEntry = 507;
MySQLParser.RULE_alterUserEntry = 508;
MySQLParser.RULE_retainCurrentPassword = 509;
MySQLParser.RULE_discardOldPassword = 510;
MySQLParser.RULE_replacePassword = 511;
MySQLParser.RULE_userIdentifierOrText = 512;
MySQLParser.RULE_user = 513;
MySQLParser.RULE_likeClause = 514;
MySQLParser.RULE_likeOrWhere = 515;
MySQLParser.RULE_onlineOption = 516;
MySQLParser.RULE_noWriteToBinLog = 517;
MySQLParser.RULE_usePartition = 518;
MySQLParser.RULE_fieldIdentifier = 519;
MySQLParser.RULE_columnName = 520;
MySQLParser.RULE_columnInternalRef = 521;
MySQLParser.RULE_columnInternalRefList = 522;
MySQLParser.RULE_columnRef = 523;
MySQLParser.RULE_insertIdentifier = 524;
MySQLParser.RULE_indexName = 525;
MySQLParser.RULE_indexRef = 526;
MySQLParser.RULE_tableWild = 527;
MySQLParser.RULE_schemaName = 528;
MySQLParser.RULE_schemaRef = 529;
MySQLParser.RULE_procedureName = 530;
MySQLParser.RULE_procedureRef = 531;
MySQLParser.RULE_functionName = 532;
MySQLParser.RULE_functionRef = 533;
MySQLParser.RULE_triggerName = 534;
MySQLParser.RULE_triggerRef = 535;
MySQLParser.RULE_viewName = 536;
MySQLParser.RULE_viewRef = 537;
MySQLParser.RULE_tablespaceName = 538;
MySQLParser.RULE_tablespaceRef = 539;
MySQLParser.RULE_logfileGroupName = 540;
MySQLParser.RULE_logfileGroupRef = 541;
MySQLParser.RULE_eventName = 542;
MySQLParser.RULE_eventRef = 543;
MySQLParser.RULE_udfName = 544;
MySQLParser.RULE_serverName = 545;
MySQLParser.RULE_serverRef = 546;
MySQLParser.RULE_engineRef = 547;
MySQLParser.RULE_tableName = 548;
MySQLParser.RULE_filterTableRef = 549;
MySQLParser.RULE_tableRefWithWildcard = 550;
MySQLParser.RULE_tableRef = 551;
MySQLParser.RULE_tableRefList = 552;
MySQLParser.RULE_tableAliasRefList = 553;
MySQLParser.RULE_parameterName = 554;
MySQLParser.RULE_labelIdentifier = 555;
MySQLParser.RULE_labelRef = 556;
MySQLParser.RULE_roleIdentifier = 557;
MySQLParser.RULE_roleRef = 558;
MySQLParser.RULE_pluginRef = 559;
MySQLParser.RULE_componentRef = 560;
MySQLParser.RULE_resourceGroupRef = 561;
MySQLParser.RULE_windowName = 562;
MySQLParser.RULE_pureIdentifier = 563;
MySQLParser.RULE_identifier = 564;
MySQLParser.RULE_identifierList = 565;
MySQLParser.RULE_identifierListWithParentheses = 566;
MySQLParser.RULE_qualifiedIdentifier = 567;
MySQLParser.RULE_simpleIdentifier = 568;
MySQLParser.RULE_dotIdentifier = 569;
MySQLParser.RULE_ulong_number = 570;
MySQLParser.RULE_real_ulong_number = 571;
MySQLParser.RULE_ulonglong_number = 572;
MySQLParser.RULE_real_ulonglong_number = 573;
MySQLParser.RULE_literal = 574;
MySQLParser.RULE_signedLiteral = 575;
MySQLParser.RULE_stringList = 576;
MySQLParser.RULE_textStringLiteral = 577;
MySQLParser.RULE_textString = 578;
MySQLParser.RULE_textStringHash = 579;
MySQLParser.RULE_textLiteral = 580;
MySQLParser.RULE_textStringNoLinebreak = 581;
MySQLParser.RULE_textStringLiteralList = 582;
MySQLParser.RULE_numLiteral = 583;
MySQLParser.RULE_boolLiteral = 584;
MySQLParser.RULE_nullLiteral = 585;
MySQLParser.RULE_temporalLiteral = 586;
MySQLParser.RULE_floatOptions = 587;
MySQLParser.RULE_standardFloatOptions = 588;
MySQLParser.RULE_precision = 589;
MySQLParser.RULE_textOrIdentifier = 590;
MySQLParser.RULE_lValueIdentifier = 591;
MySQLParser.RULE_roleIdentifierOrText = 592;
MySQLParser.RULE_sizeNumber = 593;
MySQLParser.RULE_parentheses = 594;
MySQLParser.RULE_equal = 595;
MySQLParser.RULE_optionType = 596;
MySQLParser.RULE_varIdentType = 597;
MySQLParser.RULE_setVarIdentType = 598;
MySQLParser.RULE_identifierKeyword = 599;
MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels = 600;
MySQLParser.RULE_identifierKeywordsAmbiguous2Labels = 601;
MySQLParser.RULE_labelKeyword = 602;
MySQLParser.RULE_identifierKeywordsAmbiguous3Roles = 603;
MySQLParser.RULE_identifierKeywordsUnambiguous = 604;
MySQLParser.RULE_roleKeyword = 605;
MySQLParser.RULE_lValueKeyword = 606;
MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables = 607;
MySQLParser.RULE_roleOrIdentifierKeyword = 608;
MySQLParser.RULE_roleOrLabelKeyword = 609;

class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_query;
    }

	EOF() {
	    return this.getToken(MySQLParser.EOF, 0);
	};

	simpleStatement() {
	    return this.getTypedRuleContext(SimpleStatementContext,0);
	};

	beginWork() {
	    return this.getTypedRuleContext(BeginWorkContext,0);
	};

	SEMICOLON_SYMBOL() {
	    return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_simpleStatement;
    }

	alterStatement() {
	    return this.getTypedRuleContext(AlterStatementContext,0);
	};

	createStatement() {
	    return this.getTypedRuleContext(CreateStatementContext,0);
	};

	dropStatement() {
	    return this.getTypedRuleContext(DropStatementContext,0);
	};

	renameTableStatement() {
	    return this.getTypedRuleContext(RenameTableStatementContext,0);
	};

	truncateTableStatement() {
	    return this.getTypedRuleContext(TruncateTableStatementContext,0);
	};

	importStatement() {
	    return this.getTypedRuleContext(ImportStatementContext,0);
	};

	callStatement() {
	    return this.getTypedRuleContext(CallStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	doStatement() {
	    return this.getTypedRuleContext(DoStatementContext,0);
	};

	handlerStatement() {
	    return this.getTypedRuleContext(HandlerStatementContext,0);
	};

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	loadStatement() {
	    return this.getTypedRuleContext(LoadStatementContext,0);
	};

	replaceStatement() {
	    return this.getTypedRuleContext(ReplaceStatementContext,0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	updateStatement() {
	    return this.getTypedRuleContext(UpdateStatementContext,0);
	};

	transactionOrLockingStatement() {
	    return this.getTypedRuleContext(TransactionOrLockingStatementContext,0);
	};

	replicationStatement() {
	    return this.getTypedRuleContext(ReplicationStatementContext,0);
	};

	preparedStatement() {
	    return this.getTypedRuleContext(PreparedStatementContext,0);
	};

	cloneStatement() {
	    return this.getTypedRuleContext(CloneStatementContext,0);
	};

	accountManagementStatement() {
	    return this.getTypedRuleContext(AccountManagementStatementContext,0);
	};

	tableAdministrationStatement() {
	    return this.getTypedRuleContext(TableAdministrationStatementContext,0);
	};

	installUninstallStatment() {
	    return this.getTypedRuleContext(InstallUninstallStatmentContext,0);
	};

	setStatement() {
	    return this.getTypedRuleContext(SetStatementContext,0);
	};

	showStatement() {
	    return this.getTypedRuleContext(ShowStatementContext,0);
	};

	resourceGroupManagement() {
	    return this.getTypedRuleContext(ResourceGroupManagementContext,0);
	};

	otherAdministrativeStatement() {
	    return this.getTypedRuleContext(OtherAdministrativeStatementContext,0);
	};

	utilityStatement() {
	    return this.getTypedRuleContext(UtilityStatementContext,0);
	};

	getDiagnostics() {
	    return this.getTypedRuleContext(GetDiagnosticsContext,0);
	};

	signalStatement() {
	    return this.getTypedRuleContext(SignalStatementContext,0);
	};

	resignalStatement() {
	    return this.getTypedRuleContext(ResignalStatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterStatement;
    }

	ALTER_SYMBOL() {
	    return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
	};

	alterTable() {
	    return this.getTypedRuleContext(AlterTableContext,0);
	};

	alterDatabase() {
	    return this.getTypedRuleContext(AlterDatabaseContext,0);
	};

	PROCEDURE_SYMBOL() {
	    return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
	};

	procedureRef() {
	    return this.getTypedRuleContext(ProcedureRefContext,0);
	};

	FUNCTION_SYMBOL() {
	    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	};

	functionRef() {
	    return this.getTypedRuleContext(FunctionRefContext,0);
	};

	alterView() {
	    return this.getTypedRuleContext(AlterViewContext,0);
	};

	alterEvent() {
	    return this.getTypedRuleContext(AlterEventContext,0);
	};

	alterTablespace() {
	    return this.getTypedRuleContext(AlterTablespaceContext,0);
	};

	alterUndoTablespace() {
	    return this.getTypedRuleContext(AlterUndoTablespaceContext,0);
	};

	alterLogfileGroup() {
	    return this.getTypedRuleContext(AlterLogfileGroupContext,0);
	};

	alterServer() {
	    return this.getTypedRuleContext(AlterServerContext,0);
	};

	INSTANCE_SYMBOL() {
	    return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
	};

	ROTATE_SYMBOL() {
	    return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	MASTER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	};

	KEY_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	};

	routineAlterOptions() {
	    return this.getTypedRuleContext(RoutineAlterOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterDatabase;
    }

	DATABASE_SYMBOL() {
	    return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
	};

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	UPGRADE_SYMBOL() {
	    return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
	};

	DATA_SYMBOL() {
	    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	};

	DIRECTORY_SYMBOL() {
	    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	};

	NAME_SYMBOL() {
	    return this.getToken(MySQLParser.NAME_SYMBOL, 0);
	};

	createDatabaseOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateDatabaseOptionContext);
	    } else {
	        return this.getTypedRuleContext(CreateDatabaseOptionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterEvent;
    }

	EVENT_SYMBOL() {
	    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	};

	eventRef() {
	    return this.getTypedRuleContext(EventRefContext,0);
	};

	definerClause() {
	    return this.getTypedRuleContext(DefinerClauseContext,0);
	};

	ON_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.ON_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.ON_SYMBOL, i);
	    }
	};


	SCHEDULE_SYMBOL() {
	    return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
	};

	schedule() {
	    return this.getTypedRuleContext(ScheduleContext,0);
	};

	COMPLETION_SYMBOL() {
	    return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
	};

	PRESERVE_SYMBOL() {
	    return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
	};

	RENAME_SYMBOL() {
	    return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
	};

	TO_SYMBOL() {
	    return this.getToken(MySQLParser.TO_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ENABLE_SYMBOL() {
	    return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
	};

	DISABLE_SYMBOL() {
	    return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
	};

	COMMENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	DO_SYMBOL() {
	    return this.getToken(MySQLParser.DO_SYMBOL, 0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	NOT_SYMBOL() {
	    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	};

	SLAVE_SYMBOL() {
	    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterLogfileGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterLogfileGroup;
    }

	LOGFILE_SYMBOL() {
	    return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
	};

	GROUP_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	};

	logfileGroupRef() {
	    return this.getTypedRuleContext(LogfileGroupRefContext,0);
	};

	ADD_SYMBOL() {
	    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	};

	UNDOFILE_SYMBOL() {
	    return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	alterLogfileGroupOptions() {
	    return this.getTypedRuleContext(AlterLogfileGroupOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterLogfileGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterLogfileGroupOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterLogfileGroupOptions;
    }

	alterLogfileGroupOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterLogfileGroupOptionContext);
	    } else {
	        return this.getTypedRuleContext(AlterLogfileGroupOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterLogfileGroupOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterLogfileGroupOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterLogfileGroupOption;
    }

	tsOptionInitialSize() {
	    return this.getTypedRuleContext(TsOptionInitialSizeContext,0);
	};

	tsOptionEngine() {
	    return this.getTypedRuleContext(TsOptionEngineContext,0);
	};

	tsOptionWait() {
	    return this.getTypedRuleContext(TsOptionWaitContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterLogfileGroupOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterServer;
    }

	SERVER_SYMBOL() {
	    return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
	};

	serverRef() {
	    return this.getTypedRuleContext(ServerRefContext,0);
	};

	serverOptions() {
	    return this.getTypedRuleContext(ServerOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterServer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterTable;
    }

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	onlineOption() {
	    return this.getTypedRuleContext(OnlineOptionContext,0);
	};

	IGNORE_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	};

	alterTableActions() {
	    return this.getTypedRuleContext(AlterTableActionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTableActionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterTableActions;
    }

	alterCommandList() {
	    return this.getTypedRuleContext(AlterCommandListContext,0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	removePartitioning() {
	    return this.getTypedRuleContext(RemovePartitioningContext,0);
	};

	standaloneAlterCommands() {
	    return this.getTypedRuleContext(StandaloneAlterCommandsContext,0);
	};

	alterCommandsModifierList() {
	    return this.getTypedRuleContext(AlterCommandsModifierListContext,0);
	};

	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterTableActions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterCommandListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterCommandList;
    }

	alterCommandsModifierList() {
	    return this.getTypedRuleContext(AlterCommandsModifierListContext,0);
	};

	alterList() {
	    return this.getTypedRuleContext(AlterListContext,0);
	};

	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterCommandList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterCommandsModifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterCommandsModifierList;
    }

	alterCommandsModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterCommandsModifierContext);
	    } else {
	        return this.getTypedRuleContext(AlterCommandsModifierContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterCommandsModifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StandaloneAlterCommandsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_standaloneAlterCommands;
    }

	DISCARD_SYMBOL() {
	    return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
	};

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	IMPORT_SYMBOL() {
	    return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
	};

	alterPartition() {
	    return this.getTypedRuleContext(AlterPartitionContext,0);
	};

	SECONDARY_LOAD_SYMBOL() {
	    return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
	};

	SECONDARY_UNLOAD_SYMBOL() {
	    return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitStandaloneAlterCommands(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterPartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterPartition;
    }

	ADD_SYMBOL() {
	    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	};

	PARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	};

	partitionDefinitions() {
	    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
	};

	PARTITIONS_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	noWriteToBinLog = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NoWriteToBinLogContext);
	    } else {
	        return this.getTypedRuleContext(NoWriteToBinLogContext,i);
	    }
	};

	DROP_SYMBOL() {
	    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	REBUILD_SYMBOL() {
	    return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
	};

	allOrPartitionNameList() {
	    return this.getTypedRuleContext(AllOrPartitionNameListContext,0);
	};

	OPTIMIZE_SYMBOL() {
	    return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
	};

	ANALYZE_SYMBOL() {
	    return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
	};

	CHECK_SYMBOL() {
	    return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
	};

	checkOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CheckOptionContext);
	    } else {
	        return this.getTypedRuleContext(CheckOptionContext,i);
	    }
	};

	REPAIR_SYMBOL() {
	    return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
	};

	repairType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RepairTypeContext);
	    } else {
	        return this.getTypedRuleContext(RepairTypeContext,i);
	    }
	};

	COALESCE_SYMBOL() {
	    return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
	};

	TRUNCATE_SYMBOL() {
	    return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
	};

	REORGANIZE_SYMBOL() {
	    return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
	};

	INTO_SYMBOL() {
	    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	};

	EXCHANGE_SYMBOL() {
	    return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	withValidation() {
	    return this.getTypedRuleContext(WithValidationContext,0);
	};

	DISCARD_SYMBOL() {
	    return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
	};

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	IMPORT_SYMBOL() {
	    return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterList;
    }

	alterListItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterListItemContext);
	    } else {
	        return this.getTypedRuleContext(AlterListItemContext,i);
	    }
	};

	createTableOptionsSpaceSeparated = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateTableOptionsSpaceSeparatedContext);
	    } else {
	        return this.getTypedRuleContext(CreateTableOptionsSpaceSeparatedContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	alterCommandsModifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterCommandsModifierContext);
	    } else {
	        return this.getTypedRuleContext(AlterCommandsModifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterCommandsModifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterCommandsModifier;
    }

	alterAlgorithmOption() {
	    return this.getTypedRuleContext(AlterAlgorithmOptionContext,0);
	};

	alterLockOption() {
	    return this.getTypedRuleContext(AlterLockOptionContext,0);
	};

	withValidation() {
	    return this.getTypedRuleContext(WithValidationContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterCommandsModifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterListItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterListItem;
    }

	ADD_SYMBOL() {
	    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	fieldDefinition() {
	    return this.getTypedRuleContext(FieldDefinitionContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	tableElementList() {
	    return this.getTypedRuleContext(TableElementListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	COLUMN_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMN_SYMBOL, 0);
	};

	checkOrReferences() {
	    return this.getTypedRuleContext(CheckOrReferencesContext,0);
	};

	place() {
	    return this.getTypedRuleContext(PlaceContext,0);
	};

	tableConstraintDef() {
	    return this.getTypedRuleContext(TableConstraintDefContext,0);
	};

	CHANGE_SYMBOL() {
	    return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
	};

	columnInternalRef() {
	    return this.getTypedRuleContext(ColumnInternalRefContext,0);
	};

	MODIFY_SYMBOL() {
	    return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
	};

	DROP_SYMBOL() {
	    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	};

	FOREIGN_SYMBOL() {
	    return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
	};

	KEY_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	};

	PRIMARY_SYMBOL() {
	    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	};

	keyOrIndex() {
	    return this.getTypedRuleContext(KeyOrIndexContext,0);
	};

	indexRef() {
	    return this.getTypedRuleContext(IndexRefContext,0);
	};

	CHECK_SYMBOL() {
	    return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
	};

	CONSTRAINT_SYMBOL() {
	    return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0);
	};

	restrict() {
	    return this.getTypedRuleContext(RestrictContext,0);
	};

	DISABLE_SYMBOL() {
	    return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
	};

	KEYS_SYMBOL() {
	    return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
	};

	ENABLE_SYMBOL() {
	    return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
	};

	ALTER_SYMBOL() {
	    return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
	};

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	exprWithParentheses() {
	    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
	};

	signedLiteral() {
	    return this.getTypedRuleContext(SignedLiteralContext,0);
	};

	INDEX_SYMBOL() {
	    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	constraintEnforcement() {
	    return this.getTypedRuleContext(ConstraintEnforcementContext,0);
	};

	RENAME_SYMBOL() {
	    return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
	};

	TO_SYMBOL() {
	    return this.getToken(MySQLParser.TO_SYMBOL, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	indexName() {
	    return this.getTypedRuleContext(IndexNameContext,0);
	};

	CONVERT_SYMBOL() {
	    return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
	};

	charset() {
	    return this.getTypedRuleContext(CharsetContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	collate() {
	    return this.getTypedRuleContext(CollateContext,0);
	};

	FORCE_SYMBOL() {
	    return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
	};

	ORDER_SYMBOL() {
	    return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	alterOrderList() {
	    return this.getTypedRuleContext(AlterOrderListContext,0);
	};

	UPGRADE_SYMBOL() {
	    return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
	};

	PARTITIONING_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterListItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PlaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_place;
    }

	AFTER_SYMBOL() {
	    return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FIRST_SYMBOL() {
	    return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPlace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RestrictContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_restrict;
    }

	RESTRICT_SYMBOL() {
	    return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
	};

	CASCADE_SYMBOL() {
	    return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRestrict(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterOrderListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterOrderList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	direction = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DirectionContext);
	    } else {
	        return this.getTypedRuleContext(DirectionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterOrderList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterAlgorithmOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterAlgorithmOption;
    }

	ALGORITHM_SYMBOL() {
	    return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterAlgorithmOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterLockOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterLockOption;
    }

	LOCK_SYMBOL() {
	    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterLockOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexLockAndAlgorithmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexLockAndAlgorithm;
    }

	alterAlgorithmOption() {
	    return this.getTypedRuleContext(AlterAlgorithmOptionContext,0);
	};

	alterLockOption() {
	    return this.getTypedRuleContext(AlterLockOptionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexLockAndAlgorithm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithValidationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_withValidation;
    }

	VALIDATION_SYMBOL() {
	    return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
	};

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	WITHOUT_SYMBOL() {
	    return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWithValidation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RemovePartitioningContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_removePartitioning;
    }

	REMOVE_SYMBOL() {
	    return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
	};

	PARTITIONING_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRemovePartitioning(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AllOrPartitionNameListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_allOrPartitionNameList;
    }

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAllOrPartitionNameList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterTablespace;
    }

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	tablespaceRef() {
	    return this.getTypedRuleContext(TablespaceRefContext,0);
	};

	DATAFILE_SYMBOL() {
	    return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	RENAME_SYMBOL() {
	    return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
	};

	TO_SYMBOL() {
	    return this.getToken(MySQLParser.TO_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	alterTablespaceOptions() {
	    return this.getTypedRuleContext(AlterTablespaceOptionsContext,0);
	};

	ADD_SYMBOL() {
	    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	};

	DROP_SYMBOL() {
	    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	};

	CHANGE_SYMBOL() {
	    return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
	};

	NOT_SYMBOL() {
	    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	};

	ACCESSIBLE_SYMBOL() {
	    return this.getToken(MySQLParser.ACCESSIBLE_SYMBOL, 0);
	};

	READ_ONLY_SYMBOL() {
	    return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
	};

	READ_WRITE_SYMBOL() {
	    return this.getToken(MySQLParser.READ_WRITE_SYMBOL, 0);
	};

	changeTablespaceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ChangeTablespaceOptionContext);
	    } else {
	        return this.getTypedRuleContext(ChangeTablespaceOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterTablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterUndoTablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterUndoTablespace;
    }

	UNDO_SYMBOL() {
	    return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
	};

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	tablespaceRef() {
	    return this.getTypedRuleContext(TablespaceRefContext,0);
	};

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	ACTIVE_SYMBOL() {
	    return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
	};

	INACTIVE_SYMBOL() {
	    return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
	};

	undoTableSpaceOptions() {
	    return this.getTypedRuleContext(UndoTableSpaceOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterUndoTablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UndoTableSpaceOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_undoTableSpaceOptions;
    }

	undoTableSpaceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UndoTableSpaceOptionContext);
	    } else {
	        return this.getTypedRuleContext(UndoTableSpaceOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUndoTableSpaceOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UndoTableSpaceOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_undoTableSpaceOption;
    }

	tsOptionEngine() {
	    return this.getTypedRuleContext(TsOptionEngineContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUndoTableSpaceOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTablespaceOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterTablespaceOptions;
    }

	alterTablespaceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterTablespaceOptionContext);
	    } else {
	        return this.getTypedRuleContext(AlterTablespaceOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterTablespaceOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterTablespaceOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterTablespaceOption;
    }

	INITIAL_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
	};

	sizeNumber() {
	    return this.getTypedRuleContext(SizeNumberContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	tsOptionAutoextendSize() {
	    return this.getTypedRuleContext(TsOptionAutoextendSizeContext,0);
	};

	tsOptionMaxSize() {
	    return this.getTypedRuleContext(TsOptionMaxSizeContext,0);
	};

	tsOptionEngine() {
	    return this.getTypedRuleContext(TsOptionEngineContext,0);
	};

	tsOptionWait() {
	    return this.getTypedRuleContext(TsOptionWaitContext,0);
	};

	tsOptionEncryption() {
	    return this.getTypedRuleContext(TsOptionEncryptionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterTablespaceOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChangeTablespaceOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_changeTablespaceOption;
    }

	INITIAL_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
	};

	sizeNumber() {
	    return this.getTypedRuleContext(SizeNumberContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	tsOptionAutoextendSize() {
	    return this.getTypedRuleContext(TsOptionAutoextendSizeContext,0);
	};

	tsOptionMaxSize() {
	    return this.getTypedRuleContext(TsOptionMaxSizeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitChangeTablespaceOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterView;
    }

	VIEW_SYMBOL() {
	    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	};

	viewRef() {
	    return this.getTypedRuleContext(ViewRefContext,0);
	};

	viewTail() {
	    return this.getTypedRuleContext(ViewTailContext,0);
	};

	viewAlgorithm() {
	    return this.getTypedRuleContext(ViewAlgorithmContext,0);
	};

	definerClause() {
	    return this.getTypedRuleContext(DefinerClauseContext,0);
	};

	viewSuid() {
	    return this.getTypedRuleContext(ViewSuidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_viewTail;
    }

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	viewSelect() {
	    return this.getTypedRuleContext(ViewSelectContext,0);
	};

	columnInternalRefList() {
	    return this.getTypedRuleContext(ColumnInternalRefListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitViewTail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewSelectContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_viewSelect;
    }

	queryExpressionOrParens() {
	    return this.getTypedRuleContext(QueryExpressionOrParensContext,0);
	};

	viewCheckOption() {
	    return this.getTypedRuleContext(ViewCheckOptionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitViewSelect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewCheckOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_viewCheckOption;
    }

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	CHECK_SYMBOL() {
	    return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
	};

	OPTION_SYMBOL() {
	    return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
	};

	CASCADED_SYMBOL() {
	    return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
	};

	LOCAL_SYMBOL() {
	    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitViewCheckOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createStatement;
    }

	CREATE_SYMBOL() {
	    return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
	};

	createDatabase() {
	    return this.getTypedRuleContext(CreateDatabaseContext,0);
	};

	createTable() {
	    return this.getTypedRuleContext(CreateTableContext,0);
	};

	createFunction() {
	    return this.getTypedRuleContext(CreateFunctionContext,0);
	};

	createProcedure() {
	    return this.getTypedRuleContext(CreateProcedureContext,0);
	};

	createUdf() {
	    return this.getTypedRuleContext(CreateUdfContext,0);
	};

	createLogfileGroup() {
	    return this.getTypedRuleContext(CreateLogfileGroupContext,0);
	};

	createView() {
	    return this.getTypedRuleContext(CreateViewContext,0);
	};

	createTrigger() {
	    return this.getTypedRuleContext(CreateTriggerContext,0);
	};

	createIndex() {
	    return this.getTypedRuleContext(CreateIndexContext,0);
	};

	createServer() {
	    return this.getTypedRuleContext(CreateServerContext,0);
	};

	createTablespace() {
	    return this.getTypedRuleContext(CreateTablespaceContext,0);
	};

	createEvent() {
	    return this.getTypedRuleContext(CreateEventContext,0);
	};

	createRole() {
	    return this.getTypedRuleContext(CreateRoleContext,0);
	};

	createSpatialReference() {
	    return this.getTypedRuleContext(CreateSpatialReferenceContext,0);
	};

	createUndoTablespace() {
	    return this.getTypedRuleContext(CreateUndoTablespaceContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createDatabase;
    }

	DATABASE_SYMBOL() {
	    return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
	};

	schemaName() {
	    return this.getTypedRuleContext(SchemaNameContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	createDatabaseOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateDatabaseOptionContext);
	    } else {
	        return this.getTypedRuleContext(CreateDatabaseOptionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateDatabaseOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createDatabaseOption;
    }

	defaultCharset() {
	    return this.getTypedRuleContext(DefaultCharsetContext,0);
	};

	defaultCollation() {
	    return this.getTypedRuleContext(DefaultCollationContext,0);
	};

	defaultEncryption() {
	    return this.getTypedRuleContext(DefaultEncryptionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateDatabaseOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createTable;
    }

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	LIKE_SYMBOL() {
	    return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	TEMPORARY_SYMBOL() {
	    return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	tableElementList() {
	    return this.getTypedRuleContext(TableElementListContext,0);
	};

	createTableOptions() {
	    return this.getTypedRuleContext(CreateTableOptionsContext,0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	duplicateAsQueryExpression() {
	    return this.getTypedRuleContext(DuplicateAsQueryExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableElementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableElementList;
    }

	tableElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableElementContext);
	    } else {
	        return this.getTypedRuleContext(TableElementContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableElementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableElement;
    }

	columnDefinition() {
	    return this.getTypedRuleContext(ColumnDefinitionContext,0);
	};

	tableConstraintDef() {
	    return this.getTypedRuleContext(TableConstraintDefContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DuplicateAsQueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_duplicateAsQueryExpression;
    }

	queryExpressionOrParens() {
	    return this.getTypedRuleContext(QueryExpressionOrParensContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	REPLACE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	};

	IGNORE_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDuplicateAsQueryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryExpressionOrParensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_queryExpressionOrParens;
    }

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	queryExpressionParens() {
	    return this.getTypedRuleContext(QueryExpressionParensContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitQueryExpressionOrParens(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateRoutineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createRoutine;
    }

	CREATE_SYMBOL() {
	    return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
	};

	EOF() {
	    return this.getToken(MySQLParser.EOF, 0);
	};

	createProcedure() {
	    return this.getTypedRuleContext(CreateProcedureContext,0);
	};

	createFunction() {
	    return this.getTypedRuleContext(CreateFunctionContext,0);
	};

	createUdf() {
	    return this.getTypedRuleContext(CreateUdfContext,0);
	};

	SEMICOLON_SYMBOL() {
	    return this.getToken(MySQLParser.SEMICOLON_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateRoutine(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createProcedure;
    }

	PROCEDURE_SYMBOL() {
	    return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
	};

	procedureName() {
	    return this.getTypedRuleContext(ProcedureNameContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	definerClause() {
	    return this.getTypedRuleContext(DefinerClauseContext,0);
	};

	procedureParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProcedureParameterContext);
	    } else {
	        return this.getTypedRuleContext(ProcedureParameterContext,i);
	    }
	};

	routineCreateOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineCreateOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineCreateOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateProcedure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createFunction;
    }

	FUNCTION_SYMBOL() {
	    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	};

	functionName() {
	    return this.getTypedRuleContext(FunctionNameContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	RETURNS_SYMBOL() {
	    return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
	};

	typeWithOptCollate() {
	    return this.getTypedRuleContext(TypeWithOptCollateContext,0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	definerClause() {
	    return this.getTypedRuleContext(DefinerClauseContext,0);
	};

	functionParameter = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FunctionParameterContext);
	    } else {
	        return this.getTypedRuleContext(FunctionParameterContext,i);
	    }
	};

	routineCreateOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineCreateOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineCreateOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateUdfContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createUdf;
        this.type = null;
    }

	FUNCTION_SYMBOL() {
	    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	};

	udfName() {
	    return this.getTypedRuleContext(UdfNameContext,0);
	};

	RETURNS_SYMBOL() {
	    return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
	};

	SONAME_SYMBOL() {
	    return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	STRING_SYMBOL() {
	    return this.getToken(MySQLParser.STRING_SYMBOL, 0);
	};

	INT_SYMBOL() {
	    return this.getToken(MySQLParser.INT_SYMBOL, 0);
	};

	REAL_SYMBOL() {
	    return this.getToken(MySQLParser.REAL_SYMBOL, 0);
	};

	DECIMAL_SYMBOL() {
	    return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
	};

	AGGREGATE_SYMBOL() {
	    return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateUdf(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoutineCreateOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_routineCreateOption;
    }

	routineOption() {
	    return this.getTypedRuleContext(RoutineOptionContext,0);
	};

	DETERMINISTIC_SYMBOL() {
	    return this.getToken(MySQLParser.DETERMINISTIC_SYMBOL, 0);
	};

	NOT_SYMBOL() {
	    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRoutineCreateOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoutineAlterOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_routineAlterOptions;
    }

	routineCreateOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoutineCreateOptionContext);
	    } else {
	        return this.getTypedRuleContext(RoutineCreateOptionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRoutineAlterOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoutineOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_routineOption;
        this.option = null;
        this.security = null;
    }

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	COMMENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	};

	SQL_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_SYMBOL, 0);
	};

	LANGUAGE_SYMBOL() {
	    return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
	};

	NO_SYMBOL() {
	    return this.getToken(MySQLParser.NO_SYMBOL, 0);
	};

	CONTAINS_SYMBOL() {
	    return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
	};

	DATA_SYMBOL() {
	    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	};

	READS_SYMBOL() {
	    return this.getToken(MySQLParser.READS_SYMBOL, 0);
	};

	MODIFIES_SYMBOL() {
	    return this.getToken(MySQLParser.MODIFIES_SYMBOL, 0);
	};

	SECURITY_SYMBOL() {
	    return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
	};

	DEFINER_SYMBOL() {
	    return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
	};

	INVOKER_SYMBOL() {
	    return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRoutineOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createIndex;
        this.type = null;
    }

	createIndexTarget() {
	    return this.getTypedRuleContext(CreateIndexTargetContext,0);
	};

	INDEX_SYMBOL() {
	    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	};

	indexName() {
	    return this.getTypedRuleContext(IndexNameContext,0);
	};

	onlineOption() {
	    return this.getTypedRuleContext(OnlineOptionContext,0);
	};

	FULLTEXT_SYMBOL() {
	    return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
	};

	SPATIAL_SYMBOL() {
	    return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
	};

	indexLockAndAlgorithm() {
	    return this.getTypedRuleContext(IndexLockAndAlgorithmContext,0);
	};

	UNIQUE_SYMBOL() {
	    return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	fulltextIndexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FulltextIndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(FulltextIndexOptionContext,i);
	    }
	};

	spatialIndexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpatialIndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(SpatialIndexOptionContext,i);
	    }
	};

	indexTypeClause() {
	    return this.getTypedRuleContext(IndexTypeClauseContext,0);
	};

	indexNameAndType() {
	    return this.getTypedRuleContext(IndexNameAndTypeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexNameAndTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexNameAndType;
    }

	indexName() {
	    return this.getTypedRuleContext(IndexNameContext,0);
	};

	USING_SYMBOL() {
	    return this.getToken(MySQLParser.USING_SYMBOL, 0);
	};

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	TYPE_SYMBOL() {
	    return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexNameAndType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateIndexTargetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createIndexTarget;
    }

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	keyListVariants() {
	    return this.getTypedRuleContext(KeyListVariantsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateIndexTarget(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateLogfileGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createLogfileGroup;
    }

	LOGFILE_SYMBOL() {
	    return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
	};

	GROUP_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	};

	logfileGroupName() {
	    return this.getTypedRuleContext(LogfileGroupNameContext,0);
	};

	ADD_SYMBOL() {
	    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	UNDOFILE_SYMBOL() {
	    return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
	};

	REDOFILE_SYMBOL() {
	    return this.getToken(MySQLParser.REDOFILE_SYMBOL, 0);
	};

	logfileGroupOptions() {
	    return this.getTypedRuleContext(LogfileGroupOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateLogfileGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogfileGroupOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_logfileGroupOptions;
    }

	logfileGroupOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LogfileGroupOptionContext);
	    } else {
	        return this.getTypedRuleContext(LogfileGroupOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLogfileGroupOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogfileGroupOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_logfileGroupOption;
    }

	tsOptionInitialSize() {
	    return this.getTypedRuleContext(TsOptionInitialSizeContext,0);
	};

	tsOptionUndoRedoBufferSize() {
	    return this.getTypedRuleContext(TsOptionUndoRedoBufferSizeContext,0);
	};

	tsOptionNodegroup() {
	    return this.getTypedRuleContext(TsOptionNodegroupContext,0);
	};

	tsOptionEngine() {
	    return this.getTypedRuleContext(TsOptionEngineContext,0);
	};

	tsOptionWait() {
	    return this.getTypedRuleContext(TsOptionWaitContext,0);
	};

	tsOptionComment() {
	    return this.getTypedRuleContext(TsOptionCommentContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLogfileGroupOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createServer;
    }

	SERVER_SYMBOL() {
	    return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
	};

	serverName() {
	    return this.getTypedRuleContext(ServerNameContext,0);
	};

	FOREIGN_SYMBOL() {
	    return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
	};

	DATA_SYMBOL() {
	    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	};

	WRAPPER_SYMBOL() {
	    return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	serverOptions() {
	    return this.getTypedRuleContext(ServerOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateServer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ServerOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_serverOptions;
    }

	OPTIONS_SYMBOL() {
	    return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	serverOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ServerOptionContext);
	    } else {
	        return this.getTypedRuleContext(ServerOptionContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitServerOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ServerOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_serverOption;
        this.option = null;
    }

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	HOST_SYMBOL() {
	    return this.getToken(MySQLParser.HOST_SYMBOL, 0);
	};

	DATABASE_SYMBOL() {
	    return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	};

	SOCKET_SYMBOL() {
	    return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
	};

	OWNER_SYMBOL() {
	    return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
	};

	ulong_number() {
	    return this.getTypedRuleContext(Ulong_numberContext,0);
	};

	PORT_SYMBOL() {
	    return this.getToken(MySQLParser.PORT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitServerOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createTablespace;
    }

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	tablespaceName() {
	    return this.getTypedRuleContext(TablespaceNameContext,0);
	};

	tsDataFileName() {
	    return this.getTypedRuleContext(TsDataFileNameContext,0);
	};

	USE_SYMBOL() {
	    return this.getToken(MySQLParser.USE_SYMBOL, 0);
	};

	LOGFILE_SYMBOL() {
	    return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
	};

	GROUP_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	};

	logfileGroupRef() {
	    return this.getTypedRuleContext(LogfileGroupRefContext,0);
	};

	tablespaceOptions() {
	    return this.getTypedRuleContext(TablespaceOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateTablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateUndoTablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createUndoTablespace;
    }

	UNDO_SYMBOL() {
	    return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
	};

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	tablespaceName() {
	    return this.getTypedRuleContext(TablespaceNameContext,0);
	};

	ADD_SYMBOL() {
	    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	};

	tsDataFile() {
	    return this.getTypedRuleContext(TsDataFileContext,0);
	};

	undoTableSpaceOptions() {
	    return this.getTypedRuleContext(UndoTableSpaceOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateUndoTablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsDataFileNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsDataFileName;
    }

	ADD_SYMBOL() {
	    return this.getToken(MySQLParser.ADD_SYMBOL, 0);
	};

	tsDataFile() {
	    return this.getTypedRuleContext(TsDataFileContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsDataFileName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsDataFileContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsDataFile;
    }

	DATAFILE_SYMBOL() {
	    return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsDataFile(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablespaceOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tablespaceOptions;
    }

	tablespaceOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TablespaceOptionContext);
	    } else {
	        return this.getTypedRuleContext(TablespaceOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTablespaceOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablespaceOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tablespaceOption;
    }

	tsOptionInitialSize() {
	    return this.getTypedRuleContext(TsOptionInitialSizeContext,0);
	};

	tsOptionAutoextendSize() {
	    return this.getTypedRuleContext(TsOptionAutoextendSizeContext,0);
	};

	tsOptionMaxSize() {
	    return this.getTypedRuleContext(TsOptionMaxSizeContext,0);
	};

	tsOptionExtentSize() {
	    return this.getTypedRuleContext(TsOptionExtentSizeContext,0);
	};

	tsOptionNodegroup() {
	    return this.getTypedRuleContext(TsOptionNodegroupContext,0);
	};

	tsOptionEngine() {
	    return this.getTypedRuleContext(TsOptionEngineContext,0);
	};

	tsOptionWait() {
	    return this.getTypedRuleContext(TsOptionWaitContext,0);
	};

	tsOptionComment() {
	    return this.getTypedRuleContext(TsOptionCommentContext,0);
	};

	tsOptionFileblockSize() {
	    return this.getTypedRuleContext(TsOptionFileblockSizeContext,0);
	};

	tsOptionEncryption() {
	    return this.getTypedRuleContext(TsOptionEncryptionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTablespaceOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsOptionInitialSizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsOptionInitialSize;
    }

	INITIAL_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
	};

	sizeNumber() {
	    return this.getTypedRuleContext(SizeNumberContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsOptionInitialSize(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsOptionUndoRedoBufferSizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsOptionUndoRedoBufferSize;
    }

	sizeNumber() {
	    return this.getTypedRuleContext(SizeNumberContext,0);
	};

	UNDO_BUFFER_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
	};

	REDO_BUFFER_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsOptionUndoRedoBufferSize(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsOptionAutoextendSizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsOptionAutoextendSize;
    }

	AUTOEXTEND_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
	};

	sizeNumber() {
	    return this.getTypedRuleContext(SizeNumberContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsOptionAutoextendSize(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsOptionMaxSizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsOptionMaxSize;
    }

	MAX_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
	};

	sizeNumber() {
	    return this.getTypedRuleContext(SizeNumberContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsOptionMaxSize(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsOptionExtentSizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsOptionExtentSize;
    }

	EXTENT_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
	};

	sizeNumber() {
	    return this.getTypedRuleContext(SizeNumberContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsOptionExtentSize(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsOptionNodegroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsOptionNodegroup;
    }

	NODEGROUP_SYMBOL() {
	    return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsOptionNodegroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsOptionEngineContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsOptionEngine;
    }

	ENGINE_SYMBOL() {
	    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	};

	engineRef() {
	    return this.getTypedRuleContext(EngineRefContext,0);
	};

	STORAGE_SYMBOL() {
	    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsOptionEngine(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsOptionWaitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsOptionWait;
    }

	WAIT_SYMBOL() {
	    return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
	};

	NO_WAIT_SYMBOL() {
	    return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsOptionWait(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsOptionCommentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsOptionComment;
    }

	COMMENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsOptionComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsOptionFileblockSizeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsOptionFileblockSize;
    }

	FILE_BLOCK_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
	};

	sizeNumber() {
	    return this.getTypedRuleContext(SizeNumberContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsOptionFileblockSize(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TsOptionEncryptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tsOptionEncryption;
    }

	ENCRYPTION_SYMBOL() {
	    return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTsOptionEncryption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createView;
    }

	VIEW_SYMBOL() {
	    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	};

	viewName() {
	    return this.getTypedRuleContext(ViewNameContext,0);
	};

	viewTail() {
	    return this.getTypedRuleContext(ViewTailContext,0);
	};

	viewReplaceOrAlgorithm() {
	    return this.getTypedRuleContext(ViewReplaceOrAlgorithmContext,0);
	};

	definerClause() {
	    return this.getTypedRuleContext(DefinerClauseContext,0);
	};

	viewSuid() {
	    return this.getTypedRuleContext(ViewSuidContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewReplaceOrAlgorithmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_viewReplaceOrAlgorithm;
    }

	OR_SYMBOL() {
	    return this.getToken(MySQLParser.OR_SYMBOL, 0);
	};

	REPLACE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	};

	viewAlgorithm() {
	    return this.getTypedRuleContext(ViewAlgorithmContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitViewReplaceOrAlgorithm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewAlgorithmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_viewAlgorithm;
        this.algorithm = null;
    }

	ALGORITHM_SYMBOL() {
	    return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	UNDEFINED_SYMBOL() {
	    return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
	};

	MERGE_SYMBOL() {
	    return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
	};

	TEMPTABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitViewAlgorithm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewSuidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_viewSuid;
    }

	SQL_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_SYMBOL, 0);
	};

	SECURITY_SYMBOL() {
	    return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
	};

	DEFINER_SYMBOL() {
	    return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
	};

	INVOKER_SYMBOL() {
	    return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitViewSuid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTriggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createTrigger;
        this.timing = null;
        this.event = null;
    }

	TRIGGER_SYMBOL() {
	    return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
	};

	triggerName() {
	    return this.getTypedRuleContext(TriggerNameContext,0);
	};

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	EACH_SYMBOL() {
	    return this.getToken(MySQLParser.EACH_SYMBOL, 0);
	};

	ROW_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	BEFORE_SYMBOL() {
	    return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
	};

	AFTER_SYMBOL() {
	    return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
	};

	INSERT_SYMBOL() {
	    return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
	};

	UPDATE_SYMBOL() {
	    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	};

	DELETE_SYMBOL() {
	    return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
	};

	definerClause() {
	    return this.getTypedRuleContext(DefinerClauseContext,0);
	};

	triggerFollowsPrecedesClause() {
	    return this.getTypedRuleContext(TriggerFollowsPrecedesClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateTrigger(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggerFollowsPrecedesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_triggerFollowsPrecedesClause;
        this.ordering = null;
    }

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	FOLLOWS_SYMBOL() {
	    return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
	};

	PRECEDES_SYMBOL() {
	    return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTriggerFollowsPrecedesClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createEvent;
    }

	EVENT_SYMBOL() {
	    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	};

	eventName() {
	    return this.getTypedRuleContext(EventNameContext,0);
	};

	ON_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.ON_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.ON_SYMBOL, i);
	    }
	};


	SCHEDULE_SYMBOL() {
	    return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
	};

	schedule() {
	    return this.getTypedRuleContext(ScheduleContext,0);
	};

	DO_SYMBOL() {
	    return this.getToken(MySQLParser.DO_SYMBOL, 0);
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	definerClause() {
	    return this.getTypedRuleContext(DefinerClauseContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	COMPLETION_SYMBOL() {
	    return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
	};

	PRESERVE_SYMBOL() {
	    return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
	};

	ENABLE_SYMBOL() {
	    return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
	};

	DISABLE_SYMBOL() {
	    return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
	};

	COMMENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	NOT_SYMBOL() {
	    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	};

	SLAVE_SYMBOL() {
	    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createRole;
    }

	ROLE_SYMBOL() {
	    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateRole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateSpatialReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createSpatialReference;
    }

	OR_SYMBOL() {
	    return this.getToken(MySQLParser.OR_SYMBOL, 0);
	};

	REPLACE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	};

	SPATIAL_SYMBOL() {
	    return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
	};

	REFERENCE_SYMBOL() {
	    return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
	};

	SYSTEM_SYMBOL() {
	    return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
	};

	real_ulonglong_number() {
	    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
	};

	srsAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SrsAttributeContext);
	    } else {
	        return this.getTypedRuleContext(SrsAttributeContext,i);
	    }
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateSpatialReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SrsAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_srsAttribute;
    }

	NAME_SYMBOL() {
	    return this.getToken(MySQLParser.NAME_SYMBOL, 0);
	};

	TEXT_SYMBOL() {
	    return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
	};

	textStringNoLinebreak() {
	    return this.getTypedRuleContext(TextStringNoLinebreakContext,0);
	};

	DEFINITION_SYMBOL() {
	    return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
	};

	ORGANIZATION_SYMBOL() {
	    return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
	};

	IDENTIFIED_SYMBOL() {
	    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	real_ulonglong_number() {
	    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
	};

	DESCRIPTION_SYMBOL() {
	    return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSrsAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropStatement;
    }

	DROP_SYMBOL() {
	    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	};

	dropDatabase() {
	    return this.getTypedRuleContext(DropDatabaseContext,0);
	};

	dropEvent() {
	    return this.getTypedRuleContext(DropEventContext,0);
	};

	dropFunction() {
	    return this.getTypedRuleContext(DropFunctionContext,0);
	};

	dropProcedure() {
	    return this.getTypedRuleContext(DropProcedureContext,0);
	};

	dropIndex() {
	    return this.getTypedRuleContext(DropIndexContext,0);
	};

	dropLogfileGroup() {
	    return this.getTypedRuleContext(DropLogfileGroupContext,0);
	};

	dropServer() {
	    return this.getTypedRuleContext(DropServerContext,0);
	};

	dropTable() {
	    return this.getTypedRuleContext(DropTableContext,0);
	};

	dropTableSpace() {
	    return this.getTypedRuleContext(DropTableSpaceContext,0);
	};

	dropTrigger() {
	    return this.getTypedRuleContext(DropTriggerContext,0);
	};

	dropView() {
	    return this.getTypedRuleContext(DropViewContext,0);
	};

	dropRole() {
	    return this.getTypedRuleContext(DropRoleContext,0);
	};

	dropSpatialReference() {
	    return this.getTypedRuleContext(DropSpatialReferenceContext,0);
	};

	dropUndoTablespace() {
	    return this.getTypedRuleContext(DropUndoTablespaceContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropDatabaseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropDatabase;
    }

	DATABASE_SYMBOL() {
	    return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
	};

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropDatabase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropEventContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropEvent;
    }

	EVENT_SYMBOL() {
	    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	};

	eventRef() {
	    return this.getTypedRuleContext(EventRefContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropEvent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropFunction;
    }

	FUNCTION_SYMBOL() {
	    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	};

	functionRef() {
	    return this.getTypedRuleContext(FunctionRefContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropProcedureContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropProcedure;
    }

	PROCEDURE_SYMBOL() {
	    return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
	};

	procedureRef() {
	    return this.getTypedRuleContext(ProcedureRefContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropProcedure(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropIndex;
        this.type = null;
    }

	indexRef() {
	    return this.getTypedRuleContext(IndexRefContext,0);
	};

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	INDEX_SYMBOL() {
	    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	};

	onlineOption() {
	    return this.getTypedRuleContext(OnlineOptionContext,0);
	};

	indexLockAndAlgorithm() {
	    return this.getTypedRuleContext(IndexLockAndAlgorithmContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropLogfileGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropLogfileGroup;
    }

	LOGFILE_SYMBOL() {
	    return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
	};

	GROUP_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	};

	logfileGroupRef() {
	    return this.getTypedRuleContext(LogfileGroupRefContext,0);
	};

	dropLogfileGroupOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DropLogfileGroupOptionContext);
	    } else {
	        return this.getTypedRuleContext(DropLogfileGroupOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropLogfileGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropLogfileGroupOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropLogfileGroupOption;
    }

	tsOptionWait() {
	    return this.getTypedRuleContext(TsOptionWaitContext,0);
	};

	tsOptionEngine() {
	    return this.getTypedRuleContext(TsOptionEngineContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropLogfileGroupOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropServer;
    }

	SERVER_SYMBOL() {
	    return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
	};

	serverRef() {
	    return this.getTypedRuleContext(ServerRefContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropServer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropTable;
        this.type = null;
    }

	tableRefList() {
	    return this.getTypedRuleContext(TableRefListContext,0);
	};

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	TABLES_SYMBOL() {
	    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	};

	TEMPORARY_SYMBOL() {
	    return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	RESTRICT_SYMBOL() {
	    return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
	};

	CASCADE_SYMBOL() {
	    return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropTableSpaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropTableSpace;
    }

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	tablespaceRef() {
	    return this.getTypedRuleContext(TablespaceRefContext,0);
	};

	dropLogfileGroupOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DropLogfileGroupOptionContext);
	    } else {
	        return this.getTypedRuleContext(DropLogfileGroupOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropTableSpace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropTriggerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropTrigger;
    }

	TRIGGER_SYMBOL() {
	    return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
	};

	triggerRef() {
	    return this.getTypedRuleContext(TriggerRefContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropTrigger(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropViewContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropView;
    }

	VIEW_SYMBOL() {
	    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	};

	viewRefList() {
	    return this.getTypedRuleContext(ViewRefListContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	RESTRICT_SYMBOL() {
	    return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
	};

	CASCADE_SYMBOL() {
	    return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropView(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropRole;
    }

	ROLE_SYMBOL() {
	    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropRole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropSpatialReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropSpatialReference;
    }

	SPATIAL_SYMBOL() {
	    return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
	};

	REFERENCE_SYMBOL() {
	    return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
	};

	SYSTEM_SYMBOL() {
	    return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
	};

	real_ulonglong_number() {
	    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropSpatialReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropUndoTablespaceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropUndoTablespace;
    }

	UNDO_SYMBOL() {
	    return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
	};

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	tablespaceRef() {
	    return this.getTypedRuleContext(TablespaceRefContext,0);
	};

	undoTableSpaceOptions() {
	    return this.getTypedRuleContext(UndoTableSpaceOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropUndoTablespace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RenameTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_renameTableStatement;
    }

	RENAME_SYMBOL() {
	    return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
	};

	renamePair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RenamePairContext);
	    } else {
	        return this.getTypedRuleContext(RenamePairContext,i);
	    }
	};

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	TABLES_SYMBOL() {
	    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRenameTableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RenamePairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_renamePair;
    }

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	TO_SYMBOL() {
	    return this.getToken(MySQLParser.TO_SYMBOL, 0);
	};

	tableName() {
	    return this.getTypedRuleContext(TableNameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRenamePair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TruncateTableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_truncateTableStatement;
    }

	TRUNCATE_SYMBOL() {
	    return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTruncateTableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ImportStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_importStatement;
    }

	IMPORT_SYMBOL() {
	    return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
	};

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	textStringLiteralList() {
	    return this.getTypedRuleContext(TextStringLiteralListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitImportStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CallStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_callStatement;
    }

	CALL_SYMBOL() {
	    return this.getToken(MySQLParser.CALL_SYMBOL, 0);
	};

	procedureRef() {
	    return this.getTypedRuleContext(ProcedureRefContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCallStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_deleteStatement;
    }

	DELETE_SYMBOL() {
	    return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
	};

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	tableAliasRefList() {
	    return this.getTypedRuleContext(TableAliasRefListContext,0);
	};

	tableReferenceList() {
	    return this.getTypedRuleContext(TableReferenceListContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	deleteStatementOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeleteStatementOptionContext);
	    } else {
	        return this.getTypedRuleContext(DeleteStatementOptionContext,i);
	    }
	};

	USING_SYMBOL() {
	    return this.getToken(MySQLParser.USING_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	partitionDelete() {
	    return this.getTypedRuleContext(PartitionDeleteContext,0);
	};

	orderClause() {
	    return this.getTypedRuleContext(OrderClauseContext,0);
	};

	simpleLimitClause() {
	    return this.getTypedRuleContext(SimpleLimitClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDeleteStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionDeleteContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_partitionDelete;
    }

	PARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPartitionDelete(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteStatementOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_deleteStatementOption;
    }

	QUICK_SYMBOL() {
	    return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
	};

	LOW_PRIORITY_SYMBOL() {
	    return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
	};

	IGNORE_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDeleteStatementOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DoStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_doStatement;
    }

	DO_SYMBOL() {
	    return this.getToken(MySQLParser.DO_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	selectItemList() {
	    return this.getTypedRuleContext(SelectItemListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDoStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HandlerStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_handlerStatement;
    }

	HANDLER_SYMBOL() {
	    return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	OPEN_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CLOSE_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
	};

	READ_SYMBOL() {
	    return this.getToken(MySQLParser.READ_SYMBOL, 0);
	};

	handlerReadOrScan() {
	    return this.getTypedRuleContext(HandlerReadOrScanContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitHandlerStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HandlerReadOrScanContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_handlerReadOrScan;
    }

	FIRST_SYMBOL() {
	    return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
	};

	NEXT_SYMBOL() {
	    return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	values() {
	    return this.getTypedRuleContext(ValuesContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	PREV_SYMBOL() {
	    return this.getToken(MySQLParser.PREV_SYMBOL, 0);
	};

	LAST_SYMBOL() {
	    return this.getToken(MySQLParser.LAST_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	LESS_THAN_OPERATOR() {
	    return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
	};

	GREATER_THAN_OPERATOR() {
	    return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
	};

	LESS_OR_EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
	};

	GREATER_OR_EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitHandlerReadOrScan(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_insertStatement;
    }

	INSERT_SYMBOL() {
	    return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	insertFromConstructor() {
	    return this.getTypedRuleContext(InsertFromConstructorContext,0);
	};

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	updateList() {
	    return this.getTypedRuleContext(UpdateListContext,0);
	};

	insertQueryExpression() {
	    return this.getTypedRuleContext(InsertQueryExpressionContext,0);
	};

	insertLockOption() {
	    return this.getTypedRuleContext(InsertLockOptionContext,0);
	};

	IGNORE_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	};

	INTO_SYMBOL() {
	    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	};

	usePartition() {
	    return this.getTypedRuleContext(UsePartitionContext,0);
	};

	insertUpdateList() {
	    return this.getTypedRuleContext(InsertUpdateListContext,0);
	};

	valuesReference() {
	    return this.getTypedRuleContext(ValuesReferenceContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInsertStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertLockOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_insertLockOption;
    }

	LOW_PRIORITY_SYMBOL() {
	    return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
	};

	DELAYED_SYMBOL() {
	    return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
	};

	HIGH_PRIORITY_SYMBOL() {
	    return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInsertLockOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertFromConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_insertFromConstructor;
    }

	insertValues() {
	    return this.getTypedRuleContext(InsertValuesContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	fields() {
	    return this.getTypedRuleContext(FieldsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInsertFromConstructor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fields;
    }

	insertIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InsertIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(InsertIdentifierContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFields(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_insertValues;
    }

	valueList() {
	    return this.getTypedRuleContext(ValueListContext,0);
	};

	VALUES_SYMBOL() {
	    return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
	};

	VALUE_SYMBOL() {
	    return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInsertValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertQueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_insertQueryExpression;
    }

	queryExpressionOrParens() {
	    return this.getTypedRuleContext(QueryExpressionOrParensContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	fields() {
	    return this.getTypedRuleContext(FieldsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInsertQueryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValueListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_valueList;
    }

	OPEN_PAR_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.OPEN_PAR_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, i);
	    }
	};


	CLOSE_PAR_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.CLOSE_PAR_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, i);
	    }
	};


	values = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ValuesContext);
	    } else {
	        return this.getTypedRuleContext(ValuesContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitValueList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValuesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_values;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	DEFAULT_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.DEFAULT_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.DEFAULT_SYMBOL, i);
	    }
	};


	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ValuesReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_valuesReference;
    }

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	columnInternalRefList() {
	    return this.getTypedRuleContext(ColumnInternalRefListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitValuesReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertUpdateListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_insertUpdateList;
    }

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	DUPLICATE_SYMBOL() {
	    return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
	};

	KEY_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	};

	UPDATE_SYMBOL() {
	    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	};

	updateList() {
	    return this.getTypedRuleContext(UpdateListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInsertUpdateList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_loadStatement;
    }

	LOAD_SYMBOL() {
	    return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
	};

	dataOrXml() {
	    return this.getTypedRuleContext(DataOrXmlContext,0);
	};

	INFILE_SYMBOL() {
	    return this.getToken(MySQLParser.INFILE_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	INTO_SYMBOL() {
	    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	};

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	loadDataFileTail() {
	    return this.getTypedRuleContext(LoadDataFileTailContext,0);
	};

	LOCAL_SYMBOL() {
	    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	};

	usePartition() {
	    return this.getTypedRuleContext(UsePartitionContext,0);
	};

	charsetClause() {
	    return this.getTypedRuleContext(CharsetClauseContext,0);
	};

	xmlRowsIdentifiedBy() {
	    return this.getTypedRuleContext(XmlRowsIdentifiedByContext,0);
	};

	fieldsClause() {
	    return this.getTypedRuleContext(FieldsClauseContext,0);
	};

	linesClause() {
	    return this.getTypedRuleContext(LinesClauseContext,0);
	};

	LOW_PRIORITY_SYMBOL() {
	    return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
	};

	CONCURRENT_SYMBOL() {
	    return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
	};

	REPLACE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	};

	IGNORE_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLoadStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataOrXmlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dataOrXml;
    }

	DATA_SYMBOL() {
	    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	};

	XML_SYMBOL() {
	    return this.getToken(MySQLParser.XML_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDataOrXml(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XmlRowsIdentifiedByContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_xmlRowsIdentifiedBy;
    }

	ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
	};

	IDENTIFIED_SYMBOL() {
	    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitXmlRowsIdentifiedBy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadDataFileTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_loadDataFileTail;
    }

	IGNORE_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	};

	INT_NUMBER() {
	    return this.getToken(MySQLParser.INT_NUMBER, 0);
	};

	loadDataFileTargetList() {
	    return this.getTypedRuleContext(LoadDataFileTargetListContext,0);
	};

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	updateList() {
	    return this.getTypedRuleContext(UpdateListContext,0);
	};

	LINES_SYMBOL() {
	    return this.getToken(MySQLParser.LINES_SYMBOL, 0);
	};

	ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLoadDataFileTail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoadDataFileTargetListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_loadDataFileTargetList;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	fieldOrVariableList() {
	    return this.getTypedRuleContext(FieldOrVariableListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLoadDataFileTargetList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldOrVariableListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fieldOrVariableList;
    }

	columnRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnRefContext);
	    } else {
	        return this.getTypedRuleContext(ColumnRefContext,i);
	    }
	};

	userVariable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserVariableContext);
	    } else {
	        return this.getTypedRuleContext(UserVariableContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFieldOrVariableList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplaceStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_replaceStatement;
    }

	REPLACE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	insertFromConstructor() {
	    return this.getTypedRuleContext(InsertFromConstructorContext,0);
	};

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	updateList() {
	    return this.getTypedRuleContext(UpdateListContext,0);
	};

	insertQueryExpression() {
	    return this.getTypedRuleContext(InsertQueryExpressionContext,0);
	};

	INTO_SYMBOL() {
	    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	};

	usePartition() {
	    return this.getTypedRuleContext(UsePartitionContext,0);
	};

	LOW_PRIORITY_SYMBOL() {
	    return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
	};

	DELAYED_SYMBOL() {
	    return this.getToken(MySQLParser.DELAYED_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitReplaceStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_selectStatement;
    }

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	lockingClauseList() {
	    return this.getTypedRuleContext(LockingClauseListContext,0);
	};

	queryExpressionParens() {
	    return this.getTypedRuleContext(QueryExpressionParensContext,0);
	};

	selectStatementWithInto() {
	    return this.getTypedRuleContext(SelectStatementWithIntoContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSelectStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStatementWithIntoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_selectStatementWithInto;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	selectStatementWithInto() {
	    return this.getTypedRuleContext(SelectStatementWithIntoContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	intoClause() {
	    return this.getTypedRuleContext(IntoClauseContext,0);
	};

	lockingClauseList() {
	    return this.getTypedRuleContext(LockingClauseListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSelectStatementWithInto(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_queryExpression;
    }

	queryExpressionBody() {
	    return this.getTypedRuleContext(QueryExpressionBodyContext,0);
	};

	queryExpressionParens() {
	    return this.getTypedRuleContext(QueryExpressionParensContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	procedureAnalyseClause() {
	    return this.getTypedRuleContext(ProcedureAnalyseClauseContext,0);
	};

	orderClause() {
	    return this.getTypedRuleContext(OrderClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitQueryExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryExpressionBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_queryExpressionBody;
    }

	queryPrimary = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryPrimaryContext);
	    } else {
	        return this.getTypedRuleContext(QueryPrimaryContext,i);
	    }
	};

	queryExpressionParens = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryExpressionParensContext);
	    } else {
	        return this.getTypedRuleContext(QueryExpressionParensContext,i);
	    }
	};

	UNION_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.UNION_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.UNION_SYMBOL, i);
	    }
	};


	unionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UnionOptionContext);
	    } else {
	        return this.getTypedRuleContext(UnionOptionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitQueryExpressionBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryExpressionParensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_queryExpressionParens;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	queryExpressionParens() {
	    return this.getTypedRuleContext(QueryExpressionParensContext,0);
	};

	queryExpression() {
	    return this.getTypedRuleContext(QueryExpressionContext,0);
	};

	lockingClauseList() {
	    return this.getTypedRuleContext(LockingClauseListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitQueryExpressionParens(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryPrimaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_queryPrimary;
    }

	querySpecification() {
	    return this.getTypedRuleContext(QuerySpecificationContext,0);
	};

	tableValueConstructor() {
	    return this.getTypedRuleContext(TableValueConstructorContext,0);
	};

	explicitTable() {
	    return this.getTypedRuleContext(ExplicitTableContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitQueryPrimary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuerySpecificationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_querySpecification;
    }

	SELECT_SYMBOL() {
	    return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
	};

	selectItemList() {
	    return this.getTypedRuleContext(SelectItemListContext,0);
	};

	selectOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectOptionContext);
	    } else {
	        return this.getTypedRuleContext(SelectOptionContext,i);
	    }
	};

	intoClause() {
	    return this.getTypedRuleContext(IntoClauseContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	windowClause() {
	    return this.getTypedRuleContext(WindowClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitQuerySpecification(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubqueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_subquery;
    }

	queryExpressionParens() {
	    return this.getTypedRuleContext(QueryExpressionParensContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSubquery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QuerySpecOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_querySpecOption;
    }

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	DISTINCT_SYMBOL() {
	    return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
	};

	STRAIGHT_JOIN_SYMBOL() {
	    return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
	};

	HIGH_PRIORITY_SYMBOL() {
	    return this.getToken(MySQLParser.HIGH_PRIORITY_SYMBOL, 0);
	};

	SQL_SMALL_RESULT_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_SMALL_RESULT_SYMBOL, 0);
	};

	SQL_BIG_RESULT_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_BIG_RESULT_SYMBOL, 0);
	};

	SQL_BUFFER_RESULT_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
	};

	SQL_CALC_FOUND_ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_CALC_FOUND_ROWS_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitQuerySpecOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_limitClause;
    }

	LIMIT_SYMBOL() {
	    return this.getToken(MySQLParser.LIMIT_SYMBOL, 0);
	};

	limitOptions() {
	    return this.getTypedRuleContext(LimitOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLimitClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleLimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_simpleLimitClause;
    }

	LIMIT_SYMBOL() {
	    return this.getToken(MySQLParser.LIMIT_SYMBOL, 0);
	};

	limitOption() {
	    return this.getTypedRuleContext(LimitOptionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleLimitClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_limitOptions;
    }

	limitOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LimitOptionContext);
	    } else {
	        return this.getTypedRuleContext(LimitOptionContext,i);
	    }
	};

	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	OFFSET_SYMBOL() {
	    return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLimitOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_limitOption;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	PARAM_MARKER() {
	    return this.getToken(MySQLParser.PARAM_MARKER, 0);
	};

	ULONGLONG_NUMBER() {
	    return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
	};

	LONG_NUMBER() {
	    return this.getToken(MySQLParser.LONG_NUMBER, 0);
	};

	INT_NUMBER() {
	    return this.getToken(MySQLParser.INT_NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLimitOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntoClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_intoClause;
    }

	INTO_SYMBOL() {
	    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	};

	OUTFILE_SYMBOL() {
	    return this.getToken(MySQLParser.OUTFILE_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	DUMPFILE_SYMBOL() {
	    return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
	};

	textOrIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextOrIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(TextOrIdentifierContext,i);
	    }
	};

	userVariable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserVariableContext);
	    } else {
	        return this.getTypedRuleContext(UserVariableContext,i);
	    }
	};

	charsetClause() {
	    return this.getTypedRuleContext(CharsetClauseContext,0);
	};

	fieldsClause() {
	    return this.getTypedRuleContext(FieldsClauseContext,0);
	};

	linesClause() {
	    return this.getTypedRuleContext(LinesClauseContext,0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIntoClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureAnalyseClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_procedureAnalyseClause;
    }

	PROCEDURE_SYMBOL() {
	    return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
	};

	ANALYSE_SYMBOL() {
	    return this.getToken(MySQLParser.ANALYSE_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	INT_NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.INT_NUMBER);
	    } else {
	        return this.getToken(MySQLParser.INT_NUMBER, i);
	    }
	};


	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitProcedureAnalyseClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_havingClause;
    }

	HAVING_SYMBOL() {
	    return this.getToken(MySQLParser.HAVING_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitHavingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowClause;
    }

	WINDOW_SYMBOL() {
	    return this.getToken(MySQLParser.WINDOW_SYMBOL, 0);
	};

	windowDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WindowDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(WindowDefinitionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowDefinition;
    }

	windowName() {
	    return this.getTypedRuleContext(WindowNameContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	windowSpec() {
	    return this.getTypedRuleContext(WindowSpecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowSpecContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowSpec;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	windowSpecDetails() {
	    return this.getTypedRuleContext(WindowSpecDetailsContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowSpec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowSpecDetailsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowSpecDetails;
    }

	windowName() {
	    return this.getTypedRuleContext(WindowNameContext,0);
	};

	PARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	orderList() {
	    return this.getTypedRuleContext(OrderListContext,0);
	};

	orderClause() {
	    return this.getTypedRuleContext(OrderClauseContext,0);
	};

	windowFrameClause() {
	    return this.getTypedRuleContext(WindowFrameClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowSpecDetails(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowFrameClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowFrameClause;
    }

	windowFrameUnits() {
	    return this.getTypedRuleContext(WindowFrameUnitsContext,0);
	};

	windowFrameExtent() {
	    return this.getTypedRuleContext(WindowFrameExtentContext,0);
	};

	windowFrameExclusion() {
	    return this.getTypedRuleContext(WindowFrameExclusionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowFrameClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowFrameUnitsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowFrameUnits;
    }

	ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
	};

	RANGE_SYMBOL() {
	    return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
	};

	GROUPS_SYMBOL() {
	    return this.getToken(MySQLParser.GROUPS_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowFrameUnits(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowFrameExtentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowFrameExtent;
    }

	windowFrameStart() {
	    return this.getTypedRuleContext(WindowFrameStartContext,0);
	};

	windowFrameBetween() {
	    return this.getTypedRuleContext(WindowFrameBetweenContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowFrameExtent(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowFrameStartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowFrameStart;
    }

	UNBOUNDED_SYMBOL() {
	    return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
	};

	PRECEDING_SYMBOL() {
	    return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
	};

	ulonglong_number() {
	    return this.getTypedRuleContext(Ulonglong_numberContext,0);
	};

	PARAM_MARKER() {
	    return this.getToken(MySQLParser.PARAM_MARKER, 0);
	};

	INTERVAL_SYMBOL() {
	    return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	CURRENT_SYMBOL() {
	    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	};

	ROW_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowFrameStart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowFrameBetweenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowFrameBetween;
    }

	BETWEEN_SYMBOL() {
	    return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0);
	};

	windowFrameBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WindowFrameBoundContext);
	    } else {
	        return this.getTypedRuleContext(WindowFrameBoundContext,i);
	    }
	};

	AND_SYMBOL() {
	    return this.getToken(MySQLParser.AND_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowFrameBetween(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowFrameBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowFrameBound;
    }

	windowFrameStart() {
	    return this.getTypedRuleContext(WindowFrameStartContext,0);
	};

	UNBOUNDED_SYMBOL() {
	    return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
	};

	FOLLOWING_SYMBOL() {
	    return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
	};

	ulonglong_number() {
	    return this.getTypedRuleContext(Ulonglong_numberContext,0);
	};

	PARAM_MARKER() {
	    return this.getToken(MySQLParser.PARAM_MARKER, 0);
	};

	INTERVAL_SYMBOL() {
	    return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowFrameBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowFrameExclusionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowFrameExclusion;
    }

	EXCLUDE_SYMBOL() {
	    return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
	};

	CURRENT_SYMBOL() {
	    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	};

	ROW_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	};

	GROUP_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	};

	TIES_SYMBOL() {
	    return this.getToken(MySQLParser.TIES_SYMBOL, 0);
	};

	NO_SYMBOL() {
	    return this.getToken(MySQLParser.NO_SYMBOL, 0);
	};

	OTHERS_SYMBOL() {
	    return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowFrameExclusion(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_withClause;
    }

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	commonTableExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CommonTableExpressionContext);
	    } else {
	        return this.getTypedRuleContext(CommonTableExpressionContext,i);
	    }
	};

	RECURSIVE_SYMBOL() {
	    return this.getToken(MySQLParser.RECURSIVE_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWithClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommonTableExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_commonTableExpression;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	columnInternalRefList() {
	    return this.getTypedRuleContext(ColumnInternalRefListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCommonTableExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_groupByClause;
    }

	GROUP_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	orderList() {
	    return this.getTypedRuleContext(OrderListContext,0);
	};

	olapOption() {
	    return this.getTypedRuleContext(OlapOptionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGroupByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OlapOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_olapOption;
    }

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	ROLLUP_SYMBOL() {
	    return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
	};

	CUBE_SYMBOL() {
	    return this.getToken(MySQLParser.CUBE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOlapOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_orderClause;
    }

	ORDER_SYMBOL() {
	    return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	orderList() {
	    return this.getTypedRuleContext(OrderListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOrderClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DirectionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_direction;
    }

	ASC_SYMBOL() {
	    return this.getToken(MySQLParser.ASC_SYMBOL, 0);
	};

	DESC_SYMBOL() {
	    return this.getToken(MySQLParser.DESC_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDirection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fromClause;
    }

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	DUAL_SYMBOL() {
	    return this.getToken(MySQLParser.DUAL_SYMBOL, 0);
	};

	tableReferenceList() {
	    return this.getTypedRuleContext(TableReferenceListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFromClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableReferenceListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableReferenceList;
    }

	tableReference = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableReferenceContext);
	    } else {
	        return this.getTypedRuleContext(TableReferenceContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableReferenceList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableValueConstructorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableValueConstructor;
    }

	VALUES_SYMBOL() {
	    return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
	};

	rowValueExplicit = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RowValueExplicitContext);
	    } else {
	        return this.getTypedRuleContext(RowValueExplicitContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableValueConstructor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplicitTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_explicitTable;
    }

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExplicitTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RowValueExplicitContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_rowValueExplicit;
    }

	ROW_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	values() {
	    return this.getTypedRuleContext(ValuesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRowValueExplicit(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_selectOption;
    }

	querySpecOption() {
	    return this.getTypedRuleContext(QuerySpecOptionContext,0);
	};

	SQL_NO_CACHE_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
	};

	SQL_CACHE_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_CACHE_SYMBOL, 0);
	};

	MAX_STATEMENT_TIME_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSelectOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockingClauseListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_lockingClauseList;
    }

	lockingClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LockingClauseContext);
	    } else {
	        return this.getTypedRuleContext(LockingClauseContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLockingClauseList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_lockingClause;
    }

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	lockStrengh() {
	    return this.getTypedRuleContext(LockStrenghContext,0);
	};

	OF_SYMBOL() {
	    return this.getToken(MySQLParser.OF_SYMBOL, 0);
	};

	tableAliasRefList() {
	    return this.getTypedRuleContext(TableAliasRefListContext,0);
	};

	lockedRowAction() {
	    return this.getTypedRuleContext(LockedRowActionContext,0);
	};

	LOCK_SYMBOL() {
	    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	};

	IN_SYMBOL() {
	    return this.getToken(MySQLParser.IN_SYMBOL, 0);
	};

	SHARE_SYMBOL() {
	    return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
	};

	MODE_SYMBOL() {
	    return this.getToken(MySQLParser.MODE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLockingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockStrenghContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_lockStrengh;
    }

	UPDATE_SYMBOL() {
	    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	};

	SHARE_SYMBOL() {
	    return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLockStrengh(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockedRowActionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_lockedRowAction;
    }

	SKIP_SYMBOL() {
	    return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
	};

	LOCKED_SYMBOL() {
	    return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
	};

	NOWAIT_SYMBOL() {
	    return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLockedRowAction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectItemListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_selectItemList;
    }

	selectItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectItemContext);
	    } else {
	        return this.getTypedRuleContext(SelectItemContext,i);
	    }
	};

	MULT_OPERATOR() {
	    return this.getToken(MySQLParser.MULT_OPERATOR, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSelectItemList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_selectItem;
    }

	tableWild() {
	    return this.getTypedRuleContext(TableWildContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	selectAlias() {
	    return this.getTypedRuleContext(SelectAliasContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSelectItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_selectAlias;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSelectAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_whereClause;
    }

	WHERE_SYMBOL() {
	    return this.getToken(MySQLParser.WHERE_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableReference;
    }

	tableFactor() {
	    return this.getTypedRuleContext(TableFactorContext,0);
	};

	OPEN_CURLY_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
	};

	escapedTableReference() {
	    return this.getTypedRuleContext(EscapedTableReferenceContext,0);
	};

	CLOSE_CURLY_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
	};

	joinedTable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinedTableContext);
	    } else {
	        return this.getTypedRuleContext(JoinedTableContext,i);
	    }
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OJ_SYMBOL() {
	    return this.getToken(MySQLParser.OJ_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EscapedTableReferenceContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_escapedTableReference;
    }

	tableFactor() {
	    return this.getTypedRuleContext(TableFactorContext,0);
	};

	joinedTable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinedTableContext);
	    } else {
	        return this.getTypedRuleContext(JoinedTableContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitEscapedTableReference(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinedTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_joinedTable;
    }

	innerJoinType() {
	    return this.getTypedRuleContext(InnerJoinTypeContext,0);
	};

	tableReference() {
	    return this.getTypedRuleContext(TableReferenceContext,0);
	};

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	USING_SYMBOL() {
	    return this.getToken(MySQLParser.USING_SYMBOL, 0);
	};

	identifierListWithParentheses() {
	    return this.getTypedRuleContext(IdentifierListWithParenthesesContext,0);
	};

	outerJoinType() {
	    return this.getTypedRuleContext(OuterJoinTypeContext,0);
	};

	naturalJoinType() {
	    return this.getTypedRuleContext(NaturalJoinTypeContext,0);
	};

	tableFactor() {
	    return this.getTypedRuleContext(TableFactorContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitJoinedTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NaturalJoinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_naturalJoinType;
    }

	NATURAL_SYMBOL() {
	    return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
	};

	JOIN_SYMBOL() {
	    return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
	};

	INNER_SYMBOL() {
	    return this.getToken(MySQLParser.INNER_SYMBOL, 0);
	};

	LEFT_SYMBOL() {
	    return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
	};

	RIGHT_SYMBOL() {
	    return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
	};

	OUTER_SYMBOL() {
	    return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitNaturalJoinType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InnerJoinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_innerJoinType;
        this.type = null;
    }

	JOIN_SYMBOL() {
	    return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
	};

	INNER_SYMBOL() {
	    return this.getToken(MySQLParser.INNER_SYMBOL, 0);
	};

	CROSS_SYMBOL() {
	    return this.getToken(MySQLParser.CROSS_SYMBOL, 0);
	};

	STRAIGHT_JOIN_SYMBOL() {
	    return this.getToken(MySQLParser.STRAIGHT_JOIN_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInnerJoinType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OuterJoinTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_outerJoinType;
        this.type = null;
    }

	JOIN_SYMBOL() {
	    return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
	};

	LEFT_SYMBOL() {
	    return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
	};

	RIGHT_SYMBOL() {
	    return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
	};

	OUTER_SYMBOL() {
	    return this.getToken(MySQLParser.OUTER_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOuterJoinType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableFactorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableFactor;
    }

	singleTable() {
	    return this.getTypedRuleContext(SingleTableContext,0);
	};

	singleTableParens() {
	    return this.getTypedRuleContext(SingleTableParensContext,0);
	};

	derivedTable() {
	    return this.getTypedRuleContext(DerivedTableContext,0);
	};

	tableReferenceListParens() {
	    return this.getTypedRuleContext(TableReferenceListParensContext,0);
	};

	tableFunction() {
	    return this.getTypedRuleContext(TableFunctionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableFactor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_singleTable;
    }

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	usePartition() {
	    return this.getTypedRuleContext(UsePartitionContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	indexHintList() {
	    return this.getTypedRuleContext(IndexHintListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSingleTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SingleTableParensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_singleTableParens;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	singleTable() {
	    return this.getTypedRuleContext(SingleTableContext,0);
	};

	singleTableParens() {
	    return this.getTypedRuleContext(SingleTableParensContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSingleTableParens(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DerivedTableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_derivedTable;
    }

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	columnInternalRefList() {
	    return this.getTypedRuleContext(ColumnInternalRefListContext,0);
	};

	LATERAL_SYMBOL() {
	    return this.getToken(MySQLParser.LATERAL_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDerivedTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableReferenceListParensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableReferenceListParens;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	tableReferenceList() {
	    return this.getTypedRuleContext(TableReferenceListContext,0);
	};

	tableReferenceListParens() {
	    return this.getTypedRuleContext(TableReferenceListParensContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableReferenceListParens(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableFunction;
    }

	JSON_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.JSON_TABLE_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	columnsClause() {
	    return this.getTypedRuleContext(ColumnsClauseContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_columnsClause;
    }

	COLUMNS_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	jtColumn = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JtColumnContext);
	    } else {
	        return this.getTypedRuleContext(JtColumnContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitColumnsClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JtColumnContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_jtColumn;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	ORDINALITY_SYMBOL() {
	    return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	PATH_SYMBOL() {
	    return this.getToken(MySQLParser.PATH_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	collate() {
	    return this.getTypedRuleContext(CollateContext,0);
	};

	EXISTS_SYMBOL() {
	    return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
	};

	onEmptyOrError() {
	    return this.getTypedRuleContext(OnEmptyOrErrorContext,0);
	};

	NESTED_SYMBOL() {
	    return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
	};

	columnsClause() {
	    return this.getTypedRuleContext(ColumnsClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitJtColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OnEmptyOrErrorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_onEmptyOrError;
    }

	onEmpty() {
	    return this.getTypedRuleContext(OnEmptyContext,0);
	};

	onError() {
	    return this.getTypedRuleContext(OnErrorContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOnEmptyOrError(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OnEmptyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_onEmpty;
    }

	jtOnResponse() {
	    return this.getTypedRuleContext(JtOnResponseContext,0);
	};

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	EMPTY_SYMBOL() {
	    return this.getToken(MySQLParser.EMPTY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOnEmpty(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OnErrorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_onError;
    }

	jtOnResponse() {
	    return this.getTypedRuleContext(JtOnResponseContext,0);
	};

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	ERROR_SYMBOL() {
	    return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOnError(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JtOnResponseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_jtOnResponse;
    }

	ERROR_SYMBOL() {
	    return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
	};

	NULL_SYMBOL() {
	    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitJtOnResponse(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_unionOption;
    }

	DISTINCT_SYMBOL() {
	    return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUnionOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableAlias;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexHintListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexHintList;
    }

	indexHint = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexHintContext);
	    } else {
	        return this.getTypedRuleContext(IndexHintContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexHintList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexHintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexHint;
    }

	indexHintType() {
	    return this.getTypedRuleContext(IndexHintTypeContext,0);
	};

	keyOrIndex() {
	    return this.getTypedRuleContext(KeyOrIndexContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	indexList() {
	    return this.getTypedRuleContext(IndexListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	indexHintClause() {
	    return this.getTypedRuleContext(IndexHintClauseContext,0);
	};

	USE_SYMBOL() {
	    return this.getToken(MySQLParser.USE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexHint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexHintTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexHintType;
    }

	FORCE_SYMBOL() {
	    return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
	};

	IGNORE_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexHintType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyOrIndexContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_keyOrIndex;
    }

	KEY_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	};

	INDEX_SYMBOL() {
	    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitKeyOrIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintKeyTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_constraintKeyType;
    }

	PRIMARY_SYMBOL() {
	    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	};

	KEY_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	};

	UNIQUE_SYMBOL() {
	    return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
	};

	keyOrIndex() {
	    return this.getTypedRuleContext(KeyOrIndexContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitConstraintKeyType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexHintClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexHintClause;
    }

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	JOIN_SYMBOL() {
	    return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
	};

	ORDER_SYMBOL() {
	    return this.getToken(MySQLParser.ORDER_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	GROUP_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexHintClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexList;
    }

	indexListElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexListElementContext);
	    } else {
	        return this.getTypedRuleContext(IndexListElementContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexListElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexListElement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	PRIMARY_SYMBOL() {
	    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexListElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpdateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_updateStatement;
    }

	UPDATE_SYMBOL() {
	    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	};

	tableReferenceList() {
	    return this.getTypedRuleContext(TableReferenceListContext,0);
	};

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	updateList() {
	    return this.getTypedRuleContext(UpdateListContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	LOW_PRIORITY_SYMBOL() {
	    return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
	};

	IGNORE_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	orderClause() {
	    return this.getTypedRuleContext(OrderClauseContext,0);
	};

	simpleLimitClause() {
	    return this.getTypedRuleContext(SimpleLimitClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUpdateStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionOrLockingStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_transactionOrLockingStatement;
    }

	transactionStatement() {
	    return this.getTypedRuleContext(TransactionStatementContext,0);
	};

	savepointStatement() {
	    return this.getTypedRuleContext(SavepointStatementContext,0);
	};

	lockStatement() {
	    return this.getTypedRuleContext(LockStatementContext,0);
	};

	xaStatement() {
	    return this.getTypedRuleContext(XaStatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTransactionOrLockingStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_transactionStatement;
    }

	START_SYMBOL() {
	    return this.getToken(MySQLParser.START_SYMBOL, 0);
	};

	TRANSACTION_SYMBOL() {
	    return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
	};

	transactionCharacteristic = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TransactionCharacteristicContext);
	    } else {
	        return this.getTypedRuleContext(TransactionCharacteristicContext,i);
	    }
	};

	COMMIT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
	};

	WORK_SYMBOL() {
	    return this.getToken(MySQLParser.WORK_SYMBOL, 0);
	};

	AND_SYMBOL() {
	    return this.getToken(MySQLParser.AND_SYMBOL, 0);
	};

	CHAIN_SYMBOL() {
	    return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
	};

	RELEASE_SYMBOL() {
	    return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
	};

	NO_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.NO_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.NO_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTransactionStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BeginWorkContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_beginWork;
    }

	BEGIN_SYMBOL() {
	    return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
	};

	WORK_SYMBOL() {
	    return this.getToken(MySQLParser.WORK_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitBeginWork(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionCharacteristicContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_transactionCharacteristic;
    }

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	CONSISTENT_SYMBOL() {
	    return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
	};

	SNAPSHOT_SYMBOL() {
	    return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
	};

	READ_SYMBOL() {
	    return this.getToken(MySQLParser.READ_SYMBOL, 0);
	};

	WRITE_SYMBOL() {
	    return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
	};

	ONLY_SYMBOL() {
	    return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTransactionCharacteristic(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SavepointStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_savepointStatement;
    }

	SAVEPOINT_SYMBOL() {
	    return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	ROLLBACK_SYMBOL() {
	    return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
	};

	TO_SYMBOL() {
	    return this.getToken(MySQLParser.TO_SYMBOL, 0);
	};

	WORK_SYMBOL() {
	    return this.getToken(MySQLParser.WORK_SYMBOL, 0);
	};

	AND_SYMBOL() {
	    return this.getToken(MySQLParser.AND_SYMBOL, 0);
	};

	CHAIN_SYMBOL() {
	    return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
	};

	RELEASE_SYMBOL() {
	    return this.getToken(MySQLParser.RELEASE_SYMBOL, 0);
	};

	NO_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.NO_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.NO_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSavepointStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_lockStatement;
    }

	LOCK_SYMBOL() {
	    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	};

	lockItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LockItemContext);
	    } else {
	        return this.getTypedRuleContext(LockItemContext,i);
	    }
	};

	TABLES_SYMBOL() {
	    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	};

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	INSTANCE_SYMBOL() {
	    return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	BACKUP_SYMBOL() {
	    return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
	};

	UNLOCK_SYMBOL() {
	    return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLockStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_lockItem;
    }

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	lockOption() {
	    return this.getTypedRuleContext(LockOptionContext,0);
	};

	tableAlias() {
	    return this.getTypedRuleContext(TableAliasContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLockItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LockOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_lockOption;
    }

	READ_SYMBOL() {
	    return this.getToken(MySQLParser.READ_SYMBOL, 0);
	};

	LOCAL_SYMBOL() {
	    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	};

	WRITE_SYMBOL() {
	    return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
	};

	LOW_PRIORITY_SYMBOL() {
	    return this.getToken(MySQLParser.LOW_PRIORITY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLockOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XaStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_xaStatement;
    }

	XA_SYMBOL() {
	    return this.getToken(MySQLParser.XA_SYMBOL, 0);
	};

	xid() {
	    return this.getTypedRuleContext(XidContext,0);
	};

	END_SYMBOL() {
	    return this.getToken(MySQLParser.END_SYMBOL, 0);
	};

	PREPARE_SYMBOL() {
	    return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
	};

	COMMIT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
	};

	ROLLBACK_SYMBOL() {
	    return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
	};

	RECOVER_SYMBOL() {
	    return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
	};

	xaConvert() {
	    return this.getTypedRuleContext(XaConvertContext,0);
	};

	START_SYMBOL() {
	    return this.getToken(MySQLParser.START_SYMBOL, 0);
	};

	BEGIN_SYMBOL() {
	    return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
	};

	SUSPEND_SYMBOL() {
	    return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
	};

	ONE_SYMBOL() {
	    return this.getToken(MySQLParser.ONE_SYMBOL, 0);
	};

	PHASE_SYMBOL() {
	    return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
	};

	JOIN_SYMBOL() {
	    return this.getToken(MySQLParser.JOIN_SYMBOL, 0);
	};

	RESUME_SYMBOL() {
	    return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	MIGRATE_SYMBOL() {
	    return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitXaStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XaConvertContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_xaConvert;
    }

	CONVERT_SYMBOL() {
	    return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
	};

	XID_SYMBOL() {
	    return this.getToken(MySQLParser.XID_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitXaConvert(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class XidContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_xid;
    }

	textString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextStringContext);
	    } else {
	        return this.getTypedRuleContext(TextStringContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	ulong_number() {
	    return this.getTypedRuleContext(Ulong_numberContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitXid(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplicationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_replicationStatement;
    }

	PURGE_SYMBOL() {
	    return this.getToken(MySQLParser.PURGE_SYMBOL, 0);
	};

	LOGS_SYMBOL() {
	    return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	MASTER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	};

	TO_SYMBOL() {
	    return this.getToken(MySQLParser.TO_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	BEFORE_SYMBOL() {
	    return this.getToken(MySQLParser.BEFORE_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	changeMaster() {
	    return this.getTypedRuleContext(ChangeMasterContext,0);
	};

	RESET_SYMBOL() {
	    return this.getToken(MySQLParser.RESET_SYMBOL, 0);
	};

	resetOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ResetOptionContext);
	    } else {
	        return this.getTypedRuleContext(ResetOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	PERSIST_SYMBOL() {
	    return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	slave() {
	    return this.getTypedRuleContext(SlaveContext,0);
	};

	changeReplication() {
	    return this.getTypedRuleContext(ChangeReplicationContext,0);
	};

	replicationLoad() {
	    return this.getTypedRuleContext(ReplicationLoadContext,0);
	};

	groupReplication() {
	    return this.getTypedRuleContext(GroupReplicationContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitReplicationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResetOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_resetOption;
        this.option = null;
    }

	MASTER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	};

	masterResetOptions() {
	    return this.getTypedRuleContext(MasterResetOptionsContext,0);
	};

	CACHE_SYMBOL() {
	    return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
	};

	QUERY_SYMBOL() {
	    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	};

	SLAVE_SYMBOL() {
	    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	channel() {
	    return this.getTypedRuleContext(ChannelContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitResetOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MasterResetOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_masterResetOptions;
    }

	TO_SYMBOL() {
	    return this.getToken(MySQLParser.TO_SYMBOL, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	real_ulonglong_number() {
	    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitMasterResetOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplicationLoadContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_replicationLoad;
    }

	LOAD_SYMBOL() {
	    return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
	};

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	MASTER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	};

	DATA_SYMBOL() {
	    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	};

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitReplicationLoad(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChangeMasterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_changeMaster;
    }

	CHANGE_SYMBOL() {
	    return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
	};

	MASTER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	};

	TO_SYMBOL() {
	    return this.getToken(MySQLParser.TO_SYMBOL, 0);
	};

	changeMasterOptions() {
	    return this.getTypedRuleContext(ChangeMasterOptionsContext,0);
	};

	channel() {
	    return this.getTypedRuleContext(ChannelContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitChangeMaster(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChangeMasterOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_changeMasterOptions;
    }

	masterOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MasterOptionContext);
	    } else {
	        return this.getTypedRuleContext(MasterOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitChangeMasterOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MasterOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_masterOption;
    }

	MASTER_HOST_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	textStringNoLinebreak() {
	    return this.getTypedRuleContext(TextStringNoLinebreakContext,0);
	};

	NETWORK_NAMESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
	};

	MASTER_BIND_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_BIND_SYMBOL, 0);
	};

	MASTER_USER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
	};

	MASTER_PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
	};

	MASTER_PORT_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
	};

	ulong_number() {
	    return this.getTypedRuleContext(Ulong_numberContext,0);
	};

	MASTER_CONNECT_RETRY_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
	};

	MASTER_RETRY_COUNT_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
	};

	MASTER_DELAY_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
	};

	MASTER_SSL_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
	};

	MASTER_SSL_CA_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
	};

	MASTER_SSL_CAPATH_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
	};

	MASTER_TLS_VERSION_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
	};

	MASTER_SSL_CERT_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
	};

	MASTER_TLS_CIPHERSUITES_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
	};

	masterTlsCiphersuitesDef() {
	    return this.getTypedRuleContext(MasterTlsCiphersuitesDefContext,0);
	};

	MASTER_SSL_CIPHER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
	};

	MASTER_SSL_KEY_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
	};

	MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_VERIFY_SERVER_CERT_SYMBOL, 0);
	};

	MASTER_SSL_CRL_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	MASTER_SSL_CRLPATH_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
	};

	MASTER_PUBLIC_KEY_PATH_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
	};

	GET_MASTER_PUBLIC_KEY_SYMBOL() {
	    return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
	};

	MASTER_HEARTBEAT_PERIOD_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
	};

	IGNORE_SERVER_IDS_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
	};

	serverIdList() {
	    return this.getTypedRuleContext(ServerIdListContext,0);
	};

	MASTER_COMPRESSION_ALGORITHM_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
	};

	MASTER_AUTO_POSITION_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
	};

	PRIVILEGE_CHECKS_USER_SYMBOL() {
	    return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
	};

	privilegeCheckDef() {
	    return this.getTypedRuleContext(PrivilegeCheckDefContext,0);
	};

	REQUIRE_ROW_FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0);
	};

	REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() {
	    return this.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0);
	};

	tablePrimaryKeyCheckDef() {
	    return this.getTypedRuleContext(TablePrimaryKeyCheckDefContext,0);
	};

	masterFileDef() {
	    return this.getTypedRuleContext(MasterFileDefContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitMasterOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrivilegeCheckDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_privilegeCheckDef;
    }

	userIdentifierOrText() {
	    return this.getTypedRuleContext(UserIdentifierOrTextContext,0);
	};

	NULL_SYMBOL() {
	    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPrivilegeCheckDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablePrimaryKeyCheckDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tablePrimaryKeyCheckDef;
    }

	STREAM_SYMBOL() {
	    return this.getToken(MySQLParser.STREAM_SYMBOL, 0);
	};

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	OFF_SYMBOL() {
	    return this.getToken(MySQLParser.OFF_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTablePrimaryKeyCheckDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MasterTlsCiphersuitesDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_masterTlsCiphersuitesDef;
    }

	textStringNoLinebreak() {
	    return this.getTypedRuleContext(TextStringNoLinebreakContext,0);
	};

	NULL_SYMBOL() {
	    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitMasterTlsCiphersuitesDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class MasterFileDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_masterFileDef;
    }

	MASTER_LOG_FILE_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	textStringNoLinebreak() {
	    return this.getTypedRuleContext(TextStringNoLinebreakContext,0);
	};

	MASTER_LOG_POS_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
	};

	ulonglong_number() {
	    return this.getTypedRuleContext(Ulonglong_numberContext,0);
	};

	RELAY_LOG_FILE_SYMBOL() {
	    return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
	};

	RELAY_LOG_POS_SYMBOL() {
	    return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
	};

	ulong_number() {
	    return this.getTypedRuleContext(Ulong_numberContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitMasterFileDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ServerIdListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_serverIdList;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	ulong_number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ulong_numberContext);
	    } else {
	        return this.getTypedRuleContext(Ulong_numberContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitServerIdList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChangeReplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_changeReplication;
    }

	CHANGE_SYMBOL() {
	    return this.getToken(MySQLParser.CHANGE_SYMBOL, 0);
	};

	REPLICATION_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
	};

	FILTER_SYMBOL() {
	    return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
	};

	filterDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FilterDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(FilterDefinitionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	channel() {
	    return this.getTypedRuleContext(ChannelContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitChangeReplication(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilterDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_filterDefinition;
    }

	REPLICATE_DO_DB_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	filterDbList() {
	    return this.getTypedRuleContext(FilterDbListContext,0);
	};

	REPLICATE_IGNORE_DB_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
	};

	REPLICATE_DO_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
	};

	filterTableList() {
	    return this.getTypedRuleContext(FilterTableListContext,0);
	};

	REPLICATE_IGNORE_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
	};

	REPLICATE_WILD_DO_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
	};

	filterStringList() {
	    return this.getTypedRuleContext(FilterStringListContext,0);
	};

	REPLICATE_WILD_IGNORE_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
	};

	REPLICATE_REWRITE_DB_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
	};

	filterDbPairList() {
	    return this.getTypedRuleContext(FilterDbPairListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFilterDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilterDbListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_filterDbList;
    }

	schemaRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SchemaRefContext);
	    } else {
	        return this.getTypedRuleContext(SchemaRefContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFilterDbList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilterTableListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_filterTableList;
    }

	filterTableRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FilterTableRefContext);
	    } else {
	        return this.getTypedRuleContext(FilterTableRefContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFilterTableList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilterStringListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_filterStringList;
    }

	filterWildDbTableString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FilterWildDbTableStringContext);
	    } else {
	        return this.getTypedRuleContext(FilterWildDbTableStringContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFilterStringList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilterWildDbTableStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_filterWildDbTableString;
    }

	textStringNoLinebreak() {
	    return this.getTypedRuleContext(TextStringNoLinebreakContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFilterWildDbTableString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilterDbPairListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_filterDbPairList;
    }

	schemaIdentifierPair = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SchemaIdentifierPairContext);
	    } else {
	        return this.getTypedRuleContext(SchemaIdentifierPairContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFilterDbPairList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SlaveContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_slave;
    }

	START_SYMBOL() {
	    return this.getToken(MySQLParser.START_SYMBOL, 0);
	};

	SLAVE_SYMBOL() {
	    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	};

	slaveConnectionOptions() {
	    return this.getTypedRuleContext(SlaveConnectionOptionsContext,0);
	};

	slaveThreadOptions() {
	    return this.getTypedRuleContext(SlaveThreadOptionsContext,0);
	};

	UNTIL_SYMBOL() {
	    return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
	};

	slaveUntilOptions() {
	    return this.getTypedRuleContext(SlaveUntilOptionsContext,0);
	};

	channel() {
	    return this.getTypedRuleContext(ChannelContext,0);
	};

	STOP_SYMBOL() {
	    return this.getToken(MySQLParser.STOP_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSlave(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SlaveUntilOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_slaveUntilOptions;
    }

	masterFileDef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(MasterFileDefContext);
	    } else {
	        return this.getTypedRuleContext(MasterFileDefContext,i);
	    }
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	SQL_AFTER_MTS_GAPS_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
	};

	SQL_BEFORE_GTIDS_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
	};

	SQL_AFTER_GTIDS_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSlaveUntilOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SlaveConnectionOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_slaveConnectionOptions;
    }

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	EQUAL_OPERATOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.EQUAL_OPERATOR);
	    } else {
	        return this.getToken(MySQLParser.EQUAL_OPERATOR, i);
	    }
	};


	textString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextStringContext);
	    } else {
	        return this.getTypedRuleContext(TextStringContext,i);
	    }
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	};

	DEFAULT_AUTH_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
	};

	PLUGIN_DIR_SYMBOL() {
	    return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSlaveConnectionOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SlaveThreadOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_slaveThreadOptions;
    }

	slaveThreadOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SlaveThreadOptionContext);
	    } else {
	        return this.getTypedRuleContext(SlaveThreadOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSlaveThreadOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SlaveThreadOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_slaveThreadOption;
    }

	RELAY_THREAD_SYMBOL() {
	    return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
	};

	SQL_THREAD_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSlaveThreadOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupReplicationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_groupReplication;
    }

	GROUP_REPLICATION_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
	};

	START_SYMBOL() {
	    return this.getToken(MySQLParser.START_SYMBOL, 0);
	};

	STOP_SYMBOL() {
	    return this.getToken(MySQLParser.STOP_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGroupReplication(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PreparedStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_preparedStatement;
        this.type = null;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	PREPARE_SYMBOL() {
	    return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	userVariable() {
	    return this.getTypedRuleContext(UserVariableContext,0);
	};

	executeStatement() {
	    return this.getTypedRuleContext(ExecuteStatementContext,0);
	};

	DEALLOCATE_SYMBOL() {
	    return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
	};

	DROP_SYMBOL() {
	    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPreparedStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExecuteStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_executeStatement;
    }

	EXECUTE_SYMBOL() {
	    return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	USING_SYMBOL() {
	    return this.getToken(MySQLParser.USING_SYMBOL, 0);
	};

	executeVarList() {
	    return this.getTypedRuleContext(ExecuteVarListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExecuteStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExecuteVarListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_executeVarList;
    }

	userVariable = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserVariableContext);
	    } else {
	        return this.getTypedRuleContext(UserVariableContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExecuteVarList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CloneStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_cloneStatement;
    }

	CLONE_SYMBOL() {
	    return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
	};

	LOCAL_SYMBOL() {
	    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	};

	DATA_SYMBOL() {
	    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	};

	DIRECTORY_SYMBOL() {
	    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	REMOTE_SYMBOL() {
	    return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
	};

	INSTANCE_SYMBOL() {
	    return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
	};

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	COLON_SYMBOL() {
	    return this.getToken(MySQLParser.COLON_SYMBOL, 0);
	};

	ulong_number() {
	    return this.getTypedRuleContext(Ulong_numberContext,0);
	};

	IDENTIFIED_SYMBOL() {
	    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	REPLICATION_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
	};

	dataDirSSL() {
	    return this.getTypedRuleContext(DataDirSSLContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCloneStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataDirSSLContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dataDirSSL;
    }

	ssl() {
	    return this.getTypedRuleContext(SslContext,0);
	};

	DATA_SYMBOL() {
	    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	};

	DIRECTORY_SYMBOL() {
	    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDataDirSSL(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SslContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_ssl;
    }

	REQUIRE_SYMBOL() {
	    return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
	};

	SSL_SYMBOL() {
	    return this.getToken(MySQLParser.SSL_SYMBOL, 0);
	};

	NO_SYMBOL() {
	    return this.getToken(MySQLParser.NO_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSsl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AccountManagementStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_accountManagementStatement;
    }

	alterUser() {
	    return this.getTypedRuleContext(AlterUserContext,0);
	};

	createUser() {
	    return this.getTypedRuleContext(CreateUserContext,0);
	};

	dropUser() {
	    return this.getTypedRuleContext(DropUserContext,0);
	};

	grant() {
	    return this.getTypedRuleContext(GrantContext,0);
	};

	renameUser() {
	    return this.getTypedRuleContext(RenameUserContext,0);
	};

	revoke() {
	    return this.getTypedRuleContext(RevokeContext,0);
	};

	setRole() {
	    return this.getTypedRuleContext(SetRoleContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAccountManagementStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterUser;
    }

	ALTER_SYMBOL() {
	    return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	alterUserTail() {
	    return this.getTypedRuleContext(AlterUserTailContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterUser(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterUserTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterUserTail;
    }

	createUserTail() {
	    return this.getTypedRuleContext(CreateUserTailContext,0);
	};

	createUserList() {
	    return this.getTypedRuleContext(CreateUserListContext,0);
	};

	alterUserList() {
	    return this.getTypedRuleContext(AlterUserListContext,0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	IDENTIFIED_SYMBOL() {
	    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	replacePassword() {
	    return this.getTypedRuleContext(ReplacePasswordContext,0);
	};

	retainCurrentPassword() {
	    return this.getTypedRuleContext(RetainCurrentPasswordContext,0);
	};

	discardOldPassword() {
	    return this.getTypedRuleContext(DiscardOldPasswordContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	ROLE_SYMBOL() {
	    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	NONE_SYMBOL() {
	    return this.getToken(MySQLParser.NONE_SYMBOL, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	RANDOM_SYMBOL() {
	    return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	};

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	FAILED_LOGIN_ATTEMPTS_SYMBOL() {
	    return this.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	PASSWORD_LOCK_TIME_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0);
	};

	UNBOUNDED_SYMBOL() {
	    return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterUserTail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_userFunction;
    }

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUserFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createUser;
    }

	CREATE_SYMBOL() {
	    return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	createUserList() {
	    return this.getTypedRuleContext(CreateUserListContext,0);
	};

	defaultRoleClause() {
	    return this.getTypedRuleContext(DefaultRoleClauseContext,0);
	};

	createUserTail() {
	    return this.getTypedRuleContext(CreateUserTailContext,0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateUser(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateUserTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createUserTail;
    }

	requireClause() {
	    return this.getTypedRuleContext(RequireClauseContext,0);
	};

	connectOptions() {
	    return this.getTypedRuleContext(ConnectOptionsContext,0);
	};

	accountLockPasswordExpireOptions = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AccountLockPasswordExpireOptionsContext);
	    } else {
	        return this.getTypedRuleContext(AccountLockPasswordExpireOptionsContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateUserTail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultRoleClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_defaultRoleClause;
    }

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	ROLE_SYMBOL() {
	    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDefaultRoleClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RequireClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_requireClause;
        this.option = null;
    }

	REQUIRE_SYMBOL() {
	    return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
	};

	requireList() {
	    return this.getTypedRuleContext(RequireListContext,0);
	};

	SSL_SYMBOL() {
	    return this.getToken(MySQLParser.SSL_SYMBOL, 0);
	};

	X509_SYMBOL() {
	    return this.getToken(MySQLParser.X509_SYMBOL, 0);
	};

	NONE_SYMBOL() {
	    return this.getToken(MySQLParser.NONE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRequireClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConnectOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_connectOptions;
    }

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	MAX_QUERIES_PER_HOUR_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, i);
	    }
	};


	ulong_number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ulong_numberContext);
	    } else {
	        return this.getTypedRuleContext(Ulong_numberContext,i);
	    }
	};

	MAX_UPDATES_PER_HOUR_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, i);
	    }
	};


	MAX_CONNECTIONS_PER_HOUR_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, i);
	    }
	};


	MAX_USER_CONNECTIONS_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitConnectOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AccountLockPasswordExpireOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_accountLockPasswordExpireOptions;
    }

	ACCOUNT_SYMBOL() {
	    return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
	};

	LOCK_SYMBOL() {
	    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	};

	UNLOCK_SYMBOL() {
	    return this.getToken(MySQLParser.UNLOCK_SYMBOL, 0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	};

	EXPIRE_SYMBOL() {
	    return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
	};

	HISTORY_SYMBOL() {
	    return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
	};

	REUSE_SYMBOL() {
	    return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
	};

	INTERVAL_SYMBOL() {
	    return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
	};

	REQUIRE_SYMBOL() {
	    return this.getToken(MySQLParser.REQUIRE_SYMBOL, 0);
	};

	CURRENT_SYMBOL() {
	    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	DAY_SYMBOL() {
	    return this.getToken(MySQLParser.DAY_SYMBOL, 0);
	};

	NEVER_SYMBOL() {
	    return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
	};

	OPTIONAL_SYMBOL() {
	    return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAccountLockPasswordExpireOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropUser;
    }

	DROP_SYMBOL() {
	    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	userList() {
	    return this.getTypedRuleContext(UserListContext,0);
	};

	ifExists() {
	    return this.getTypedRuleContext(IfExistsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropUser(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_grant;
    }

	GRANT_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.GRANT_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.GRANT_SYMBOL, i);
	    }
	};


	roleOrPrivilegesList() {
	    return this.getTypedRuleContext(RoleOrPrivilegesListContext,0);
	};

	TO_SYMBOL() {
	    return this.getToken(MySQLParser.TO_SYMBOL, 0);
	};

	userList() {
	    return this.getTypedRuleContext(UserListContext,0);
	};

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	grantIdentifier() {
	    return this.getTypedRuleContext(GrantIdentifierContext,0);
	};

	grantTargetList() {
	    return this.getTypedRuleContext(GrantTargetListContext,0);
	};

	PROXY_SYMBOL() {
	    return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	ADMIN_SYMBOL() {
	    return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
	};

	OPTION_SYMBOL() {
	    return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
	};

	aclType() {
	    return this.getTypedRuleContext(AclTypeContext,0);
	};

	versionedRequireClause() {
	    return this.getTypedRuleContext(VersionedRequireClauseContext,0);
	};

	grantOptions() {
	    return this.getTypedRuleContext(GrantOptionsContext,0);
	};

	grantAs() {
	    return this.getTypedRuleContext(GrantAsContext,0);
	};

	PRIVILEGES_SYMBOL() {
	    return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGrant(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantTargetListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_grantTargetList;
    }

	createUserList() {
	    return this.getTypedRuleContext(CreateUserListContext,0);
	};

	userList() {
	    return this.getTypedRuleContext(UserListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGrantTargetList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_grantOptions;
    }

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	grantOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GrantOptionContext);
	    } else {
	        return this.getTypedRuleContext(GrantOptionContext,i);
	    }
	};

	GRANT_SYMBOL() {
	    return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
	};

	OPTION_SYMBOL() {
	    return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGrantOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExceptRoleListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_exceptRoleList;
    }

	EXCEPT_SYMBOL() {
	    return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExceptRoleList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithRolesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_withRoles;
    }

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	ROLE_SYMBOL() {
	    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	};

	roleList() {
	    return this.getTypedRuleContext(RoleListContext,0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	NONE_SYMBOL() {
	    return this.getToken(MySQLParser.NONE_SYMBOL, 0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	exceptRoleList() {
	    return this.getTypedRuleContext(ExceptRoleListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWithRoles(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantAsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_grantAs;
    }

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	withRoles() {
	    return this.getTypedRuleContext(WithRolesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGrantAs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VersionedRequireClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_versionedRequireClause;
    }

	requireClause() {
	    return this.getTypedRuleContext(RequireClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitVersionedRequireClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RenameUserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_renameUser;
    }

	RENAME_SYMBOL() {
	    return this.getToken(MySQLParser.RENAME_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	user = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserContext);
	    } else {
	        return this.getTypedRuleContext(UserContext,i);
	    }
	};

	TO_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.TO_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.TO_SYMBOL, i);
	    }
	};


	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRenameUser(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RevokeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_revoke;
    }

	REVOKE_SYMBOL() {
	    return this.getToken(MySQLParser.REVOKE_SYMBOL, 0);
	};

	roleOrPrivilegesList() {
	    return this.getTypedRuleContext(RoleOrPrivilegesListContext,0);
	};

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	userList() {
	    return this.getTypedRuleContext(UserListContext,0);
	};

	onTypeTo() {
	    return this.getTypedRuleContext(OnTypeToContext,0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	PROXY_SYMBOL() {
	    return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
	};

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	grantIdentifier() {
	    return this.getTypedRuleContext(GrantIdentifierContext,0);
	};

	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	GRANT_SYMBOL() {
	    return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
	};

	OPTION_SYMBOL() {
	    return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
	};

	PRIVILEGES_SYMBOL() {
	    return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
	};

	aclType() {
	    return this.getTypedRuleContext(AclTypeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRevoke(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OnTypeToContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_onTypeTo;
    }

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	grantIdentifier() {
	    return this.getTypedRuleContext(GrantIdentifierContext,0);
	};

	aclType() {
	    return this.getTypedRuleContext(AclTypeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOnTypeTo(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AclTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_aclType;
    }

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	FUNCTION_SYMBOL() {
	    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	};

	PROCEDURE_SYMBOL() {
	    return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAclType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleOrPrivilegesListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_roleOrPrivilegesList;
    }

	roleOrPrivilege = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoleOrPrivilegeContext);
	    } else {
	        return this.getTypedRuleContext(RoleOrPrivilegeContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRoleOrPrivilegesList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleOrPrivilegeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_roleOrPrivilege;
        this.object = null;
    }

	roleIdentifierOrText() {
	    return this.getTypedRuleContext(RoleIdentifierOrTextContext,0);
	};

	AT_TEXT_SUFFIX() {
	    return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
	};

	AT_SIGN_SYMBOL() {
	    return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	columnInternalRefList() {
	    return this.getTypedRuleContext(ColumnInternalRefListContext,0);
	};

	SELECT_SYMBOL() {
	    return this.getToken(MySQLParser.SELECT_SYMBOL, 0);
	};

	INSERT_SYMBOL() {
	    return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
	};

	UPDATE_SYMBOL() {
	    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	};

	REFERENCES_SYMBOL() {
	    return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
	};

	DELETE_SYMBOL() {
	    return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
	};

	USAGE_SYMBOL() {
	    return this.getToken(MySQLParser.USAGE_SYMBOL, 0);
	};

	INDEX_SYMBOL() {
	    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	};

	DROP_SYMBOL() {
	    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	};

	EXECUTE_SYMBOL() {
	    return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
	};

	RELOAD_SYMBOL() {
	    return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
	};

	SHUTDOWN_SYMBOL() {
	    return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
	};

	PROCESS_SYMBOL() {
	    return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
	};

	FILE_SYMBOL() {
	    return this.getToken(MySQLParser.FILE_SYMBOL, 0);
	};

	PROXY_SYMBOL() {
	    return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
	};

	SUPER_SYMBOL() {
	    return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
	};

	EVENT_SYMBOL() {
	    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	};

	TRIGGER_SYMBOL() {
	    return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
	};

	GRANT_SYMBOL() {
	    return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
	};

	OPTION_SYMBOL() {
	    return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
	};

	SHOW_SYMBOL() {
	    return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
	};

	DATABASES_SYMBOL() {
	    return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
	};

	CREATE_SYMBOL() {
	    return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
	};

	TEMPORARY_SYMBOL() {
	    return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
	};

	TABLES_SYMBOL() {
	    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	};

	ROUTINE_SYMBOL() {
	    return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
	};

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	VIEW_SYMBOL() {
	    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	};

	LOCK_SYMBOL() {
	    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	};

	REPLICATION_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
	};

	CLIENT_SYMBOL() {
	    return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
	};

	SLAVE_SYMBOL() {
	    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	};

	ALTER_SYMBOL() {
	    return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
	};

	ROLE_SYMBOL() {
	    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRoleOrPrivilege(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_grantIdentifier;
    }

	MULT_OPERATOR = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.MULT_OPERATOR);
	    } else {
	        return this.getToken(MySQLParser.MULT_OPERATOR, i);
	    }
	};


	DOT_SYMBOL() {
	    return this.getToken(MySQLParser.DOT_SYMBOL, 0);
	};

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGrantIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RequireListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_requireList;
    }

	requireListElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RequireListElementContext);
	    } else {
	        return this.getTypedRuleContext(RequireListElementContext,i);
	    }
	};

	AND_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.AND_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.AND_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRequireList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RequireListElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_requireListElement;
        this.element = null;
    }

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	CIPHER_SYMBOL() {
	    return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
	};

	ISSUER_SYMBOL() {
	    return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
	};

	SUBJECT_SYMBOL() {
	    return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRequireListElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GrantOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_grantOption;
        this.option = null;
    }

	OPTION_SYMBOL() {
	    return this.getToken(MySQLParser.OPTION_SYMBOL, 0);
	};

	GRANT_SYMBOL() {
	    return this.getToken(MySQLParser.GRANT_SYMBOL, 0);
	};

	ulong_number() {
	    return this.getTypedRuleContext(Ulong_numberContext,0);
	};

	MAX_QUERIES_PER_HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
	};

	MAX_UPDATES_PER_HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
	};

	MAX_CONNECTIONS_PER_HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
	};

	MAX_USER_CONNECTIONS_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGrantOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetRoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_setRole;
    }

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	ROLE_SYMBOL() {
	    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	};

	roleList = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoleListContext);
	    } else {
	        return this.getTypedRuleContext(RoleListContext,i);
	    }
	};

	NONE_SYMBOL() {
	    return this.getToken(MySQLParser.NONE_SYMBOL, 0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	TO_SYMBOL() {
	    return this.getToken(MySQLParser.TO_SYMBOL, 0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	EXCEPT_SYMBOL() {
	    return this.getToken(MySQLParser.EXCEPT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSetRole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_roleList;
    }

	role = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RoleContext);
	    } else {
	        return this.getTypedRuleContext(RoleContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRoleList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_role;
    }

	roleIdentifierOrText() {
	    return this.getTypedRuleContext(RoleIdentifierOrTextContext,0);
	};

	AT_SIGN_SYMBOL() {
	    return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	AT_TEXT_SUFFIX() {
	    return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRole(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableAdministrationStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableAdministrationStatement;
        this.type = null;
    }

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	tableRefList() {
	    return this.getTypedRuleContext(TableRefListContext,0);
	};

	ANALYZE_SYMBOL() {
	    return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
	};

	noWriteToBinLog() {
	    return this.getTypedRuleContext(NoWriteToBinLogContext,0);
	};

	histogram() {
	    return this.getTypedRuleContext(HistogramContext,0);
	};

	CHECK_SYMBOL() {
	    return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
	};

	checkOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CheckOptionContext);
	    } else {
	        return this.getTypedRuleContext(CheckOptionContext,i);
	    }
	};

	CHECKSUM_SYMBOL() {
	    return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
	};

	QUICK_SYMBOL() {
	    return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
	};

	EXTENDED_SYMBOL() {
	    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	};

	OPTIMIZE_SYMBOL() {
	    return this.getToken(MySQLParser.OPTIMIZE_SYMBOL, 0);
	};

	REPAIR_SYMBOL() {
	    return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
	};

	repairType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RepairTypeContext);
	    } else {
	        return this.getTypedRuleContext(RepairTypeContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableAdministrationStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HistogramContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_histogram;
    }

	UPDATE_SYMBOL() {
	    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	};

	HISTOGRAM_SYMBOL() {
	    return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
	};

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	INT_NUMBER() {
	    return this.getToken(MySQLParser.INT_NUMBER, 0);
	};

	BUCKETS_SYMBOL() {
	    return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
	};

	DROP_SYMBOL() {
	    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitHistogram(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CheckOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_checkOption;
    }

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	UPGRADE_SYMBOL() {
	    return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
	};

	QUICK_SYMBOL() {
	    return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
	};

	FAST_SYMBOL() {
	    return this.getToken(MySQLParser.FAST_SYMBOL, 0);
	};

	MEDIUM_SYMBOL() {
	    return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
	};

	EXTENDED_SYMBOL() {
	    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	};

	CHANGED_SYMBOL() {
	    return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCheckOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RepairTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_repairType;
    }

	QUICK_SYMBOL() {
	    return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
	};

	EXTENDED_SYMBOL() {
	    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	};

	USE_FRM_SYMBOL() {
	    return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRepairType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InstallUninstallStatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_installUninstallStatment;
        this.action = null;
        this.type = null;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SONAME_SYMBOL() {
	    return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	INSTALL_SYMBOL() {
	    return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
	};

	PLUGIN_SYMBOL() {
	    return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
	};

	textStringLiteralList() {
	    return this.getTypedRuleContext(TextStringLiteralListContext,0);
	};

	COMPONENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
	};

	pluginRef() {
	    return this.getTypedRuleContext(PluginRefContext,0);
	};

	UNINSTALL_SYMBOL() {
	    return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
	};

	componentRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ComponentRefContext);
	    } else {
	        return this.getTypedRuleContext(ComponentRefContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInstallUninstallStatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_setStatement;
    }

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	startOptionValueList() {
	    return this.getTypedRuleContext(StartOptionValueListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSetStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StartOptionValueListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_startOptionValueList;
    }

	optionValueNoOptionType() {
	    return this.getTypedRuleContext(OptionValueNoOptionTypeContext,0);
	};

	optionValueListContinued() {
	    return this.getTypedRuleContext(OptionValueListContinuedContext,0);
	};

	TRANSACTION_SYMBOL() {
	    return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
	};

	transactionCharacteristics() {
	    return this.getTypedRuleContext(TransactionCharacteristicsContext,0);
	};

	optionType() {
	    return this.getTypedRuleContext(OptionTypeContext,0);
	};

	startOptionValueListFollowingOptionType() {
	    return this.getTypedRuleContext(StartOptionValueListFollowingOptionTypeContext,0);
	};

	PASSWORD_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.PASSWORD_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.PASSWORD_SYMBOL, i);
	    }
	};


	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	OLD_PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	replacePassword() {
	    return this.getTypedRuleContext(ReplacePasswordContext,0);
	};

	retainCurrentPassword() {
	    return this.getTypedRuleContext(RetainCurrentPasswordContext,0);
	};

	TO_SYMBOL() {
	    return this.getToken(MySQLParser.TO_SYMBOL, 0);
	};

	RANDOM_SYMBOL() {
	    return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitStartOptionValueList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionCharacteristicsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_transactionCharacteristics;
    }

	transactionAccessMode() {
	    return this.getTypedRuleContext(TransactionAccessModeContext,0);
	};

	isolationLevel() {
	    return this.getTypedRuleContext(IsolationLevelContext,0);
	};

	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTransactionCharacteristics(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TransactionAccessModeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_transactionAccessMode;
    }

	READ_SYMBOL() {
	    return this.getToken(MySQLParser.READ_SYMBOL, 0);
	};

	WRITE_SYMBOL() {
	    return this.getToken(MySQLParser.WRITE_SYMBOL, 0);
	};

	ONLY_SYMBOL() {
	    return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTransactionAccessMode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IsolationLevelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_isolationLevel;
    }

	ISOLATION_SYMBOL() {
	    return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
	};

	LEVEL_SYMBOL() {
	    return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
	};

	REPEATABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
	};

	READ_SYMBOL() {
	    return this.getToken(MySQLParser.READ_SYMBOL, 0);
	};

	SERIALIZABLE_SYMBOL() {
	    return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
	};

	COMMITTED_SYMBOL() {
	    return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
	};

	UNCOMMITTED_SYMBOL() {
	    return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIsolationLevel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptionValueListContinuedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_optionValueListContinued;
    }

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	optionValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OptionValueContext);
	    } else {
	        return this.getTypedRuleContext(OptionValueContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOptionValueListContinued(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptionValueNoOptionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_optionValueNoOptionType;
    }

	internalVariableName() {
	    return this.getTypedRuleContext(InternalVariableNameContext,0);
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	setExprOrDefault() {
	    return this.getTypedRuleContext(SetExprOrDefaultContext,0);
	};

	charsetClause() {
	    return this.getTypedRuleContext(CharsetClauseContext,0);
	};

	userVariable() {
	    return this.getTypedRuleContext(UserVariableContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	setSystemVariable() {
	    return this.getTypedRuleContext(SetSystemVariableContext,0);
	};

	NAMES_SYMBOL() {
	    return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	collate() {
	    return this.getTypedRuleContext(CollateContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOptionValueNoOptionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptionValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_optionValue;
    }

	optionType() {
	    return this.getTypedRuleContext(OptionTypeContext,0);
	};

	internalVariableName() {
	    return this.getTypedRuleContext(InternalVariableNameContext,0);
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	setExprOrDefault() {
	    return this.getTypedRuleContext(SetExprOrDefaultContext,0);
	};

	optionValueNoOptionType() {
	    return this.getTypedRuleContext(OptionValueNoOptionTypeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOptionValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetSystemVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_setSystemVariable;
    }

	AT_AT_SIGN_SYMBOL() {
	    return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
	};

	internalVariableName() {
	    return this.getTypedRuleContext(InternalVariableNameContext,0);
	};

	setVarIdentType() {
	    return this.getTypedRuleContext(SetVarIdentTypeContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSetSystemVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StartOptionValueListFollowingOptionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_startOptionValueListFollowingOptionType;
    }

	optionValueFollowingOptionType() {
	    return this.getTypedRuleContext(OptionValueFollowingOptionTypeContext,0);
	};

	optionValueListContinued() {
	    return this.getTypedRuleContext(OptionValueListContinuedContext,0);
	};

	TRANSACTION_SYMBOL() {
	    return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
	};

	transactionCharacteristics() {
	    return this.getTypedRuleContext(TransactionCharacteristicsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitStartOptionValueListFollowingOptionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptionValueFollowingOptionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_optionValueFollowingOptionType;
    }

	internalVariableName() {
	    return this.getTypedRuleContext(InternalVariableNameContext,0);
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	setExprOrDefault() {
	    return this.getTypedRuleContext(SetExprOrDefaultContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOptionValueFollowingOptionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetExprOrDefaultContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_setExprOrDefault;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	ROW_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	};

	SYSTEM_SYMBOL() {
	    return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSetExprOrDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_showStatement;
        this.value = null;
        this.object = null;
    }

	SHOW_SYMBOL() {
	    return this.getToken(MySQLParser.SHOW_SYMBOL, 0);
	};

	STATUS_SYMBOL() {
	    return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
	};

	TABLES_SYMBOL() {
	    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	EVENTS_SYMBOL() {
	    return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
	};

	fromOrIn() {
	    return this.getTypedRuleContext(FromOrInContext,0);
	};

	COUNT_SYMBOL() {
	    return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	MULT_OPERATOR() {
	    return this.getToken(MySQLParser.MULT_OPERATOR, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	charset() {
	    return this.getTypedRuleContext(CharsetContext,0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	USING_SYMBOL() {
	    return this.getToken(MySQLParser.USING_SYMBOL, 0);
	};

	userList() {
	    return this.getTypedRuleContext(UserListContext,0);
	};

	CODE_SYMBOL() {
	    return this.getToken(MySQLParser.CODE_SYMBOL, 0);
	};

	procedureRef() {
	    return this.getTypedRuleContext(ProcedureRefContext,0);
	};

	functionRef() {
	    return this.getTypedRuleContext(FunctionRefContext,0);
	};

	AUTHORS_SYMBOL() {
	    return this.getToken(MySQLParser.AUTHORS_SYMBOL, 0);
	};

	DATABASES_SYMBOL() {
	    return this.getToken(MySQLParser.DATABASES_SYMBOL, 0);
	};

	TRIGGERS_SYMBOL() {
	    return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
	};

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	OPEN_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
	};

	PLUGINS_SYMBOL() {
	    return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
	};

	ENGINE_SYMBOL() {
	    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	};

	MUTEX_SYMBOL() {
	    return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
	};

	LOGS_SYMBOL() {
	    return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
	};

	COLUMNS_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
	};

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	IN_SYMBOL() {
	    return this.getToken(MySQLParser.IN_SYMBOL, 0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	MASTER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	};

	SLAVE_SYMBOL() {
	    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	};

	ENGINES_SYMBOL() {
	    return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
	};

	WARNINGS_SYMBOL() {
	    return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
	};

	ERRORS_SYMBOL() {
	    return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
	};

	PROFILES_SYMBOL() {
	    return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
	};

	PROFILE_SYMBOL() {
	    return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
	};

	PROCESSLIST_SYMBOL() {
	    return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
	};

	COLLATION_SYMBOL() {
	    return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
	};

	CONTRIBUTORS_SYMBOL() {
	    return this.getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0);
	};

	PRIVILEGES_SYMBOL() {
	    return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
	};

	GRANTS_SYMBOL() {
	    return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
	};

	CREATE_SYMBOL() {
	    return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
	};

	PROCEDURE_SYMBOL() {
	    return this.getToken(MySQLParser.PROCEDURE_SYMBOL, 0);
	};

	FUNCTION_SYMBOL() {
	    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	};

	engineRef() {
	    return this.getTypedRuleContext(EngineRefContext,0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	HOSTS_SYMBOL() {
	    return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
	};

	nonBlocking() {
	    return this.getTypedRuleContext(NonBlockingContext,0);
	};

	BINLOG_SYMBOL() {
	    return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
	};

	RELAYLOG_SYMBOL() {
	    return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
	};

	INDEX_SYMBOL() {
	    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	};

	INDEXES_SYMBOL() {
	    return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
	};

	KEYS_SYMBOL() {
	    return this.getToken(MySQLParser.KEYS_SYMBOL, 0);
	};

	VARIABLES_SYMBOL() {
	    return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
	};

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	eventRef() {
	    return this.getTypedRuleContext(EventRefContext,0);
	};

	triggerRef() {
	    return this.getTypedRuleContext(TriggerRefContext,0);
	};

	viewRef() {
	    return this.getTypedRuleContext(ViewRefContext,0);
	};

	likeOrWhere() {
	    return this.getTypedRuleContext(LikeOrWhereContext,0);
	};

	showCommandType() {
	    return this.getTypedRuleContext(ShowCommandTypeContext,0);
	};

	inDb() {
	    return this.getTypedRuleContext(InDbContext,0);
	};

	FULL_SYMBOL() {
	    return this.getToken(MySQLParser.FULL_SYMBOL, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	ulonglong_number() {
	    return this.getTypedRuleContext(Ulonglong_numberContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	channel() {
	    return this.getTypedRuleContext(ChannelContext,0);
	};

	EXTENDED_SYMBOL() {
	    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	STORAGE_SYMBOL() {
	    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	};

	profileType = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ProfileTypeContext);
	    } else {
	        return this.getTypedRuleContext(ProfileTypeContext,i);
	    }
	};

	QUERY_SYMBOL() {
	    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	};

	INT_NUMBER() {
	    return this.getToken(MySQLParser.INT_NUMBER, 0);
	};

	optionType() {
	    return this.getTypedRuleContext(OptionTypeContext,0);
	};

	DATABASE_SYMBOL() {
	    return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
	};

	EVENT_SYMBOL() {
	    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	};

	TRIGGER_SYMBOL() {
	    return this.getToken(MySQLParser.TRIGGER_SYMBOL, 0);
	};

	VIEW_SYMBOL() {
	    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	ifNotExists() {
	    return this.getTypedRuleContext(IfNotExistsContext,0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitShowStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowCommandTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_showCommandType;
    }

	FULL_SYMBOL() {
	    return this.getToken(MySQLParser.FULL_SYMBOL, 0);
	};

	EXTENDED_SYMBOL() {
	    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitShowCommandType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NonBlockingContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_nonBlocking;
    }

	NONBLOCKING_SYMBOL() {
	    return this.getToken(MySQLParser.NONBLOCKING_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitNonBlocking(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromOrInContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fromOrIn;
    }

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	IN_SYMBOL() {
	    return this.getToken(MySQLParser.IN_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFromOrIn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InDbContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_inDb;
    }

	fromOrIn() {
	    return this.getTypedRuleContext(FromOrInContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInDb(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProfileTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_profileType;
    }

	BLOCK_SYMBOL() {
	    return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
	};

	IO_SYMBOL() {
	    return this.getToken(MySQLParser.IO_SYMBOL, 0);
	};

	CONTEXT_SYMBOL() {
	    return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
	};

	SWITCHES_SYMBOL() {
	    return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
	};

	PAGE_SYMBOL() {
	    return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
	};

	FAULTS_SYMBOL() {
	    return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	CPU_SYMBOL() {
	    return this.getToken(MySQLParser.CPU_SYMBOL, 0);
	};

	IPC_SYMBOL() {
	    return this.getToken(MySQLParser.IPC_SYMBOL, 0);
	};

	MEMORY_SYMBOL() {
	    return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
	};

	SOURCE_SYMBOL() {
	    return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
	};

	SWAPS_SYMBOL() {
	    return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitProfileType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OtherAdministrativeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_otherAdministrativeStatement;
        this.type = null;
    }

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	BINLOG_SYMBOL() {
	    return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
	};

	INDEX_SYMBOL() {
	    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	};

	keyCacheListOrParts() {
	    return this.getTypedRuleContext(KeyCacheListOrPartsContext,0);
	};

	IN_SYMBOL() {
	    return this.getToken(MySQLParser.IN_SYMBOL, 0);
	};

	CACHE_SYMBOL() {
	    return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	FLUSH_SYMBOL() {
	    return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
	};

	flushTables() {
	    return this.getTypedRuleContext(FlushTablesContext,0);
	};

	flushOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FlushOptionContext);
	    } else {
	        return this.getTypedRuleContext(FlushOptionContext,i);
	    }
	};

	noWriteToBinLog() {
	    return this.getTypedRuleContext(NoWriteToBinLogContext,0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	KILL_SYMBOL() {
	    return this.getToken(MySQLParser.KILL_SYMBOL, 0);
	};

	CONNECTION_SYMBOL() {
	    return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
	};

	QUERY_SYMBOL() {
	    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	};

	INTO_SYMBOL() {
	    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	};

	preloadTail() {
	    return this.getTypedRuleContext(PreloadTailContext,0);
	};

	LOAD_SYMBOL() {
	    return this.getToken(MySQLParser.LOAD_SYMBOL, 0);
	};

	SHUTDOWN_SYMBOL() {
	    return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOtherAdministrativeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyCacheListOrPartsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_keyCacheListOrParts;
    }

	keyCacheList() {
	    return this.getTypedRuleContext(KeyCacheListContext,0);
	};

	assignToKeycachePartition() {
	    return this.getTypedRuleContext(AssignToKeycachePartitionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitKeyCacheListOrParts(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyCacheListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_keyCacheList;
    }

	assignToKeycache = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignToKeycacheContext);
	    } else {
	        return this.getTypedRuleContext(AssignToKeycacheContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitKeyCacheList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignToKeycacheContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_assignToKeycache;
    }

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	cacheKeyList() {
	    return this.getTypedRuleContext(CacheKeyListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAssignToKeycache(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignToKeycachePartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_assignToKeycachePartition;
    }

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	PARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	allOrPartitionNameList() {
	    return this.getTypedRuleContext(AllOrPartitionNameListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	cacheKeyList() {
	    return this.getTypedRuleContext(CacheKeyListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAssignToKeycachePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CacheKeyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_cacheKeyList;
    }

	keyOrIndex() {
	    return this.getTypedRuleContext(KeyOrIndexContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	keyUsageList() {
	    return this.getTypedRuleContext(KeyUsageListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCacheKeyList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyUsageElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_keyUsageElement;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	PRIMARY_SYMBOL() {
	    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitKeyUsageElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyUsageListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_keyUsageList;
    }

	keyUsageElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyUsageElementContext);
	    } else {
	        return this.getTypedRuleContext(KeyUsageElementContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitKeyUsageList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FlushOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_flushOption;
        this.option = null;
    }

	DES_KEY_FILE_SYMBOL() {
	    return this.getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0);
	};

	HOSTS_SYMBOL() {
	    return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
	};

	PRIVILEGES_SYMBOL() {
	    return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
	};

	STATUS_SYMBOL() {
	    return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
	};

	USER_RESOURCES_SYMBOL() {
	    return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
	};

	LOGS_SYMBOL() {
	    return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
	};

	logType() {
	    return this.getTypedRuleContext(LogTypeContext,0);
	};

	RELAY_SYMBOL() {
	    return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
	};

	channel() {
	    return this.getTypedRuleContext(ChannelContext,0);
	};

	CACHE_SYMBOL() {
	    return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
	};

	QUERY_SYMBOL() {
	    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	};

	OPTIMIZER_COSTS_SYMBOL() {
	    return this.getToken(MySQLParser.OPTIMIZER_COSTS_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFlushOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_logType;
    }

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	ENGINE_SYMBOL() {
	    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	};

	ERROR_SYMBOL() {
	    return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
	};

	GENERAL_SYMBOL() {
	    return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
	};

	SLOW_SYMBOL() {
	    return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLogType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FlushTablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_flushTables;
    }

	TABLES_SYMBOL() {
	    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	};

	TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_SYMBOL, 0);
	};

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	READ_SYMBOL() {
	    return this.getToken(MySQLParser.READ_SYMBOL, 0);
	};

	LOCK_SYMBOL() {
	    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	flushTablesOptions() {
	    return this.getTypedRuleContext(FlushTablesOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFlushTables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FlushTablesOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_flushTablesOptions;
    }

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	EXPORT_SYMBOL() {
	    return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
	};

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	READ_SYMBOL() {
	    return this.getToken(MySQLParser.READ_SYMBOL, 0);
	};

	LOCK_SYMBOL() {
	    return this.getToken(MySQLParser.LOCK_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFlushTablesOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PreloadTailContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_preloadTail;
    }

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	adminPartition() {
	    return this.getTypedRuleContext(AdminPartitionContext,0);
	};

	cacheKeyList() {
	    return this.getTypedRuleContext(CacheKeyListContext,0);
	};

	IGNORE_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	};

	LEAVES_SYMBOL() {
	    return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
	};

	preloadList() {
	    return this.getTypedRuleContext(PreloadListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPreloadTail(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PreloadListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_preloadList;
    }

	preloadKeys = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PreloadKeysContext);
	    } else {
	        return this.getTypedRuleContext(PreloadKeysContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPreloadList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PreloadKeysContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_preloadKeys;
    }

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	cacheKeyList() {
	    return this.getTypedRuleContext(CacheKeyListContext,0);
	};

	IGNORE_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	};

	LEAVES_SYMBOL() {
	    return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPreloadKeys(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AdminPartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_adminPartition;
    }

	PARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	allOrPartitionNameList() {
	    return this.getTypedRuleContext(AllOrPartitionNameListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAdminPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceGroupManagementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_resourceGroupManagement;
    }

	createResourceGroup() {
	    return this.getTypedRuleContext(CreateResourceGroupContext,0);
	};

	alterResourceGroup() {
	    return this.getTypedRuleContext(AlterResourceGroupContext,0);
	};

	setResourceGroup() {
	    return this.getTypedRuleContext(SetResourceGroupContext,0);
	};

	dropResourceGroup() {
	    return this.getTypedRuleContext(DropResourceGroupContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitResourceGroupManagement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateResourceGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createResourceGroup;
    }

	CREATE_SYMBOL() {
	    return this.getToken(MySQLParser.CREATE_SYMBOL, 0);
	};

	RESOURCE_SYMBOL() {
	    return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
	};

	GROUP_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	TYPE_SYMBOL() {
	    return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	SYSTEM_SYMBOL() {
	    return this.getToken(MySQLParser.SYSTEM_SYMBOL, 0);
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	resourceGroupVcpuList() {
	    return this.getTypedRuleContext(ResourceGroupVcpuListContext,0);
	};

	resourceGroupPriority() {
	    return this.getTypedRuleContext(ResourceGroupPriorityContext,0);
	};

	resourceGroupEnableDisable() {
	    return this.getTypedRuleContext(ResourceGroupEnableDisableContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateResourceGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceGroupVcpuListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_resourceGroupVcpuList;
    }

	VCPU_SYMBOL() {
	    return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
	};

	vcpuNumOrRange = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(VcpuNumOrRangeContext);
	    } else {
	        return this.getTypedRuleContext(VcpuNumOrRangeContext,i);
	    }
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitResourceGroupVcpuList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VcpuNumOrRangeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_vcpuNumOrRange;
    }

	INT_NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.INT_NUMBER);
	    } else {
	        return this.getToken(MySQLParser.INT_NUMBER, i);
	    }
	};


	MINUS_OPERATOR() {
	    return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitVcpuNumOrRange(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceGroupPriorityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_resourceGroupPriority;
    }

	THREAD_PRIORITY_SYMBOL() {
	    return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
	};

	INT_NUMBER() {
	    return this.getToken(MySQLParser.INT_NUMBER, 0);
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitResourceGroupPriority(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceGroupEnableDisableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_resourceGroupEnableDisable;
    }

	ENABLE_SYMBOL() {
	    return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
	};

	DISABLE_SYMBOL() {
	    return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitResourceGroupEnableDisable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterResourceGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterResourceGroup;
    }

	ALTER_SYMBOL() {
	    return this.getToken(MySQLParser.ALTER_SYMBOL, 0);
	};

	RESOURCE_SYMBOL() {
	    return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
	};

	GROUP_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	};

	resourceGroupRef() {
	    return this.getTypedRuleContext(ResourceGroupRefContext,0);
	};

	resourceGroupVcpuList() {
	    return this.getTypedRuleContext(ResourceGroupVcpuListContext,0);
	};

	resourceGroupPriority() {
	    return this.getTypedRuleContext(ResourceGroupPriorityContext,0);
	};

	resourceGroupEnableDisable() {
	    return this.getTypedRuleContext(ResourceGroupEnableDisableContext,0);
	};

	FORCE_SYMBOL() {
	    return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterResourceGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetResourceGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_setResourceGroup;
    }

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	RESOURCE_SYMBOL() {
	    return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
	};

	GROUP_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	threadIdList() {
	    return this.getTypedRuleContext(ThreadIdListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSetResourceGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThreadIdListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_threadIdList;
    }

	real_ulong_number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Real_ulong_numberContext);
	    } else {
	        return this.getTypedRuleContext(Real_ulong_numberContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitThreadIdList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropResourceGroupContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dropResourceGroup;
    }

	DROP_SYMBOL() {
	    return this.getToken(MySQLParser.DROP_SYMBOL, 0);
	};

	RESOURCE_SYMBOL() {
	    return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
	};

	GROUP_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_SYMBOL, 0);
	};

	resourceGroupRef() {
	    return this.getTypedRuleContext(ResourceGroupRefContext,0);
	};

	FORCE_SYMBOL() {
	    return this.getToken(MySQLParser.FORCE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDropResourceGroup(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UtilityStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_utilityStatement;
    }

	describeStatement() {
	    return this.getTypedRuleContext(DescribeStatementContext,0);
	};

	explainStatement() {
	    return this.getTypedRuleContext(ExplainStatementContext,0);
	};

	helpCommand() {
	    return this.getTypedRuleContext(HelpCommandContext,0);
	};

	useCommand() {
	    return this.getTypedRuleContext(UseCommandContext,0);
	};

	restartServer() {
	    return this.getTypedRuleContext(RestartServerContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUtilityStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescribeStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_describeStatement;
    }

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	EXPLAIN_SYMBOL() {
	    return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
	};

	DESCRIBE_SYMBOL() {
	    return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
	};

	DESC_SYMBOL() {
	    return this.getToken(MySQLParser.DESC_SYMBOL, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	columnRef() {
	    return this.getTypedRuleContext(ColumnRefContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDescribeStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplainStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_explainStatement;
    }

	explainableStatement() {
	    return this.getTypedRuleContext(ExplainableStatementContext,0);
	};

	EXPLAIN_SYMBOL() {
	    return this.getToken(MySQLParser.EXPLAIN_SYMBOL, 0);
	};

	DESCRIBE_SYMBOL() {
	    return this.getToken(MySQLParser.DESCRIBE_SYMBOL, 0);
	};

	DESC_SYMBOL() {
	    return this.getToken(MySQLParser.DESC_SYMBOL, 0);
	};

	EXTENDED_SYMBOL() {
	    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	};

	PARTITIONS_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
	};

	FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	ANALYZE_SYMBOL() {
	    return this.getToken(MySQLParser.ANALYZE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExplainStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExplainableStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_explainableStatement;
    }

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	deleteStatement() {
	    return this.getTypedRuleContext(DeleteStatementContext,0);
	};

	insertStatement() {
	    return this.getTypedRuleContext(InsertStatementContext,0);
	};

	replaceStatement() {
	    return this.getTypedRuleContext(ReplaceStatementContext,0);
	};

	updateStatement() {
	    return this.getTypedRuleContext(UpdateStatementContext,0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	CONNECTION_SYMBOL() {
	    return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExplainableStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HelpCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_helpCommand;
    }

	HELP_SYMBOL() {
	    return this.getToken(MySQLParser.HELP_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitHelpCommand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseCommandContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_useCommand;
    }

	USE_SYMBOL() {
	    return this.getToken(MySQLParser.USE_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUseCommand(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RestartServerContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_restartServer;
    }

	RESTART_SYMBOL() {
	    return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRestartServer(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_expr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExprOrContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null;;
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	OR_SYMBOL() {
	    return this.getToken(MySQLParser.OR_SYMBOL, 0);
	};

	LOGICAL_OR_OPERATOR() {
	    return this.getToken(MySQLParser.LOGICAL_OR_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExprOr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.ExprOrContext = ExprOrContext;

class ExprNotContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT_SYMBOL() {
	    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExprNot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.ExprNotContext = ExprNotContext;

class ExprIsContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.type = null;;
        super.copyFrom(ctx);
    }

	boolPri() {
	    return this.getTypedRuleContext(BoolPriContext,0);
	};

	IS_SYMBOL() {
	    return this.getToken(MySQLParser.IS_SYMBOL, 0);
	};

	TRUE_SYMBOL() {
	    return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
	};

	FALSE_SYMBOL() {
	    return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
	};

	UNKNOWN_SYMBOL() {
	    return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
	};

	notRule() {
	    return this.getTypedRuleContext(NotRuleContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExprIs(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.ExprIsContext = ExprIsContext;

class ExprAndContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null;;
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	AND_SYMBOL() {
	    return this.getToken(MySQLParser.AND_SYMBOL, 0);
	};

	LOGICAL_AND_OPERATOR() {
	    return this.getToken(MySQLParser.LOGICAL_AND_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExprAnd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.ExprAndContext = ExprAndContext;

class ExprXorContext extends ExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	XOR_SYMBOL() {
	    return this.getToken(MySQLParser.XOR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExprXor(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.ExprXorContext = ExprXorContext;

class BoolPriContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_boolPri;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PrimaryExprPredicateContext extends BoolPriContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPrimaryExprPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.PrimaryExprPredicateContext = PrimaryExprPredicateContext;

class PrimaryExprCompareContext extends BoolPriContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	boolPri() {
	    return this.getTypedRuleContext(BoolPriContext,0);
	};

	compOp() {
	    return this.getTypedRuleContext(CompOpContext,0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPrimaryExprCompare(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.PrimaryExprCompareContext = PrimaryExprCompareContext;

class PrimaryExprAllAnyContext extends BoolPriContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	boolPri() {
	    return this.getTypedRuleContext(BoolPriContext,0);
	};

	compOp() {
	    return this.getTypedRuleContext(CompOpContext,0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	ANY_SYMBOL() {
	    return this.getToken(MySQLParser.ANY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPrimaryExprAllAny(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.PrimaryExprAllAnyContext = PrimaryExprAllAnyContext;

class PrimaryExprIsNullContext extends BoolPriContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	boolPri() {
	    return this.getTypedRuleContext(BoolPriContext,0);
	};

	IS_SYMBOL() {
	    return this.getToken(MySQLParser.IS_SYMBOL, 0);
	};

	NULL_SYMBOL() {
	    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	};

	notRule() {
	    return this.getTypedRuleContext(NotRuleContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPrimaryExprIsNull(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.PrimaryExprIsNullContext = PrimaryExprIsNullContext;

class CompOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_compOp;
    }

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	NULL_SAFE_EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.NULL_SAFE_EQUAL_OPERATOR, 0);
	};

	GREATER_OR_EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.GREATER_OR_EQUAL_OPERATOR, 0);
	};

	GREATER_THAN_OPERATOR() {
	    return this.getToken(MySQLParser.GREATER_THAN_OPERATOR, 0);
	};

	LESS_OR_EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.LESS_OR_EQUAL_OPERATOR, 0);
	};

	LESS_THAN_OPERATOR() {
	    return this.getToken(MySQLParser.LESS_THAN_OPERATOR, 0);
	};

	NOT_EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.NOT_EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCompOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredicateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_predicate;
    }

	bitExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitExprContext);
	    } else {
	        return this.getTypedRuleContext(BitExprContext,i);
	    }
	};

	predicateOperations() {
	    return this.getTypedRuleContext(PredicateOperationsContext,0);
	};

	MEMBER_SYMBOL() {
	    return this.getToken(MySQLParser.MEMBER_SYMBOL, 0);
	};

	simpleExprWithParentheses() {
	    return this.getTypedRuleContext(SimpleExprWithParenthesesContext,0);
	};

	SOUNDS_SYMBOL() {
	    return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
	};

	LIKE_SYMBOL() {
	    return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
	};

	notRule() {
	    return this.getTypedRuleContext(NotRuleContext,0);
	};

	OF_SYMBOL() {
	    return this.getToken(MySQLParser.OF_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPredicate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PredicateOperationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_predicateOperations;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PredicateExprRegexContext extends PredicateOperationsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REGEXP_SYMBOL() {
	    return this.getToken(MySQLParser.REGEXP_SYMBOL, 0);
	};

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPredicateExprRegex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.PredicateExprRegexContext = PredicateExprRegexContext;

class PredicateExprBetweenContext extends PredicateOperationsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BETWEEN_SYMBOL() {
	    return this.getToken(MySQLParser.BETWEEN_SYMBOL, 0);
	};

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	AND_SYMBOL() {
	    return this.getToken(MySQLParser.AND_SYMBOL, 0);
	};

	predicate() {
	    return this.getTypedRuleContext(PredicateContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPredicateExprBetween(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.PredicateExprBetweenContext = PredicateExprBetweenContext;

class PredicateExprInContext extends PredicateOperationsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	IN_SYMBOL() {
	    return this.getToken(MySQLParser.IN_SYMBOL, 0);
	};

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPredicateExprIn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.PredicateExprInContext = PredicateExprInContext;

class PredicateExprLikeContext extends PredicateOperationsContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LIKE_SYMBOL() {
	    return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
	};

	simpleExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleExprContext);
	    } else {
	        return this.getTypedRuleContext(SimpleExprContext,i);
	    }
	};

	ESCAPE_SYMBOL() {
	    return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPredicateExprLike(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.PredicateExprLikeContext = PredicateExprLikeContext;

class BitExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_bitExpr;
        this.op = null;
    }

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	bitExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(BitExprContext);
	    } else {
	        return this.getTypedRuleContext(BitExprContext,i);
	    }
	};

	BITWISE_XOR_OPERATOR() {
	    return this.getToken(MySQLParser.BITWISE_XOR_OPERATOR, 0);
	};

	MULT_OPERATOR() {
	    return this.getToken(MySQLParser.MULT_OPERATOR, 0);
	};

	DIV_OPERATOR() {
	    return this.getToken(MySQLParser.DIV_OPERATOR, 0);
	};

	MOD_OPERATOR() {
	    return this.getToken(MySQLParser.MOD_OPERATOR, 0);
	};

	DIV_SYMBOL() {
	    return this.getToken(MySQLParser.DIV_SYMBOL, 0);
	};

	MOD_SYMBOL() {
	    return this.getToken(MySQLParser.MOD_SYMBOL, 0);
	};

	PLUS_OPERATOR() {
	    return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
	};

	MINUS_OPERATOR() {
	    return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
	};

	SHIFT_LEFT_OPERATOR() {
	    return this.getToken(MySQLParser.SHIFT_LEFT_OPERATOR, 0);
	};

	SHIFT_RIGHT_OPERATOR() {
	    return this.getToken(MySQLParser.SHIFT_RIGHT_OPERATOR, 0);
	};

	BITWISE_AND_OPERATOR() {
	    return this.getToken(MySQLParser.BITWISE_AND_OPERATOR, 0);
	};

	BITWISE_OR_OPERATOR() {
	    return this.getToken(MySQLParser.BITWISE_OR_OPERATOR, 0);
	};

	INTERVAL_SYMBOL() {
	    return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitBitExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_simpleExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SimpleExprConvertContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONVERT_SYMBOL() {
	    return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	castType() {
	    return this.getTypedRuleContext(CastTypeContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprConvert(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprConvertContext = SimpleExprConvertContext;

class SimpleExprVariableContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprVariableContext = SimpleExprVariableContext;

class SimpleExprCastContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CAST_SYMBOL() {
	    return this.getToken(MySQLParser.CAST_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	castType() {
	    return this.getTypedRuleContext(CastTypeContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	arrayCast() {
	    return this.getTypedRuleContext(ArrayCastContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprCast(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprCastContext = SimpleExprCastContext;

class SimpleExprUnaryContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        this.op = null;;
        super.copyFrom(ctx);
    }

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	PLUS_OPERATOR() {
	    return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
	};

	MINUS_OPERATOR() {
	    return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
	};

	BITWISE_NOT_OPERATOR() {
	    return this.getToken(MySQLParser.BITWISE_NOT_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprUnary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprUnaryContext = SimpleExprUnaryContext;

class SimpleExprOdbcContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_CURLY_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_CURLY_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_CURLY_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_CURLY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprOdbc(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprOdbcContext = SimpleExprOdbcContext;

class SimpleExprRuntimeFunctionContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	runtimeFunctionCall() {
	    return this.getTypedRuleContext(RuntimeFunctionCallContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprRuntimeFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprRuntimeFunctionContext = SimpleExprRuntimeFunctionContext;

class SimpleExprFunctionContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	functionCall() {
	    return this.getTypedRuleContext(FunctionCallContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprFunctionContext = SimpleExprFunctionContext;

class SimpleExprCollateContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	COLLATE_SYMBOL() {
	    return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprCollate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprCollateContext = SimpleExprCollateContext;

class SimpleExprMatchContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MATCH_SYMBOL() {
	    return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
	};

	identListArg() {
	    return this.getTypedRuleContext(IdentListArgContext,0);
	};

	AGAINST_SYMBOL() {
	    return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	fulltextOptions() {
	    return this.getTypedRuleContext(FulltextOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprMatch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprMatchContext = SimpleExprMatchContext;

class SimpleExprWindowingFunctionContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	windowFunctionCall() {
	    return this.getTypedRuleContext(WindowFunctionCallContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprWindowingFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprWindowingFunctionContext = SimpleExprWindowingFunctionContext;

class SimpleExprBinaryContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprBinary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprBinaryContext = SimpleExprBinaryContext;

class SimpleExprColumnRefContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnRef() {
	    return this.getTypedRuleContext(ColumnRefContext,0);
	};

	jsonOperator() {
	    return this.getTypedRuleContext(JsonOperatorContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprColumnRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprColumnRefContext = SimpleExprColumnRefContext;

class SimpleExprParamMarkerContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PARAM_MARKER() {
	    return this.getToken(MySQLParser.PARAM_MARKER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprParamMarker(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprParamMarkerContext = SimpleExprParamMarkerContext;

class SimpleExprSumContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	sumExpr() {
	    return this.getTypedRuleContext(SumExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprSum(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprSumContext = SimpleExprSumContext;

class SimpleExprConvertUsingContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONVERT_SYMBOL() {
	    return this.getToken(MySQLParser.CONVERT_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	USING_SYMBOL() {
	    return this.getToken(MySQLParser.USING_SYMBOL, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprConvertUsing(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprConvertUsingContext = SimpleExprConvertUsingContext;

class SimpleExprSubQueryContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	subquery() {
	    return this.getTypedRuleContext(SubqueryContext,0);
	};

	EXISTS_SYMBOL() {
	    return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprSubQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprSubQueryContext = SimpleExprSubQueryContext;

class SimpleExprGroupingOperationContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	groupingOperation() {
	    return this.getTypedRuleContext(GroupingOperationContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprGroupingOperation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprGroupingOperationContext = SimpleExprGroupingOperationContext;

class SimpleExprNotContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	not2Rule() {
	    return this.getTypedRuleContext(Not2RuleContext,0);
	};

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprNot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprNotContext = SimpleExprNotContext;

class SimpleExprValuesContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VALUES_SYMBOL() {
	    return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	simpleIdentifier() {
	    return this.getTypedRuleContext(SimpleIdentifierContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprValuesContext = SimpleExprValuesContext;

class SimpleExprDefaultContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	simpleIdentifier() {
	    return this.getTypedRuleContext(SimpleIdentifierContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprDefault(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprDefaultContext = SimpleExprDefaultContext;

class SimpleExprListContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	ROW_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprListContext = SimpleExprListContext;

class SimpleExprIntervalContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTERVAL_SYMBOL() {
	    return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	PLUS_OPERATOR() {
	    return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprIntervalContext = SimpleExprIntervalContext;

class SimpleExprCaseContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CASE_SYMBOL() {
	    return this.getToken(MySQLParser.CASE_SYMBOL, 0);
	};

	END_SYMBOL() {
	    return this.getToken(MySQLParser.END_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	whenExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenExpressionContext);
	    } else {
	        return this.getTypedRuleContext(WhenExpressionContext,i);
	    }
	};

	thenExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ThenExpressionContext);
	    } else {
	        return this.getTypedRuleContext(ThenExpressionContext,i);
	    }
	};

	elseExpression() {
	    return this.getTypedRuleContext(ElseExpressionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprCaseContext = SimpleExprCaseContext;

class SimpleExprConcatContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	simpleExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleExprContext);
	    } else {
	        return this.getTypedRuleContext(SimpleExprContext,i);
	    }
	};

	CONCAT_PIPES_SYMBOL() {
	    return this.getToken(MySQLParser.CONCAT_PIPES_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprConcat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprConcatContext = SimpleExprConcatContext;

class SimpleExprLiteralContext extends SimpleExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.SimpleExprLiteralContext = SimpleExprLiteralContext;

class ArrayCastContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_arrayCast;
    }

	ARRAY_SYMBOL() {
	    return this.getToken(MySQLParser.ARRAY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitArrayCast(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsonOperatorContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_jsonOperator;
    }

	JSON_SEPARATOR_SYMBOL() {
	    return this.getToken(MySQLParser.JSON_SEPARATOR_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	JSON_UNQUOTED_SEPARATOR_SYMBOL() {
	    return this.getToken(MySQLParser.JSON_UNQUOTED_SEPARATOR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitJsonOperator(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SumExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_sumExpr;
        this.name = null;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	inSumExpr() {
	    return this.getTypedRuleContext(InSumExprContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	AVG_SYMBOL() {
	    return this.getToken(MySQLParser.AVG_SYMBOL, 0);
	};

	DISTINCT_SYMBOL() {
	    return this.getToken(MySQLParser.DISTINCT_SYMBOL, 0);
	};

	windowingClause() {
	    return this.getTypedRuleContext(WindowingClauseContext,0);
	};

	BIT_AND_SYMBOL() {
	    return this.getToken(MySQLParser.BIT_AND_SYMBOL, 0);
	};

	BIT_OR_SYMBOL() {
	    return this.getToken(MySQLParser.BIT_OR_SYMBOL, 0);
	};

	BIT_XOR_SYMBOL() {
	    return this.getToken(MySQLParser.BIT_XOR_SYMBOL, 0);
	};

	jsonFunction() {
	    return this.getTypedRuleContext(JsonFunctionContext,0);
	};

	MULT_OPERATOR() {
	    return this.getToken(MySQLParser.MULT_OPERATOR, 0);
	};

	COUNT_SYMBOL() {
	    return this.getToken(MySQLParser.COUNT_SYMBOL, 0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	MIN_SYMBOL() {
	    return this.getToken(MySQLParser.MIN_SYMBOL, 0);
	};

	MAX_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_SYMBOL, 0);
	};

	STD_SYMBOL() {
	    return this.getToken(MySQLParser.STD_SYMBOL, 0);
	};

	VARIANCE_SYMBOL() {
	    return this.getToken(MySQLParser.VARIANCE_SYMBOL, 0);
	};

	STDDEV_SAMP_SYMBOL() {
	    return this.getToken(MySQLParser.STDDEV_SAMP_SYMBOL, 0);
	};

	VAR_SAMP_SYMBOL() {
	    return this.getToken(MySQLParser.VAR_SAMP_SYMBOL, 0);
	};

	SUM_SYMBOL() {
	    return this.getToken(MySQLParser.SUM_SYMBOL, 0);
	};

	GROUP_CONCAT_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_CONCAT_SYMBOL, 0);
	};

	orderClause() {
	    return this.getTypedRuleContext(OrderClauseContext,0);
	};

	SEPARATOR_SYMBOL() {
	    return this.getToken(MySQLParser.SEPARATOR_SYMBOL, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSumExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupingOperationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_groupingOperation;
    }

	GROUPING_SYMBOL() {
	    return this.getToken(MySQLParser.GROUPING_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGroupingOperation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowFunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowFunctionCall;
    }

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	windowingClause() {
	    return this.getTypedRuleContext(WindowingClauseContext,0);
	};

	ROW_NUMBER_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_NUMBER_SYMBOL, 0);
	};

	RANK_SYMBOL() {
	    return this.getToken(MySQLParser.RANK_SYMBOL, 0);
	};

	DENSE_RANK_SYMBOL() {
	    return this.getToken(MySQLParser.DENSE_RANK_SYMBOL, 0);
	};

	CUME_DIST_SYMBOL() {
	    return this.getToken(MySQLParser.CUME_DIST_SYMBOL, 0);
	};

	PERCENT_RANK_SYMBOL() {
	    return this.getToken(MySQLParser.PERCENT_RANK_SYMBOL, 0);
	};

	NTILE_SYMBOL() {
	    return this.getToken(MySQLParser.NTILE_SYMBOL, 0);
	};

	simpleExprWithParentheses() {
	    return this.getTypedRuleContext(SimpleExprWithParenthesesContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	LEAD_SYMBOL() {
	    return this.getToken(MySQLParser.LEAD_SYMBOL, 0);
	};

	LAG_SYMBOL() {
	    return this.getToken(MySQLParser.LAG_SYMBOL, 0);
	};

	leadLagInfo() {
	    return this.getTypedRuleContext(LeadLagInfoContext,0);
	};

	nullTreatment() {
	    return this.getTypedRuleContext(NullTreatmentContext,0);
	};

	exprWithParentheses() {
	    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
	};

	FIRST_VALUE_SYMBOL() {
	    return this.getToken(MySQLParser.FIRST_VALUE_SYMBOL, 0);
	};

	LAST_VALUE_SYMBOL() {
	    return this.getToken(MySQLParser.LAST_VALUE_SYMBOL, 0);
	};

	NTH_VALUE_SYMBOL() {
	    return this.getToken(MySQLParser.NTH_VALUE_SYMBOL, 0);
	};

	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	FIRST_SYMBOL() {
	    return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
	};

	LAST_SYMBOL() {
	    return this.getToken(MySQLParser.LAST_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowingClause;
    }

	OVER_SYMBOL() {
	    return this.getToken(MySQLParser.OVER_SYMBOL, 0);
	};

	windowName() {
	    return this.getTypedRuleContext(WindowNameContext,0);
	};

	windowSpec() {
	    return this.getTypedRuleContext(WindowSpecContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LeadLagInfoContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_leadLagInfo;
    }

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	ulonglong_number() {
	    return this.getTypedRuleContext(Ulonglong_numberContext,0);
	};

	PARAM_MARKER() {
	    return this.getToken(MySQLParser.PARAM_MARKER, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLeadLagInfo(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullTreatmentContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_nullTreatment;
    }

	NULLS_SYMBOL() {
	    return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
	};

	RESPECT_SYMBOL() {
	    return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
	};

	IGNORE_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitNullTreatment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JsonFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_jsonFunction;
    }

	JSON_ARRAYAGG_SYMBOL() {
	    return this.getToken(MySQLParser.JSON_ARRAYAGG_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	inSumExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(InSumExprContext);
	    } else {
	        return this.getTypedRuleContext(InSumExprContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	windowingClause() {
	    return this.getTypedRuleContext(WindowingClauseContext,0);
	};

	JSON_OBJECTAGG_SYMBOL() {
	    return this.getToken(MySQLParser.JSON_OBJECTAGG_SYMBOL, 0);
	};

	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitJsonFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InSumExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_inSumExpr;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	ALL_SYMBOL() {
	    return this.getToken(MySQLParser.ALL_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInSumExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentListArgContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_identListArg;
    }

	identList() {
	    return this.getTypedRuleContext(IdentListContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIdentListArg(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_identList;
    }

	simpleIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SimpleIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(SimpleIdentifierContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIdentList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FulltextOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fulltextOptions;
    }

	IN_SYMBOL() {
	    return this.getToken(MySQLParser.IN_SYMBOL, 0);
	};

	BOOLEAN_SYMBOL() {
	    return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
	};

	MODE_SYMBOL() {
	    return this.getToken(MySQLParser.MODE_SYMBOL, 0);
	};

	NATURAL_SYMBOL() {
	    return this.getToken(MySQLParser.NATURAL_SYMBOL, 0);
	};

	LANGUAGE_SYMBOL() {
	    return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
	};

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	QUERY_SYMBOL() {
	    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	};

	EXPANSION_SYMBOL() {
	    return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFulltextOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RuntimeFunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_runtimeFunctionCall;
        this.name = null;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	CHAR_SYMBOL() {
	    return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
	};

	USING_SYMBOL() {
	    return this.getToken(MySQLParser.USING_SYMBOL, 0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	CURRENT_USER_SYMBOL() {
	    return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
	};

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	exprWithParentheses() {
	    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
	};

	DATE_SYMBOL() {
	    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	};

	DAY_SYMBOL() {
	    return this.getToken(MySQLParser.DAY_SYMBOL, 0);
	};

	HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	INSERT_SYMBOL() {
	    return this.getToken(MySQLParser.INSERT_SYMBOL, 0);
	};

	INTERVAL_SYMBOL() {
	    return this.getToken(MySQLParser.INTERVAL_SYMBOL, 0);
	};

	LEFT_SYMBOL() {
	    return this.getToken(MySQLParser.LEFT_SYMBOL, 0);
	};

	MINUTE_SYMBOL() {
	    return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
	};

	MONTH_SYMBOL() {
	    return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
	};

	RIGHT_SYMBOL() {
	    return this.getToken(MySQLParser.RIGHT_SYMBOL, 0);
	};

	SECOND_SYMBOL() {
	    return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	};

	TIMESTAMP_SYMBOL() {
	    return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
	};

	trimFunction() {
	    return this.getTypedRuleContext(TrimFunctionContext,0);
	};

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	VALUES_SYMBOL() {
	    return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
	};

	YEAR_SYMBOL() {
	    return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
	};

	ADDDATE_SYMBOL() {
	    return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
	};

	SUBDATE_SYMBOL() {
	    return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	CURDATE_SYMBOL() {
	    return this.getToken(MySQLParser.CURDATE_SYMBOL, 0);
	};

	CURTIME_SYMBOL() {
	    return this.getToken(MySQLParser.CURTIME_SYMBOL, 0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	DATE_ADD_SYMBOL() {
	    return this.getToken(MySQLParser.DATE_ADD_SYMBOL, 0);
	};

	DATE_SUB_SYMBOL() {
	    return this.getToken(MySQLParser.DATE_SUB_SYMBOL, 0);
	};

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	EXTRACT_SYMBOL() {
	    return this.getToken(MySQLParser.EXTRACT_SYMBOL, 0);
	};

	dateTimeTtype() {
	    return this.getTypedRuleContext(DateTimeTtypeContext,0);
	};

	GET_FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
	};

	NOW_SYMBOL() {
	    return this.getToken(MySQLParser.NOW_SYMBOL, 0);
	};

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	IN_SYMBOL() {
	    return this.getToken(MySQLParser.IN_SYMBOL, 0);
	};

	POSITION_SYMBOL() {
	    return this.getToken(MySQLParser.POSITION_SYMBOL, 0);
	};

	substringFunction() {
	    return this.getTypedRuleContext(SubstringFunctionContext,0);
	};

	SYSDATE_SYMBOL() {
	    return this.getToken(MySQLParser.SYSDATE_SYMBOL, 0);
	};

	intervalTimeStamp() {
	    return this.getTypedRuleContext(IntervalTimeStampContext,0);
	};

	TIMESTAMP_ADD_SYMBOL() {
	    return this.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0);
	};

	TIMESTAMP_DIFF_SYMBOL() {
	    return this.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0);
	};

	UTC_DATE_SYMBOL() {
	    return this.getToken(MySQLParser.UTC_DATE_SYMBOL, 0);
	};

	UTC_TIME_SYMBOL() {
	    return this.getToken(MySQLParser.UTC_TIME_SYMBOL, 0);
	};

	UTC_TIMESTAMP_SYMBOL() {
	    return this.getToken(MySQLParser.UTC_TIMESTAMP_SYMBOL, 0);
	};

	ASCII_SYMBOL() {
	    return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
	};

	CHARSET_SYMBOL() {
	    return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
	};

	exprListWithParentheses() {
	    return this.getTypedRuleContext(ExprListWithParenthesesContext,0);
	};

	COALESCE_SYMBOL() {
	    return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
	};

	COLLATION_SYMBOL() {
	    return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
	};

	DATABASE_SYMBOL() {
	    return this.getToken(MySQLParser.DATABASE_SYMBOL, 0);
	};

	IF_SYMBOL() {
	    return this.getToken(MySQLParser.IF_SYMBOL, 0);
	};

	FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
	};

	MICROSECOND_SYMBOL() {
	    return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
	};

	MOD_SYMBOL() {
	    return this.getToken(MySQLParser.MOD_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	OLD_PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	};

	QUARTER_SYMBOL() {
	    return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
	};

	REPEAT_SYMBOL() {
	    return this.getToken(MySQLParser.REPEAT_SYMBOL, 0);
	};

	REPLACE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	};

	REVERSE_SYMBOL() {
	    return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
	};

	ROW_COUNT_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
	};

	TRUNCATE_SYMBOL() {
	    return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
	};

	WEEK_SYMBOL() {
	    return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
	};

	WEIGHT_STRING_SYMBOL() {
	    return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
	};

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	wsNumCodepoints() {
	    return this.getTypedRuleContext(WsNumCodepointsContext,0);
	};

	ulong_number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Ulong_numberContext);
	    } else {
	        return this.getTypedRuleContext(Ulong_numberContext,i);
	    }
	};

	weightStringLevels() {
	    return this.getTypedRuleContext(WeightStringLevelsContext,0);
	};

	geometryFunction() {
	    return this.getTypedRuleContext(GeometryFunctionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRuntimeFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GeometryFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_geometryFunction;
        this.name = null;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	CONTAINS_SYMBOL() {
	    return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
	};

	GEOMETRYCOLLECTION_SYMBOL() {
	    return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	exprListWithParentheses() {
	    return this.getTypedRuleContext(ExprListWithParenthesesContext,0);
	};

	LINESTRING_SYMBOL() {
	    return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
	};

	MULTILINESTRING_SYMBOL() {
	    return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
	};

	MULTIPOINT_SYMBOL() {
	    return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
	};

	MULTIPOLYGON_SYMBOL() {
	    return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
	};

	POINT_SYMBOL() {
	    return this.getToken(MySQLParser.POINT_SYMBOL, 0);
	};

	POLYGON_SYMBOL() {
	    return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGeometryFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TimeFunctionParametersContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_timeFunctionParameters;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	fractionalPrecision() {
	    return this.getTypedRuleContext(FractionalPrecisionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTimeFunctionParameters(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FractionalPrecisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fractionalPrecision;
    }

	INT_NUMBER() {
	    return this.getToken(MySQLParser.INT_NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFractionalPrecision(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WeightStringLevelsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_weightStringLevels;
    }

	LEVEL_SYMBOL() {
	    return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
	};

	real_ulong_number = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(Real_ulong_numberContext);
	    } else {
	        return this.getTypedRuleContext(Real_ulong_numberContext,i);
	    }
	};

	MINUS_OPERATOR() {
	    return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
	};

	weightStringLevelListItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WeightStringLevelListItemContext);
	    } else {
	        return this.getTypedRuleContext(WeightStringLevelListItemContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWeightStringLevels(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WeightStringLevelListItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_weightStringLevelListItem;
    }

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	REVERSE_SYMBOL() {
	    return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
	};

	ASC_SYMBOL() {
	    return this.getToken(MySQLParser.ASC_SYMBOL, 0);
	};

	DESC_SYMBOL() {
	    return this.getToken(MySQLParser.DESC_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWeightStringLevelListItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DateTimeTtypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dateTimeTtype;
    }

	DATE_SYMBOL() {
	    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	};

	DATETIME_SYMBOL() {
	    return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
	};

	TIMESTAMP_SYMBOL() {
	    return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDateTimeTtype(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TrimFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_trimFunction;
    }

	TRIM_SYMBOL() {
	    return this.getToken(MySQLParser.TRIM_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	LEADING_SYMBOL() {
	    return this.getToken(MySQLParser.LEADING_SYMBOL, 0);
	};

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	TRAILING_SYMBOL() {
	    return this.getToken(MySQLParser.TRAILING_SYMBOL, 0);
	};

	BOTH_SYMBOL() {
	    return this.getToken(MySQLParser.BOTH_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTrimFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubstringFunctionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_substringFunction;
    }

	SUBSTRING_SYMBOL() {
	    return this.getToken(MySQLParser.SUBSTRING_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSubstringFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionCallContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_functionCall;
    }

	pureIdentifier() {
	    return this.getTypedRuleContext(PureIdentifierContext,0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	udfExprList() {
	    return this.getTypedRuleContext(UdfExprListContext,0);
	};

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFunctionCall(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UdfExprListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_udfExprList;
    }

	udfExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UdfExprContext);
	    } else {
	        return this.getTypedRuleContext(UdfExprContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUdfExprList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UdfExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_udfExpr;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	selectAlias() {
	    return this.getTypedRuleContext(SelectAliasContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUdfExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_variable;
    }

	userVariable() {
	    return this.getTypedRuleContext(UserVariableContext,0);
	};

	systemVariable() {
	    return this.getTypedRuleContext(SystemVariableContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_userVariable;
    }

	AT_SIGN_SYMBOL() {
	    return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	AT_TEXT_SUFFIX() {
	    return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUserVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SystemVariableContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_systemVariable;
    }

	AT_AT_SIGN_SYMBOL() {
	    return this.getToken(MySQLParser.AT_AT_SIGN_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	varIdentType() {
	    return this.getTypedRuleContext(VarIdentTypeContext,0);
	};

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSystemVariable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InternalVariableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_internalVariableName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	lValueIdentifier() {
	    return this.getTypedRuleContext(LValueIdentifierContext,0);
	};

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInternalVariableName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhenExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_whenExpression;
    }

	WHEN_SYMBOL() {
	    return this.getToken(MySQLParser.WHEN_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWhenExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThenExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_thenExpression;
    }

	THEN_SYMBOL() {
	    return this.getToken(MySQLParser.THEN_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitThenExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElseExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_elseExpression;
    }

	ELSE_SYMBOL() {
	    return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitElseExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CastTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_castType;
    }

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	fieldLength() {
	    return this.getTypedRuleContext(FieldLengthContext,0);
	};

	CHAR_SYMBOL() {
	    return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
	};

	charsetWithOptBinary() {
	    return this.getTypedRuleContext(CharsetWithOptBinaryContext,0);
	};

	nchar() {
	    return this.getTypedRuleContext(NcharContext,0);
	};

	SIGNED_SYMBOL() {
	    return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
	};

	INT_SYMBOL() {
	    return this.getToken(MySQLParser.INT_SYMBOL, 0);
	};

	UNSIGNED_SYMBOL() {
	    return this.getToken(MySQLParser.UNSIGNED_SYMBOL, 0);
	};

	DATE_SYMBOL() {
	    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	};

	typeDatetimePrecision() {
	    return this.getTypedRuleContext(TypeDatetimePrecisionContext,0);
	};

	DATETIME_SYMBOL() {
	    return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
	};

	DECIMAL_SYMBOL() {
	    return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
	};

	floatOptions() {
	    return this.getTypedRuleContext(FloatOptionsContext,0);
	};

	JSON_SYMBOL() {
	    return this.getToken(MySQLParser.JSON_SYMBOL, 0);
	};

	realType() {
	    return this.getTypedRuleContext(RealTypeContext,0);
	};

	FLOAT_SYMBOL() {
	    return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
	};

	standardFloatOptions() {
	    return this.getTypedRuleContext(StandardFloatOptionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCastType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_exprList;
    }

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExprList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_charset;
    }

	CHAR_SYMBOL() {
	    return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
	};

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	CHARSET_SYMBOL() {
	    return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCharset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NotRuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_notRule;
    }

	NOT_SYMBOL() {
	    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	};

	NOT2_SYMBOL() {
	    return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitNotRule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Not2RuleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_not2Rule;
    }

	LOGICAL_NOT_OPERATOR() {
	    return this.getToken(MySQLParser.LOGICAL_NOT_OPERATOR, 0);
	};

	NOT2_SYMBOL() {
	    return this.getToken(MySQLParser.NOT2_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitNot2Rule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_interval;
    }

	intervalTimeStamp() {
	    return this.getTypedRuleContext(IntervalTimeStampContext,0);
	};

	SECOND_MICROSECOND_SYMBOL() {
	    return this.getToken(MySQLParser.SECOND_MICROSECOND_SYMBOL, 0);
	};

	MINUTE_MICROSECOND_SYMBOL() {
	    return this.getToken(MySQLParser.MINUTE_MICROSECOND_SYMBOL, 0);
	};

	MINUTE_SECOND_SYMBOL() {
	    return this.getToken(MySQLParser.MINUTE_SECOND_SYMBOL, 0);
	};

	HOUR_MICROSECOND_SYMBOL() {
	    return this.getToken(MySQLParser.HOUR_MICROSECOND_SYMBOL, 0);
	};

	HOUR_SECOND_SYMBOL() {
	    return this.getToken(MySQLParser.HOUR_SECOND_SYMBOL, 0);
	};

	HOUR_MINUTE_SYMBOL() {
	    return this.getToken(MySQLParser.HOUR_MINUTE_SYMBOL, 0);
	};

	DAY_MICROSECOND_SYMBOL() {
	    return this.getToken(MySQLParser.DAY_MICROSECOND_SYMBOL, 0);
	};

	DAY_SECOND_SYMBOL() {
	    return this.getToken(MySQLParser.DAY_SECOND_SYMBOL, 0);
	};

	DAY_MINUTE_SYMBOL() {
	    return this.getToken(MySQLParser.DAY_MINUTE_SYMBOL, 0);
	};

	DAY_HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.DAY_HOUR_SYMBOL, 0);
	};

	YEAR_MONTH_SYMBOL() {
	    return this.getToken(MySQLParser.YEAR_MONTH_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalTimeStampContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_intervalTimeStamp;
    }

	MICROSECOND_SYMBOL() {
	    return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
	};

	SECOND_SYMBOL() {
	    return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
	};

	MINUTE_SYMBOL() {
	    return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
	};

	HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
	};

	DAY_SYMBOL() {
	    return this.getToken(MySQLParser.DAY_SYMBOL, 0);
	};

	WEEK_SYMBOL() {
	    return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
	};

	MONTH_SYMBOL() {
	    return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
	};

	QUARTER_SYMBOL() {
	    return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
	};

	YEAR_SYMBOL() {
	    return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIntervalTimeStamp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprListWithParenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_exprListWithParentheses;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	exprList() {
	    return this.getTypedRuleContext(ExprListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExprListWithParentheses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ExprWithParenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_exprWithParentheses;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitExprWithParentheses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleExprWithParenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_simpleExprWithParentheses;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	simpleExpr() {
	    return this.getTypedRuleContext(SimpleExprContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleExprWithParentheses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_orderList;
    }

	orderExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderExpressionContext);
	    } else {
	        return this.getTypedRuleContext(OrderExpressionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOrderList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_orderExpression;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	direction() {
	    return this.getTypedRuleContext(DirectionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOrderExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_groupList;
    }

	groupingExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GroupingExpressionContext);
	    } else {
	        return this.getTypedRuleContext(GroupingExpressionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGroupList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupingExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_groupingExpression;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGroupingExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ChannelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_channel;
    }

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	CHANNEL_SYMBOL() {
	    return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
	};

	textStringNoLinebreak() {
	    return this.getTypedRuleContext(TextStringNoLinebreakContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitChannel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompoundStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_compoundStatement;
    }

	simpleStatement() {
	    return this.getTypedRuleContext(SimpleStatementContext,0);
	};

	returnStatement() {
	    return this.getTypedRuleContext(ReturnStatementContext,0);
	};

	ifStatement() {
	    return this.getTypedRuleContext(IfStatementContext,0);
	};

	caseStatement() {
	    return this.getTypedRuleContext(CaseStatementContext,0);
	};

	labeledBlock() {
	    return this.getTypedRuleContext(LabeledBlockContext,0);
	};

	unlabeledBlock() {
	    return this.getTypedRuleContext(UnlabeledBlockContext,0);
	};

	labeledControl() {
	    return this.getTypedRuleContext(LabeledControlContext,0);
	};

	unlabeledControl() {
	    return this.getTypedRuleContext(UnlabeledControlContext,0);
	};

	leaveStatement() {
	    return this.getTypedRuleContext(LeaveStatementContext,0);
	};

	iterateStatement() {
	    return this.getTypedRuleContext(IterateStatementContext,0);
	};

	cursorOpen() {
	    return this.getTypedRuleContext(CursorOpenContext,0);
	};

	cursorFetch() {
	    return this.getTypedRuleContext(CursorFetchContext,0);
	};

	cursorClose() {
	    return this.getTypedRuleContext(CursorCloseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCompoundStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReturnStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_returnStatement;
    }

	RETURN_SYMBOL() {
	    return this.getToken(MySQLParser.RETURN_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitReturnStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_ifStatement;
    }

	IF_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.IF_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.IF_SYMBOL, i);
	    }
	};


	ifBody() {
	    return this.getTypedRuleContext(IfBodyContext,0);
	};

	END_SYMBOL() {
	    return this.getToken(MySQLParser.END_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIfStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfBodyContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_ifBody;
    }

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	thenStatement() {
	    return this.getTypedRuleContext(ThenStatementContext,0);
	};

	ELSEIF_SYMBOL() {
	    return this.getToken(MySQLParser.ELSEIF_SYMBOL, 0);
	};

	ifBody() {
	    return this.getTypedRuleContext(IfBodyContext,0);
	};

	ELSE_SYMBOL() {
	    return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
	};

	compoundStatementList() {
	    return this.getTypedRuleContext(CompoundStatementListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIfBody(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ThenStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_thenStatement;
    }

	THEN_SYMBOL() {
	    return this.getToken(MySQLParser.THEN_SYMBOL, 0);
	};

	compoundStatementList() {
	    return this.getTypedRuleContext(CompoundStatementListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitThenStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CompoundStatementListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_compoundStatementList;
    }

	compoundStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CompoundStatementContext);
	    } else {
	        return this.getTypedRuleContext(CompoundStatementContext,i);
	    }
	};

	SEMICOLON_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCompoundStatementList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CaseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_caseStatement;
    }

	CASE_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.CASE_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.CASE_SYMBOL, i);
	    }
	};


	END_SYMBOL() {
	    return this.getToken(MySQLParser.END_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	whenExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WhenExpressionContext);
	    } else {
	        return this.getTypedRuleContext(WhenExpressionContext,i);
	    }
	};

	thenStatement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ThenStatementContext);
	    } else {
	        return this.getTypedRuleContext(ThenStatementContext,i);
	    }
	};

	elseStatement() {
	    return this.getTypedRuleContext(ElseStatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCaseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ElseStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_elseStatement;
    }

	ELSE_SYMBOL() {
	    return this.getToken(MySQLParser.ELSE_SYMBOL, 0);
	};

	compoundStatementList() {
	    return this.getTypedRuleContext(CompoundStatementListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitElseStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_labeledBlock;
    }

	label() {
	    return this.getTypedRuleContext(LabelContext,0);
	};

	beginEndBlock() {
	    return this.getTypedRuleContext(BeginEndBlockContext,0);
	};

	labelRef() {
	    return this.getTypedRuleContext(LabelRefContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLabeledBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnlabeledBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_unlabeledBlock;
    }

	beginEndBlock() {
	    return this.getTypedRuleContext(BeginEndBlockContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUnlabeledBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_label;
    }

	labelIdentifier() {
	    return this.getTypedRuleContext(LabelIdentifierContext,0);
	};

	COLON_SYMBOL() {
	    return this.getToken(MySQLParser.COLON_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLabel(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BeginEndBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_beginEndBlock;
    }

	BEGIN_SYMBOL() {
	    return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
	};

	END_SYMBOL() {
	    return this.getToken(MySQLParser.END_SYMBOL, 0);
	};

	spDeclarations() {
	    return this.getTypedRuleContext(SpDeclarationsContext,0);
	};

	compoundStatementList() {
	    return this.getTypedRuleContext(CompoundStatementListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitBeginEndBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabeledControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_labeledControl;
    }

	label() {
	    return this.getTypedRuleContext(LabelContext,0);
	};

	unlabeledControl() {
	    return this.getTypedRuleContext(UnlabeledControlContext,0);
	};

	labelRef() {
	    return this.getTypedRuleContext(LabelRefContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLabeledControl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnlabeledControlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_unlabeledControl;
    }

	loopBlock() {
	    return this.getTypedRuleContext(LoopBlockContext,0);
	};

	whileDoBlock() {
	    return this.getTypedRuleContext(WhileDoBlockContext,0);
	};

	repeatUntilBlock() {
	    return this.getTypedRuleContext(RepeatUntilBlockContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUnlabeledControl(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LoopBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_loopBlock;
    }

	LOOP_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.LOOP_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.LOOP_SYMBOL, i);
	    }
	};


	compoundStatementList() {
	    return this.getTypedRuleContext(CompoundStatementListContext,0);
	};

	END_SYMBOL() {
	    return this.getToken(MySQLParser.END_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLoopBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhileDoBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_whileDoBlock;
    }

	WHILE_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.WHILE_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.WHILE_SYMBOL, i);
	    }
	};


	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	DO_SYMBOL() {
	    return this.getToken(MySQLParser.DO_SYMBOL, 0);
	};

	compoundStatementList() {
	    return this.getTypedRuleContext(CompoundStatementListContext,0);
	};

	END_SYMBOL() {
	    return this.getToken(MySQLParser.END_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWhileDoBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RepeatUntilBlockContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_repeatUntilBlock;
    }

	REPEAT_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.REPEAT_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.REPEAT_SYMBOL, i);
	    }
	};


	compoundStatementList() {
	    return this.getTypedRuleContext(CompoundStatementListContext,0);
	};

	UNTIL_SYMBOL() {
	    return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	END_SYMBOL() {
	    return this.getToken(MySQLParser.END_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRepeatUntilBlock(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SpDeclarationsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_spDeclarations;
    }

	spDeclaration = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpDeclarationContext);
	    } else {
	        return this.getTypedRuleContext(SpDeclarationContext,i);
	    }
	};

	SEMICOLON_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.SEMICOLON_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.SEMICOLON_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSpDeclarations(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SpDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_spDeclaration;
    }

	variableDeclaration() {
	    return this.getTypedRuleContext(VariableDeclarationContext,0);
	};

	conditionDeclaration() {
	    return this.getTypedRuleContext(ConditionDeclarationContext,0);
	};

	handlerDeclaration() {
	    return this.getTypedRuleContext(HandlerDeclarationContext,0);
	};

	cursorDeclaration() {
	    return this.getTypedRuleContext(CursorDeclarationContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSpDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VariableDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_variableDeclaration;
    }

	DECLARE_SYMBOL() {
	    return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	collate() {
	    return this.getTypedRuleContext(CollateContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitVariableDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_conditionDeclaration;
    }

	DECLARE_SYMBOL() {
	    return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CONDITION_SYMBOL() {
	    return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	spCondition() {
	    return this.getTypedRuleContext(SpConditionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitConditionDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SpConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_spCondition;
    }

	ulong_number() {
	    return this.getTypedRuleContext(Ulong_numberContext,0);
	};

	sqlstate() {
	    return this.getTypedRuleContext(SqlstateContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSpCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SqlstateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_sqlstate;
    }

	SQLSTATE_SYMBOL() {
	    return this.getToken(MySQLParser.SQLSTATE_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	VALUE_SYMBOL() {
	    return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSqlstate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HandlerDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_handlerDeclaration;
    }

	DECLARE_SYMBOL() {
	    return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
	};

	HANDLER_SYMBOL() {
	    return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	handlerCondition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(HandlerConditionContext);
	    } else {
	        return this.getTypedRuleContext(HandlerConditionContext,i);
	    }
	};

	compoundStatement() {
	    return this.getTypedRuleContext(CompoundStatementContext,0);
	};

	CONTINUE_SYMBOL() {
	    return this.getToken(MySQLParser.CONTINUE_SYMBOL, 0);
	};

	EXIT_SYMBOL() {
	    return this.getToken(MySQLParser.EXIT_SYMBOL, 0);
	};

	UNDO_SYMBOL() {
	    return this.getToken(MySQLParser.UNDO_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitHandlerDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HandlerConditionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_handlerCondition;
    }

	spCondition() {
	    return this.getTypedRuleContext(SpConditionContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	SQLWARNING_SYMBOL() {
	    return this.getToken(MySQLParser.SQLWARNING_SYMBOL, 0);
	};

	notRule() {
	    return this.getTypedRuleContext(NotRuleContext,0);
	};

	FOUND_SYMBOL() {
	    return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
	};

	SQLEXCEPTION_SYMBOL() {
	    return this.getToken(MySQLParser.SQLEXCEPTION_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitHandlerCondition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorDeclarationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_cursorDeclaration;
    }

	DECLARE_SYMBOL() {
	    return this.getToken(MySQLParser.DECLARE_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CURSOR_SYMBOL() {
	    return this.getToken(MySQLParser.CURSOR_SYMBOL, 0);
	};

	FOR_SYMBOL() {
	    return this.getToken(MySQLParser.FOR_SYMBOL, 0);
	};

	selectStatement() {
	    return this.getTypedRuleContext(SelectStatementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCursorDeclaration(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IterateStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_iterateStatement;
    }

	ITERATE_SYMBOL() {
	    return this.getToken(MySQLParser.ITERATE_SYMBOL, 0);
	};

	labelRef() {
	    return this.getTypedRuleContext(LabelRefContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIterateStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LeaveStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_leaveStatement;
    }

	LEAVE_SYMBOL() {
	    return this.getToken(MySQLParser.LEAVE_SYMBOL, 0);
	};

	labelRef() {
	    return this.getTypedRuleContext(LabelRefContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLeaveStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GetDiagnosticsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_getDiagnostics;
    }

	GET_SYMBOL() {
	    return this.getToken(MySQLParser.GET_SYMBOL, 0);
	};

	DIAGNOSTICS_SYMBOL() {
	    return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
	};

	statementInformationItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(StatementInformationItemContext);
	    } else {
	        return this.getTypedRuleContext(StatementInformationItemContext,i);
	    }
	};

	CONDITION_SYMBOL() {
	    return this.getToken(MySQLParser.CONDITION_SYMBOL, 0);
	};

	signalAllowedExpr() {
	    return this.getTypedRuleContext(SignalAllowedExprContext,0);
	};

	conditionInformationItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ConditionInformationItemContext);
	    } else {
	        return this.getTypedRuleContext(ConditionInformationItemContext,i);
	    }
	};

	CURRENT_SYMBOL() {
	    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	};

	STACKED_SYMBOL() {
	    return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGetDiagnostics(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SignalAllowedExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_signalAllowedExpr;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSignalAllowedExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StatementInformationItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_statementInformationItem;
    }

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	NUMBER_SYMBOL() {
	    return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
	};

	ROW_COUNT_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitStatementInformationItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConditionInformationItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_conditionInformationItem;
    }

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	variable() {
	    return this.getTypedRuleContext(VariableContext,0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	signalInformationItemName() {
	    return this.getTypedRuleContext(SignalInformationItemNameContext,0);
	};

	RETURNED_SQLSTATE_SYMBOL() {
	    return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitConditionInformationItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SignalInformationItemNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_signalInformationItemName;
    }

	CLASS_ORIGIN_SYMBOL() {
	    return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
	};

	SUBCLASS_ORIGIN_SYMBOL() {
	    return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
	};

	CONSTRAINT_CATALOG_SYMBOL() {
	    return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
	};

	CONSTRAINT_SCHEMA_SYMBOL() {
	    return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
	};

	CONSTRAINT_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
	};

	CATALOG_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
	};

	SCHEMA_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
	};

	TABLE_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
	};

	COLUMN_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
	};

	CURSOR_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
	};

	MESSAGE_TEXT_SYMBOL() {
	    return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
	};

	MYSQL_ERRNO_SYMBOL() {
	    return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSignalInformationItemName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SignalStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_signalStatement;
    }

	SIGNAL_SYMBOL() {
	    return this.getToken(MySQLParser.SIGNAL_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	sqlstate() {
	    return this.getTypedRuleContext(SqlstateContext,0);
	};

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	signalInformationItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SignalInformationItemContext);
	    } else {
	        return this.getTypedRuleContext(SignalInformationItemContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSignalStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResignalStatementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_resignalStatement;
    }

	RESIGNAL_SYMBOL() {
	    return this.getToken(MySQLParser.RESIGNAL_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	sqlstate() {
	    return this.getTypedRuleContext(SqlstateContext,0);
	};

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	signalInformationItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SignalInformationItemContext);
	    } else {
	        return this.getTypedRuleContext(SignalInformationItemContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitResignalStatement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SignalInformationItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_signalInformationItem;
    }

	signalInformationItemName() {
	    return this.getTypedRuleContext(SignalInformationItemNameContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	signalAllowedExpr() {
	    return this.getTypedRuleContext(SignalAllowedExprContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSignalInformationItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorOpenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_cursorOpen;
    }

	OPEN_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCursorOpen(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorCloseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_cursorClose;
    }

	CLOSE_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCursorClose(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CursorFetchContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_cursorFetch;
    }

	FETCH_SYMBOL() {
	    return this.getToken(MySQLParser.FETCH_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	INTO_SYMBOL() {
	    return this.getToken(MySQLParser.INTO_SYMBOL, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	FROM_SYMBOL() {
	    return this.getToken(MySQLParser.FROM_SYMBOL, 0);
	};

	NEXT_SYMBOL() {
	    return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCursorFetch(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ScheduleContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_schedule;
    }

	AT_SYMBOL() {
	    return this.getToken(MySQLParser.AT_SYMBOL, 0);
	};

	expr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ExprContext);
	    } else {
	        return this.getTypedRuleContext(ExprContext,i);
	    }
	};

	EVERY_SYMBOL() {
	    return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	STARTS_SYMBOL() {
	    return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
	};

	ENDS_SYMBOL() {
	    return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSchedule(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_columnDefinition;
    }

	columnName() {
	    return this.getTypedRuleContext(ColumnNameContext,0);
	};

	fieldDefinition() {
	    return this.getTypedRuleContext(FieldDefinitionContext,0);
	};

	checkOrReferences() {
	    return this.getTypedRuleContext(CheckOrReferencesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitColumnDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CheckOrReferencesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_checkOrReferences;
    }

	checkConstraint() {
	    return this.getTypedRuleContext(CheckConstraintContext,0);
	};

	references() {
	    return this.getTypedRuleContext(ReferencesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCheckOrReferences(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CheckConstraintContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_checkConstraint;
    }

	CHECK_SYMBOL() {
	    return this.getToken(MySQLParser.CHECK_SYMBOL, 0);
	};

	exprWithParentheses() {
	    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCheckConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintEnforcementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_constraintEnforcement;
    }

	ENFORCED_SYMBOL() {
	    return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
	};

	NOT_SYMBOL() {
	    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitConstraintEnforcement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableConstraintDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableConstraintDef;
        this.type = null;
    }

	keyListVariants() {
	    return this.getTypedRuleContext(KeyListVariantsContext,0);
	};

	KEY_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	};

	INDEX_SYMBOL() {
	    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	};

	indexNameAndType() {
	    return this.getTypedRuleContext(IndexNameAndTypeContext,0);
	};

	indexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(IndexOptionContext,i);
	    }
	};

	FULLTEXT_SYMBOL() {
	    return this.getToken(MySQLParser.FULLTEXT_SYMBOL, 0);
	};

	keyOrIndex() {
	    return this.getTypedRuleContext(KeyOrIndexContext,0);
	};

	indexName() {
	    return this.getTypedRuleContext(IndexNameContext,0);
	};

	fulltextIndexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FulltextIndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(FulltextIndexOptionContext,i);
	    }
	};

	SPATIAL_SYMBOL() {
	    return this.getToken(MySQLParser.SPATIAL_SYMBOL, 0);
	};

	spatialIndexOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SpatialIndexOptionContext);
	    } else {
	        return this.getTypedRuleContext(SpatialIndexOptionContext,i);
	    }
	};

	keyList() {
	    return this.getTypedRuleContext(KeyListContext,0);
	};

	references() {
	    return this.getTypedRuleContext(ReferencesContext,0);
	};

	checkConstraint() {
	    return this.getTypedRuleContext(CheckConstraintContext,0);
	};

	constraintName() {
	    return this.getTypedRuleContext(ConstraintNameContext,0);
	};

	FOREIGN_SYMBOL() {
	    return this.getToken(MySQLParser.FOREIGN_SYMBOL, 0);
	};

	PRIMARY_SYMBOL() {
	    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	};

	UNIQUE_SYMBOL() {
	    return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
	};

	constraintEnforcement() {
	    return this.getTypedRuleContext(ConstraintEnforcementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableConstraintDef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ConstraintNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_constraintName;
    }

	CONSTRAINT_SYMBOL() {
	    return this.getToken(MySQLParser.CONSTRAINT_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitConstraintName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fieldDefinition;
    }

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	exprWithParentheses() {
	    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
	};

	columnAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnAttributeContext);
	    } else {
	        return this.getTypedRuleContext(ColumnAttributeContext,i);
	    }
	};

	collate() {
	    return this.getTypedRuleContext(CollateContext,0);
	};

	GENERATED_SYMBOL() {
	    return this.getToken(MySQLParser.GENERATED_SYMBOL, 0);
	};

	ALWAYS_SYMBOL() {
	    return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
	};

	VIRTUAL_SYMBOL() {
	    return this.getToken(MySQLParser.VIRTUAL_SYMBOL, 0);
	};

	STORED_SYMBOL() {
	    return this.getToken(MySQLParser.STORED_SYMBOL, 0);
	};

	gcolAttribute = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(GcolAttributeContext);
	    } else {
	        return this.getTypedRuleContext(GcolAttributeContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFieldDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_columnAttribute;
        this.value = null;
    }

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	NOT_SYMBOL() {
	    return this.getToken(MySQLParser.NOT_SYMBOL, 0);
	};

	SECONDARY_SYMBOL() {
	    return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	signedLiteral() {
	    return this.getTypedRuleContext(SignedLiteralContext,0);
	};

	NOW_SYMBOL() {
	    return this.getToken(MySQLParser.NOW_SYMBOL, 0);
	};

	exprWithParentheses() {
	    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
	};

	timeFunctionParameters() {
	    return this.getTypedRuleContext(TimeFunctionParametersContext,0);
	};

	UPDATE_SYMBOL() {
	    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	};

	ON_SYMBOL() {
	    return this.getToken(MySQLParser.ON_SYMBOL, 0);
	};

	AUTO_INCREMENT_SYMBOL() {
	    return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
	};

	VALUE_SYMBOL() {
	    return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
	};

	SERIAL_SYMBOL() {
	    return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
	};

	KEY_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	};

	PRIMARY_SYMBOL() {
	    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	};

	UNIQUE_SYMBOL() {
	    return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	COMMENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	};

	collate() {
	    return this.getTypedRuleContext(CollateContext,0);
	};

	columnFormat() {
	    return this.getTypedRuleContext(ColumnFormatContext,0);
	};

	COLUMN_FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
	};

	storageMedia() {
	    return this.getTypedRuleContext(StorageMediaContext,0);
	};

	STORAGE_SYMBOL() {
	    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	};

	real_ulonglong_number() {
	    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
	};

	SRID_SYMBOL() {
	    return this.getToken(MySQLParser.SRID_SYMBOL, 0);
	};

	checkConstraint() {
	    return this.getTypedRuleContext(CheckConstraintContext,0);
	};

	constraintName() {
	    return this.getTypedRuleContext(ConstraintNameContext,0);
	};

	constraintEnforcement() {
	    return this.getTypedRuleContext(ConstraintEnforcementContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitColumnAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnFormatContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_columnFormat;
    }

	FIXED_SYMBOL() {
	    return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
	};

	DYNAMIC_SYMBOL() {
	    return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitColumnFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StorageMediaContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_storageMedia;
    }

	DISK_SYMBOL() {
	    return this.getToken(MySQLParser.DISK_SYMBOL, 0);
	};

	MEMORY_SYMBOL() {
	    return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitStorageMedia(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GcolAttributeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_gcolAttribute;
    }

	UNIQUE_SYMBOL() {
	    return this.getToken(MySQLParser.UNIQUE_SYMBOL, 0);
	};

	KEY_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	};

	COMMENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	NULL_SYMBOL() {
	    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	};

	notRule() {
	    return this.getTypedRuleContext(NotRuleContext,0);
	};

	PRIMARY_SYMBOL() {
	    return this.getToken(MySQLParser.PRIMARY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitGcolAttribute(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReferencesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_references;
        this.match = null;
        this.option = null;
    }

	REFERENCES_SYMBOL() {
	    return this.getToken(MySQLParser.REFERENCES_SYMBOL, 0);
	};

	tableRef() {
	    return this.getTypedRuleContext(TableRefContext,0);
	};

	identifierListWithParentheses() {
	    return this.getTypedRuleContext(IdentifierListWithParenthesesContext,0);
	};

	MATCH_SYMBOL() {
	    return this.getToken(MySQLParser.MATCH_SYMBOL, 0);
	};

	ON_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.ON_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.ON_SYMBOL, i);
	    }
	};


	deleteOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DeleteOptionContext);
	    } else {
	        return this.getTypedRuleContext(DeleteOptionContext,i);
	    }
	};

	UPDATE_SYMBOL() {
	    return this.getToken(MySQLParser.UPDATE_SYMBOL, 0);
	};

	DELETE_SYMBOL() {
	    return this.getToken(MySQLParser.DELETE_SYMBOL, 0);
	};

	FULL_SYMBOL() {
	    return this.getToken(MySQLParser.FULL_SYMBOL, 0);
	};

	PARTIAL_SYMBOL() {
	    return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
	};

	SIMPLE_SYMBOL() {
	    return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitReferences(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DeleteOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_deleteOption;
    }

	RESTRICT_SYMBOL() {
	    return this.getToken(MySQLParser.RESTRICT_SYMBOL, 0);
	};

	CASCADE_SYMBOL() {
	    return this.getToken(MySQLParser.CASCADE_SYMBOL, 0);
	};

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	NO_SYMBOL() {
	    return this.getToken(MySQLParser.NO_SYMBOL, 0);
	};

	ACTION_SYMBOL() {
	    return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDeleteOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_keyList;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	keyPart = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyPartContext);
	    } else {
	        return this.getTypedRuleContext(KeyPartContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitKeyList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyPartContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_keyPart;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	fieldLength() {
	    return this.getTypedRuleContext(FieldLengthContext,0);
	};

	direction() {
	    return this.getTypedRuleContext(DirectionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitKeyPart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyListWithExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_keyListWithExpression;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	keyPartOrExpression = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(KeyPartOrExpressionContext);
	    } else {
	        return this.getTypedRuleContext(KeyPartOrExpressionContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitKeyListWithExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyPartOrExpressionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_keyPartOrExpression;
    }

	keyPart() {
	    return this.getTypedRuleContext(KeyPartContext,0);
	};

	exprWithParentheses() {
	    return this.getTypedRuleContext(ExprWithParenthesesContext,0);
	};

	direction() {
	    return this.getTypedRuleContext(DirectionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitKeyPartOrExpression(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeyListVariantsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_keyListVariants;
    }

	keyListWithExpression() {
	    return this.getTypedRuleContext(KeyListWithExpressionContext,0);
	};

	keyList() {
	    return this.getTypedRuleContext(KeyListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitKeyListVariants(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexType;
        this.algorithm = null;
    }

	BTREE_SYMBOL() {
	    return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
	};

	RTREE_SYMBOL() {
	    return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
	};

	HASH_SYMBOL() {
	    return this.getToken(MySQLParser.HASH_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexOption;
    }

	commonIndexOption() {
	    return this.getTypedRuleContext(CommonIndexOptionContext,0);
	};

	indexTypeClause() {
	    return this.getTypedRuleContext(IndexTypeClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CommonIndexOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_commonIndexOption;
    }

	KEY_BLOCK_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
	};

	ulong_number() {
	    return this.getTypedRuleContext(Ulong_numberContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	COMMENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	visibility() {
	    return this.getTypedRuleContext(VisibilityContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCommonIndexOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VisibilityContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_visibility;
    }

	VISIBLE_SYMBOL() {
	    return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
	};

	INVISIBLE_SYMBOL() {
	    return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitVisibility(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexTypeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexTypeClause;
    }

	indexType() {
	    return this.getTypedRuleContext(IndexTypeContext,0);
	};

	USING_SYMBOL() {
	    return this.getToken(MySQLParser.USING_SYMBOL, 0);
	};

	TYPE_SYMBOL() {
	    return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexTypeClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FulltextIndexOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fulltextIndexOption;
    }

	commonIndexOption() {
	    return this.getTypedRuleContext(CommonIndexOptionContext,0);
	};

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	PARSER_SYMBOL() {
	    return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFulltextIndexOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SpatialIndexOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_spatialIndexOption;
    }

	commonIndexOption() {
	    return this.getTypedRuleContext(CommonIndexOptionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSpatialIndexOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataTypeDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dataTypeDefinition;
    }

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	EOF() {
	    return this.getToken(MySQLParser.EOF, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDataTypeDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dataType;
        this.type = null;
    }

	INT_SYMBOL() {
	    return this.getToken(MySQLParser.INT_SYMBOL, 0);
	};

	TINYINT_SYMBOL() {
	    return this.getToken(MySQLParser.TINYINT_SYMBOL, 0);
	};

	SMALLINT_SYMBOL() {
	    return this.getToken(MySQLParser.SMALLINT_SYMBOL, 0);
	};

	MEDIUMINT_SYMBOL() {
	    return this.getToken(MySQLParser.MEDIUMINT_SYMBOL, 0);
	};

	BIGINT_SYMBOL() {
	    return this.getToken(MySQLParser.BIGINT_SYMBOL, 0);
	};

	fieldLength() {
	    return this.getTypedRuleContext(FieldLengthContext,0);
	};

	fieldOptions() {
	    return this.getTypedRuleContext(FieldOptionsContext,0);
	};

	REAL_SYMBOL() {
	    return this.getToken(MySQLParser.REAL_SYMBOL, 0);
	};

	DOUBLE_SYMBOL() {
	    return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	PRECISION_SYMBOL() {
	    return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
	};

	FLOAT_SYMBOL() {
	    return this.getToken(MySQLParser.FLOAT_SYMBOL, 0);
	};

	DECIMAL_SYMBOL() {
	    return this.getToken(MySQLParser.DECIMAL_SYMBOL, 0);
	};

	NUMERIC_SYMBOL() {
	    return this.getToken(MySQLParser.NUMERIC_SYMBOL, 0);
	};

	FIXED_SYMBOL() {
	    return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
	};

	floatOptions() {
	    return this.getTypedRuleContext(FloatOptionsContext,0);
	};

	BIT_SYMBOL() {
	    return this.getToken(MySQLParser.BIT_SYMBOL, 0);
	};

	BOOL_SYMBOL() {
	    return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
	};

	BOOLEAN_SYMBOL() {
	    return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
	};

	CHAR_SYMBOL() {
	    return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
	};

	charsetWithOptBinary() {
	    return this.getTypedRuleContext(CharsetWithOptBinaryContext,0);
	};

	nchar() {
	    return this.getTypedRuleContext(NcharContext,0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	VARYING_SYMBOL() {
	    return this.getToken(MySQLParser.VARYING_SYMBOL, 0);
	};

	VARCHAR_SYMBOL() {
	    return this.getToken(MySQLParser.VARCHAR_SYMBOL, 0);
	};

	NATIONAL_SYMBOL() {
	    return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
	};

	NVARCHAR_SYMBOL() {
	    return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
	};

	NCHAR_SYMBOL() {
	    return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
	};

	VARBINARY_SYMBOL() {
	    return this.getToken(MySQLParser.VARBINARY_SYMBOL, 0);
	};

	YEAR_SYMBOL() {
	    return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
	};

	DATE_SYMBOL() {
	    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	};

	typeDatetimePrecision() {
	    return this.getTypedRuleContext(TypeDatetimePrecisionContext,0);
	};

	TIMESTAMP_SYMBOL() {
	    return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
	};

	DATETIME_SYMBOL() {
	    return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
	};

	TINYBLOB_SYMBOL() {
	    return this.getToken(MySQLParser.TINYBLOB_SYMBOL, 0);
	};

	BLOB_SYMBOL() {
	    return this.getToken(MySQLParser.BLOB_SYMBOL, 0);
	};

	MEDIUMBLOB_SYMBOL() {
	    return this.getToken(MySQLParser.MEDIUMBLOB_SYMBOL, 0);
	};

	LONGBLOB_SYMBOL() {
	    return this.getToken(MySQLParser.LONGBLOB_SYMBOL, 0);
	};

	LONG_SYMBOL() {
	    return this.getToken(MySQLParser.LONG_SYMBOL, 0);
	};

	TINYTEXT_SYMBOL() {
	    return this.getToken(MySQLParser.TINYTEXT_SYMBOL, 0);
	};

	TEXT_SYMBOL() {
	    return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
	};

	MEDIUMTEXT_SYMBOL() {
	    return this.getToken(MySQLParser.MEDIUMTEXT_SYMBOL, 0);
	};

	LONGTEXT_SYMBOL() {
	    return this.getToken(MySQLParser.LONGTEXT_SYMBOL, 0);
	};

	stringList() {
	    return this.getTypedRuleContext(StringListContext,0);
	};

	ENUM_SYMBOL() {
	    return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
	};

	SET_SYMBOL() {
	    return this.getToken(MySQLParser.SET_SYMBOL, 0);
	};

	SERIAL_SYMBOL() {
	    return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
	};

	JSON_SYMBOL() {
	    return this.getToken(MySQLParser.JSON_SYMBOL, 0);
	};

	GEOMETRY_SYMBOL() {
	    return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
	};

	GEOMETRYCOLLECTION_SYMBOL() {
	    return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	};

	POINT_SYMBOL() {
	    return this.getToken(MySQLParser.POINT_SYMBOL, 0);
	};

	MULTIPOINT_SYMBOL() {
	    return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
	};

	LINESTRING_SYMBOL() {
	    return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
	};

	MULTILINESTRING_SYMBOL() {
	    return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
	};

	POLYGON_SYMBOL() {
	    return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
	};

	MULTIPOLYGON_SYMBOL() {
	    return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDataType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NcharContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_nchar;
        this.type = null;
    }

	NCHAR_SYMBOL() {
	    return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
	};

	CHAR_SYMBOL() {
	    return this.getToken(MySQLParser.CHAR_SYMBOL, 0);
	};

	NATIONAL_SYMBOL() {
	    return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitNchar(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RealTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_realType;
        this.type = null;
    }

	REAL_SYMBOL() {
	    return this.getToken(MySQLParser.REAL_SYMBOL, 0);
	};

	DOUBLE_SYMBOL() {
	    return this.getToken(MySQLParser.DOUBLE_SYMBOL, 0);
	};

	PRECISION_SYMBOL() {
	    return this.getToken(MySQLParser.PRECISION_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRealType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldLengthContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fieldLength;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	real_ulonglong_number() {
	    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
	};

	DECIMAL_NUMBER() {
	    return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFieldLength(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fieldOptions;
    }

	SIGNED_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.SIGNED_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.SIGNED_SYMBOL, i);
	    }
	};


	UNSIGNED_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.UNSIGNED_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.UNSIGNED_SYMBOL, i);
	    }
	};


	ZEROFILL_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.ZEROFILL_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.ZEROFILL_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFieldOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharsetWithOptBinaryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_charsetWithOptBinary;
    }

	ascii() {
	    return this.getTypedRuleContext(AsciiContext,0);
	};

	unicode() {
	    return this.getTypedRuleContext(UnicodeContext,0);
	};

	BYTE_SYMBOL() {
	    return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
	};

	charset() {
	    return this.getTypedRuleContext(CharsetContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCharsetWithOptBinary(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AsciiContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_ascii;
    }

	ASCII_SYMBOL() {
	    return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAscii(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UnicodeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_unicode;
    }

	UNICODE_SYMBOL() {
	    return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUnicode(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WsNumCodepointsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_wsNumCodepoints;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWsNumCodepoints(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeDatetimePrecisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_typeDatetimePrecision;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	INT_NUMBER() {
	    return this.getToken(MySQLParser.INT_NUMBER, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTypeDatetimePrecision(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharsetNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_charsetName;
    }

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCharsetName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CollationNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_collationName;
    }

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	BINARY_SYMBOL() {
	    return this.getToken(MySQLParser.BINARY_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCollationName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createTableOptions;
    }

	createTableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateTableOptionContext);
	    } else {
	        return this.getTypedRuleContext(CreateTableOptionContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateTableOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableOptionsSpaceSeparatedContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createTableOptionsSpaceSeparated;
    }

	createTableOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateTableOptionContext);
	    } else {
	        return this.getTypedRuleContext(CreateTableOptionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateTableOptionsSpaceSeparated(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateTableOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createTableOption;
        this.option = null;
        this.format = null;
        this.method = null;
    }

	engineRef() {
	    return this.getTypedRuleContext(EngineRefContext,0);
	};

	ENGINE_SYMBOL() {
	    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	SECONDARY_ENGINE_SYMBOL() {
	    return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
	};

	NULL_SYMBOL() {
	    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	equal() {
	    return this.getTypedRuleContext(EqualContext,0);
	};

	ulonglong_number() {
	    return this.getTypedRuleContext(Ulonglong_numberContext,0);
	};

	MAX_ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
	};

	MIN_ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
	};

	ulong_number() {
	    return this.getTypedRuleContext(Ulong_numberContext,0);
	};

	AVG_ROW_LENGTH_SYMBOL() {
	    return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	};

	COMMENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	COMPRESSION_SYMBOL() {
	    return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
	};

	ENCRYPTION_SYMBOL() {
	    return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
	};

	AUTO_INCREMENT_SYMBOL() {
	    return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
	};

	ternaryOption() {
	    return this.getTypedRuleContext(TernaryOptionContext,0);
	};

	PACK_KEYS_SYMBOL() {
	    return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
	};

	STATS_AUTO_RECALC_SYMBOL() {
	    return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
	};

	STATS_PERSISTENT_SYMBOL() {
	    return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
	};

	STATS_SAMPLE_PAGES_SYMBOL() {
	    return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
	};

	CHECKSUM_SYMBOL() {
	    return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
	};

	TABLE_CHECKSUM_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
	};

	DELAY_KEY_WRITE_SYMBOL() {
	    return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
	};

	ROW_FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	DYNAMIC_SYMBOL() {
	    return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
	};

	FIXED_SYMBOL() {
	    return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
	};

	COMPRESSED_SYMBOL() {
	    return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
	};

	REDUNDANT_SYMBOL() {
	    return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
	};

	COMPACT_SYMBOL() {
	    return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	tableRefList() {
	    return this.getTypedRuleContext(TableRefListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	UNION_SYMBOL() {
	    return this.getToken(MySQLParser.UNION_SYMBOL, 0);
	};

	defaultCharset() {
	    return this.getTypedRuleContext(DefaultCharsetContext,0);
	};

	defaultCollation() {
	    return this.getTypedRuleContext(DefaultCollationContext,0);
	};

	INSERT_METHOD_SYMBOL() {
	    return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
	};

	NO_SYMBOL() {
	    return this.getToken(MySQLParser.NO_SYMBOL, 0);
	};

	FIRST_SYMBOL() {
	    return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
	};

	LAST_SYMBOL() {
	    return this.getToken(MySQLParser.LAST_SYMBOL, 0);
	};

	DIRECTORY_SYMBOL() {
	    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	};

	DATA_SYMBOL() {
	    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	};

	INDEX_SYMBOL() {
	    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	STORAGE_SYMBOL() {
	    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	};

	DISK_SYMBOL() {
	    return this.getToken(MySQLParser.DISK_SYMBOL, 0);
	};

	MEMORY_SYMBOL() {
	    return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
	};

	CONNECTION_SYMBOL() {
	    return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
	};

	KEY_BLOCK_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateTableOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TernaryOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_ternaryOption;
    }

	ulong_number() {
	    return this.getTypedRuleContext(Ulong_numberContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTernaryOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultCollationContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_defaultCollation;
    }

	COLLATE_SYMBOL() {
	    return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDefaultCollation(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultEncryptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_defaultEncryption;
    }

	ENCRYPTION_SYMBOL() {
	    return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDefaultEncryption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefaultCharsetContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_defaultCharset;
    }

	charset() {
	    return this.getTypedRuleContext(CharsetContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDefaultCharset(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_partitionClause;
    }

	PARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	partitionTypeDef() {
	    return this.getTypedRuleContext(PartitionTypeDefContext,0);
	};

	PARTITIONS_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	subPartitions() {
	    return this.getTypedRuleContext(SubPartitionsContext,0);
	};

	partitionDefinitions() {
	    return this.getTypedRuleContext(PartitionDefinitionsContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPartitionClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionTypeDefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_partitionTypeDef;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class PartitionDefRangeListContext extends PartitionTypeDefContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RANGE_SYMBOL() {
	    return this.getToken(MySQLParser.RANGE_SYMBOL, 0);
	};

	LIST_SYMBOL() {
	    return this.getToken(MySQLParser.LIST_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	COLUMNS_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPartitionDefRangeList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.PartitionDefRangeListContext = PartitionDefRangeListContext;

class PartitionDefKeyContext extends PartitionTypeDefContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	KEY_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	LINEAR_SYMBOL() {
	    return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
	};

	partitionKeyAlgorithm() {
	    return this.getTypedRuleContext(PartitionKeyAlgorithmContext,0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPartitionDefKey(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.PartitionDefKeyContext = PartitionDefKeyContext;

class PartitionDefHashContext extends PartitionTypeDefContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	HASH_SYMBOL() {
	    return this.getToken(MySQLParser.HASH_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	LINEAR_SYMBOL() {
	    return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPartitionDefHash(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

MySQLParser.PartitionDefHashContext = PartitionDefHashContext;

class SubPartitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_subPartitions;
    }

	SUBPARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	HASH_SYMBOL() {
	    return this.getToken(MySQLParser.HASH_SYMBOL, 0);
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	KEY_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_SYMBOL, 0);
	};

	identifierListWithParentheses() {
	    return this.getTypedRuleContext(IdentifierListWithParenthesesContext,0);
	};

	LINEAR_SYMBOL() {
	    return this.getToken(MySQLParser.LINEAR_SYMBOL, 0);
	};

	SUBPARTITIONS_SYMBOL() {
	    return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	partitionKeyAlgorithm() {
	    return this.getTypedRuleContext(PartitionKeyAlgorithmContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSubPartitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionKeyAlgorithmContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_partitionKeyAlgorithm;
    }

	ALGORITHM_SYMBOL() {
	    return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPartitionKeyAlgorithm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionDefinitionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_partitionDefinitions;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	partitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionDefinitionContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPartitionDefinitions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_partitionDefinition;
    }

	PARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	VALUES_SYMBOL() {
	    return this.getToken(MySQLParser.VALUES_SYMBOL, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySQLParser.LESS_SYMBOL, 0);
	};

	THAN_SYMBOL() {
	    return this.getToken(MySQLParser.THAN_SYMBOL, 0);
	};

	IN_SYMBOL() {
	    return this.getToken(MySQLParser.IN_SYMBOL, 0);
	};

	partitionValuesIn() {
	    return this.getTypedRuleContext(PartitionValuesInContext,0);
	};

	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	subpartitionDefinition = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SubpartitionDefinitionContext);
	    } else {
	        return this.getTypedRuleContext(SubpartitionDefinitionContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	partitionValueItemListParen() {
	    return this.getTypedRuleContext(PartitionValueItemListParenContext,0);
	};

	MAXVALUE_SYMBOL() {
	    return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPartitionDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionValuesInContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_partitionValuesIn;
    }

	partitionValueItemListParen = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionValueItemListParenContext);
	    } else {
	        return this.getTypedRuleContext(PartitionValueItemListParenContext,i);
	    }
	};

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPartitionValuesIn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_partitionOption;
        this.option = null;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	engineRef() {
	    return this.getTypedRuleContext(EngineRefContext,0);
	};

	ENGINE_SYMBOL() {
	    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	};

	STORAGE_SYMBOL() {
	    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	};

	real_ulong_number() {
	    return this.getTypedRuleContext(Real_ulong_numberContext,0);
	};

	NODEGROUP_SYMBOL() {
	    return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
	};

	MAX_ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
	};

	MIN_ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
	};

	DIRECTORY_SYMBOL() {
	    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	};

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	DATA_SYMBOL() {
	    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	};

	INDEX_SYMBOL() {
	    return this.getToken(MySQLParser.INDEX_SYMBOL, 0);
	};

	COMMENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPartitionOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubpartitionDefinitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_subpartitionDefinition;
    }

	SUBPARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	partitionOption = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionOptionContext);
	    } else {
	        return this.getTypedRuleContext(PartitionOptionContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSubpartitionDefinition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionValueItemListParenContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_partitionValueItemListParen;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	partitionValueItem = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionValueItemContext);
	    } else {
	        return this.getTypedRuleContext(PartitionValueItemContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPartitionValueItemListParen(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionValueItemContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_partitionValueItem;
    }

	bitExpr() {
	    return this.getTypedRuleContext(BitExprContext,0);
	};

	MAXVALUE_SYMBOL() {
	    return this.getToken(MySQLParser.MAXVALUE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPartitionValueItem(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DefinerClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_definerClause;
    }

	DEFINER_SYMBOL() {
	    return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDefinerClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_ifExists;
    }

	IF_SYMBOL() {
	    return this.getToken(MySQLParser.IF_SYMBOL, 0);
	};

	EXISTS_SYMBOL() {
	    return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIfExists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IfNotExistsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_ifNotExists;
    }

	IF_SYMBOL() {
	    return this.getToken(MySQLParser.IF_SYMBOL, 0);
	};

	notRule() {
	    return this.getTypedRuleContext(NotRuleContext,0);
	};

	EXISTS_SYMBOL() {
	    return this.getToken(MySQLParser.EXISTS_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIfNotExists(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_procedureParameter;
        this.type = null;
    }

	functionParameter() {
	    return this.getTypedRuleContext(FunctionParameterContext,0);
	};

	IN_SYMBOL() {
	    return this.getToken(MySQLParser.IN_SYMBOL, 0);
	};

	OUT_SYMBOL() {
	    return this.getToken(MySQLParser.OUT_SYMBOL, 0);
	};

	INOUT_SYMBOL() {
	    return this.getToken(MySQLParser.INOUT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitProcedureParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionParameterContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_functionParameter;
    }

	parameterName() {
	    return this.getTypedRuleContext(ParameterNameContext,0);
	};

	typeWithOptCollate() {
	    return this.getTypedRuleContext(TypeWithOptCollateContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFunctionParameter(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CollateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_collate;
    }

	COLLATE_SYMBOL() {
	    return this.getToken(MySQLParser.COLLATE_SYMBOL, 0);
	};

	collationName() {
	    return this.getTypedRuleContext(CollationNameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCollate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TypeWithOptCollateContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_typeWithOptCollate;
    }

	dataType() {
	    return this.getTypedRuleContext(DataTypeContext,0);
	};

	collate() {
	    return this.getTypedRuleContext(CollateContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTypeWithOptCollate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SchemaIdentifierPairContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_schemaIdentifierPair;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	schemaRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SchemaRefContext);
	    } else {
	        return this.getTypedRuleContext(SchemaRefContext,i);
	    }
	};

	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSchemaIdentifierPair(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewRefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_viewRefList;
    }

	viewRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ViewRefContext);
	    } else {
	        return this.getTypedRuleContext(ViewRefContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitViewRefList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpdateListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_updateList;
    }

	updateElement = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UpdateElementContext);
	    } else {
	        return this.getTypedRuleContext(UpdateElementContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUpdateList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UpdateElementContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_updateElement;
    }

	columnRef() {
	    return this.getTypedRuleContext(ColumnRefContext,0);
	};

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	expr() {
	    return this.getTypedRuleContext(ExprContext,0);
	};

	DEFAULT_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUpdateElement(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CharsetClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_charsetClause;
    }

	charset() {
	    return this.getTypedRuleContext(CharsetContext,0);
	};

	charsetName() {
	    return this.getTypedRuleContext(CharsetNameContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCharsetClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fieldsClause;
    }

	COLUMNS_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
	};

	fieldTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(FieldTermContext);
	    } else {
	        return this.getTypedRuleContext(FieldTermContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFieldsClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fieldTerm;
    }

	TERMINATED_SYMBOL() {
	    return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	ENCLOSED_SYMBOL() {
	    return this.getToken(MySQLParser.ENCLOSED_SYMBOL, 0);
	};

	OPTIONALLY_SYMBOL() {
	    return this.getToken(MySQLParser.OPTIONALLY_SYMBOL, 0);
	};

	ESCAPED_SYMBOL() {
	    return this.getToken(MySQLParser.ESCAPED_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFieldTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LinesClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_linesClause;
    }

	LINES_SYMBOL() {
	    return this.getToken(MySQLParser.LINES_SYMBOL, 0);
	};

	lineTerm = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LineTermContext);
	    } else {
	        return this.getTypedRuleContext(LineTermContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLinesClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LineTermContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_lineTerm;
    }

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	TERMINATED_SYMBOL() {
	    return this.getToken(MySQLParser.TERMINATED_SYMBOL, 0);
	};

	STARTING_SYMBOL() {
	    return this.getToken(MySQLParser.STARTING_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLineTerm(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_userList;
    }

	user = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(UserContext);
	    } else {
	        return this.getTypedRuleContext(UserContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUserList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateUserListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createUserList;
    }

	createUserEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CreateUserEntryContext);
	    } else {
	        return this.getTypedRuleContext(CreateUserEntryContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateUserList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterUserListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterUserList;
    }

	alterUserEntry = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterUserEntryContext);
	    } else {
	        return this.getTypedRuleContext(AlterUserEntryContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterUserList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateUserEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_createUserEntry;
    }

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	IDENTIFIED_SYMBOL() {
	    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	RANDOM_SYMBOL() {
	    return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	};

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	textStringHash() {
	    return this.getTypedRuleContext(TextStringHashContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitCreateUserEntry(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterUserEntryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_alterUserEntry;
    }

	user() {
	    return this.getTypedRuleContext(UserContext,0);
	};

	IDENTIFIED_SYMBOL() {
	    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	};

	BY_SYMBOL() {
	    return this.getToken(MySQLParser.BY_SYMBOL, 0);
	};

	textString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextStringContext);
	    } else {
	        return this.getTypedRuleContext(TextStringContext,i);
	    }
	};

	WITH_SYMBOL() {
	    return this.getToken(MySQLParser.WITH_SYMBOL, 0);
	};

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	discardOldPassword() {
	    return this.getTypedRuleContext(DiscardOldPasswordContext,0);
	};

	REPLACE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	};

	retainCurrentPassword() {
	    return this.getTypedRuleContext(RetainCurrentPasswordContext,0);
	};

	AS_SYMBOL() {
	    return this.getToken(MySQLParser.AS_SYMBOL, 0);
	};

	textStringHash() {
	    return this.getTypedRuleContext(TextStringHashContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitAlterUserEntry(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RetainCurrentPasswordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_retainCurrentPassword;
    }

	RETAIN_SYMBOL() {
	    return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
	};

	CURRENT_SYMBOL() {
	    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRetainCurrentPassword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DiscardOldPasswordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_discardOldPassword;
    }

	DISCARD_SYMBOL() {
	    return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
	};

	OLD_SYMBOL() {
	    return this.getToken(MySQLParser.OLD_SYMBOL, 0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDiscardOldPassword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ReplacePasswordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_replacePassword;
    }

	REPLACE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLACE_SYMBOL, 0);
	};

	textString() {
	    return this.getTypedRuleContext(TextStringContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitReplacePassword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserIdentifierOrTextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_userIdentifierOrText;
    }

	textOrIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextOrIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(TextOrIdentifierContext,i);
	    }
	};

	AT_SIGN_SYMBOL() {
	    return this.getToken(MySQLParser.AT_SIGN_SYMBOL, 0);
	};

	AT_TEXT_SUFFIX() {
	    return this.getToken(MySQLParser.AT_TEXT_SUFFIX, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUserIdentifierOrText(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UserContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_user;
    }

	userIdentifierOrText() {
	    return this.getTypedRuleContext(UserIdentifierOrTextContext,0);
	};

	CURRENT_USER_SYMBOL() {
	    return this.getToken(MySQLParser.CURRENT_USER_SYMBOL, 0);
	};

	parentheses() {
	    return this.getTypedRuleContext(ParenthesesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUser(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LikeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_likeClause;
    }

	LIKE_SYMBOL() {
	    return this.getToken(MySQLParser.LIKE_SYMBOL, 0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLikeClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LikeOrWhereContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_likeOrWhere;
    }

	likeClause() {
	    return this.getTypedRuleContext(LikeClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLikeOrWhere(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OnlineOptionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_onlineOption;
    }

	ONLINE_SYMBOL() {
	    return this.getToken(MySQLParser.ONLINE_SYMBOL, 0);
	};

	OFFLINE_SYMBOL() {
	    return this.getToken(MySQLParser.OFFLINE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOnlineOption(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NoWriteToBinLogContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_noWriteToBinLog;
    }

	LOCAL_SYMBOL() {
	    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	};

	NO_WRITE_TO_BINLOG_SYMBOL() {
	    return this.getToken(MySQLParser.NO_WRITE_TO_BINLOG_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitNoWriteToBinLog(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UsePartitionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_usePartition;
    }

	PARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	};

	identifierListWithParentheses() {
	    return this.getTypedRuleContext(IdentifierListWithParenthesesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUsePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FieldIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_fieldIdentifier;
    }

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFieldIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_columnName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	fieldIdentifier() {
	    return this.getTypedRuleContext(FieldIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitColumnName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnInternalRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_columnInternalRef;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitColumnInternalRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnInternalRefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_columnInternalRefList;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	columnInternalRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnInternalRefContext);
	    } else {
	        return this.getTypedRuleContext(ColumnInternalRefContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitColumnInternalRefList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_columnRef;
    }

	fieldIdentifier() {
	    return this.getTypedRuleContext(FieldIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitColumnRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class InsertIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_insertIdentifier;
    }

	columnRef() {
	    return this.getTypedRuleContext(ColumnRefContext,0);
	};

	tableWild() {
	    return this.getTypedRuleContext(TableWildContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitInsertIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IndexRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_indexRef;
    }

	fieldIdentifier() {
	    return this.getTypedRuleContext(FieldIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIndexRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableWildContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableWild;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.DOT_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.DOT_SYMBOL, i);
	    }
	};


	MULT_OPERATOR() {
	    return this.getToken(MySQLParser.MULT_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableWild(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SchemaNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_schemaName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSchemaName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SchemaRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_schemaRef;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSchemaRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_procedureName;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitProcedureName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProcedureRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_procedureRef;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitProcedureRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_functionName;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFunctionName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FunctionRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_functionRef;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFunctionRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggerNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_triggerName;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTriggerName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TriggerRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_triggerRef;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTriggerRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_viewName;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitViewName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ViewRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_viewRef;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitViewRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablespaceNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tablespaceName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTablespaceName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TablespaceRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tablespaceRef;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTablespaceRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogfileGroupNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_logfileGroupName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLogfileGroupName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LogfileGroupRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_logfileGroupRef;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLogfileGroupRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EventNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_eventName;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitEventName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EventRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_eventRef;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitEventRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UdfNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_udfName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUdfName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ServerNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_serverName;
    }

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitServerName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ServerRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_serverRef;
    }

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitServerRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EngineRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_engineRef;
    }

	textOrIdentifier() {
	    return this.getTypedRuleContext(TextOrIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitEngineRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableName;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FilterTableRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_filterTableRef;
    }

	schemaRef() {
	    return this.getTypedRuleContext(SchemaRefContext,0);
	};

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFilterTableRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRefWithWildcardContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableRefWithWildcard;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	DOT_SYMBOL() {
	    return this.getToken(MySQLParser.DOT_SYMBOL, 0);
	};

	MULT_OPERATOR() {
	    return this.getToken(MySQLParser.MULT_OPERATOR, 0);
	};

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableRefWithWildcard(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableRef;
    }

	qualifiedIdentifier() {
	    return this.getTypedRuleContext(QualifiedIdentifierContext,0);
	};

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableRefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableRefList;
    }

	tableRef = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableRefContext);
	    } else {
	        return this.getTypedRuleContext(TableRefContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableRefList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableAliasRefListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_tableAliasRefList;
    }

	tableRefWithWildcard = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableRefWithWildcardContext);
	    } else {
	        return this.getTypedRuleContext(TableRefWithWildcardContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTableAliasRefList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParameterNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_parameterName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitParameterName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_labelIdentifier;
    }

	pureIdentifier() {
	    return this.getTypedRuleContext(PureIdentifierContext,0);
	};

	labelKeyword() {
	    return this.getTypedRuleContext(LabelKeywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLabelIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_labelRef;
    }

	labelIdentifier() {
	    return this.getTypedRuleContext(LabelIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLabelRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_roleIdentifier;
    }

	pureIdentifier() {
	    return this.getTypedRuleContext(PureIdentifierContext,0);
	};

	roleKeyword() {
	    return this.getTypedRuleContext(RoleKeywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRoleIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_roleRef;
    }

	roleIdentifier() {
	    return this.getTypedRuleContext(RoleIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRoleRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PluginRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_pluginRef;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPluginRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ComponentRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_componentRef;
    }

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitComponentRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ResourceGroupRefContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_resourceGroupRef;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitResourceGroupRef(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowNameContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_windowName;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitWindowName(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PureIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_pureIdentifier;
    }

	IDENTIFIER() {
	    return this.getToken(MySQLParser.IDENTIFIER, 0);
	};

	BACK_TICK_QUOTED_ID() {
	    return this.getToken(MySQLParser.BACK_TICK_QUOTED_ID, 0);
	};

	DOUBLE_QUOTED_TEXT() {
	    return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPureIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_identifier;
    }

	pureIdentifier() {
	    return this.getTypedRuleContext(PureIdentifierContext,0);
	};

	identifierKeyword() {
	    return this.getTypedRuleContext(IdentifierKeywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_identifierList;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIdentifierList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierListWithParenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_identifierListWithParentheses;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	identifierList() {
	    return this.getTypedRuleContext(IdentifierListContext,0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIdentifierListWithParentheses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QualifiedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_qualifiedIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	dotIdentifier() {
	    return this.getTypedRuleContext(DotIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitQualifiedIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SimpleIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_simpleIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	dotIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DotIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(DotIdentifierContext,i);
	    }
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSimpleIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DotIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_dotIdentifier;
    }

	DOT_SYMBOL() {
	    return this.getToken(MySQLParser.DOT_SYMBOL, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitDotIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Ulong_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_ulong_number;
    }

	INT_NUMBER() {
	    return this.getToken(MySQLParser.INT_NUMBER, 0);
	};

	HEX_NUMBER() {
	    return this.getToken(MySQLParser.HEX_NUMBER, 0);
	};

	LONG_NUMBER() {
	    return this.getToken(MySQLParser.LONG_NUMBER, 0);
	};

	ULONGLONG_NUMBER() {
	    return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
	};

	DECIMAL_NUMBER() {
	    return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
	};

	FLOAT_NUMBER() {
	    return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUlong_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Real_ulong_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_real_ulong_number;
    }

	INT_NUMBER() {
	    return this.getToken(MySQLParser.INT_NUMBER, 0);
	};

	HEX_NUMBER() {
	    return this.getToken(MySQLParser.HEX_NUMBER, 0);
	};

	LONG_NUMBER() {
	    return this.getToken(MySQLParser.LONG_NUMBER, 0);
	};

	ULONGLONG_NUMBER() {
	    return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitReal_ulong_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Ulonglong_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_ulonglong_number;
    }

	INT_NUMBER() {
	    return this.getToken(MySQLParser.INT_NUMBER, 0);
	};

	LONG_NUMBER() {
	    return this.getToken(MySQLParser.LONG_NUMBER, 0);
	};

	ULONGLONG_NUMBER() {
	    return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
	};

	DECIMAL_NUMBER() {
	    return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
	};

	FLOAT_NUMBER() {
	    return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitUlonglong_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class Real_ulonglong_numberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_real_ulonglong_number;
    }

	INT_NUMBER() {
	    return this.getToken(MySQLParser.INT_NUMBER, 0);
	};

	HEX_NUMBER() {
	    return this.getToken(MySQLParser.HEX_NUMBER, 0);
	};

	ULONGLONG_NUMBER() {
	    return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
	};

	LONG_NUMBER() {
	    return this.getToken(MySQLParser.LONG_NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitReal_ulonglong_number(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_literal;
    }

	textLiteral() {
	    return this.getTypedRuleContext(TextLiteralContext,0);
	};

	numLiteral() {
	    return this.getTypedRuleContext(NumLiteralContext,0);
	};

	temporalLiteral() {
	    return this.getTypedRuleContext(TemporalLiteralContext,0);
	};

	nullLiteral() {
	    return this.getTypedRuleContext(NullLiteralContext,0);
	};

	boolLiteral() {
	    return this.getTypedRuleContext(BoolLiteralContext,0);
	};

	HEX_NUMBER() {
	    return this.getToken(MySQLParser.HEX_NUMBER, 0);
	};

	BIN_NUMBER() {
	    return this.getToken(MySQLParser.BIN_NUMBER, 0);
	};

	UNDERSCORE_CHARSET() {
	    return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SignedLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_signedLiteral;
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	PLUS_OPERATOR() {
	    return this.getToken(MySQLParser.PLUS_OPERATOR, 0);
	};

	ulong_number() {
	    return this.getTypedRuleContext(Ulong_numberContext,0);
	};

	MINUS_OPERATOR() {
	    return this.getToken(MySQLParser.MINUS_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSignedLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StringListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_stringList;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	textString = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextStringContext);
	    } else {
	        return this.getTypedRuleContext(TextStringContext,i);
	    }
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitStringList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TextStringLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_textStringLiteral;
        this.value = null;
    }

	SINGLE_QUOTED_TEXT() {
	    return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
	};

	DOUBLE_QUOTED_TEXT() {
	    return this.getToken(MySQLParser.DOUBLE_QUOTED_TEXT, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTextStringLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TextStringContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_textString;
    }

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	HEX_NUMBER() {
	    return this.getToken(MySQLParser.HEX_NUMBER, 0);
	};

	BIN_NUMBER() {
	    return this.getToken(MySQLParser.BIN_NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTextString(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TextStringHashContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_textStringHash;
    }

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	HEX_NUMBER() {
	    return this.getToken(MySQLParser.HEX_NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTextStringHash(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TextLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_textLiteral;
    }

	textStringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextStringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(TextStringLiteralContext,i);
	    }
	};

	NCHAR_TEXT() {
	    return this.getToken(MySQLParser.NCHAR_TEXT, 0);
	};

	UNDERSCORE_CHARSET() {
	    return this.getToken(MySQLParser.UNDERSCORE_CHARSET, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTextLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TextStringNoLinebreakContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_textStringNoLinebreak;
    }

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTextStringNoLinebreak(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TextStringLiteralListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_textStringLiteralList;
    }

	textStringLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TextStringLiteralContext);
	    } else {
	        return this.getTypedRuleContext(TextStringLiteralContext,i);
	    }
	};

	COMMA_SYMBOL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.COMMA_SYMBOL);
	    } else {
	        return this.getToken(MySQLParser.COMMA_SYMBOL, i);
	    }
	};


	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTextStringLiteralList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_numLiteral;
    }

	INT_NUMBER() {
	    return this.getToken(MySQLParser.INT_NUMBER, 0);
	};

	LONG_NUMBER() {
	    return this.getToken(MySQLParser.LONG_NUMBER, 0);
	};

	ULONGLONG_NUMBER() {
	    return this.getToken(MySQLParser.ULONGLONG_NUMBER, 0);
	};

	DECIMAL_NUMBER() {
	    return this.getToken(MySQLParser.DECIMAL_NUMBER, 0);
	};

	FLOAT_NUMBER() {
	    return this.getToken(MySQLParser.FLOAT_NUMBER, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitNumLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class BoolLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_boolLiteral;
    }

	TRUE_SYMBOL() {
	    return this.getToken(MySQLParser.TRUE_SYMBOL, 0);
	};

	FALSE_SYMBOL() {
	    return this.getToken(MySQLParser.FALSE_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitBoolLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NullLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_nullLiteral;
    }

	NULL_SYMBOL() {
	    return this.getToken(MySQLParser.NULL_SYMBOL, 0);
	};

	NULL2_SYMBOL() {
	    return this.getToken(MySQLParser.NULL2_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitNullLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TemporalLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_temporalLiteral;
    }

	DATE_SYMBOL() {
	    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	};

	SINGLE_QUOTED_TEXT() {
	    return this.getToken(MySQLParser.SINGLE_QUOTED_TEXT, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	};

	TIMESTAMP_SYMBOL() {
	    return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTemporalLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FloatOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_floatOptions;
    }

	fieldLength() {
	    return this.getTypedRuleContext(FieldLengthContext,0);
	};

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitFloatOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class StandardFloatOptionsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_standardFloatOptions;
    }

	precision() {
	    return this.getTypedRuleContext(PrecisionContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitStandardFloatOptions(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrecisionContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_precision;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	INT_NUMBER = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(MySQLParser.INT_NUMBER);
	    } else {
	        return this.getToken(MySQLParser.INT_NUMBER, i);
	    }
	};


	COMMA_SYMBOL() {
	    return this.getToken(MySQLParser.COMMA_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitPrecision(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TextOrIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_textOrIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitTextOrIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LValueIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_lValueIdentifier;
    }

	pureIdentifier() {
	    return this.getTypedRuleContext(PureIdentifierContext,0);
	};

	lValueKeyword() {
	    return this.getTypedRuleContext(LValueKeywordContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLValueIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleIdentifierOrTextContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_roleIdentifierOrText;
    }

	roleIdentifier() {
	    return this.getTypedRuleContext(RoleIdentifierContext,0);
	};

	textStringLiteral() {
	    return this.getTypedRuleContext(TextStringLiteralContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRoleIdentifierOrText(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SizeNumberContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_sizeNumber;
    }

	real_ulonglong_number() {
	    return this.getTypedRuleContext(Real_ulonglong_numberContext,0);
	};

	pureIdentifier() {
	    return this.getTypedRuleContext(PureIdentifierContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSizeNumber(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ParenthesesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_parentheses;
    }

	OPEN_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_PAR_SYMBOL, 0);
	};

	CLOSE_PAR_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_PAR_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitParentheses(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EqualContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_equal;
    }

	EQUAL_OPERATOR() {
	    return this.getToken(MySQLParser.EQUAL_OPERATOR, 0);
	};

	ASSIGN_OPERATOR() {
	    return this.getToken(MySQLParser.ASSIGN_OPERATOR, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitEqual(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OptionTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_optionType;
    }

	PERSIST_SYMBOL() {
	    return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
	};

	PERSIST_ONLY_SYMBOL() {
	    return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
	};

	GLOBAL_SYMBOL() {
	    return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
	};

	LOCAL_SYMBOL() {
	    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	};

	SESSION_SYMBOL() {
	    return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitOptionType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class VarIdentTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_varIdentType;
    }

	GLOBAL_SYMBOL() {
	    return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
	};

	DOT_SYMBOL() {
	    return this.getToken(MySQLParser.DOT_SYMBOL, 0);
	};

	LOCAL_SYMBOL() {
	    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	};

	SESSION_SYMBOL() {
	    return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitVarIdentType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetVarIdentTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_setVarIdentType;
    }

	PERSIST_SYMBOL() {
	    return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
	};

	DOT_SYMBOL() {
	    return this.getToken(MySQLParser.DOT_SYMBOL, 0);
	};

	PERSIST_ONLY_SYMBOL() {
	    return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
	};

	GLOBAL_SYMBOL() {
	    return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
	};

	LOCAL_SYMBOL() {
	    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	};

	SESSION_SYMBOL() {
	    return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitSetVarIdentType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_identifierKeyword;
    }

	labelKeyword() {
	    return this.getTypedRuleContext(LabelKeywordContext,0);
	};

	roleOrIdentifierKeyword() {
	    return this.getTypedRuleContext(RoleOrIdentifierKeywordContext,0);
	};

	EXECUTE_SYMBOL() {
	    return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
	};

	SHUTDOWN_SYMBOL() {
	    return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
	};

	RESTART_SYMBOL() {
	    return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
	};

	identifierKeywordsUnambiguous() {
	    return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext,0);
	};

	identifierKeywordsAmbiguous1RolesAndLabels() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext,0);
	};

	identifierKeywordsAmbiguous2Labels() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous2LabelsContext,0);
	};

	identifierKeywordsAmbiguous3Roles() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous3RolesContext,0);
	};

	identifierKeywordsAmbiguous4SystemVariables() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIdentifierKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierKeywordsAmbiguous1RolesAndLabelsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_identifierKeywordsAmbiguous1RolesAndLabels;
    }

	EXECUTE_SYMBOL() {
	    return this.getToken(MySQLParser.EXECUTE_SYMBOL, 0);
	};

	RESTART_SYMBOL() {
	    return this.getToken(MySQLParser.RESTART_SYMBOL, 0);
	};

	SHUTDOWN_SYMBOL() {
	    return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIdentifierKeywordsAmbiguous1RolesAndLabels(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierKeywordsAmbiguous2LabelsContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_identifierKeywordsAmbiguous2Labels;
    }

	ASCII_SYMBOL() {
	    return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
	};

	BEGIN_SYMBOL() {
	    return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
	};

	BYTE_SYMBOL() {
	    return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
	};

	CACHE_SYMBOL() {
	    return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
	};

	CHARSET_SYMBOL() {
	    return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
	};

	CHECKSUM_SYMBOL() {
	    return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
	};

	CLONE_SYMBOL() {
	    return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
	};

	COMMENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	};

	COMMIT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
	};

	CONTAINS_SYMBOL() {
	    return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
	};

	DEALLOCATE_SYMBOL() {
	    return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
	};

	DO_SYMBOL() {
	    return this.getToken(MySQLParser.DO_SYMBOL, 0);
	};

	END_SYMBOL() {
	    return this.getToken(MySQLParser.END_SYMBOL, 0);
	};

	FLUSH_SYMBOL() {
	    return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
	};

	FOLLOWS_SYMBOL() {
	    return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
	};

	HANDLER_SYMBOL() {
	    return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
	};

	HELP_SYMBOL() {
	    return this.getToken(MySQLParser.HELP_SYMBOL, 0);
	};

	IMPORT_SYMBOL() {
	    return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
	};

	INSTALL_SYMBOL() {
	    return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
	};

	LANGUAGE_SYMBOL() {
	    return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
	};

	NO_SYMBOL() {
	    return this.getToken(MySQLParser.NO_SYMBOL, 0);
	};

	PRECEDES_SYMBOL() {
	    return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
	};

	PREPARE_SYMBOL() {
	    return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
	};

	REPAIR_SYMBOL() {
	    return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
	};

	RESET_SYMBOL() {
	    return this.getToken(MySQLParser.RESET_SYMBOL, 0);
	};

	ROLLBACK_SYMBOL() {
	    return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
	};

	SAVEPOINT_SYMBOL() {
	    return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
	};

	SIGNED_SYMBOL() {
	    return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
	};

	SLAVE_SYMBOL() {
	    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	};

	START_SYMBOL() {
	    return this.getToken(MySQLParser.START_SYMBOL, 0);
	};

	STOP_SYMBOL() {
	    return this.getToken(MySQLParser.STOP_SYMBOL, 0);
	};

	TRUNCATE_SYMBOL() {
	    return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
	};

	UNICODE_SYMBOL() {
	    return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
	};

	UNINSTALL_SYMBOL() {
	    return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
	};

	XA_SYMBOL() {
	    return this.getToken(MySQLParser.XA_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIdentifierKeywordsAmbiguous2Labels(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LabelKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_labelKeyword;
    }

	roleOrLabelKeyword() {
	    return this.getTypedRuleContext(RoleOrLabelKeywordContext,0);
	};

	EVENT_SYMBOL() {
	    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	};

	FILE_SYMBOL() {
	    return this.getToken(MySQLParser.FILE_SYMBOL, 0);
	};

	NONE_SYMBOL() {
	    return this.getToken(MySQLParser.NONE_SYMBOL, 0);
	};

	PROCESS_SYMBOL() {
	    return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
	};

	PROXY_SYMBOL() {
	    return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
	};

	RELOAD_SYMBOL() {
	    return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
	};

	REPLICATION_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
	};

	RESOURCE_SYMBOL() {
	    return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
	};

	SUPER_SYMBOL() {
	    return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
	};

	identifierKeywordsUnambiguous() {
	    return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext,0);
	};

	identifierKeywordsAmbiguous3Roles() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous3RolesContext,0);
	};

	identifierKeywordsAmbiguous4SystemVariables() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLabelKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierKeywordsAmbiguous3RolesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_identifierKeywordsAmbiguous3Roles;
    }

	EVENT_SYMBOL() {
	    return this.getToken(MySQLParser.EVENT_SYMBOL, 0);
	};

	FILE_SYMBOL() {
	    return this.getToken(MySQLParser.FILE_SYMBOL, 0);
	};

	NONE_SYMBOL() {
	    return this.getToken(MySQLParser.NONE_SYMBOL, 0);
	};

	PROCESS_SYMBOL() {
	    return this.getToken(MySQLParser.PROCESS_SYMBOL, 0);
	};

	PROXY_SYMBOL() {
	    return this.getToken(MySQLParser.PROXY_SYMBOL, 0);
	};

	RELOAD_SYMBOL() {
	    return this.getToken(MySQLParser.RELOAD_SYMBOL, 0);
	};

	REPLICATION_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATION_SYMBOL, 0);
	};

	RESOURCE_SYMBOL() {
	    return this.getToken(MySQLParser.RESOURCE_SYMBOL, 0);
	};

	SUPER_SYMBOL() {
	    return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIdentifierKeywordsAmbiguous3Roles(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierKeywordsUnambiguousContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_identifierKeywordsUnambiguous;
    }

	ACTION_SYMBOL() {
	    return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
	};

	ACCOUNT_SYMBOL() {
	    return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
	};

	ACTIVE_SYMBOL() {
	    return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
	};

	ADDDATE_SYMBOL() {
	    return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
	};

	ADMIN_SYMBOL() {
	    return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
	};

	AFTER_SYMBOL() {
	    return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
	};

	AGAINST_SYMBOL() {
	    return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
	};

	AGGREGATE_SYMBOL() {
	    return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
	};

	ALGORITHM_SYMBOL() {
	    return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
	};

	ALWAYS_SYMBOL() {
	    return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
	};

	ANY_SYMBOL() {
	    return this.getToken(MySQLParser.ANY_SYMBOL, 0);
	};

	AT_SYMBOL() {
	    return this.getToken(MySQLParser.AT_SYMBOL, 0);
	};

	AUTOEXTEND_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
	};

	AUTO_INCREMENT_SYMBOL() {
	    return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
	};

	AVG_ROW_LENGTH_SYMBOL() {
	    return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
	};

	AVG_SYMBOL() {
	    return this.getToken(MySQLParser.AVG_SYMBOL, 0);
	};

	BACKUP_SYMBOL() {
	    return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
	};

	BINLOG_SYMBOL() {
	    return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
	};

	BIT_SYMBOL() {
	    return this.getToken(MySQLParser.BIT_SYMBOL, 0);
	};

	BLOCK_SYMBOL() {
	    return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
	};

	BOOLEAN_SYMBOL() {
	    return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
	};

	BOOL_SYMBOL() {
	    return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
	};

	BTREE_SYMBOL() {
	    return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
	};

	BUCKETS_SYMBOL() {
	    return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
	};

	CASCADED_SYMBOL() {
	    return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
	};

	CATALOG_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
	};

	CHAIN_SYMBOL() {
	    return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
	};

	CHANGED_SYMBOL() {
	    return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
	};

	CHANNEL_SYMBOL() {
	    return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
	};

	CIPHER_SYMBOL() {
	    return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
	};

	CLASS_ORIGIN_SYMBOL() {
	    return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
	};

	CLIENT_SYMBOL() {
	    return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
	};

	CLOSE_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
	};

	COALESCE_SYMBOL() {
	    return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
	};

	CODE_SYMBOL() {
	    return this.getToken(MySQLParser.CODE_SYMBOL, 0);
	};

	COLLATION_SYMBOL() {
	    return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
	};

	COLUMNS_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
	};

	COLUMN_FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
	};

	COLUMN_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
	};

	COMMITTED_SYMBOL() {
	    return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
	};

	COMPACT_SYMBOL() {
	    return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
	};

	COMPLETION_SYMBOL() {
	    return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
	};

	COMPONENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
	};

	COMPRESSED_SYMBOL() {
	    return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
	};

	COMPRESSION_SYMBOL() {
	    return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
	};

	CONCURRENT_SYMBOL() {
	    return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
	};

	CONNECTION_SYMBOL() {
	    return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
	};

	CONSISTENT_SYMBOL() {
	    return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
	};

	CONSTRAINT_CATALOG_SYMBOL() {
	    return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
	};

	CONSTRAINT_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
	};

	CONSTRAINT_SCHEMA_SYMBOL() {
	    return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
	};

	CONTEXT_SYMBOL() {
	    return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
	};

	CPU_SYMBOL() {
	    return this.getToken(MySQLParser.CPU_SYMBOL, 0);
	};

	CURRENT_SYMBOL() {
	    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	};

	CURSOR_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
	};

	DATAFILE_SYMBOL() {
	    return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
	};

	DATA_SYMBOL() {
	    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	};

	DATETIME_SYMBOL() {
	    return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
	};

	DATE_SYMBOL() {
	    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	};

	DAY_SYMBOL() {
	    return this.getToken(MySQLParser.DAY_SYMBOL, 0);
	};

	DEFAULT_AUTH_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
	};

	DEFINER_SYMBOL() {
	    return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
	};

	DEFINITION_SYMBOL() {
	    return this.getToken(MySQLParser.DEFINITION_SYMBOL, 0);
	};

	DELAY_KEY_WRITE_SYMBOL() {
	    return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
	};

	DESCRIPTION_SYMBOL() {
	    return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
	};

	DIAGNOSTICS_SYMBOL() {
	    return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
	};

	DIRECTORY_SYMBOL() {
	    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	};

	DISABLE_SYMBOL() {
	    return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
	};

	DISCARD_SYMBOL() {
	    return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
	};

	DISK_SYMBOL() {
	    return this.getToken(MySQLParser.DISK_SYMBOL, 0);
	};

	DUMPFILE_SYMBOL() {
	    return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
	};

	DUPLICATE_SYMBOL() {
	    return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
	};

	DYNAMIC_SYMBOL() {
	    return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
	};

	ENABLE_SYMBOL() {
	    return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
	};

	ENCRYPTION_SYMBOL() {
	    return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
	};

	ENDS_SYMBOL() {
	    return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
	};

	ENFORCED_SYMBOL() {
	    return this.getToken(MySQLParser.ENFORCED_SYMBOL, 0);
	};

	ENGINES_SYMBOL() {
	    return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
	};

	ENGINE_SYMBOL() {
	    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	};

	ENUM_SYMBOL() {
	    return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
	};

	ERRORS_SYMBOL() {
	    return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
	};

	ERROR_SYMBOL() {
	    return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
	};

	ESCAPE_SYMBOL() {
	    return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
	};

	EVENTS_SYMBOL() {
	    return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
	};

	EVERY_SYMBOL() {
	    return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
	};

	EXCHANGE_SYMBOL() {
	    return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
	};

	EXCLUDE_SYMBOL() {
	    return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
	};

	EXPANSION_SYMBOL() {
	    return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
	};

	EXPIRE_SYMBOL() {
	    return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
	};

	EXPORT_SYMBOL() {
	    return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
	};

	EXTENDED_SYMBOL() {
	    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	};

	EXTENT_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
	};

	FAST_SYMBOL() {
	    return this.getToken(MySQLParser.FAST_SYMBOL, 0);
	};

	FAULTS_SYMBOL() {
	    return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
	};

	FILE_BLOCK_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
	};

	FILTER_SYMBOL() {
	    return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
	};

	FIRST_SYMBOL() {
	    return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
	};

	FIXED_SYMBOL() {
	    return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
	};

	FOLLOWING_SYMBOL() {
	    return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
	};

	FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
	};

	FOUND_SYMBOL() {
	    return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
	};

	FULL_SYMBOL() {
	    return this.getToken(MySQLParser.FULL_SYMBOL, 0);
	};

	GENERAL_SYMBOL() {
	    return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
	};

	GEOMETRYCOLLECTION_SYMBOL() {
	    return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	};

	GEOMETRY_SYMBOL() {
	    return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
	};

	GET_FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
	};

	GET_MASTER_PUBLIC_KEY_SYMBOL() {
	    return this.getToken(MySQLParser.GET_MASTER_PUBLIC_KEY_SYMBOL, 0);
	};

	GRANTS_SYMBOL() {
	    return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
	};

	GROUP_REPLICATION_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
	};

	HASH_SYMBOL() {
	    return this.getToken(MySQLParser.HASH_SYMBOL, 0);
	};

	HISTOGRAM_SYMBOL() {
	    return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
	};

	HISTORY_SYMBOL() {
	    return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
	};

	HOSTS_SYMBOL() {
	    return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
	};

	HOST_SYMBOL() {
	    return this.getToken(MySQLParser.HOST_SYMBOL, 0);
	};

	HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
	};

	IDENTIFIED_SYMBOL() {
	    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	};

	IGNORE_SERVER_IDS_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
	};

	INACTIVE_SYMBOL() {
	    return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
	};

	INDEXES_SYMBOL() {
	    return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
	};

	INITIAL_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
	};

	INSERT_METHOD_SYMBOL() {
	    return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
	};

	INSTANCE_SYMBOL() {
	    return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
	};

	INVISIBLE_SYMBOL() {
	    return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
	};

	INVOKER_SYMBOL() {
	    return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
	};

	IO_SYMBOL() {
	    return this.getToken(MySQLParser.IO_SYMBOL, 0);
	};

	IPC_SYMBOL() {
	    return this.getToken(MySQLParser.IPC_SYMBOL, 0);
	};

	ISOLATION_SYMBOL() {
	    return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
	};

	ISSUER_SYMBOL() {
	    return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
	};

	JSON_SYMBOL() {
	    return this.getToken(MySQLParser.JSON_SYMBOL, 0);
	};

	KEY_BLOCK_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
	};

	LAST_SYMBOL() {
	    return this.getToken(MySQLParser.LAST_SYMBOL, 0);
	};

	LEAVES_SYMBOL() {
	    return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySQLParser.LESS_SYMBOL, 0);
	};

	LEVEL_SYMBOL() {
	    return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
	};

	LINESTRING_SYMBOL() {
	    return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
	};

	LIST_SYMBOL() {
	    return this.getToken(MySQLParser.LIST_SYMBOL, 0);
	};

	LOCKED_SYMBOL() {
	    return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
	};

	LOCKS_SYMBOL() {
	    return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
	};

	LOGFILE_SYMBOL() {
	    return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
	};

	LOGS_SYMBOL() {
	    return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
	};

	MASTER_AUTO_POSITION_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
	};

	MASTER_COMPRESSION_ALGORITHM_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_COMPRESSION_ALGORITHM_SYMBOL, 0);
	};

	MASTER_CONNECT_RETRY_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
	};

	MASTER_DELAY_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
	};

	MASTER_HEARTBEAT_PERIOD_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
	};

	MASTER_HOST_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
	};

	NETWORK_NAMESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.NETWORK_NAMESPACE_SYMBOL, 0);
	};

	MASTER_LOG_FILE_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
	};

	MASTER_LOG_POS_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
	};

	MASTER_PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
	};

	MASTER_PORT_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
	};

	MASTER_PUBLIC_KEY_PATH_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
	};

	MASTER_RETRY_COUNT_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
	};

	MASTER_SERVER_ID_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0);
	};

	MASTER_SSL_CAPATH_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
	};

	MASTER_SSL_CA_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
	};

	MASTER_SSL_CERT_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
	};

	MASTER_SSL_CIPHER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
	};

	MASTER_SSL_CRLPATH_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
	};

	MASTER_SSL_CRL_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
	};

	MASTER_SSL_KEY_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
	};

	MASTER_SSL_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
	};

	MASTER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	};

	MASTER_TLS_CIPHERSUITES_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_TLS_CIPHERSUITES_SYMBOL, 0);
	};

	MASTER_TLS_VERSION_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
	};

	MASTER_USER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
	};

	MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_ZSTD_COMPRESSION_LEVEL_SYMBOL, 0);
	};

	MAX_CONNECTIONS_PER_HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
	};

	MAX_QUERIES_PER_HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
	};

	MAX_ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
	};

	MAX_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
	};

	MAX_UPDATES_PER_HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
	};

	MAX_USER_CONNECTIONS_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
	};

	MEDIUM_SYMBOL() {
	    return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
	};

	MEMORY_SYMBOL() {
	    return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
	};

	MERGE_SYMBOL() {
	    return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
	};

	MESSAGE_TEXT_SYMBOL() {
	    return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
	};

	MICROSECOND_SYMBOL() {
	    return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
	};

	MIGRATE_SYMBOL() {
	    return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
	};

	MINUTE_SYMBOL() {
	    return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
	};

	MIN_ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
	};

	MODE_SYMBOL() {
	    return this.getToken(MySQLParser.MODE_SYMBOL, 0);
	};

	MODIFY_SYMBOL() {
	    return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
	};

	MONTH_SYMBOL() {
	    return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
	};

	MULTILINESTRING_SYMBOL() {
	    return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
	};

	MULTIPOINT_SYMBOL() {
	    return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
	};

	MULTIPOLYGON_SYMBOL() {
	    return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
	};

	MUTEX_SYMBOL() {
	    return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
	};

	MYSQL_ERRNO_SYMBOL() {
	    return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
	};

	NAMES_SYMBOL() {
	    return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
	};

	NAME_SYMBOL() {
	    return this.getToken(MySQLParser.NAME_SYMBOL, 0);
	};

	NATIONAL_SYMBOL() {
	    return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
	};

	NCHAR_SYMBOL() {
	    return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
	};

	NDBCLUSTER_SYMBOL() {
	    return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
	};

	NESTED_SYMBOL() {
	    return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
	};

	NEVER_SYMBOL() {
	    return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
	};

	NEW_SYMBOL() {
	    return this.getToken(MySQLParser.NEW_SYMBOL, 0);
	};

	NEXT_SYMBOL() {
	    return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
	};

	NODEGROUP_SYMBOL() {
	    return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
	};

	NOWAIT_SYMBOL() {
	    return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
	};

	NO_WAIT_SYMBOL() {
	    return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
	};

	NULLS_SYMBOL() {
	    return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
	};

	NUMBER_SYMBOL() {
	    return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
	};

	NVARCHAR_SYMBOL() {
	    return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
	};

	OFFSET_SYMBOL() {
	    return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
	};

	OJ_SYMBOL() {
	    return this.getToken(MySQLParser.OJ_SYMBOL, 0);
	};

	OLD_SYMBOL() {
	    return this.getToken(MySQLParser.OLD_SYMBOL, 0);
	};

	ONE_SYMBOL() {
	    return this.getToken(MySQLParser.ONE_SYMBOL, 0);
	};

	ONLY_SYMBOL() {
	    return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
	};

	OPEN_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
	};

	OPTIONAL_SYMBOL() {
	    return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
	};

	OPTIONS_SYMBOL() {
	    return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
	};

	ORDINALITY_SYMBOL() {
	    return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
	};

	ORGANIZATION_SYMBOL() {
	    return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
	};

	OTHERS_SYMBOL() {
	    return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
	};

	OWNER_SYMBOL() {
	    return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
	};

	PACK_KEYS_SYMBOL() {
	    return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
	};

	PAGE_SYMBOL() {
	    return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
	};

	PARSER_SYMBOL() {
	    return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
	};

	PARTIAL_SYMBOL() {
	    return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
	};

	PARTITIONING_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
	};

	PARTITIONS_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	};

	PATH_SYMBOL() {
	    return this.getToken(MySQLParser.PATH_SYMBOL, 0);
	};

	PHASE_SYMBOL() {
	    return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
	};

	PLUGINS_SYMBOL() {
	    return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
	};

	PLUGIN_DIR_SYMBOL() {
	    return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
	};

	PLUGIN_SYMBOL() {
	    return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
	};

	POINT_SYMBOL() {
	    return this.getToken(MySQLParser.POINT_SYMBOL, 0);
	};

	POLYGON_SYMBOL() {
	    return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
	};

	PORT_SYMBOL() {
	    return this.getToken(MySQLParser.PORT_SYMBOL, 0);
	};

	PRECEDING_SYMBOL() {
	    return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
	};

	PRESERVE_SYMBOL() {
	    return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
	};

	PREV_SYMBOL() {
	    return this.getToken(MySQLParser.PREV_SYMBOL, 0);
	};

	PRIVILEGES_SYMBOL() {
	    return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
	};

	PRIVILEGE_CHECKS_USER_SYMBOL() {
	    return this.getToken(MySQLParser.PRIVILEGE_CHECKS_USER_SYMBOL, 0);
	};

	PROCESSLIST_SYMBOL() {
	    return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
	};

	PROFILES_SYMBOL() {
	    return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
	};

	PROFILE_SYMBOL() {
	    return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
	};

	QUARTER_SYMBOL() {
	    return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
	};

	QUERY_SYMBOL() {
	    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	};

	QUICK_SYMBOL() {
	    return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
	};

	READ_ONLY_SYMBOL() {
	    return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
	};

	REBUILD_SYMBOL() {
	    return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
	};

	RECOVER_SYMBOL() {
	    return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
	};

	REDO_BUFFER_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
	};

	REDUNDANT_SYMBOL() {
	    return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
	};

	REFERENCE_SYMBOL() {
	    return this.getToken(MySQLParser.REFERENCE_SYMBOL, 0);
	};

	RELAY_SYMBOL() {
	    return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
	};

	RELAYLOG_SYMBOL() {
	    return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
	};

	RELAY_LOG_FILE_SYMBOL() {
	    return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
	};

	RELAY_LOG_POS_SYMBOL() {
	    return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
	};

	RELAY_THREAD_SYMBOL() {
	    return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
	};

	REMOVE_SYMBOL() {
	    return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
	};

	REORGANIZE_SYMBOL() {
	    return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
	};

	REPEATABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
	};

	REPLICATE_DO_DB_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
	};

	REPLICATE_DO_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
	};

	REPLICATE_IGNORE_DB_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
	};

	REPLICATE_IGNORE_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
	};

	REPLICATE_REWRITE_DB_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
	};

	REPLICATE_WILD_DO_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
	};

	REPLICATE_WILD_IGNORE_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
	};

	USER_RESOURCES_SYMBOL() {
	    return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
	};

	RESPECT_SYMBOL() {
	    return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
	};

	RESTORE_SYMBOL() {
	    return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
	};

	RESUME_SYMBOL() {
	    return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
	};

	RETAIN_SYMBOL() {
	    return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
	};

	RETURNED_SQLSTATE_SYMBOL() {
	    return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
	};

	RETURNS_SYMBOL() {
	    return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
	};

	REUSE_SYMBOL() {
	    return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
	};

	REVERSE_SYMBOL() {
	    return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
	};

	ROLE_SYMBOL() {
	    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	};

	ROLLUP_SYMBOL() {
	    return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
	};

	ROTATE_SYMBOL() {
	    return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
	};

	ROUTINE_SYMBOL() {
	    return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
	};

	ROW_COUNT_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
	};

	ROW_FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
	};

	RTREE_SYMBOL() {
	    return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
	};

	SCHEDULE_SYMBOL() {
	    return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
	};

	SCHEMA_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
	};

	SECONDARY_ENGINE_SYMBOL() {
	    return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
	};

	SECONDARY_LOAD_SYMBOL() {
	    return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
	};

	SECONDARY_SYMBOL() {
	    return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
	};

	SECONDARY_UNLOAD_SYMBOL() {
	    return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
	};

	SECOND_SYMBOL() {
	    return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
	};

	SECURITY_SYMBOL() {
	    return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
	};

	SERIALIZABLE_SYMBOL() {
	    return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
	};

	SERIAL_SYMBOL() {
	    return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
	};

	SERVER_SYMBOL() {
	    return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
	};

	SHARE_SYMBOL() {
	    return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
	};

	SIMPLE_SYMBOL() {
	    return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
	};

	SKIP_SYMBOL() {
	    return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
	};

	SLOW_SYMBOL() {
	    return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
	};

	SNAPSHOT_SYMBOL() {
	    return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
	};

	SOCKET_SYMBOL() {
	    return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
	};

	SONAME_SYMBOL() {
	    return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
	};

	SOUNDS_SYMBOL() {
	    return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
	};

	SOURCE_SYMBOL() {
	    return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
	};

	SQL_AFTER_GTIDS_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
	};

	SQL_AFTER_MTS_GAPS_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
	};

	SQL_BEFORE_GTIDS_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
	};

	SQL_BUFFER_RESULT_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
	};

	SQL_NO_CACHE_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
	};

	SQL_THREAD_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
	};

	SRID_SYMBOL() {
	    return this.getToken(MySQLParser.SRID_SYMBOL, 0);
	};

	STACKED_SYMBOL() {
	    return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
	};

	STARTS_SYMBOL() {
	    return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
	};

	STATS_AUTO_RECALC_SYMBOL() {
	    return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
	};

	STATS_PERSISTENT_SYMBOL() {
	    return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
	};

	STATS_SAMPLE_PAGES_SYMBOL() {
	    return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
	};

	STATUS_SYMBOL() {
	    return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
	};

	STORAGE_SYMBOL() {
	    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	};

	STRING_SYMBOL() {
	    return this.getToken(MySQLParser.STRING_SYMBOL, 0);
	};

	SUBCLASS_ORIGIN_SYMBOL() {
	    return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
	};

	SUBDATE_SYMBOL() {
	    return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
	};

	SUBJECT_SYMBOL() {
	    return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
	};

	SUBPARTITIONS_SYMBOL() {
	    return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
	};

	SUBPARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
	};

	SUSPEND_SYMBOL() {
	    return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
	};

	SWAPS_SYMBOL() {
	    return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
	};

	SWITCHES_SYMBOL() {
	    return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
	};

	TABLES_SYMBOL() {
	    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	};

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	TABLE_CHECKSUM_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
	};

	TABLE_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
	};

	TEMPORARY_SYMBOL() {
	    return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
	};

	TEMPTABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
	};

	TEXT_SYMBOL() {
	    return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
	};

	THAN_SYMBOL() {
	    return this.getToken(MySQLParser.THAN_SYMBOL, 0);
	};

	THREAD_PRIORITY_SYMBOL() {
	    return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
	};

	TIES_SYMBOL() {
	    return this.getToken(MySQLParser.TIES_SYMBOL, 0);
	};

	TIMESTAMP_ADD_SYMBOL() {
	    return this.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0);
	};

	TIMESTAMP_DIFF_SYMBOL() {
	    return this.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0);
	};

	TIMESTAMP_SYMBOL() {
	    return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	};

	TRANSACTION_SYMBOL() {
	    return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
	};

	TRIGGERS_SYMBOL() {
	    return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
	};

	TYPES_SYMBOL() {
	    return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
	};

	TYPE_SYMBOL() {
	    return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
	};

	UNBOUNDED_SYMBOL() {
	    return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
	};

	UNCOMMITTED_SYMBOL() {
	    return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
	};

	UNDEFINED_SYMBOL() {
	    return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
	};

	UNDOFILE_SYMBOL() {
	    return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
	};

	UNDO_BUFFER_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
	};

	UNKNOWN_SYMBOL() {
	    return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
	};

	UNTIL_SYMBOL() {
	    return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
	};

	UPGRADE_SYMBOL() {
	    return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	USE_FRM_SYMBOL() {
	    return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
	};

	VALIDATION_SYMBOL() {
	    return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
	};

	VALUE_SYMBOL() {
	    return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
	};

	VARIABLES_SYMBOL() {
	    return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
	};

	VCPU_SYMBOL() {
	    return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
	};

	VIEW_SYMBOL() {
	    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	};

	VISIBLE_SYMBOL() {
	    return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
	};

	WAIT_SYMBOL() {
	    return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
	};

	WARNINGS_SYMBOL() {
	    return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
	};

	WEEK_SYMBOL() {
	    return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
	};

	WEIGHT_STRING_SYMBOL() {
	    return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
	};

	WITHOUT_SYMBOL() {
	    return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
	};

	WORK_SYMBOL() {
	    return this.getToken(MySQLParser.WORK_SYMBOL, 0);
	};

	WRAPPER_SYMBOL() {
	    return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
	};

	X509_SYMBOL() {
	    return this.getToken(MySQLParser.X509_SYMBOL, 0);
	};

	XID_SYMBOL() {
	    return this.getToken(MySQLParser.XID_SYMBOL, 0);
	};

	XML_SYMBOL() {
	    return this.getToken(MySQLParser.XML_SYMBOL, 0);
	};

	YEAR_SYMBOL() {
	    return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
	};

	ARRAY_SYMBOL() {
	    return this.getToken(MySQLParser.ARRAY_SYMBOL, 0);
	};

	FAILED_LOGIN_ATTEMPTS_SYMBOL() {
	    return this.getToken(MySQLParser.FAILED_LOGIN_ATTEMPTS_SYMBOL, 0);
	};

	MEMBER_SYMBOL() {
	    return this.getToken(MySQLParser.MEMBER_SYMBOL, 0);
	};

	OFF_SYMBOL() {
	    return this.getToken(MySQLParser.OFF_SYMBOL, 0);
	};

	PASSWORD_LOCK_TIME_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_LOCK_TIME_SYMBOL, 0);
	};

	RANDOM_SYMBOL() {
	    return this.getToken(MySQLParser.RANDOM_SYMBOL, 0);
	};

	REQUIRE_ROW_FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.REQUIRE_ROW_FORMAT_SYMBOL, 0);
	};

	REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL() {
	    return this.getToken(MySQLParser.REQUIRE_TABLE_PRIMARY_KEY_CHECK_SYMBOL, 0);
	};

	STREAM_SYMBOL() {
	    return this.getToken(MySQLParser.STREAM_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIdentifierKeywordsUnambiguous(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_roleKeyword;
    }

	roleOrLabelKeyword() {
	    return this.getTypedRuleContext(RoleOrLabelKeywordContext,0);
	};

	roleOrIdentifierKeyword() {
	    return this.getTypedRuleContext(RoleOrIdentifierKeywordContext,0);
	};

	identifierKeywordsUnambiguous() {
	    return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext,0);
	};

	identifierKeywordsAmbiguous2Labels() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous2LabelsContext,0);
	};

	identifierKeywordsAmbiguous4SystemVariables() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous4SystemVariablesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRoleKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LValueKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_lValueKeyword;
    }

	identifierKeywordsUnambiguous() {
	    return this.getTypedRuleContext(IdentifierKeywordsUnambiguousContext,0);
	};

	identifierKeywordsAmbiguous1RolesAndLabels() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous1RolesAndLabelsContext,0);
	};

	identifierKeywordsAmbiguous2Labels() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous2LabelsContext,0);
	};

	identifierKeywordsAmbiguous3Roles() {
	    return this.getTypedRuleContext(IdentifierKeywordsAmbiguous3RolesContext,0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitLValueKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierKeywordsAmbiguous4SystemVariablesContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_identifierKeywordsAmbiguous4SystemVariables;
    }

	GLOBAL_SYMBOL() {
	    return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
	};

	LOCAL_SYMBOL() {
	    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	};

	PERSIST_SYMBOL() {
	    return this.getToken(MySQLParser.PERSIST_SYMBOL, 0);
	};

	PERSIST_ONLY_SYMBOL() {
	    return this.getToken(MySQLParser.PERSIST_ONLY_SYMBOL, 0);
	};

	SESSION_SYMBOL() {
	    return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitIdentifierKeywordsAmbiguous4SystemVariables(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleOrIdentifierKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_roleOrIdentifierKeyword;
    }

	ACCOUNT_SYMBOL() {
	    return this.getToken(MySQLParser.ACCOUNT_SYMBOL, 0);
	};

	ASCII_SYMBOL() {
	    return this.getToken(MySQLParser.ASCII_SYMBOL, 0);
	};

	ALWAYS_SYMBOL() {
	    return this.getToken(MySQLParser.ALWAYS_SYMBOL, 0);
	};

	BACKUP_SYMBOL() {
	    return this.getToken(MySQLParser.BACKUP_SYMBOL, 0);
	};

	BEGIN_SYMBOL() {
	    return this.getToken(MySQLParser.BEGIN_SYMBOL, 0);
	};

	BYTE_SYMBOL() {
	    return this.getToken(MySQLParser.BYTE_SYMBOL, 0);
	};

	CACHE_SYMBOL() {
	    return this.getToken(MySQLParser.CACHE_SYMBOL, 0);
	};

	CHARSET_SYMBOL() {
	    return this.getToken(MySQLParser.CHARSET_SYMBOL, 0);
	};

	CHECKSUM_SYMBOL() {
	    return this.getToken(MySQLParser.CHECKSUM_SYMBOL, 0);
	};

	CLONE_SYMBOL() {
	    return this.getToken(MySQLParser.CLONE_SYMBOL, 0);
	};

	CLOSE_SYMBOL() {
	    return this.getToken(MySQLParser.CLOSE_SYMBOL, 0);
	};

	COMMENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMENT_SYMBOL, 0);
	};

	COMMIT_SYMBOL() {
	    return this.getToken(MySQLParser.COMMIT_SYMBOL, 0);
	};

	CONTAINS_SYMBOL() {
	    return this.getToken(MySQLParser.CONTAINS_SYMBOL, 0);
	};

	DEALLOCATE_SYMBOL() {
	    return this.getToken(MySQLParser.DEALLOCATE_SYMBOL, 0);
	};

	DO_SYMBOL() {
	    return this.getToken(MySQLParser.DO_SYMBOL, 0);
	};

	END_SYMBOL() {
	    return this.getToken(MySQLParser.END_SYMBOL, 0);
	};

	FLUSH_SYMBOL() {
	    return this.getToken(MySQLParser.FLUSH_SYMBOL, 0);
	};

	FOLLOWS_SYMBOL() {
	    return this.getToken(MySQLParser.FOLLOWS_SYMBOL, 0);
	};

	FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.FORMAT_SYMBOL, 0);
	};

	GROUP_REPLICATION_SYMBOL() {
	    return this.getToken(MySQLParser.GROUP_REPLICATION_SYMBOL, 0);
	};

	HANDLER_SYMBOL() {
	    return this.getToken(MySQLParser.HANDLER_SYMBOL, 0);
	};

	HELP_SYMBOL() {
	    return this.getToken(MySQLParser.HELP_SYMBOL, 0);
	};

	HOST_SYMBOL() {
	    return this.getToken(MySQLParser.HOST_SYMBOL, 0);
	};

	INSTALL_SYMBOL() {
	    return this.getToken(MySQLParser.INSTALL_SYMBOL, 0);
	};

	INVISIBLE_SYMBOL() {
	    return this.getToken(MySQLParser.INVISIBLE_SYMBOL, 0);
	};

	LANGUAGE_SYMBOL() {
	    return this.getToken(MySQLParser.LANGUAGE_SYMBOL, 0);
	};

	NO_SYMBOL() {
	    return this.getToken(MySQLParser.NO_SYMBOL, 0);
	};

	OPEN_SYMBOL() {
	    return this.getToken(MySQLParser.OPEN_SYMBOL, 0);
	};

	OPTIONS_SYMBOL() {
	    return this.getToken(MySQLParser.OPTIONS_SYMBOL, 0);
	};

	OWNER_SYMBOL() {
	    return this.getToken(MySQLParser.OWNER_SYMBOL, 0);
	};

	PARSER_SYMBOL() {
	    return this.getToken(MySQLParser.PARSER_SYMBOL, 0);
	};

	PARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITION_SYMBOL, 0);
	};

	PORT_SYMBOL() {
	    return this.getToken(MySQLParser.PORT_SYMBOL, 0);
	};

	PRECEDES_SYMBOL() {
	    return this.getToken(MySQLParser.PRECEDES_SYMBOL, 0);
	};

	PREPARE_SYMBOL() {
	    return this.getToken(MySQLParser.PREPARE_SYMBOL, 0);
	};

	REMOVE_SYMBOL() {
	    return this.getToken(MySQLParser.REMOVE_SYMBOL, 0);
	};

	REPAIR_SYMBOL() {
	    return this.getToken(MySQLParser.REPAIR_SYMBOL, 0);
	};

	RESET_SYMBOL() {
	    return this.getToken(MySQLParser.RESET_SYMBOL, 0);
	};

	RESTORE_SYMBOL() {
	    return this.getToken(MySQLParser.RESTORE_SYMBOL, 0);
	};

	ROLE_SYMBOL() {
	    return this.getToken(MySQLParser.ROLE_SYMBOL, 0);
	};

	ROLLBACK_SYMBOL() {
	    return this.getToken(MySQLParser.ROLLBACK_SYMBOL, 0);
	};

	SAVEPOINT_SYMBOL() {
	    return this.getToken(MySQLParser.SAVEPOINT_SYMBOL, 0);
	};

	SECONDARY_SYMBOL() {
	    return this.getToken(MySQLParser.SECONDARY_SYMBOL, 0);
	};

	SECONDARY_ENGINE_SYMBOL() {
	    return this.getToken(MySQLParser.SECONDARY_ENGINE_SYMBOL, 0);
	};

	SECONDARY_LOAD_SYMBOL() {
	    return this.getToken(MySQLParser.SECONDARY_LOAD_SYMBOL, 0);
	};

	SECONDARY_UNLOAD_SYMBOL() {
	    return this.getToken(MySQLParser.SECONDARY_UNLOAD_SYMBOL, 0);
	};

	SECURITY_SYMBOL() {
	    return this.getToken(MySQLParser.SECURITY_SYMBOL, 0);
	};

	SERVER_SYMBOL() {
	    return this.getToken(MySQLParser.SERVER_SYMBOL, 0);
	};

	SIGNED_SYMBOL() {
	    return this.getToken(MySQLParser.SIGNED_SYMBOL, 0);
	};

	SOCKET_SYMBOL() {
	    return this.getToken(MySQLParser.SOCKET_SYMBOL, 0);
	};

	SLAVE_SYMBOL() {
	    return this.getToken(MySQLParser.SLAVE_SYMBOL, 0);
	};

	SONAME_SYMBOL() {
	    return this.getToken(MySQLParser.SONAME_SYMBOL, 0);
	};

	START_SYMBOL() {
	    return this.getToken(MySQLParser.START_SYMBOL, 0);
	};

	STOP_SYMBOL() {
	    return this.getToken(MySQLParser.STOP_SYMBOL, 0);
	};

	TRUNCATE_SYMBOL() {
	    return this.getToken(MySQLParser.TRUNCATE_SYMBOL, 0);
	};

	UNICODE_SYMBOL() {
	    return this.getToken(MySQLParser.UNICODE_SYMBOL, 0);
	};

	UNINSTALL_SYMBOL() {
	    return this.getToken(MySQLParser.UNINSTALL_SYMBOL, 0);
	};

	UPGRADE_SYMBOL() {
	    return this.getToken(MySQLParser.UPGRADE_SYMBOL, 0);
	};

	VISIBLE_SYMBOL() {
	    return this.getToken(MySQLParser.VISIBLE_SYMBOL, 0);
	};

	WRAPPER_SYMBOL() {
	    return this.getToken(MySQLParser.WRAPPER_SYMBOL, 0);
	};

	XA_SYMBOL() {
	    return this.getToken(MySQLParser.XA_SYMBOL, 0);
	};

	SHUTDOWN_SYMBOL() {
	    return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
	};

	IMPORT_SYMBOL() {
	    return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRoleOrIdentifierKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RoleOrLabelKeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = MySQLParser.RULE_roleOrLabelKeyword;
    }

	ACTION_SYMBOL() {
	    return this.getToken(MySQLParser.ACTION_SYMBOL, 0);
	};

	ACTIVE_SYMBOL() {
	    return this.getToken(MySQLParser.ACTIVE_SYMBOL, 0);
	};

	ADDDATE_SYMBOL() {
	    return this.getToken(MySQLParser.ADDDATE_SYMBOL, 0);
	};

	AFTER_SYMBOL() {
	    return this.getToken(MySQLParser.AFTER_SYMBOL, 0);
	};

	AGAINST_SYMBOL() {
	    return this.getToken(MySQLParser.AGAINST_SYMBOL, 0);
	};

	AGGREGATE_SYMBOL() {
	    return this.getToken(MySQLParser.AGGREGATE_SYMBOL, 0);
	};

	ALGORITHM_SYMBOL() {
	    return this.getToken(MySQLParser.ALGORITHM_SYMBOL, 0);
	};

	ANALYSE_SYMBOL() {
	    return this.getToken(MySQLParser.ANALYSE_SYMBOL, 0);
	};

	ANY_SYMBOL() {
	    return this.getToken(MySQLParser.ANY_SYMBOL, 0);
	};

	AT_SYMBOL() {
	    return this.getToken(MySQLParser.AT_SYMBOL, 0);
	};

	AUTHORS_SYMBOL() {
	    return this.getToken(MySQLParser.AUTHORS_SYMBOL, 0);
	};

	AUTO_INCREMENT_SYMBOL() {
	    return this.getToken(MySQLParser.AUTO_INCREMENT_SYMBOL, 0);
	};

	AUTOEXTEND_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.AUTOEXTEND_SIZE_SYMBOL, 0);
	};

	AVG_ROW_LENGTH_SYMBOL() {
	    return this.getToken(MySQLParser.AVG_ROW_LENGTH_SYMBOL, 0);
	};

	AVG_SYMBOL() {
	    return this.getToken(MySQLParser.AVG_SYMBOL, 0);
	};

	BINLOG_SYMBOL() {
	    return this.getToken(MySQLParser.BINLOG_SYMBOL, 0);
	};

	BIT_SYMBOL() {
	    return this.getToken(MySQLParser.BIT_SYMBOL, 0);
	};

	BLOCK_SYMBOL() {
	    return this.getToken(MySQLParser.BLOCK_SYMBOL, 0);
	};

	BOOL_SYMBOL() {
	    return this.getToken(MySQLParser.BOOL_SYMBOL, 0);
	};

	BOOLEAN_SYMBOL() {
	    return this.getToken(MySQLParser.BOOLEAN_SYMBOL, 0);
	};

	BTREE_SYMBOL() {
	    return this.getToken(MySQLParser.BTREE_SYMBOL, 0);
	};

	BUCKETS_SYMBOL() {
	    return this.getToken(MySQLParser.BUCKETS_SYMBOL, 0);
	};

	CASCADED_SYMBOL() {
	    return this.getToken(MySQLParser.CASCADED_SYMBOL, 0);
	};

	CATALOG_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.CATALOG_NAME_SYMBOL, 0);
	};

	CHAIN_SYMBOL() {
	    return this.getToken(MySQLParser.CHAIN_SYMBOL, 0);
	};

	CHANGED_SYMBOL() {
	    return this.getToken(MySQLParser.CHANGED_SYMBOL, 0);
	};

	CHANNEL_SYMBOL() {
	    return this.getToken(MySQLParser.CHANNEL_SYMBOL, 0);
	};

	CIPHER_SYMBOL() {
	    return this.getToken(MySQLParser.CIPHER_SYMBOL, 0);
	};

	CLIENT_SYMBOL() {
	    return this.getToken(MySQLParser.CLIENT_SYMBOL, 0);
	};

	CLASS_ORIGIN_SYMBOL() {
	    return this.getToken(MySQLParser.CLASS_ORIGIN_SYMBOL, 0);
	};

	COALESCE_SYMBOL() {
	    return this.getToken(MySQLParser.COALESCE_SYMBOL, 0);
	};

	CODE_SYMBOL() {
	    return this.getToken(MySQLParser.CODE_SYMBOL, 0);
	};

	COLLATION_SYMBOL() {
	    return this.getToken(MySQLParser.COLLATION_SYMBOL, 0);
	};

	COLUMN_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMN_NAME_SYMBOL, 0);
	};

	COLUMN_FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMN_FORMAT_SYMBOL, 0);
	};

	COLUMNS_SYMBOL() {
	    return this.getToken(MySQLParser.COLUMNS_SYMBOL, 0);
	};

	COMMITTED_SYMBOL() {
	    return this.getToken(MySQLParser.COMMITTED_SYMBOL, 0);
	};

	COMPACT_SYMBOL() {
	    return this.getToken(MySQLParser.COMPACT_SYMBOL, 0);
	};

	COMPLETION_SYMBOL() {
	    return this.getToken(MySQLParser.COMPLETION_SYMBOL, 0);
	};

	COMPONENT_SYMBOL() {
	    return this.getToken(MySQLParser.COMPONENT_SYMBOL, 0);
	};

	COMPRESSED_SYMBOL() {
	    return this.getToken(MySQLParser.COMPRESSED_SYMBOL, 0);
	};

	COMPRESSION_SYMBOL() {
	    return this.getToken(MySQLParser.COMPRESSION_SYMBOL, 0);
	};

	CONCURRENT_SYMBOL() {
	    return this.getToken(MySQLParser.CONCURRENT_SYMBOL, 0);
	};

	CONNECTION_SYMBOL() {
	    return this.getToken(MySQLParser.CONNECTION_SYMBOL, 0);
	};

	CONSISTENT_SYMBOL() {
	    return this.getToken(MySQLParser.CONSISTENT_SYMBOL, 0);
	};

	CONSTRAINT_CATALOG_SYMBOL() {
	    return this.getToken(MySQLParser.CONSTRAINT_CATALOG_SYMBOL, 0);
	};

	CONSTRAINT_SCHEMA_SYMBOL() {
	    return this.getToken(MySQLParser.CONSTRAINT_SCHEMA_SYMBOL, 0);
	};

	CONSTRAINT_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.CONSTRAINT_NAME_SYMBOL, 0);
	};

	CONTEXT_SYMBOL() {
	    return this.getToken(MySQLParser.CONTEXT_SYMBOL, 0);
	};

	CONTRIBUTORS_SYMBOL() {
	    return this.getToken(MySQLParser.CONTRIBUTORS_SYMBOL, 0);
	};

	CPU_SYMBOL() {
	    return this.getToken(MySQLParser.CPU_SYMBOL, 0);
	};

	CURRENT_SYMBOL() {
	    return this.getToken(MySQLParser.CURRENT_SYMBOL, 0);
	};

	CURSOR_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.CURSOR_NAME_SYMBOL, 0);
	};

	DATA_SYMBOL() {
	    return this.getToken(MySQLParser.DATA_SYMBOL, 0);
	};

	DATAFILE_SYMBOL() {
	    return this.getToken(MySQLParser.DATAFILE_SYMBOL, 0);
	};

	DATETIME_SYMBOL() {
	    return this.getToken(MySQLParser.DATETIME_SYMBOL, 0);
	};

	DATE_SYMBOL() {
	    return this.getToken(MySQLParser.DATE_SYMBOL, 0);
	};

	DAY_SYMBOL() {
	    return this.getToken(MySQLParser.DAY_SYMBOL, 0);
	};

	DEFAULT_AUTH_SYMBOL() {
	    return this.getToken(MySQLParser.DEFAULT_AUTH_SYMBOL, 0);
	};

	DEFINER_SYMBOL() {
	    return this.getToken(MySQLParser.DEFINER_SYMBOL, 0);
	};

	DELAY_KEY_WRITE_SYMBOL() {
	    return this.getToken(MySQLParser.DELAY_KEY_WRITE_SYMBOL, 0);
	};

	DES_KEY_FILE_SYMBOL() {
	    return this.getToken(MySQLParser.DES_KEY_FILE_SYMBOL, 0);
	};

	DESCRIPTION_SYMBOL() {
	    return this.getToken(MySQLParser.DESCRIPTION_SYMBOL, 0);
	};

	DIAGNOSTICS_SYMBOL() {
	    return this.getToken(MySQLParser.DIAGNOSTICS_SYMBOL, 0);
	};

	DIRECTORY_SYMBOL() {
	    return this.getToken(MySQLParser.DIRECTORY_SYMBOL, 0);
	};

	DISABLE_SYMBOL() {
	    return this.getToken(MySQLParser.DISABLE_SYMBOL, 0);
	};

	DISCARD_SYMBOL() {
	    return this.getToken(MySQLParser.DISCARD_SYMBOL, 0);
	};

	DISK_SYMBOL() {
	    return this.getToken(MySQLParser.DISK_SYMBOL, 0);
	};

	DUMPFILE_SYMBOL() {
	    return this.getToken(MySQLParser.DUMPFILE_SYMBOL, 0);
	};

	DUPLICATE_SYMBOL() {
	    return this.getToken(MySQLParser.DUPLICATE_SYMBOL, 0);
	};

	DYNAMIC_SYMBOL() {
	    return this.getToken(MySQLParser.DYNAMIC_SYMBOL, 0);
	};

	ENCRYPTION_SYMBOL() {
	    return this.getToken(MySQLParser.ENCRYPTION_SYMBOL, 0);
	};

	ENDS_SYMBOL() {
	    return this.getToken(MySQLParser.ENDS_SYMBOL, 0);
	};

	ENUM_SYMBOL() {
	    return this.getToken(MySQLParser.ENUM_SYMBOL, 0);
	};

	ENGINE_SYMBOL() {
	    return this.getToken(MySQLParser.ENGINE_SYMBOL, 0);
	};

	ENGINES_SYMBOL() {
	    return this.getToken(MySQLParser.ENGINES_SYMBOL, 0);
	};

	ERROR_SYMBOL() {
	    return this.getToken(MySQLParser.ERROR_SYMBOL, 0);
	};

	ERRORS_SYMBOL() {
	    return this.getToken(MySQLParser.ERRORS_SYMBOL, 0);
	};

	ESCAPE_SYMBOL() {
	    return this.getToken(MySQLParser.ESCAPE_SYMBOL, 0);
	};

	EVENTS_SYMBOL() {
	    return this.getToken(MySQLParser.EVENTS_SYMBOL, 0);
	};

	EVERY_SYMBOL() {
	    return this.getToken(MySQLParser.EVERY_SYMBOL, 0);
	};

	EXCLUDE_SYMBOL() {
	    return this.getToken(MySQLParser.EXCLUDE_SYMBOL, 0);
	};

	EXPANSION_SYMBOL() {
	    return this.getToken(MySQLParser.EXPANSION_SYMBOL, 0);
	};

	EXPORT_SYMBOL() {
	    return this.getToken(MySQLParser.EXPORT_SYMBOL, 0);
	};

	EXTENDED_SYMBOL() {
	    return this.getToken(MySQLParser.EXTENDED_SYMBOL, 0);
	};

	EXTENT_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.EXTENT_SIZE_SYMBOL, 0);
	};

	FAULTS_SYMBOL() {
	    return this.getToken(MySQLParser.FAULTS_SYMBOL, 0);
	};

	FAST_SYMBOL() {
	    return this.getToken(MySQLParser.FAST_SYMBOL, 0);
	};

	FOLLOWING_SYMBOL() {
	    return this.getToken(MySQLParser.FOLLOWING_SYMBOL, 0);
	};

	FOUND_SYMBOL() {
	    return this.getToken(MySQLParser.FOUND_SYMBOL, 0);
	};

	ENABLE_SYMBOL() {
	    return this.getToken(MySQLParser.ENABLE_SYMBOL, 0);
	};

	FULL_SYMBOL() {
	    return this.getToken(MySQLParser.FULL_SYMBOL, 0);
	};

	FILE_BLOCK_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.FILE_BLOCK_SIZE_SYMBOL, 0);
	};

	FILTER_SYMBOL() {
	    return this.getToken(MySQLParser.FILTER_SYMBOL, 0);
	};

	FIRST_SYMBOL() {
	    return this.getToken(MySQLParser.FIRST_SYMBOL, 0);
	};

	FIXED_SYMBOL() {
	    return this.getToken(MySQLParser.FIXED_SYMBOL, 0);
	};

	GENERAL_SYMBOL() {
	    return this.getToken(MySQLParser.GENERAL_SYMBOL, 0);
	};

	GEOMETRY_SYMBOL() {
	    return this.getToken(MySQLParser.GEOMETRY_SYMBOL, 0);
	};

	GEOMETRYCOLLECTION_SYMBOL() {
	    return this.getToken(MySQLParser.GEOMETRYCOLLECTION_SYMBOL, 0);
	};

	GET_FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.GET_FORMAT_SYMBOL, 0);
	};

	GRANTS_SYMBOL() {
	    return this.getToken(MySQLParser.GRANTS_SYMBOL, 0);
	};

	GLOBAL_SYMBOL() {
	    return this.getToken(MySQLParser.GLOBAL_SYMBOL, 0);
	};

	HASH_SYMBOL() {
	    return this.getToken(MySQLParser.HASH_SYMBOL, 0);
	};

	HISTOGRAM_SYMBOL() {
	    return this.getToken(MySQLParser.HISTOGRAM_SYMBOL, 0);
	};

	HISTORY_SYMBOL() {
	    return this.getToken(MySQLParser.HISTORY_SYMBOL, 0);
	};

	HOSTS_SYMBOL() {
	    return this.getToken(MySQLParser.HOSTS_SYMBOL, 0);
	};

	HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.HOUR_SYMBOL, 0);
	};

	IDENTIFIED_SYMBOL() {
	    return this.getToken(MySQLParser.IDENTIFIED_SYMBOL, 0);
	};

	IGNORE_SERVER_IDS_SYMBOL() {
	    return this.getToken(MySQLParser.IGNORE_SERVER_IDS_SYMBOL, 0);
	};

	INVOKER_SYMBOL() {
	    return this.getToken(MySQLParser.INVOKER_SYMBOL, 0);
	};

	INDEXES_SYMBOL() {
	    return this.getToken(MySQLParser.INDEXES_SYMBOL, 0);
	};

	INITIAL_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.INITIAL_SIZE_SYMBOL, 0);
	};

	INSTANCE_SYMBOL() {
	    return this.getToken(MySQLParser.INSTANCE_SYMBOL, 0);
	};

	INACTIVE_SYMBOL() {
	    return this.getToken(MySQLParser.INACTIVE_SYMBOL, 0);
	};

	IO_SYMBOL() {
	    return this.getToken(MySQLParser.IO_SYMBOL, 0);
	};

	IPC_SYMBOL() {
	    return this.getToken(MySQLParser.IPC_SYMBOL, 0);
	};

	ISOLATION_SYMBOL() {
	    return this.getToken(MySQLParser.ISOLATION_SYMBOL, 0);
	};

	ISSUER_SYMBOL() {
	    return this.getToken(MySQLParser.ISSUER_SYMBOL, 0);
	};

	INSERT_METHOD_SYMBOL() {
	    return this.getToken(MySQLParser.INSERT_METHOD_SYMBOL, 0);
	};

	JSON_SYMBOL() {
	    return this.getToken(MySQLParser.JSON_SYMBOL, 0);
	};

	KEY_BLOCK_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.KEY_BLOCK_SIZE_SYMBOL, 0);
	};

	LAST_SYMBOL() {
	    return this.getToken(MySQLParser.LAST_SYMBOL, 0);
	};

	LEAVES_SYMBOL() {
	    return this.getToken(MySQLParser.LEAVES_SYMBOL, 0);
	};

	LESS_SYMBOL() {
	    return this.getToken(MySQLParser.LESS_SYMBOL, 0);
	};

	LEVEL_SYMBOL() {
	    return this.getToken(MySQLParser.LEVEL_SYMBOL, 0);
	};

	LINESTRING_SYMBOL() {
	    return this.getToken(MySQLParser.LINESTRING_SYMBOL, 0);
	};

	LIST_SYMBOL() {
	    return this.getToken(MySQLParser.LIST_SYMBOL, 0);
	};

	LOCAL_SYMBOL() {
	    return this.getToken(MySQLParser.LOCAL_SYMBOL, 0);
	};

	LOCKED_SYMBOL() {
	    return this.getToken(MySQLParser.LOCKED_SYMBOL, 0);
	};

	LOCKS_SYMBOL() {
	    return this.getToken(MySQLParser.LOCKS_SYMBOL, 0);
	};

	LOGFILE_SYMBOL() {
	    return this.getToken(MySQLParser.LOGFILE_SYMBOL, 0);
	};

	LOGS_SYMBOL() {
	    return this.getToken(MySQLParser.LOGS_SYMBOL, 0);
	};

	MAX_ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_ROWS_SYMBOL, 0);
	};

	MASTER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SYMBOL, 0);
	};

	MASTER_HEARTBEAT_PERIOD_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_HEARTBEAT_PERIOD_SYMBOL, 0);
	};

	MASTER_HOST_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_HOST_SYMBOL, 0);
	};

	MASTER_PORT_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_PORT_SYMBOL, 0);
	};

	MASTER_LOG_FILE_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_LOG_FILE_SYMBOL, 0);
	};

	MASTER_LOG_POS_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_LOG_POS_SYMBOL, 0);
	};

	MASTER_USER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_USER_SYMBOL, 0);
	};

	MASTER_PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_PASSWORD_SYMBOL, 0);
	};

	MASTER_PUBLIC_KEY_PATH_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_PUBLIC_KEY_PATH_SYMBOL, 0);
	};

	MASTER_SERVER_ID_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SERVER_ID_SYMBOL, 0);
	};

	MASTER_CONNECT_RETRY_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_CONNECT_RETRY_SYMBOL, 0);
	};

	MASTER_RETRY_COUNT_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_RETRY_COUNT_SYMBOL, 0);
	};

	MASTER_DELAY_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_DELAY_SYMBOL, 0);
	};

	MASTER_SSL_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_SYMBOL, 0);
	};

	MASTER_SSL_CA_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CA_SYMBOL, 0);
	};

	MASTER_SSL_CAPATH_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CAPATH_SYMBOL, 0);
	};

	MASTER_TLS_VERSION_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_TLS_VERSION_SYMBOL, 0);
	};

	MASTER_SSL_CERT_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CERT_SYMBOL, 0);
	};

	MASTER_SSL_CIPHER_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CIPHER_SYMBOL, 0);
	};

	MASTER_SSL_CRL_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CRL_SYMBOL, 0);
	};

	MASTER_SSL_CRLPATH_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_CRLPATH_SYMBOL, 0);
	};

	MASTER_SSL_KEY_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_SSL_KEY_SYMBOL, 0);
	};

	MASTER_AUTO_POSITION_SYMBOL() {
	    return this.getToken(MySQLParser.MASTER_AUTO_POSITION_SYMBOL, 0);
	};

	MAX_CONNECTIONS_PER_HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_CONNECTIONS_PER_HOUR_SYMBOL, 0);
	};

	MAX_QUERIES_PER_HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_QUERIES_PER_HOUR_SYMBOL, 0);
	};

	MAX_STATEMENT_TIME_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_STATEMENT_TIME_SYMBOL, 0);
	};

	MAX_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_SIZE_SYMBOL, 0);
	};

	MAX_UPDATES_PER_HOUR_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_UPDATES_PER_HOUR_SYMBOL, 0);
	};

	MAX_USER_CONNECTIONS_SYMBOL() {
	    return this.getToken(MySQLParser.MAX_USER_CONNECTIONS_SYMBOL, 0);
	};

	MEDIUM_SYMBOL() {
	    return this.getToken(MySQLParser.MEDIUM_SYMBOL, 0);
	};

	MEMORY_SYMBOL() {
	    return this.getToken(MySQLParser.MEMORY_SYMBOL, 0);
	};

	MERGE_SYMBOL() {
	    return this.getToken(MySQLParser.MERGE_SYMBOL, 0);
	};

	MESSAGE_TEXT_SYMBOL() {
	    return this.getToken(MySQLParser.MESSAGE_TEXT_SYMBOL, 0);
	};

	MICROSECOND_SYMBOL() {
	    return this.getToken(MySQLParser.MICROSECOND_SYMBOL, 0);
	};

	MIGRATE_SYMBOL() {
	    return this.getToken(MySQLParser.MIGRATE_SYMBOL, 0);
	};

	MINUTE_SYMBOL() {
	    return this.getToken(MySQLParser.MINUTE_SYMBOL, 0);
	};

	MIN_ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.MIN_ROWS_SYMBOL, 0);
	};

	MODIFY_SYMBOL() {
	    return this.getToken(MySQLParser.MODIFY_SYMBOL, 0);
	};

	MODE_SYMBOL() {
	    return this.getToken(MySQLParser.MODE_SYMBOL, 0);
	};

	MONTH_SYMBOL() {
	    return this.getToken(MySQLParser.MONTH_SYMBOL, 0);
	};

	MULTILINESTRING_SYMBOL() {
	    return this.getToken(MySQLParser.MULTILINESTRING_SYMBOL, 0);
	};

	MULTIPOINT_SYMBOL() {
	    return this.getToken(MySQLParser.MULTIPOINT_SYMBOL, 0);
	};

	MULTIPOLYGON_SYMBOL() {
	    return this.getToken(MySQLParser.MULTIPOLYGON_SYMBOL, 0);
	};

	MUTEX_SYMBOL() {
	    return this.getToken(MySQLParser.MUTEX_SYMBOL, 0);
	};

	MYSQL_ERRNO_SYMBOL() {
	    return this.getToken(MySQLParser.MYSQL_ERRNO_SYMBOL, 0);
	};

	NAME_SYMBOL() {
	    return this.getToken(MySQLParser.NAME_SYMBOL, 0);
	};

	NAMES_SYMBOL() {
	    return this.getToken(MySQLParser.NAMES_SYMBOL, 0);
	};

	NATIONAL_SYMBOL() {
	    return this.getToken(MySQLParser.NATIONAL_SYMBOL, 0);
	};

	NCHAR_SYMBOL() {
	    return this.getToken(MySQLParser.NCHAR_SYMBOL, 0);
	};

	NDBCLUSTER_SYMBOL() {
	    return this.getToken(MySQLParser.NDBCLUSTER_SYMBOL, 0);
	};

	NESTED_SYMBOL() {
	    return this.getToken(MySQLParser.NESTED_SYMBOL, 0);
	};

	NEVER_SYMBOL() {
	    return this.getToken(MySQLParser.NEVER_SYMBOL, 0);
	};

	NEXT_SYMBOL() {
	    return this.getToken(MySQLParser.NEXT_SYMBOL, 0);
	};

	NEW_SYMBOL() {
	    return this.getToken(MySQLParser.NEW_SYMBOL, 0);
	};

	NO_WAIT_SYMBOL() {
	    return this.getToken(MySQLParser.NO_WAIT_SYMBOL, 0);
	};

	NODEGROUP_SYMBOL() {
	    return this.getToken(MySQLParser.NODEGROUP_SYMBOL, 0);
	};

	NULLS_SYMBOL() {
	    return this.getToken(MySQLParser.NULLS_SYMBOL, 0);
	};

	NOWAIT_SYMBOL() {
	    return this.getToken(MySQLParser.NOWAIT_SYMBOL, 0);
	};

	NUMBER_SYMBOL() {
	    return this.getToken(MySQLParser.NUMBER_SYMBOL, 0);
	};

	NVARCHAR_SYMBOL() {
	    return this.getToken(MySQLParser.NVARCHAR_SYMBOL, 0);
	};

	OFFSET_SYMBOL() {
	    return this.getToken(MySQLParser.OFFSET_SYMBOL, 0);
	};

	OLD_SYMBOL() {
	    return this.getToken(MySQLParser.OLD_SYMBOL, 0);
	};

	OLD_PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.OLD_PASSWORD_SYMBOL, 0);
	};

	ONE_SYMBOL() {
	    return this.getToken(MySQLParser.ONE_SYMBOL, 0);
	};

	OPTIONAL_SYMBOL() {
	    return this.getToken(MySQLParser.OPTIONAL_SYMBOL, 0);
	};

	ORDINALITY_SYMBOL() {
	    return this.getToken(MySQLParser.ORDINALITY_SYMBOL, 0);
	};

	ORGANIZATION_SYMBOL() {
	    return this.getToken(MySQLParser.ORGANIZATION_SYMBOL, 0);
	};

	OTHERS_SYMBOL() {
	    return this.getToken(MySQLParser.OTHERS_SYMBOL, 0);
	};

	PACK_KEYS_SYMBOL() {
	    return this.getToken(MySQLParser.PACK_KEYS_SYMBOL, 0);
	};

	PAGE_SYMBOL() {
	    return this.getToken(MySQLParser.PAGE_SYMBOL, 0);
	};

	PARTIAL_SYMBOL() {
	    return this.getToken(MySQLParser.PARTIAL_SYMBOL, 0);
	};

	PARTITIONING_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITIONING_SYMBOL, 0);
	};

	PARTITIONS_SYMBOL() {
	    return this.getToken(MySQLParser.PARTITIONS_SYMBOL, 0);
	};

	PASSWORD_SYMBOL() {
	    return this.getToken(MySQLParser.PASSWORD_SYMBOL, 0);
	};

	PATH_SYMBOL() {
	    return this.getToken(MySQLParser.PATH_SYMBOL, 0);
	};

	PHASE_SYMBOL() {
	    return this.getToken(MySQLParser.PHASE_SYMBOL, 0);
	};

	PLUGIN_DIR_SYMBOL() {
	    return this.getToken(MySQLParser.PLUGIN_DIR_SYMBOL, 0);
	};

	PLUGIN_SYMBOL() {
	    return this.getToken(MySQLParser.PLUGIN_SYMBOL, 0);
	};

	PLUGINS_SYMBOL() {
	    return this.getToken(MySQLParser.PLUGINS_SYMBOL, 0);
	};

	POINT_SYMBOL() {
	    return this.getToken(MySQLParser.POINT_SYMBOL, 0);
	};

	POLYGON_SYMBOL() {
	    return this.getToken(MySQLParser.POLYGON_SYMBOL, 0);
	};

	PRECEDING_SYMBOL() {
	    return this.getToken(MySQLParser.PRECEDING_SYMBOL, 0);
	};

	PRESERVE_SYMBOL() {
	    return this.getToken(MySQLParser.PRESERVE_SYMBOL, 0);
	};

	PREV_SYMBOL() {
	    return this.getToken(MySQLParser.PREV_SYMBOL, 0);
	};

	THREAD_PRIORITY_SYMBOL() {
	    return this.getToken(MySQLParser.THREAD_PRIORITY_SYMBOL, 0);
	};

	PRIVILEGES_SYMBOL() {
	    return this.getToken(MySQLParser.PRIVILEGES_SYMBOL, 0);
	};

	PROCESSLIST_SYMBOL() {
	    return this.getToken(MySQLParser.PROCESSLIST_SYMBOL, 0);
	};

	PROFILE_SYMBOL() {
	    return this.getToken(MySQLParser.PROFILE_SYMBOL, 0);
	};

	PROFILES_SYMBOL() {
	    return this.getToken(MySQLParser.PROFILES_SYMBOL, 0);
	};

	QUARTER_SYMBOL() {
	    return this.getToken(MySQLParser.QUARTER_SYMBOL, 0);
	};

	QUERY_SYMBOL() {
	    return this.getToken(MySQLParser.QUERY_SYMBOL, 0);
	};

	QUICK_SYMBOL() {
	    return this.getToken(MySQLParser.QUICK_SYMBOL, 0);
	};

	READ_ONLY_SYMBOL() {
	    return this.getToken(MySQLParser.READ_ONLY_SYMBOL, 0);
	};

	REBUILD_SYMBOL() {
	    return this.getToken(MySQLParser.REBUILD_SYMBOL, 0);
	};

	RECOVER_SYMBOL() {
	    return this.getToken(MySQLParser.RECOVER_SYMBOL, 0);
	};

	REDO_BUFFER_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.REDO_BUFFER_SIZE_SYMBOL, 0);
	};

	REDOFILE_SYMBOL() {
	    return this.getToken(MySQLParser.REDOFILE_SYMBOL, 0);
	};

	REDUNDANT_SYMBOL() {
	    return this.getToken(MySQLParser.REDUNDANT_SYMBOL, 0);
	};

	RELAY_SYMBOL() {
	    return this.getToken(MySQLParser.RELAY_SYMBOL, 0);
	};

	RELAYLOG_SYMBOL() {
	    return this.getToken(MySQLParser.RELAYLOG_SYMBOL, 0);
	};

	RELAY_LOG_FILE_SYMBOL() {
	    return this.getToken(MySQLParser.RELAY_LOG_FILE_SYMBOL, 0);
	};

	RELAY_LOG_POS_SYMBOL() {
	    return this.getToken(MySQLParser.RELAY_LOG_POS_SYMBOL, 0);
	};

	RELAY_THREAD_SYMBOL() {
	    return this.getToken(MySQLParser.RELAY_THREAD_SYMBOL, 0);
	};

	REMOTE_SYMBOL() {
	    return this.getToken(MySQLParser.REMOTE_SYMBOL, 0);
	};

	REORGANIZE_SYMBOL() {
	    return this.getToken(MySQLParser.REORGANIZE_SYMBOL, 0);
	};

	REPEATABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPEATABLE_SYMBOL, 0);
	};

	REPLICATE_DO_DB_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_DO_DB_SYMBOL, 0);
	};

	REPLICATE_IGNORE_DB_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_IGNORE_DB_SYMBOL, 0);
	};

	REPLICATE_DO_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_DO_TABLE_SYMBOL, 0);
	};

	REPLICATE_IGNORE_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_IGNORE_TABLE_SYMBOL, 0);
	};

	REPLICATE_WILD_DO_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_WILD_DO_TABLE_SYMBOL, 0);
	};

	REPLICATE_WILD_IGNORE_TABLE_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_WILD_IGNORE_TABLE_SYMBOL, 0);
	};

	REPLICATE_REWRITE_DB_SYMBOL() {
	    return this.getToken(MySQLParser.REPLICATE_REWRITE_DB_SYMBOL, 0);
	};

	USER_RESOURCES_SYMBOL() {
	    return this.getToken(MySQLParser.USER_RESOURCES_SYMBOL, 0);
	};

	RESPECT_SYMBOL() {
	    return this.getToken(MySQLParser.RESPECT_SYMBOL, 0);
	};

	RESUME_SYMBOL() {
	    return this.getToken(MySQLParser.RESUME_SYMBOL, 0);
	};

	RETAIN_SYMBOL() {
	    return this.getToken(MySQLParser.RETAIN_SYMBOL, 0);
	};

	RETURNED_SQLSTATE_SYMBOL() {
	    return this.getToken(MySQLParser.RETURNED_SQLSTATE_SYMBOL, 0);
	};

	RETURNS_SYMBOL() {
	    return this.getToken(MySQLParser.RETURNS_SYMBOL, 0);
	};

	REUSE_SYMBOL() {
	    return this.getToken(MySQLParser.REUSE_SYMBOL, 0);
	};

	REVERSE_SYMBOL() {
	    return this.getToken(MySQLParser.REVERSE_SYMBOL, 0);
	};

	ROLLUP_SYMBOL() {
	    return this.getToken(MySQLParser.ROLLUP_SYMBOL, 0);
	};

	ROTATE_SYMBOL() {
	    return this.getToken(MySQLParser.ROTATE_SYMBOL, 0);
	};

	ROUTINE_SYMBOL() {
	    return this.getToken(MySQLParser.ROUTINE_SYMBOL, 0);
	};

	ROW_COUNT_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_COUNT_SYMBOL, 0);
	};

	ROW_FORMAT_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_FORMAT_SYMBOL, 0);
	};

	RTREE_SYMBOL() {
	    return this.getToken(MySQLParser.RTREE_SYMBOL, 0);
	};

	SCHEDULE_SYMBOL() {
	    return this.getToken(MySQLParser.SCHEDULE_SYMBOL, 0);
	};

	SCHEMA_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.SCHEMA_NAME_SYMBOL, 0);
	};

	SECOND_SYMBOL() {
	    return this.getToken(MySQLParser.SECOND_SYMBOL, 0);
	};

	SERIAL_SYMBOL() {
	    return this.getToken(MySQLParser.SERIAL_SYMBOL, 0);
	};

	SERIALIZABLE_SYMBOL() {
	    return this.getToken(MySQLParser.SERIALIZABLE_SYMBOL, 0);
	};

	SESSION_SYMBOL() {
	    return this.getToken(MySQLParser.SESSION_SYMBOL, 0);
	};

	SHARE_SYMBOL() {
	    return this.getToken(MySQLParser.SHARE_SYMBOL, 0);
	};

	SIMPLE_SYMBOL() {
	    return this.getToken(MySQLParser.SIMPLE_SYMBOL, 0);
	};

	SKIP_SYMBOL() {
	    return this.getToken(MySQLParser.SKIP_SYMBOL, 0);
	};

	SLOW_SYMBOL() {
	    return this.getToken(MySQLParser.SLOW_SYMBOL, 0);
	};

	SNAPSHOT_SYMBOL() {
	    return this.getToken(MySQLParser.SNAPSHOT_SYMBOL, 0);
	};

	SOUNDS_SYMBOL() {
	    return this.getToken(MySQLParser.SOUNDS_SYMBOL, 0);
	};

	SOURCE_SYMBOL() {
	    return this.getToken(MySQLParser.SOURCE_SYMBOL, 0);
	};

	SQL_AFTER_GTIDS_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_AFTER_GTIDS_SYMBOL, 0);
	};

	SQL_AFTER_MTS_GAPS_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_AFTER_MTS_GAPS_SYMBOL, 0);
	};

	SQL_BEFORE_GTIDS_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_BEFORE_GTIDS_SYMBOL, 0);
	};

	SQL_CACHE_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_CACHE_SYMBOL, 0);
	};

	SQL_BUFFER_RESULT_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_BUFFER_RESULT_SYMBOL, 0);
	};

	SQL_NO_CACHE_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_NO_CACHE_SYMBOL, 0);
	};

	SQL_THREAD_SYMBOL() {
	    return this.getToken(MySQLParser.SQL_THREAD_SYMBOL, 0);
	};

	SRID_SYMBOL() {
	    return this.getToken(MySQLParser.SRID_SYMBOL, 0);
	};

	STACKED_SYMBOL() {
	    return this.getToken(MySQLParser.STACKED_SYMBOL, 0);
	};

	STARTS_SYMBOL() {
	    return this.getToken(MySQLParser.STARTS_SYMBOL, 0);
	};

	STATS_AUTO_RECALC_SYMBOL() {
	    return this.getToken(MySQLParser.STATS_AUTO_RECALC_SYMBOL, 0);
	};

	STATS_PERSISTENT_SYMBOL() {
	    return this.getToken(MySQLParser.STATS_PERSISTENT_SYMBOL, 0);
	};

	STATS_SAMPLE_PAGES_SYMBOL() {
	    return this.getToken(MySQLParser.STATS_SAMPLE_PAGES_SYMBOL, 0);
	};

	STATUS_SYMBOL() {
	    return this.getToken(MySQLParser.STATUS_SYMBOL, 0);
	};

	STORAGE_SYMBOL() {
	    return this.getToken(MySQLParser.STORAGE_SYMBOL, 0);
	};

	STRING_SYMBOL() {
	    return this.getToken(MySQLParser.STRING_SYMBOL, 0);
	};

	SUBCLASS_ORIGIN_SYMBOL() {
	    return this.getToken(MySQLParser.SUBCLASS_ORIGIN_SYMBOL, 0);
	};

	SUBDATE_SYMBOL() {
	    return this.getToken(MySQLParser.SUBDATE_SYMBOL, 0);
	};

	SUBJECT_SYMBOL() {
	    return this.getToken(MySQLParser.SUBJECT_SYMBOL, 0);
	};

	SUBPARTITION_SYMBOL() {
	    return this.getToken(MySQLParser.SUBPARTITION_SYMBOL, 0);
	};

	SUBPARTITIONS_SYMBOL() {
	    return this.getToken(MySQLParser.SUBPARTITIONS_SYMBOL, 0);
	};

	SUPER_SYMBOL() {
	    return this.getToken(MySQLParser.SUPER_SYMBOL, 0);
	};

	SUSPEND_SYMBOL() {
	    return this.getToken(MySQLParser.SUSPEND_SYMBOL, 0);
	};

	SWAPS_SYMBOL() {
	    return this.getToken(MySQLParser.SWAPS_SYMBOL, 0);
	};

	SWITCHES_SYMBOL() {
	    return this.getToken(MySQLParser.SWITCHES_SYMBOL, 0);
	};

	TABLE_NAME_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_NAME_SYMBOL, 0);
	};

	TABLES_SYMBOL() {
	    return this.getToken(MySQLParser.TABLES_SYMBOL, 0);
	};

	TABLE_CHECKSUM_SYMBOL() {
	    return this.getToken(MySQLParser.TABLE_CHECKSUM_SYMBOL, 0);
	};

	TABLESPACE_SYMBOL() {
	    return this.getToken(MySQLParser.TABLESPACE_SYMBOL, 0);
	};

	TEMPORARY_SYMBOL() {
	    return this.getToken(MySQLParser.TEMPORARY_SYMBOL, 0);
	};

	TEMPTABLE_SYMBOL() {
	    return this.getToken(MySQLParser.TEMPTABLE_SYMBOL, 0);
	};

	TEXT_SYMBOL() {
	    return this.getToken(MySQLParser.TEXT_SYMBOL, 0);
	};

	THAN_SYMBOL() {
	    return this.getToken(MySQLParser.THAN_SYMBOL, 0);
	};

	TIES_SYMBOL() {
	    return this.getToken(MySQLParser.TIES_SYMBOL, 0);
	};

	TRANSACTION_SYMBOL() {
	    return this.getToken(MySQLParser.TRANSACTION_SYMBOL, 0);
	};

	TRIGGERS_SYMBOL() {
	    return this.getToken(MySQLParser.TRIGGERS_SYMBOL, 0);
	};

	TIMESTAMP_SYMBOL() {
	    return this.getToken(MySQLParser.TIMESTAMP_SYMBOL, 0);
	};

	TIMESTAMP_ADD_SYMBOL() {
	    return this.getToken(MySQLParser.TIMESTAMP_ADD_SYMBOL, 0);
	};

	TIMESTAMP_DIFF_SYMBOL() {
	    return this.getToken(MySQLParser.TIMESTAMP_DIFF_SYMBOL, 0);
	};

	TIME_SYMBOL() {
	    return this.getToken(MySQLParser.TIME_SYMBOL, 0);
	};

	TYPES_SYMBOL() {
	    return this.getToken(MySQLParser.TYPES_SYMBOL, 0);
	};

	TYPE_SYMBOL() {
	    return this.getToken(MySQLParser.TYPE_SYMBOL, 0);
	};

	UDF_RETURNS_SYMBOL() {
	    return this.getToken(MySQLParser.UDF_RETURNS_SYMBOL, 0);
	};

	UNBOUNDED_SYMBOL() {
	    return this.getToken(MySQLParser.UNBOUNDED_SYMBOL, 0);
	};

	UNCOMMITTED_SYMBOL() {
	    return this.getToken(MySQLParser.UNCOMMITTED_SYMBOL, 0);
	};

	UNDEFINED_SYMBOL() {
	    return this.getToken(MySQLParser.UNDEFINED_SYMBOL, 0);
	};

	UNDO_BUFFER_SIZE_SYMBOL() {
	    return this.getToken(MySQLParser.UNDO_BUFFER_SIZE_SYMBOL, 0);
	};

	UNDOFILE_SYMBOL() {
	    return this.getToken(MySQLParser.UNDOFILE_SYMBOL, 0);
	};

	UNKNOWN_SYMBOL() {
	    return this.getToken(MySQLParser.UNKNOWN_SYMBOL, 0);
	};

	UNTIL_SYMBOL() {
	    return this.getToken(MySQLParser.UNTIL_SYMBOL, 0);
	};

	USER_SYMBOL() {
	    return this.getToken(MySQLParser.USER_SYMBOL, 0);
	};

	USE_FRM_SYMBOL() {
	    return this.getToken(MySQLParser.USE_FRM_SYMBOL, 0);
	};

	VARIABLES_SYMBOL() {
	    return this.getToken(MySQLParser.VARIABLES_SYMBOL, 0);
	};

	VCPU_SYMBOL() {
	    return this.getToken(MySQLParser.VCPU_SYMBOL, 0);
	};

	VIEW_SYMBOL() {
	    return this.getToken(MySQLParser.VIEW_SYMBOL, 0);
	};

	VALUE_SYMBOL() {
	    return this.getToken(MySQLParser.VALUE_SYMBOL, 0);
	};

	WARNINGS_SYMBOL() {
	    return this.getToken(MySQLParser.WARNINGS_SYMBOL, 0);
	};

	WAIT_SYMBOL() {
	    return this.getToken(MySQLParser.WAIT_SYMBOL, 0);
	};

	WEEK_SYMBOL() {
	    return this.getToken(MySQLParser.WEEK_SYMBOL, 0);
	};

	WORK_SYMBOL() {
	    return this.getToken(MySQLParser.WORK_SYMBOL, 0);
	};

	WEIGHT_STRING_SYMBOL() {
	    return this.getToken(MySQLParser.WEIGHT_STRING_SYMBOL, 0);
	};

	X509_SYMBOL() {
	    return this.getToken(MySQLParser.X509_SYMBOL, 0);
	};

	XID_SYMBOL() {
	    return this.getToken(MySQLParser.XID_SYMBOL, 0);
	};

	XML_SYMBOL() {
	    return this.getToken(MySQLParser.XML_SYMBOL, 0);
	};

	YEAR_SYMBOL() {
	    return this.getToken(MySQLParser.YEAR_SYMBOL, 0);
	};

	SHUTDOWN_SYMBOL() {
	    return this.getToken(MySQLParser.SHUTDOWN_SYMBOL, 0);
	};

	CUBE_SYMBOL() {
	    return this.getToken(MySQLParser.CUBE_SYMBOL, 0);
	};

	IMPORT_SYMBOL() {
	    return this.getToken(MySQLParser.IMPORT_SYMBOL, 0);
	};

	FUNCTION_SYMBOL() {
	    return this.getToken(MySQLParser.FUNCTION_SYMBOL, 0);
	};

	ROWS_SYMBOL() {
	    return this.getToken(MySQLParser.ROWS_SYMBOL, 0);
	};

	ROW_SYMBOL() {
	    return this.getToken(MySQLParser.ROW_SYMBOL, 0);
	};

	EXCHANGE_SYMBOL() {
	    return this.getToken(MySQLParser.EXCHANGE_SYMBOL, 0);
	};

	EXPIRE_SYMBOL() {
	    return this.getToken(MySQLParser.EXPIRE_SYMBOL, 0);
	};

	ONLY_SYMBOL() {
	    return this.getToken(MySQLParser.ONLY_SYMBOL, 0);
	};

	VALIDATION_SYMBOL() {
	    return this.getToken(MySQLParser.VALIDATION_SYMBOL, 0);
	};

	WITHOUT_SYMBOL() {
	    return this.getToken(MySQLParser.WITHOUT_SYMBOL, 0);
	};

	ADMIN_SYMBOL() {
	    return this.getToken(MySQLParser.ADMIN_SYMBOL, 0);
	};

	accept(visitor) {
	    if ( visitor instanceof MySQLParserVisitor ) {
	        return visitor.visitRoleOrLabelKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




MySQLParser.QueryContext = QueryContext; 
MySQLParser.SimpleStatementContext = SimpleStatementContext; 
MySQLParser.AlterStatementContext = AlterStatementContext; 
MySQLParser.AlterDatabaseContext = AlterDatabaseContext; 
MySQLParser.AlterEventContext = AlterEventContext; 
MySQLParser.AlterLogfileGroupContext = AlterLogfileGroupContext; 
MySQLParser.AlterLogfileGroupOptionsContext = AlterLogfileGroupOptionsContext; 
MySQLParser.AlterLogfileGroupOptionContext = AlterLogfileGroupOptionContext; 
MySQLParser.AlterServerContext = AlterServerContext; 
MySQLParser.AlterTableContext = AlterTableContext; 
MySQLParser.AlterTableActionsContext = AlterTableActionsContext; 
MySQLParser.AlterCommandListContext = AlterCommandListContext; 
MySQLParser.AlterCommandsModifierListContext = AlterCommandsModifierListContext; 
MySQLParser.StandaloneAlterCommandsContext = StandaloneAlterCommandsContext; 
MySQLParser.AlterPartitionContext = AlterPartitionContext; 
MySQLParser.AlterListContext = AlterListContext; 
MySQLParser.AlterCommandsModifierContext = AlterCommandsModifierContext; 
MySQLParser.AlterListItemContext = AlterListItemContext; 
MySQLParser.PlaceContext = PlaceContext; 
MySQLParser.RestrictContext = RestrictContext; 
MySQLParser.AlterOrderListContext = AlterOrderListContext; 
MySQLParser.AlterAlgorithmOptionContext = AlterAlgorithmOptionContext; 
MySQLParser.AlterLockOptionContext = AlterLockOptionContext; 
MySQLParser.IndexLockAndAlgorithmContext = IndexLockAndAlgorithmContext; 
MySQLParser.WithValidationContext = WithValidationContext; 
MySQLParser.RemovePartitioningContext = RemovePartitioningContext; 
MySQLParser.AllOrPartitionNameListContext = AllOrPartitionNameListContext; 
MySQLParser.AlterTablespaceContext = AlterTablespaceContext; 
MySQLParser.AlterUndoTablespaceContext = AlterUndoTablespaceContext; 
MySQLParser.UndoTableSpaceOptionsContext = UndoTableSpaceOptionsContext; 
MySQLParser.UndoTableSpaceOptionContext = UndoTableSpaceOptionContext; 
MySQLParser.AlterTablespaceOptionsContext = AlterTablespaceOptionsContext; 
MySQLParser.AlterTablespaceOptionContext = AlterTablespaceOptionContext; 
MySQLParser.ChangeTablespaceOptionContext = ChangeTablespaceOptionContext; 
MySQLParser.AlterViewContext = AlterViewContext; 
MySQLParser.ViewTailContext = ViewTailContext; 
MySQLParser.ViewSelectContext = ViewSelectContext; 
MySQLParser.ViewCheckOptionContext = ViewCheckOptionContext; 
MySQLParser.CreateStatementContext = CreateStatementContext; 
MySQLParser.CreateDatabaseContext = CreateDatabaseContext; 
MySQLParser.CreateDatabaseOptionContext = CreateDatabaseOptionContext; 
MySQLParser.CreateTableContext = CreateTableContext; 
MySQLParser.TableElementListContext = TableElementListContext; 
MySQLParser.TableElementContext = TableElementContext; 
MySQLParser.DuplicateAsQueryExpressionContext = DuplicateAsQueryExpressionContext; 
MySQLParser.QueryExpressionOrParensContext = QueryExpressionOrParensContext; 
MySQLParser.CreateRoutineContext = CreateRoutineContext; 
MySQLParser.CreateProcedureContext = CreateProcedureContext; 
MySQLParser.CreateFunctionContext = CreateFunctionContext; 
MySQLParser.CreateUdfContext = CreateUdfContext; 
MySQLParser.RoutineCreateOptionContext = RoutineCreateOptionContext; 
MySQLParser.RoutineAlterOptionsContext = RoutineAlterOptionsContext; 
MySQLParser.RoutineOptionContext = RoutineOptionContext; 
MySQLParser.CreateIndexContext = CreateIndexContext; 
MySQLParser.IndexNameAndTypeContext = IndexNameAndTypeContext; 
MySQLParser.CreateIndexTargetContext = CreateIndexTargetContext; 
MySQLParser.CreateLogfileGroupContext = CreateLogfileGroupContext; 
MySQLParser.LogfileGroupOptionsContext = LogfileGroupOptionsContext; 
MySQLParser.LogfileGroupOptionContext = LogfileGroupOptionContext; 
MySQLParser.CreateServerContext = CreateServerContext; 
MySQLParser.ServerOptionsContext = ServerOptionsContext; 
MySQLParser.ServerOptionContext = ServerOptionContext; 
MySQLParser.CreateTablespaceContext = CreateTablespaceContext; 
MySQLParser.CreateUndoTablespaceContext = CreateUndoTablespaceContext; 
MySQLParser.TsDataFileNameContext = TsDataFileNameContext; 
MySQLParser.TsDataFileContext = TsDataFileContext; 
MySQLParser.TablespaceOptionsContext = TablespaceOptionsContext; 
MySQLParser.TablespaceOptionContext = TablespaceOptionContext; 
MySQLParser.TsOptionInitialSizeContext = TsOptionInitialSizeContext; 
MySQLParser.TsOptionUndoRedoBufferSizeContext = TsOptionUndoRedoBufferSizeContext; 
MySQLParser.TsOptionAutoextendSizeContext = TsOptionAutoextendSizeContext; 
MySQLParser.TsOptionMaxSizeContext = TsOptionMaxSizeContext; 
MySQLParser.TsOptionExtentSizeContext = TsOptionExtentSizeContext; 
MySQLParser.TsOptionNodegroupContext = TsOptionNodegroupContext; 
MySQLParser.TsOptionEngineContext = TsOptionEngineContext; 
MySQLParser.TsOptionWaitContext = TsOptionWaitContext; 
MySQLParser.TsOptionCommentContext = TsOptionCommentContext; 
MySQLParser.TsOptionFileblockSizeContext = TsOptionFileblockSizeContext; 
MySQLParser.TsOptionEncryptionContext = TsOptionEncryptionContext; 
MySQLParser.CreateViewContext = CreateViewContext; 
MySQLParser.ViewReplaceOrAlgorithmContext = ViewReplaceOrAlgorithmContext; 
MySQLParser.ViewAlgorithmContext = ViewAlgorithmContext; 
MySQLParser.ViewSuidContext = ViewSuidContext; 
MySQLParser.CreateTriggerContext = CreateTriggerContext; 
MySQLParser.TriggerFollowsPrecedesClauseContext = TriggerFollowsPrecedesClauseContext; 
MySQLParser.CreateEventContext = CreateEventContext; 
MySQLParser.CreateRoleContext = CreateRoleContext; 
MySQLParser.CreateSpatialReferenceContext = CreateSpatialReferenceContext; 
MySQLParser.SrsAttributeContext = SrsAttributeContext; 
MySQLParser.DropStatementContext = DropStatementContext; 
MySQLParser.DropDatabaseContext = DropDatabaseContext; 
MySQLParser.DropEventContext = DropEventContext; 
MySQLParser.DropFunctionContext = DropFunctionContext; 
MySQLParser.DropProcedureContext = DropProcedureContext; 
MySQLParser.DropIndexContext = DropIndexContext; 
MySQLParser.DropLogfileGroupContext = DropLogfileGroupContext; 
MySQLParser.DropLogfileGroupOptionContext = DropLogfileGroupOptionContext; 
MySQLParser.DropServerContext = DropServerContext; 
MySQLParser.DropTableContext = DropTableContext; 
MySQLParser.DropTableSpaceContext = DropTableSpaceContext; 
MySQLParser.DropTriggerContext = DropTriggerContext; 
MySQLParser.DropViewContext = DropViewContext; 
MySQLParser.DropRoleContext = DropRoleContext; 
MySQLParser.DropSpatialReferenceContext = DropSpatialReferenceContext; 
MySQLParser.DropUndoTablespaceContext = DropUndoTablespaceContext; 
MySQLParser.RenameTableStatementContext = RenameTableStatementContext; 
MySQLParser.RenamePairContext = RenamePairContext; 
MySQLParser.TruncateTableStatementContext = TruncateTableStatementContext; 
MySQLParser.ImportStatementContext = ImportStatementContext; 
MySQLParser.CallStatementContext = CallStatementContext; 
MySQLParser.DeleteStatementContext = DeleteStatementContext; 
MySQLParser.PartitionDeleteContext = PartitionDeleteContext; 
MySQLParser.DeleteStatementOptionContext = DeleteStatementOptionContext; 
MySQLParser.DoStatementContext = DoStatementContext; 
MySQLParser.HandlerStatementContext = HandlerStatementContext; 
MySQLParser.HandlerReadOrScanContext = HandlerReadOrScanContext; 
MySQLParser.InsertStatementContext = InsertStatementContext; 
MySQLParser.InsertLockOptionContext = InsertLockOptionContext; 
MySQLParser.InsertFromConstructorContext = InsertFromConstructorContext; 
MySQLParser.FieldsContext = FieldsContext; 
MySQLParser.InsertValuesContext = InsertValuesContext; 
MySQLParser.InsertQueryExpressionContext = InsertQueryExpressionContext; 
MySQLParser.ValueListContext = ValueListContext; 
MySQLParser.ValuesContext = ValuesContext; 
MySQLParser.ValuesReferenceContext = ValuesReferenceContext; 
MySQLParser.InsertUpdateListContext = InsertUpdateListContext; 
MySQLParser.LoadStatementContext = LoadStatementContext; 
MySQLParser.DataOrXmlContext = DataOrXmlContext; 
MySQLParser.XmlRowsIdentifiedByContext = XmlRowsIdentifiedByContext; 
MySQLParser.LoadDataFileTailContext = LoadDataFileTailContext; 
MySQLParser.LoadDataFileTargetListContext = LoadDataFileTargetListContext; 
MySQLParser.FieldOrVariableListContext = FieldOrVariableListContext; 
MySQLParser.ReplaceStatementContext = ReplaceStatementContext; 
MySQLParser.SelectStatementContext = SelectStatementContext; 
MySQLParser.SelectStatementWithIntoContext = SelectStatementWithIntoContext; 
MySQLParser.QueryExpressionContext = QueryExpressionContext; 
MySQLParser.QueryExpressionBodyContext = QueryExpressionBodyContext; 
MySQLParser.QueryExpressionParensContext = QueryExpressionParensContext; 
MySQLParser.QueryPrimaryContext = QueryPrimaryContext; 
MySQLParser.QuerySpecificationContext = QuerySpecificationContext; 
MySQLParser.SubqueryContext = SubqueryContext; 
MySQLParser.QuerySpecOptionContext = QuerySpecOptionContext; 
MySQLParser.LimitClauseContext = LimitClauseContext; 
MySQLParser.SimpleLimitClauseContext = SimpleLimitClauseContext; 
MySQLParser.LimitOptionsContext = LimitOptionsContext; 
MySQLParser.LimitOptionContext = LimitOptionContext; 
MySQLParser.IntoClauseContext = IntoClauseContext; 
MySQLParser.ProcedureAnalyseClauseContext = ProcedureAnalyseClauseContext; 
MySQLParser.HavingClauseContext = HavingClauseContext; 
MySQLParser.WindowClauseContext = WindowClauseContext; 
MySQLParser.WindowDefinitionContext = WindowDefinitionContext; 
MySQLParser.WindowSpecContext = WindowSpecContext; 
MySQLParser.WindowSpecDetailsContext = WindowSpecDetailsContext; 
MySQLParser.WindowFrameClauseContext = WindowFrameClauseContext; 
MySQLParser.WindowFrameUnitsContext = WindowFrameUnitsContext; 
MySQLParser.WindowFrameExtentContext = WindowFrameExtentContext; 
MySQLParser.WindowFrameStartContext = WindowFrameStartContext; 
MySQLParser.WindowFrameBetweenContext = WindowFrameBetweenContext; 
MySQLParser.WindowFrameBoundContext = WindowFrameBoundContext; 
MySQLParser.WindowFrameExclusionContext = WindowFrameExclusionContext; 
MySQLParser.WithClauseContext = WithClauseContext; 
MySQLParser.CommonTableExpressionContext = CommonTableExpressionContext; 
MySQLParser.GroupByClauseContext = GroupByClauseContext; 
MySQLParser.OlapOptionContext = OlapOptionContext; 
MySQLParser.OrderClauseContext = OrderClauseContext; 
MySQLParser.DirectionContext = DirectionContext; 
MySQLParser.FromClauseContext = FromClauseContext; 
MySQLParser.TableReferenceListContext = TableReferenceListContext; 
MySQLParser.TableValueConstructorContext = TableValueConstructorContext; 
MySQLParser.ExplicitTableContext = ExplicitTableContext; 
MySQLParser.RowValueExplicitContext = RowValueExplicitContext; 
MySQLParser.SelectOptionContext = SelectOptionContext; 
MySQLParser.LockingClauseListContext = LockingClauseListContext; 
MySQLParser.LockingClauseContext = LockingClauseContext; 
MySQLParser.LockStrenghContext = LockStrenghContext; 
MySQLParser.LockedRowActionContext = LockedRowActionContext; 
MySQLParser.SelectItemListContext = SelectItemListContext; 
MySQLParser.SelectItemContext = SelectItemContext; 
MySQLParser.SelectAliasContext = SelectAliasContext; 
MySQLParser.WhereClauseContext = WhereClauseContext; 
MySQLParser.TableReferenceContext = TableReferenceContext; 
MySQLParser.EscapedTableReferenceContext = EscapedTableReferenceContext; 
MySQLParser.JoinedTableContext = JoinedTableContext; 
MySQLParser.NaturalJoinTypeContext = NaturalJoinTypeContext; 
MySQLParser.InnerJoinTypeContext = InnerJoinTypeContext; 
MySQLParser.OuterJoinTypeContext = OuterJoinTypeContext; 
MySQLParser.TableFactorContext = TableFactorContext; 
MySQLParser.SingleTableContext = SingleTableContext; 
MySQLParser.SingleTableParensContext = SingleTableParensContext; 
MySQLParser.DerivedTableContext = DerivedTableContext; 
MySQLParser.TableReferenceListParensContext = TableReferenceListParensContext; 
MySQLParser.TableFunctionContext = TableFunctionContext; 
MySQLParser.ColumnsClauseContext = ColumnsClauseContext; 
MySQLParser.JtColumnContext = JtColumnContext; 
MySQLParser.OnEmptyOrErrorContext = OnEmptyOrErrorContext; 
MySQLParser.OnEmptyContext = OnEmptyContext; 
MySQLParser.OnErrorContext = OnErrorContext; 
MySQLParser.JtOnResponseContext = JtOnResponseContext; 
MySQLParser.UnionOptionContext = UnionOptionContext; 
MySQLParser.TableAliasContext = TableAliasContext; 
MySQLParser.IndexHintListContext = IndexHintListContext; 
MySQLParser.IndexHintContext = IndexHintContext; 
MySQLParser.IndexHintTypeContext = IndexHintTypeContext; 
MySQLParser.KeyOrIndexContext = KeyOrIndexContext; 
MySQLParser.ConstraintKeyTypeContext = ConstraintKeyTypeContext; 
MySQLParser.IndexHintClauseContext = IndexHintClauseContext; 
MySQLParser.IndexListContext = IndexListContext; 
MySQLParser.IndexListElementContext = IndexListElementContext; 
MySQLParser.UpdateStatementContext = UpdateStatementContext; 
MySQLParser.TransactionOrLockingStatementContext = TransactionOrLockingStatementContext; 
MySQLParser.TransactionStatementContext = TransactionStatementContext; 
MySQLParser.BeginWorkContext = BeginWorkContext; 
MySQLParser.TransactionCharacteristicContext = TransactionCharacteristicContext; 
MySQLParser.SavepointStatementContext = SavepointStatementContext; 
MySQLParser.LockStatementContext = LockStatementContext; 
MySQLParser.LockItemContext = LockItemContext; 
MySQLParser.LockOptionContext = LockOptionContext; 
MySQLParser.XaStatementContext = XaStatementContext; 
MySQLParser.XaConvertContext = XaConvertContext; 
MySQLParser.XidContext = XidContext; 
MySQLParser.ReplicationStatementContext = ReplicationStatementContext; 
MySQLParser.ResetOptionContext = ResetOptionContext; 
MySQLParser.MasterResetOptionsContext = MasterResetOptionsContext; 
MySQLParser.ReplicationLoadContext = ReplicationLoadContext; 
MySQLParser.ChangeMasterContext = ChangeMasterContext; 
MySQLParser.ChangeMasterOptionsContext = ChangeMasterOptionsContext; 
MySQLParser.MasterOptionContext = MasterOptionContext; 
MySQLParser.PrivilegeCheckDefContext = PrivilegeCheckDefContext; 
MySQLParser.TablePrimaryKeyCheckDefContext = TablePrimaryKeyCheckDefContext; 
MySQLParser.MasterTlsCiphersuitesDefContext = MasterTlsCiphersuitesDefContext; 
MySQLParser.MasterFileDefContext = MasterFileDefContext; 
MySQLParser.ServerIdListContext = ServerIdListContext; 
MySQLParser.ChangeReplicationContext = ChangeReplicationContext; 
MySQLParser.FilterDefinitionContext = FilterDefinitionContext; 
MySQLParser.FilterDbListContext = FilterDbListContext; 
MySQLParser.FilterTableListContext = FilterTableListContext; 
MySQLParser.FilterStringListContext = FilterStringListContext; 
MySQLParser.FilterWildDbTableStringContext = FilterWildDbTableStringContext; 
MySQLParser.FilterDbPairListContext = FilterDbPairListContext; 
MySQLParser.SlaveContext = SlaveContext; 
MySQLParser.SlaveUntilOptionsContext = SlaveUntilOptionsContext; 
MySQLParser.SlaveConnectionOptionsContext = SlaveConnectionOptionsContext; 
MySQLParser.SlaveThreadOptionsContext = SlaveThreadOptionsContext; 
MySQLParser.SlaveThreadOptionContext = SlaveThreadOptionContext; 
MySQLParser.GroupReplicationContext = GroupReplicationContext; 
MySQLParser.PreparedStatementContext = PreparedStatementContext; 
MySQLParser.ExecuteStatementContext = ExecuteStatementContext; 
MySQLParser.ExecuteVarListContext = ExecuteVarListContext; 
MySQLParser.CloneStatementContext = CloneStatementContext; 
MySQLParser.DataDirSSLContext = DataDirSSLContext; 
MySQLParser.SslContext = SslContext; 
MySQLParser.AccountManagementStatementContext = AccountManagementStatementContext; 
MySQLParser.AlterUserContext = AlterUserContext; 
MySQLParser.AlterUserTailContext = AlterUserTailContext; 
MySQLParser.UserFunctionContext = UserFunctionContext; 
MySQLParser.CreateUserContext = CreateUserContext; 
MySQLParser.CreateUserTailContext = CreateUserTailContext; 
MySQLParser.DefaultRoleClauseContext = DefaultRoleClauseContext; 
MySQLParser.RequireClauseContext = RequireClauseContext; 
MySQLParser.ConnectOptionsContext = ConnectOptionsContext; 
MySQLParser.AccountLockPasswordExpireOptionsContext = AccountLockPasswordExpireOptionsContext; 
MySQLParser.DropUserContext = DropUserContext; 
MySQLParser.GrantContext = GrantContext; 
MySQLParser.GrantTargetListContext = GrantTargetListContext; 
MySQLParser.GrantOptionsContext = GrantOptionsContext; 
MySQLParser.ExceptRoleListContext = ExceptRoleListContext; 
MySQLParser.WithRolesContext = WithRolesContext; 
MySQLParser.GrantAsContext = GrantAsContext; 
MySQLParser.VersionedRequireClauseContext = VersionedRequireClauseContext; 
MySQLParser.RenameUserContext = RenameUserContext; 
MySQLParser.RevokeContext = RevokeContext; 
MySQLParser.OnTypeToContext = OnTypeToContext; 
MySQLParser.AclTypeContext = AclTypeContext; 
MySQLParser.RoleOrPrivilegesListContext = RoleOrPrivilegesListContext; 
MySQLParser.RoleOrPrivilegeContext = RoleOrPrivilegeContext; 
MySQLParser.GrantIdentifierContext = GrantIdentifierContext; 
MySQLParser.RequireListContext = RequireListContext; 
MySQLParser.RequireListElementContext = RequireListElementContext; 
MySQLParser.GrantOptionContext = GrantOptionContext; 
MySQLParser.SetRoleContext = SetRoleContext; 
MySQLParser.RoleListContext = RoleListContext; 
MySQLParser.RoleContext = RoleContext; 
MySQLParser.TableAdministrationStatementContext = TableAdministrationStatementContext; 
MySQLParser.HistogramContext = HistogramContext; 
MySQLParser.CheckOptionContext = CheckOptionContext; 
MySQLParser.RepairTypeContext = RepairTypeContext; 
MySQLParser.InstallUninstallStatmentContext = InstallUninstallStatmentContext; 
MySQLParser.SetStatementContext = SetStatementContext; 
MySQLParser.StartOptionValueListContext = StartOptionValueListContext; 
MySQLParser.TransactionCharacteristicsContext = TransactionCharacteristicsContext; 
MySQLParser.TransactionAccessModeContext = TransactionAccessModeContext; 
MySQLParser.IsolationLevelContext = IsolationLevelContext; 
MySQLParser.OptionValueListContinuedContext = OptionValueListContinuedContext; 
MySQLParser.OptionValueNoOptionTypeContext = OptionValueNoOptionTypeContext; 
MySQLParser.OptionValueContext = OptionValueContext; 
MySQLParser.SetSystemVariableContext = SetSystemVariableContext; 
MySQLParser.StartOptionValueListFollowingOptionTypeContext = StartOptionValueListFollowingOptionTypeContext; 
MySQLParser.OptionValueFollowingOptionTypeContext = OptionValueFollowingOptionTypeContext; 
MySQLParser.SetExprOrDefaultContext = SetExprOrDefaultContext; 
MySQLParser.ShowStatementContext = ShowStatementContext; 
MySQLParser.ShowCommandTypeContext = ShowCommandTypeContext; 
MySQLParser.NonBlockingContext = NonBlockingContext; 
MySQLParser.FromOrInContext = FromOrInContext; 
MySQLParser.InDbContext = InDbContext; 
MySQLParser.ProfileTypeContext = ProfileTypeContext; 
MySQLParser.OtherAdministrativeStatementContext = OtherAdministrativeStatementContext; 
MySQLParser.KeyCacheListOrPartsContext = KeyCacheListOrPartsContext; 
MySQLParser.KeyCacheListContext = KeyCacheListContext; 
MySQLParser.AssignToKeycacheContext = AssignToKeycacheContext; 
MySQLParser.AssignToKeycachePartitionContext = AssignToKeycachePartitionContext; 
MySQLParser.CacheKeyListContext = CacheKeyListContext; 
MySQLParser.KeyUsageElementContext = KeyUsageElementContext; 
MySQLParser.KeyUsageListContext = KeyUsageListContext; 
MySQLParser.FlushOptionContext = FlushOptionContext; 
MySQLParser.LogTypeContext = LogTypeContext; 
MySQLParser.FlushTablesContext = FlushTablesContext; 
MySQLParser.FlushTablesOptionsContext = FlushTablesOptionsContext; 
MySQLParser.PreloadTailContext = PreloadTailContext; 
MySQLParser.PreloadListContext = PreloadListContext; 
MySQLParser.PreloadKeysContext = PreloadKeysContext; 
MySQLParser.AdminPartitionContext = AdminPartitionContext; 
MySQLParser.ResourceGroupManagementContext = ResourceGroupManagementContext; 
MySQLParser.CreateResourceGroupContext = CreateResourceGroupContext; 
MySQLParser.ResourceGroupVcpuListContext = ResourceGroupVcpuListContext; 
MySQLParser.VcpuNumOrRangeContext = VcpuNumOrRangeContext; 
MySQLParser.ResourceGroupPriorityContext = ResourceGroupPriorityContext; 
MySQLParser.ResourceGroupEnableDisableContext = ResourceGroupEnableDisableContext; 
MySQLParser.AlterResourceGroupContext = AlterResourceGroupContext; 
MySQLParser.SetResourceGroupContext = SetResourceGroupContext; 
MySQLParser.ThreadIdListContext = ThreadIdListContext; 
MySQLParser.DropResourceGroupContext = DropResourceGroupContext; 
MySQLParser.UtilityStatementContext = UtilityStatementContext; 
MySQLParser.DescribeStatementContext = DescribeStatementContext; 
MySQLParser.ExplainStatementContext = ExplainStatementContext; 
MySQLParser.ExplainableStatementContext = ExplainableStatementContext; 
MySQLParser.HelpCommandContext = HelpCommandContext; 
MySQLParser.UseCommandContext = UseCommandContext; 
MySQLParser.RestartServerContext = RestartServerContext; 
MySQLParser.ExprContext = ExprContext; 
MySQLParser.BoolPriContext = BoolPriContext; 
MySQLParser.CompOpContext = CompOpContext; 
MySQLParser.PredicateContext = PredicateContext; 
MySQLParser.PredicateOperationsContext = PredicateOperationsContext; 
MySQLParser.BitExprContext = BitExprContext; 
MySQLParser.SimpleExprContext = SimpleExprContext; 
MySQLParser.ArrayCastContext = ArrayCastContext; 
MySQLParser.JsonOperatorContext = JsonOperatorContext; 
MySQLParser.SumExprContext = SumExprContext; 
MySQLParser.GroupingOperationContext = GroupingOperationContext; 
MySQLParser.WindowFunctionCallContext = WindowFunctionCallContext; 
MySQLParser.WindowingClauseContext = WindowingClauseContext; 
MySQLParser.LeadLagInfoContext = LeadLagInfoContext; 
MySQLParser.NullTreatmentContext = NullTreatmentContext; 
MySQLParser.JsonFunctionContext = JsonFunctionContext; 
MySQLParser.InSumExprContext = InSumExprContext; 
MySQLParser.IdentListArgContext = IdentListArgContext; 
MySQLParser.IdentListContext = IdentListContext; 
MySQLParser.FulltextOptionsContext = FulltextOptionsContext; 
MySQLParser.RuntimeFunctionCallContext = RuntimeFunctionCallContext; 
MySQLParser.GeometryFunctionContext = GeometryFunctionContext; 
MySQLParser.TimeFunctionParametersContext = TimeFunctionParametersContext; 
MySQLParser.FractionalPrecisionContext = FractionalPrecisionContext; 
MySQLParser.WeightStringLevelsContext = WeightStringLevelsContext; 
MySQLParser.WeightStringLevelListItemContext = WeightStringLevelListItemContext; 
MySQLParser.DateTimeTtypeContext = DateTimeTtypeContext; 
MySQLParser.TrimFunctionContext = TrimFunctionContext; 
MySQLParser.SubstringFunctionContext = SubstringFunctionContext; 
MySQLParser.FunctionCallContext = FunctionCallContext; 
MySQLParser.UdfExprListContext = UdfExprListContext; 
MySQLParser.UdfExprContext = UdfExprContext; 
MySQLParser.VariableContext = VariableContext; 
MySQLParser.UserVariableContext = UserVariableContext; 
MySQLParser.SystemVariableContext = SystemVariableContext; 
MySQLParser.InternalVariableNameContext = InternalVariableNameContext; 
MySQLParser.WhenExpressionContext = WhenExpressionContext; 
MySQLParser.ThenExpressionContext = ThenExpressionContext; 
MySQLParser.ElseExpressionContext = ElseExpressionContext; 
MySQLParser.CastTypeContext = CastTypeContext; 
MySQLParser.ExprListContext = ExprListContext; 
MySQLParser.CharsetContext = CharsetContext; 
MySQLParser.NotRuleContext = NotRuleContext; 
MySQLParser.Not2RuleContext = Not2RuleContext; 
MySQLParser.IntervalContext = IntervalContext; 
MySQLParser.IntervalTimeStampContext = IntervalTimeStampContext; 
MySQLParser.ExprListWithParenthesesContext = ExprListWithParenthesesContext; 
MySQLParser.ExprWithParenthesesContext = ExprWithParenthesesContext; 
MySQLParser.SimpleExprWithParenthesesContext = SimpleExprWithParenthesesContext; 
MySQLParser.OrderListContext = OrderListContext; 
MySQLParser.OrderExpressionContext = OrderExpressionContext; 
MySQLParser.GroupListContext = GroupListContext; 
MySQLParser.GroupingExpressionContext = GroupingExpressionContext; 
MySQLParser.ChannelContext = ChannelContext; 
MySQLParser.CompoundStatementContext = CompoundStatementContext; 
MySQLParser.ReturnStatementContext = ReturnStatementContext; 
MySQLParser.IfStatementContext = IfStatementContext; 
MySQLParser.IfBodyContext = IfBodyContext; 
MySQLParser.ThenStatementContext = ThenStatementContext; 
MySQLParser.CompoundStatementListContext = CompoundStatementListContext; 
MySQLParser.CaseStatementContext = CaseStatementContext; 
MySQLParser.ElseStatementContext = ElseStatementContext; 
MySQLParser.LabeledBlockContext = LabeledBlockContext; 
MySQLParser.UnlabeledBlockContext = UnlabeledBlockContext; 
MySQLParser.LabelContext = LabelContext; 
MySQLParser.BeginEndBlockContext = BeginEndBlockContext; 
MySQLParser.LabeledControlContext = LabeledControlContext; 
MySQLParser.UnlabeledControlContext = UnlabeledControlContext; 
MySQLParser.LoopBlockContext = LoopBlockContext; 
MySQLParser.WhileDoBlockContext = WhileDoBlockContext; 
MySQLParser.RepeatUntilBlockContext = RepeatUntilBlockContext; 
MySQLParser.SpDeclarationsContext = SpDeclarationsContext; 
MySQLParser.SpDeclarationContext = SpDeclarationContext; 
MySQLParser.VariableDeclarationContext = VariableDeclarationContext; 
MySQLParser.ConditionDeclarationContext = ConditionDeclarationContext; 
MySQLParser.SpConditionContext = SpConditionContext; 
MySQLParser.SqlstateContext = SqlstateContext; 
MySQLParser.HandlerDeclarationContext = HandlerDeclarationContext; 
MySQLParser.HandlerConditionContext = HandlerConditionContext; 
MySQLParser.CursorDeclarationContext = CursorDeclarationContext; 
MySQLParser.IterateStatementContext = IterateStatementContext; 
MySQLParser.LeaveStatementContext = LeaveStatementContext; 
MySQLParser.GetDiagnosticsContext = GetDiagnosticsContext; 
MySQLParser.SignalAllowedExprContext = SignalAllowedExprContext; 
MySQLParser.StatementInformationItemContext = StatementInformationItemContext; 
MySQLParser.ConditionInformationItemContext = ConditionInformationItemContext; 
MySQLParser.SignalInformationItemNameContext = SignalInformationItemNameContext; 
MySQLParser.SignalStatementContext = SignalStatementContext; 
MySQLParser.ResignalStatementContext = ResignalStatementContext; 
MySQLParser.SignalInformationItemContext = SignalInformationItemContext; 
MySQLParser.CursorOpenContext = CursorOpenContext; 
MySQLParser.CursorCloseContext = CursorCloseContext; 
MySQLParser.CursorFetchContext = CursorFetchContext; 
MySQLParser.ScheduleContext = ScheduleContext; 
MySQLParser.ColumnDefinitionContext = ColumnDefinitionContext; 
MySQLParser.CheckOrReferencesContext = CheckOrReferencesContext; 
MySQLParser.CheckConstraintContext = CheckConstraintContext; 
MySQLParser.ConstraintEnforcementContext = ConstraintEnforcementContext; 
MySQLParser.TableConstraintDefContext = TableConstraintDefContext; 
MySQLParser.ConstraintNameContext = ConstraintNameContext; 
MySQLParser.FieldDefinitionContext = FieldDefinitionContext; 
MySQLParser.ColumnAttributeContext = ColumnAttributeContext; 
MySQLParser.ColumnFormatContext = ColumnFormatContext; 
MySQLParser.StorageMediaContext = StorageMediaContext; 
MySQLParser.GcolAttributeContext = GcolAttributeContext; 
MySQLParser.ReferencesContext = ReferencesContext; 
MySQLParser.DeleteOptionContext = DeleteOptionContext; 
MySQLParser.KeyListContext = KeyListContext; 
MySQLParser.KeyPartContext = KeyPartContext; 
MySQLParser.KeyListWithExpressionContext = KeyListWithExpressionContext; 
MySQLParser.KeyPartOrExpressionContext = KeyPartOrExpressionContext; 
MySQLParser.KeyListVariantsContext = KeyListVariantsContext; 
MySQLParser.IndexTypeContext = IndexTypeContext; 
MySQLParser.IndexOptionContext = IndexOptionContext; 
MySQLParser.CommonIndexOptionContext = CommonIndexOptionContext; 
MySQLParser.VisibilityContext = VisibilityContext; 
MySQLParser.IndexTypeClauseContext = IndexTypeClauseContext; 
MySQLParser.FulltextIndexOptionContext = FulltextIndexOptionContext; 
MySQLParser.SpatialIndexOptionContext = SpatialIndexOptionContext; 
MySQLParser.DataTypeDefinitionContext = DataTypeDefinitionContext; 
MySQLParser.DataTypeContext = DataTypeContext; 
MySQLParser.NcharContext = NcharContext; 
MySQLParser.RealTypeContext = RealTypeContext; 
MySQLParser.FieldLengthContext = FieldLengthContext; 
MySQLParser.FieldOptionsContext = FieldOptionsContext; 
MySQLParser.CharsetWithOptBinaryContext = CharsetWithOptBinaryContext; 
MySQLParser.AsciiContext = AsciiContext; 
MySQLParser.UnicodeContext = UnicodeContext; 
MySQLParser.WsNumCodepointsContext = WsNumCodepointsContext; 
MySQLParser.TypeDatetimePrecisionContext = TypeDatetimePrecisionContext; 
MySQLParser.CharsetNameContext = CharsetNameContext; 
MySQLParser.CollationNameContext = CollationNameContext; 
MySQLParser.CreateTableOptionsContext = CreateTableOptionsContext; 
MySQLParser.CreateTableOptionsSpaceSeparatedContext = CreateTableOptionsSpaceSeparatedContext; 
MySQLParser.CreateTableOptionContext = CreateTableOptionContext; 
MySQLParser.TernaryOptionContext = TernaryOptionContext; 
MySQLParser.DefaultCollationContext = DefaultCollationContext; 
MySQLParser.DefaultEncryptionContext = DefaultEncryptionContext; 
MySQLParser.DefaultCharsetContext = DefaultCharsetContext; 
MySQLParser.PartitionClauseContext = PartitionClauseContext; 
MySQLParser.PartitionTypeDefContext = PartitionTypeDefContext; 
MySQLParser.SubPartitionsContext = SubPartitionsContext; 
MySQLParser.PartitionKeyAlgorithmContext = PartitionKeyAlgorithmContext; 
MySQLParser.PartitionDefinitionsContext = PartitionDefinitionsContext; 
MySQLParser.PartitionDefinitionContext = PartitionDefinitionContext; 
MySQLParser.PartitionValuesInContext = PartitionValuesInContext; 
MySQLParser.PartitionOptionContext = PartitionOptionContext; 
MySQLParser.SubpartitionDefinitionContext = SubpartitionDefinitionContext; 
MySQLParser.PartitionValueItemListParenContext = PartitionValueItemListParenContext; 
MySQLParser.PartitionValueItemContext = PartitionValueItemContext; 
MySQLParser.DefinerClauseContext = DefinerClauseContext; 
MySQLParser.IfExistsContext = IfExistsContext; 
MySQLParser.IfNotExistsContext = IfNotExistsContext; 
MySQLParser.ProcedureParameterContext = ProcedureParameterContext; 
MySQLParser.FunctionParameterContext = FunctionParameterContext; 
MySQLParser.CollateContext = CollateContext; 
MySQLParser.TypeWithOptCollateContext = TypeWithOptCollateContext; 
MySQLParser.SchemaIdentifierPairContext = SchemaIdentifierPairContext; 
MySQLParser.ViewRefListContext = ViewRefListContext; 
MySQLParser.UpdateListContext = UpdateListContext; 
MySQLParser.UpdateElementContext = UpdateElementContext; 
MySQLParser.CharsetClauseContext = CharsetClauseContext; 
MySQLParser.FieldsClauseContext = FieldsClauseContext; 
MySQLParser.FieldTermContext = FieldTermContext; 
MySQLParser.LinesClauseContext = LinesClauseContext; 
MySQLParser.LineTermContext = LineTermContext; 
MySQLParser.UserListContext = UserListContext; 
MySQLParser.CreateUserListContext = CreateUserListContext; 
MySQLParser.AlterUserListContext = AlterUserListContext; 
MySQLParser.CreateUserEntryContext = CreateUserEntryContext; 
MySQLParser.AlterUserEntryContext = AlterUserEntryContext; 
MySQLParser.RetainCurrentPasswordContext = RetainCurrentPasswordContext; 
MySQLParser.DiscardOldPasswordContext = DiscardOldPasswordContext; 
MySQLParser.ReplacePasswordContext = ReplacePasswordContext; 
MySQLParser.UserIdentifierOrTextContext = UserIdentifierOrTextContext; 
MySQLParser.UserContext = UserContext; 
MySQLParser.LikeClauseContext = LikeClauseContext; 
MySQLParser.LikeOrWhereContext = LikeOrWhereContext; 
MySQLParser.OnlineOptionContext = OnlineOptionContext; 
MySQLParser.NoWriteToBinLogContext = NoWriteToBinLogContext; 
MySQLParser.UsePartitionContext = UsePartitionContext; 
MySQLParser.FieldIdentifierContext = FieldIdentifierContext; 
MySQLParser.ColumnNameContext = ColumnNameContext; 
MySQLParser.ColumnInternalRefContext = ColumnInternalRefContext; 
MySQLParser.ColumnInternalRefListContext = ColumnInternalRefListContext; 
MySQLParser.ColumnRefContext = ColumnRefContext; 
MySQLParser.InsertIdentifierContext = InsertIdentifierContext; 
MySQLParser.IndexNameContext = IndexNameContext; 
MySQLParser.IndexRefContext = IndexRefContext; 
MySQLParser.TableWildContext = TableWildContext; 
MySQLParser.SchemaNameContext = SchemaNameContext; 
MySQLParser.SchemaRefContext = SchemaRefContext; 
MySQLParser.ProcedureNameContext = ProcedureNameContext; 
MySQLParser.ProcedureRefContext = ProcedureRefContext; 
MySQLParser.FunctionNameContext = FunctionNameContext; 
MySQLParser.FunctionRefContext = FunctionRefContext; 
MySQLParser.TriggerNameContext = TriggerNameContext; 
MySQLParser.TriggerRefContext = TriggerRefContext; 
MySQLParser.ViewNameContext = ViewNameContext; 
MySQLParser.ViewRefContext = ViewRefContext; 
MySQLParser.TablespaceNameContext = TablespaceNameContext; 
MySQLParser.TablespaceRefContext = TablespaceRefContext; 
MySQLParser.LogfileGroupNameContext = LogfileGroupNameContext; 
MySQLParser.LogfileGroupRefContext = LogfileGroupRefContext; 
MySQLParser.EventNameContext = EventNameContext; 
MySQLParser.EventRefContext = EventRefContext; 
MySQLParser.UdfNameContext = UdfNameContext; 
MySQLParser.ServerNameContext = ServerNameContext; 
MySQLParser.ServerRefContext = ServerRefContext; 
MySQLParser.EngineRefContext = EngineRefContext; 
MySQLParser.TableNameContext = TableNameContext; 
MySQLParser.FilterTableRefContext = FilterTableRefContext; 
MySQLParser.TableRefWithWildcardContext = TableRefWithWildcardContext; 
MySQLParser.TableRefContext = TableRefContext; 
MySQLParser.TableRefListContext = TableRefListContext; 
MySQLParser.TableAliasRefListContext = TableAliasRefListContext; 
MySQLParser.ParameterNameContext = ParameterNameContext; 
MySQLParser.LabelIdentifierContext = LabelIdentifierContext; 
MySQLParser.LabelRefContext = LabelRefContext; 
MySQLParser.RoleIdentifierContext = RoleIdentifierContext; 
MySQLParser.RoleRefContext = RoleRefContext; 
MySQLParser.PluginRefContext = PluginRefContext; 
MySQLParser.ComponentRefContext = ComponentRefContext; 
MySQLParser.ResourceGroupRefContext = ResourceGroupRefContext; 
MySQLParser.WindowNameContext = WindowNameContext; 
MySQLParser.PureIdentifierContext = PureIdentifierContext; 
MySQLParser.IdentifierContext = IdentifierContext; 
MySQLParser.IdentifierListContext = IdentifierListContext; 
MySQLParser.IdentifierListWithParenthesesContext = IdentifierListWithParenthesesContext; 
MySQLParser.QualifiedIdentifierContext = QualifiedIdentifierContext; 
MySQLParser.SimpleIdentifierContext = SimpleIdentifierContext; 
MySQLParser.DotIdentifierContext = DotIdentifierContext; 
MySQLParser.Ulong_numberContext = Ulong_numberContext; 
MySQLParser.Real_ulong_numberContext = Real_ulong_numberContext; 
MySQLParser.Ulonglong_numberContext = Ulonglong_numberContext; 
MySQLParser.Real_ulonglong_numberContext = Real_ulonglong_numberContext; 
MySQLParser.LiteralContext = LiteralContext; 
MySQLParser.SignedLiteralContext = SignedLiteralContext; 
MySQLParser.StringListContext = StringListContext; 
MySQLParser.TextStringLiteralContext = TextStringLiteralContext; 
MySQLParser.TextStringContext = TextStringContext; 
MySQLParser.TextStringHashContext = TextStringHashContext; 
MySQLParser.TextLiteralContext = TextLiteralContext; 
MySQLParser.TextStringNoLinebreakContext = TextStringNoLinebreakContext; 
MySQLParser.TextStringLiteralListContext = TextStringLiteralListContext; 
MySQLParser.NumLiteralContext = NumLiteralContext; 
MySQLParser.BoolLiteralContext = BoolLiteralContext; 
MySQLParser.NullLiteralContext = NullLiteralContext; 
MySQLParser.TemporalLiteralContext = TemporalLiteralContext; 
MySQLParser.FloatOptionsContext = FloatOptionsContext; 
MySQLParser.StandardFloatOptionsContext = StandardFloatOptionsContext; 
MySQLParser.PrecisionContext = PrecisionContext; 
MySQLParser.TextOrIdentifierContext = TextOrIdentifierContext; 
MySQLParser.LValueIdentifierContext = LValueIdentifierContext; 
MySQLParser.RoleIdentifierOrTextContext = RoleIdentifierOrTextContext; 
MySQLParser.SizeNumberContext = SizeNumberContext; 
MySQLParser.ParenthesesContext = ParenthesesContext; 
MySQLParser.EqualContext = EqualContext; 
MySQLParser.OptionTypeContext = OptionTypeContext; 
MySQLParser.VarIdentTypeContext = VarIdentTypeContext; 
MySQLParser.SetVarIdentTypeContext = SetVarIdentTypeContext; 
MySQLParser.IdentifierKeywordContext = IdentifierKeywordContext; 
MySQLParser.IdentifierKeywordsAmbiguous1RolesAndLabelsContext = IdentifierKeywordsAmbiguous1RolesAndLabelsContext; 
MySQLParser.IdentifierKeywordsAmbiguous2LabelsContext = IdentifierKeywordsAmbiguous2LabelsContext; 
MySQLParser.LabelKeywordContext = LabelKeywordContext; 
MySQLParser.IdentifierKeywordsAmbiguous3RolesContext = IdentifierKeywordsAmbiguous3RolesContext; 
MySQLParser.IdentifierKeywordsUnambiguousContext = IdentifierKeywordsUnambiguousContext; 
MySQLParser.RoleKeywordContext = RoleKeywordContext; 
MySQLParser.LValueKeywordContext = LValueKeywordContext; 
MySQLParser.IdentifierKeywordsAmbiguous4SystemVariablesContext = IdentifierKeywordsAmbiguous4SystemVariablesContext; 
MySQLParser.RoleOrIdentifierKeywordContext = RoleOrIdentifierKeywordContext; 
MySQLParser.RoleOrLabelKeywordContext = RoleOrLabelKeywordContext; 
